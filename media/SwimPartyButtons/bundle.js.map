{"version":3,"sources":["../../../node_modules/browser-pack/_prelude.js","../../../node_modules/eases/circ-in-out.js","../../../node_modules/eases/cubic-in-out.js","../../../node_modules/glslify/browser.js","../../../node_modules/ismobilejs/isMobile.js","../../../node_modules/save-as/lib/index.js","../../../node_modules/startaudiocontext/StartAudioContext.js","../../../node_modules/tone/build/Tone.js","config.json","js/CannonWrapper.js","js/CustomMaterial.js","js/Joint.js","js/JointsToTexture.js","js/LaserUtils.js","js/PostProcess.js","js/SimpleSettings.js","js/Sketch.js","js/SkinManager.js","js/ThreeView.js","js/main.js","js/skinDataToGeometry.js","js/touchEvents.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Math","sqrt","pow","strings","exprs","slice","arguments","parts","push","join","global","apple_phone","apple_ipod","apple_tablet","android_phone","android_tablet","amazon_phone","amazon_tablet","windows_phone","windows_tablet","other_blackberry","other_blackberry_10","other_opera","other_chrome","other_firefox","seven_inch","RegExp","match","regex","userAgent","test","IsMobileClass","ua","navigator","tmp","split","this","apple","phone","ipod","tablet","device","amazon","android","windows","other","blackberry","blackberry10","opera","firefox","chrome","any","window","instantiate","IM","Class","define","amd","isMobile","_classCallCheck","instance","Constructor","TypeError","Object","defineProperty","value","saveAs","view","get_URL","URL","webkitURL","save_link","document","createElementNS","can_use_save_link","click","node","event","MouseEvent","dispatchEvent","is_safari","webkit_req_fs","webkitRequestFileSystem","req_fs","requestFileSystem","mozRequestFileSystem","throw_outside","ex","setImmediate","setTimeout","fs_min_size","revoke","file","revokeObjectURL","remove","dispatch","filesaver","event_types","concat","listener","auto_bom","blob","type","Blob","FileSaver","name","no_auto_bom","object_url","target_view","blob_changed","dispatch_all","fs_error","FileReader","reader","onloadend","base64Data","result","location","href","search","readyState","DONE","readAsDataURL","INIT","createObjectURL","undefined","open","abortable","func","apply","create_if_not_found","create","exclusive","download","webkitSlice","size","TEMPORARY","fs","root","getDirectory","dir","save","getFile","createWriter","writer","onwriteend","toURL","onerror","error","ABORT_ERR","forEach","write","abort","WRITING","NOT_FOUND_ERR","FS_proto","prototype","msSaveOrOpenBlob","onwritestart","onprogress","onwrite","onabort","self","content","default","factory","StartAudioContext","startContext","context","buffer","createBuffer","sampleRate","source","createBufferSource","connect","destination","start","resume","isStarted","state","onStarted","callback","checkLoop","requestAnimationFrame","bindTapListener","element","tapListeners","Array","isArray","NodeList","querySelectorAll","jquery","toArray","Element","tap","TapListener","_dragged","_element","_bindedMove","_moved","bind","_bindedEnd","_ended","addEventListener","dispose","removeEventListener","elements","promise","Promise","success","body","then","Tone","Module","Main","inputs","outputs","isUndef","input","createGain","output","set","params","rampTime","isObject","isString","tmpObj","paramLoop","attr","parent","indexOf","attrSplit","splice","innerParam","param","Signal","Param","rampTo","AudioParam","get","_collectDefaults","constructor","ret","subRet","j","subAttr","isFunction","constr","defaults","keys","_super","superDefs","toString","className","isLetter","sameConstructor","AudioNode","disconnect","unit","outputNum","inputNum","defaultArg","isNumber","connectSeries","currentUnit","toUnit","chain","fan","given","fallback","givenProp","fallbackProp","optionsObject","values","options","val","arg","isBoolean","noOp","_readOnly","property","writable","enumerable","_writable","State","Started","Stopped","Paused","equalPowerScale","percent","piFactor","PI","sin","dbToGain","db","gainToDb","gain","log","LN10","intervalToFrequencyRatio","interval","now","extend","child","TempConstructor","audioContext","Context","emit","setContext","ctx","hasAudioContext","hasOwnProperty","hasPromises","hasWorkers","version","TONE_SILENCE_VERSION_LOGGING","console","SignalBase","outputNumber","inputNumber","TimelineSignal","_param","cancelScheduledValues","overridden","WaveShaper","mapping","bufferLen","_shaper","createWaveShaper","_curve","curve","isFinite","Float32Array","setMap","len","normalized","oversample","oversampling","RangeError","TimeBase","units","_expr","_noOp","copy","_defaultUnits","method","_primaryExpressions","_defaultExpr","exprString","_parseExprString","clone","time","regexp","parseInt","_beatsToUnits","_timeSignature","m","_ticksToUnits","hz","_frequencyToUnits","parseFloat","tr","q","total","_secondsToUnits","samples","_binaryExpressions","+","precedence","lh","rh","-","*","/","_unaryExpressions","neg","_syntaxGlue","(",")","_tokenize","expr","position","tokens","token","expressions","group","opName","op","reg","SyntaxError","getNextToken","trim","substr","next","peek","_matchGroup","prec","_parseBinary","lexer","_parseUnary","_parsePrimary","matching","freq","beats","Transport","bpm","seconds","ticks","PPQ","timeSignature","_pushExpr","add","sub","mult","div","valueOf","Time","_plusNow","quantize","nextSubdivision","subdiv","subdivision","toSeconds","round","addNow","toNotation","testNotations","retNotation","_toNotationHelper","testTripletNotations","retTripletNotation","threshold","_notationToUnits","notationTime","multiple","floor","notation","primaryExprs","notationExprs","toBarsBeatsSixteenths","quarterTime","quarters","measures","sixteenths","toFixed","toTicks","toSamples","toFrequency","toMilliseconds","Frequency","midi","midiToFrequency","note","pitch","octave","noteNumber","noteToScaleIndex","toLowerCase","transpose","harmonize","intervals","toMidi","frequencyToMidi","toNote","A4","LN2","scaleIndexToNote","cbb","cb","c","c#","cx","dbb","d","d#","dx","ebb","eb","e#","fbb","fb","f#","fx","gbb","gb","g","g#","gx","abb","ab","a#","ax","bbb","bb","b","b#","bx","frequency","TransportTime","_secondsToTicks","ceil","Emitter","_events","on","events","eventName","off","ev","eventList","args","mixin","object","functions","emitterFunc","AudioContext","webkitAudioContext","_context","prop","_defineProperty","_latencyHint","_lookAhead","_updateInterval","_computedUpdateInterval","_worker","_createWorker","_constants","currentTime","blobUrl","worker","Worker","_lastUpdate","diff","max","getConstant","arr","getChannelData","constant","channelCount","channelCountMode","loop","lA","blockTime","postMessage","hint","lookAhead","latencyHint","updateInterval","supported","toneConnect","B","outNum","inNum","nativeConnect","nativeDisconnect","shimConnect","warn","Type","Default","Ticks","NormalRange","AudioRange","Decibels","Interval","BPM","Positive","Cents","Degrees","MIDI","BarsBeatsSixteenths","Samples","Hertz","Note","Milliseconds","Seconds","Notation","convert","_lfo","lfo","_toUnits","LFO","convertedVal","_fromUnits","min","_minOutput","setValueAtTime","setRampPoint","currentVal","linearRampToValueAtTime","endTime","exponentialRampToValueAtTime","exponentialRampToValue","startTime","linearRampToValue","setTargetAtTime","timeConstant","setValueCurveAtTime","duration","GainNode","createGainNode","Gain","_gainNode","createInsOuts","_gain","Timeline","_timeline","_toRemove","_iterating","memory","Infinity","index","_search","shift","getAfter","getBefore","cancel","after","cancelBefore","beginning","end","midPoint","nextEvent","_iterate","lowerBound","upperBound","forEachBefore","forEachAfter","forEachFrom","forEachAtTime","_initial","Linear","Exponential","Target","Curve","Set","getValueAtTime","beforeEvent","_searchBefore","setValue","sampleTime","scaling","floats","segmentTime","before","_searchAfter","linearRampToValueBetween","finish","exponentialRampToValueBetween","previouVal","previous","_exponentialApproach","_curveInterpolate","_linearInterpolate","_exponentialInterpolate","t0","v0","v1","exp","t1","progress","lowerIndex","upperIndex","lowerVal","upperVal","Pow","_exp","_expScaler","_expFunc","abs","Envelope","attack","decay","sustain","release","_attackCurve","_releaseCurve","_sig","attackCurve","releaseCurve","In","curveDef","Out","triggerAttack","velocity","originalAttack","currentValue","percentComplete","sliceIndex","triggerRelease","triggerAttackRelease","invertCurve","out","k","cosineCurve","rippleCurve","curveLen","sineWave","stairsCurve","sineCurve","cos","bounceCurve","linear","exponential","bounce","cosine","reverse","reverseCurve","step","ripple","sine","AmplitudeEnvelope","AnalyserNode","getFloatTimeDomainData","array","uint8","Uint8Array","getByteTimeDomainData","Analyser","_analyser","createAnalyser","_type","_returnType","returnType","_buffer","minDecibels","maxDecibels","smoothing","Waveform","FFT","ReturnType","Byte","Float","analyse","getByteFrequencyData","getFloatFrequencyData","frequencyBinCount","fftSize","smoothingTimeConstant","Compressor","_compressor","createDynamicsCompressor","knee","ratio","Add","_sum","Multiply","_mult","Negate","_multiply","Subtract","_neg","GreaterThanZero","_thresh","_scale","GreaterThan","_gtz","Abs","_abs","Modulo","modulus","_subtract","_modSignal","_setWaveShaper","mod","AudioToGain","_norm","x","applyBinary","_eval","applyUnary","getNumber","literalNumber","Expr","_replacements","inputCount","_parseInputs","_nodes","tree","_parseTree","_disposeNodes","_Expressions","signal","glue",",","a2g","binary","unary","!","NOT","inputArray","inputMax","replace","matchSyntax","syn","matchGroup","groupName","parseExpression","parseUnary","operator","parsePrimary","parseFunctionCall","parseArgumentList","EqualPowerGain","_eqPower","CrossFade","initialFade","fade","_equalPowerA","_equalPowerB","_invert","Filter","_filters","detune","Q","_rolloff","rolloff","cascadingCount","count","filter","createBiquadFilter","connectionChain","MultibandSplit","low","_lowMidFilter","mid","high","lowFrequency","highFrequency","EQ3","_multibandSplit","_lowGain","_midGain","_highGain","Scale","outputMin","outputMax","_outputMin","_outputMax","_add","_setRange","ScaleExp","exponent","DelayNode","createDelay","createDelayNode","Delay","_delayNode","maxDelay","delayTime","FeedbackCombFilter","_delay","_feedback","resonance","Follower","_filter","_frequencyValues","_sub","_attack","_release","_setAttackRelease","minTime","ScaledEnvelope","FrequencyEnvelope","_octaves","octaves","baseFrequency","Gate","_follower","_gt","thresh","attackTime","releaseTime","TimelineState","initial","setStateAtTime","Clock","_nextTick","_lastState","_state","_boundLoop","_loop","offset","stop","pause","loopInterval","lag","currentState","tickTime","getStateAtTime","IntervalTimeline","_root","_length","IntervalNode","insert","updateHeight","updateMax","_rebalance","results","_removeNode","_setRoot","_replaceNodeInParent","replacement","isLeftChild","left","right","temp","getBalance","_rotateLeft","pivotNode","_rotateRight","balance","allNodes","traverse","searchAfter","_left","_right","height","point","_loopStart","_loopEnd","_ppq","TransportConstructor","_clock","_processTick","_bindClockEvents","_scheduledEvents","_eventID","_repeatedEvents","_onceEvents","_syncedSignals","_swingTicks","_swingAmount","swing","swingSubdivision","loopStart","loopEnd","amount","id","schedule","timeline","scheduleRepeat","scheduleOnce","clear","eventId","item","timeSig","startPosition","endPosition","setLoopPoints","ppq","remainingTime","syncSignal","ratioSignal","unsyncSignal","syncedSignal","Volume","volume","_unmutedVolume","mute","Master","_volume","toMaster","MasterConstructor","Source","_synced","_scheduled","_start","_stop","retrigger","sched","sync","stateEvent","startOffset","unsync","OscillatorNode","noteOn","noteOff","setPeriodicWave","setWaveTable","createPeriodicWave","createWaveTable","Oscillator","_oscillator","_wave","_partials","partials","_phase","phase","Sine","Triangle","Sawtooth","Square","Custom","createOscillator","syncFrequency","unsyncFrequency","coefs","_getRealImaginary","periodicWave","periodicWaveSize","real","imag","partialCount","partial","exec","_inverseFFT","sum","_getInitialValue","maxValue","twoPi","Zero","amplitude","_stoppedSignal","_zeros","_stoppedValue","_a2g","_scaler","_units","currentMin","currentMax","Limiter","LowpassCombFilter","_lowpass","dampening","Merge","_merger","createChannelMerger","Meter","_lastValue","Level","rms","Split","_splitter","createChannelSplitter","MidSideSplit","_split","side","SQRT1_2","MidSideMerge","_merge","MidSideCompressor","_midSideSplit","_midSideMerge","Mono","MultibandCompressor","Panner","initialPan","_hasStereoPanner","_panner","createStereoPanner","pan","_crossFade","_zero","Panner3D","createPanner","panningModel","maxDistance","distanceModel","coneOuterGain","coneOuterAngle","coneInnerAngle","refDistance","rolloffFactor","_orientation","orientationX","orientationY","orientationZ","_position","positionX","positionY","positionZ","_rampTimeConstant","setPosition","y","z","setOrientation","pos","_aliasProperty","PanVol","CtrlInterpolate","lowerPosition","lower","upper","_interpolate","retArray","retObj","_toNumber","CtrlMarkov","distribution","_getProbDistribution","rand","random","dist","chosen","needsNormalizing","option","probability","CtrlPattern","_shuffled","_direction","Up","Down","UpDown","DownUp","AlternateUp","AlternateDown","Random","RandomWalk","RandomOnce","_shuffleValues","randVal","CtrlRandom","integer","AudioBuffer","copyToChannel","src","chanNum","channel","copyFromChannel","dest","Buffer","_reversed","_xhr","url","onload","load","buff","err","_currentDownloads","numberOfChannels","fromArray","isMultidimensional","channels","toMono","outputArray","numChannels","channelArray","map","sample","startSamples","endSamples","_reverse","loaded","rev","_downloadQueue","baseUrl","onError","onProgress","totalProgress","request","XMLHttpRequest","responseType","status","decodeAudioData","response","lengthComputable","send","cancelDownloads","supportsType","extension","createElement","canPlayType","removeEvents","fail","catch","Buffers","urls","_buffers","_flattenUrls","_loadingCount","key","_bufferLoaded","has","isLoaded","buffName","ob","toReturn","flatObject","Buses","channelName","sendKnob","receive","Draw","expiration","anticipation","_boundDrawLoop","_drawLoop","Listener","ListenerConstructor","forwardX","forwardY","forwardZ","upX","upY","upZ","OfflineAudioContext","webkitOfflineAudioContext","OfflineContext","offlineContext","_duration","_currentTime","render","done","oncomplete","renderedBuffer","startRendering","Offline","originalContext","rendered","Effect","_dryWet","wet","effectSend","effectReturn","connectEffect","effect","AutoFilter","depth","delay","oct","AutoPanner","AutoWah","follower","_sweepRange","_baseFrequency","_inputBoost","_bandpass","_peaking","_setSweepRange","sensitivity","baseFreq","sensitivy","BitCrusher","invStepSize","bits","_modulo","_bits","Chebyshev","_order","order","_getCoefficient","degree","memo","StereoEffect","effectSendL","effectSendR","effectReturnL","effectReturnR","FeedbackEffect","_feedbackGain","feedback","StereoXFeedbackEffect","_feedbackLR","_feedbackRL","Chorus","_depth","_delayTime","_lfoL","_lfoR","_delayNodeL","_delayNodeR","spread","deviation","Convolver","_convolver","createConvolver","Distortion","_distortion","distortion","deg","FeedbackDelay","combFilterTunings","allpassFilterFrequencies","Freeverb","roomSize","_combFilters","_allpassFiltersL","_allpassFiltersR","allpassL","allpassR","lfpf","al","ar","cf","combFilterDelayTimes","combFilterResonances","allpassFilterFreqs","JCReverb","_scaleRoomSize","_allpassFilters","_feedbackCombFilters","af","allpass","fbcf","apf","MidSideEffect","midSend","sideSend","midReturn","sideReturn","Phaser","_filtersL","_makeFilters","stages","_filtersR","connectToFreq","filters","PingPongDelay","_leftDelay","maxDelayTime","_rightDelay","_rightPreDelay","PitchShift","_frequency","_delayA","_lfoA","_delayB","_lfoB","_crossFadeLFO","_feedbackDelay","_pitch","_windowSize","windowSize","factor","StereoFeedbackEffect","_feedbackL","_feedbackR","StereoWidener","width","_midMult","_sideMult","_two","Tremolo","_amplitudeL","_amplitudeR","Vibrato","Event","_playbackRate","_startOffset","humanize","playbackRate","_rescheduleEvents","startTick","_getLoopDuration","_tick","previousEvent","reschedulTime","variation","rate","lastEvent","loopDuration","Loop","_event","iterations","prob","iters","Part","_probability","_humanize","_forEach","_startNote","at","_restartEvent","removeAll","_setAll","_testLoopBoundries","Pattern","_pattern","pattern","vals","Sequence","_subdivision","_indexTime","subSubdivision","PulseOscillator","_widthGate","_sawtooth","PWMOscillator","_pulse","modulationFrequency","_modulator","FMOscillator","_carrier","modulationIndex","modulationType","harmonicity","_modulationNode","AMOscillator","_modulationScale","FatOscillator","_oscillators","_spread","osc","iterator","OmniOscillator","_sourceType","OmniOscType","Pulse","PWM","Osc","FM","AM","Fat","prefix","_createNewOscillator","oscType","OscillatorConstructor","oldOsc","mType","Instrument","Monophonic","portamento","_triggerEnvelopeAttack","setNote","_triggerEnvelopeRelease","currentNote","portTime","Synth","oscillator","envelope","AMSynth","modulation","modulationEnvelope","MonoSynth","filterEnvelope","DuoSynth","voice0","voice1","_vibrato","vibratoRate","_vibratoGain","vibratoAmount","FMSynth","carrier","modulator","MembraneSynth","pitchDecay","maxNote","inharmRatios","MetalSynth","_freqMultipliers","_amplitue","_highpass","_filterFreqScaler","vel","octs","AudioBufferSourceNode","noteGrainOn","BufferSource","onended","_startTime","_stopTime","_source","fadeIn","fadeOut","_onendedTimeout","fadeInTime","fadeOutTime","playbackState","clearTimeout","_onended","createBuffers","_noiseArrays","_noiseBuffers","Noise","pink","channelNum","b0","b1","b2","b3","b4","b5","b6","white","brown","lastOut","NoiseSynth","noise","PluckSynth","_noise","attackNoise","_lfcf","delayAmount","PolySynth","polyphony","MAX_POLYPHONY","voices","_triggers","v","voice","notes","oldest","JSON","stringify","stringified","desc","releaseAll","Player","autostart","_onload","seek","Sampler","player","GainToAudio","Normalize","inputMin","_inputMin","_inputMax","_div","MultiPlayer","buffers","_activeSources","_makeSource","bufferName","startLoop","stopAll","sources","GrainPlayer","_player","_grainSize","grainSize","_overlap","overlap","drift","_offset","bufferDuration","originalFadeIn","endSegmentDuration","scrub","UserMedia","_mediaStream","_stream","_device","labelOrId","enumerateDevices","devices","find","label","deviceId","constraints","audio","echoCancellation","mediaDevices","getUserMedia","stream","createMediaStreamSource","close","getAudioTracks","track","kind","active","groupId","backgroundColor","attenuation","camera","fov","near","far","controls","enableZoom","enableRotate","enablePan","enableDamping","dampingFactor","rotateSpeed","target","maxPolarAngle","minPolarAngle","light","colors","Quaternion","THREE","FloatType","CANNON","Vec3","Matrix4","Vector3","CannonWrapper","assign","bodies","mesh","quaternion","world","setupWorld","World","gravity","solver","lastTime","fixedTimeStep","maxSubSteps","onUpdate","updateBodies","springs","spring","applyForce","Body","addShape","shape","removeBody","addConstraint","removeConstraint","PointToPointConstraint","bodyA","localPivotA","bodyB","localPivotB","LockConstraint","addBody","Sphere","radius","Box","halfExtents","Plane","geometry","boundingBox","computeBoundingBox","extents","getSize","multiply","scale","multiplyScalar","addBox","Spring","CustomMaterial","parameters","MeshStandardMaterial","uniforms","ShaderLib","standard","setValues","isMeshStandardMaterial","quat","scl","Joint","setup","transform","composeBodyMatrix","invParent","getInverse","bodyMatrix","localMatrix","updateMatrixWorld","debugMesh","matrixWorld","decompose","compose","JointsToTexture","Vector2","tex","joints","texture","h","nextPowerOfTwo","jointData","w","DataTexture","RGBAFormat","NearestFilter","textureDim","onNewDataTexture","update","_this","needsUpdate","_Joint2","createElementFromString","strHTML","createRange","createContextualFragment","appendTo","appendChild","smoothStep","smootherStep","randomElement","obj","randElement","makeDataTexture","data","UVMapping","ClampToEdgeWrapping","dt","format","wrapS","wrapT","magFilter","minFilter","anisotropy","makePaletteTexture","rotate","colorData","pop","str","hex","Color","dataTexture","RGBFormat","glslify","fullScreenMat","MeshBasicMaterial","PostProcess","usePO2","innerWidth","innerHeight","renderTargetOptions","LinearMipMapLinearFilter","RepeatWrapping","uResolution","uOpacity","fullScreenFragmentShader","fullScreenVertexShader","nearestPowerOfTwo","fullScreenMaterial","ShaderMaterial","readBuffer","WebGLRenderTarget","writeBuffer","quad","Mesh","PlaneBufferGeometry","frustumCulled","quadScene","Scene","passes","addPass","pass","mat","pingPong","swapper","doPasses","renderer","scene","overrideMaterial","renderTarget","setSize","iterateKeys","recurrsiveSetConfig","newSettings","config","el","isColor","setHex","_typeof","loadingManager","jsonLoader","FileLoader","setResponseType","setConfig","settings","suggestedName","jsonurl","_LaserUtils","MOBILE","_ismobilejs2","_startaudiocontext2","_tone2","elapsedTime","frame","TWO_PI","mapLinear","randFloat","randInt","lerp","clamp","LoadingManager","TextureLoader","colUrl","setStyle","_SimpleSettings2","post","_PostProcess2","limiter","rollVolume","panner","bassSynth","lowSynth","animate","draw","clock","PerspectiveCamera","_ThreeView2","setClearColor","autoClear","shadowMap","enabled","PCFSoftShadowMap","OrbitControls","domElement","hemi_light","HemisphereLight","DirectionalLight","castShadow","shadow","bias","mapSize","bottom","top","cw","_CannonWrapper2","skinMan","addSphere","_SkinManager2","qlerp","applyImpulse","hardPosition","angularVelocity","slerp","material","emissiveIntensity","skins","bumpNotes","json","p","offsetMat","makeTranslation","buildSkin","UNIT_Z","fragmentShader","customDepthMaterial","jointTexture","jointTextureDim","jointOffset","receiveShadow","bName","bodyMap","_ref","button","BoxGeometry","MeshNormalMaterial","tileSize","dim","setRGB","addBoxMesh","mass","getElapsedTime","onResize","aspect","updateProjectionMatrix","onScroll","trackedTouches","_touchEvents2","container","touches","pageX","pageY","cameraSettings","unitBox","unitSphere","SphereGeometry","debugJointMesh","getUpVec","upVec","cross","UNIT_X","j2t","_JointsToTexture2","cannonWrapper","SkinManager","Object3D","getFragmentShader","jointIndexOffset","getJointCount","UNIT_Y","debug","_skinDataToGeometry2","addBodies","addJointsFromJson","addConstraintsFromJson","constraintUp","_CustomMaterial2","getVertexShader","bodyInfo","createRigidBody","createSphereRigidBody","createBoxRigidBody","_pos","angle","twistAngle","localA","localB","pointToLocalFrame","axisA","normalize","axisB","negate","upA","upB","constraint","ConeTwistConstraint","newJoints","addJoint","rendererOptions","WebGLRenderer","getElementById","resizeTimeout","hideLoadingDiv","style","display","skinIndexOffset","faces","uv","sw","si","sio","positions","normals","uvs","jointWeights","jointIndices","addPos","addNorm","addUV","addJointWeights","jw","addJointIndices","ji","BufferGeometry","addAttribute","BufferAttribute","touchStartCallback","onTouchStart","touchMoveCallback","onTouchMove","touchEndCallback","onTouchEnd","removeListeners","addListeners"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","function circInOut(t) {\n  if ((t *= 2) < 1) return -0.5 * (Math.sqrt(1 - t * t) - 1)\n  return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1)\n}\n\nmodule.exports = circInOut","function cubicInOut(t) {\n  return t < 0.5\n    ? 4.0 * t * t * t\n    : 0.5 * Math.pow(2.0 * t - 2.0, 3.0) + 1.0\n}\n\nmodule.exports = cubicInOut","module.exports = function(strings) {\n  if (typeof strings === 'string') strings = [strings]\n  var exprs = [].slice.call(arguments,1)\n  var parts = []\n  for (var i = 0; i < strings.length-1; i++) {\n    parts.push(strings[i], exprs[i] || '')\n  }\n  parts.push(strings[i])\n  return parts.join('')\n}\n","/**\n * isMobile.js v0.4.1\n *\n * A simple library to detect Apple phones and tablets,\n * Android phones and tablets, other mobile devices (like blackberry, mini-opera and windows phone),\n * and any kind of seven inch device, via user agent sniffing.\n *\n * @author: Kai Mallea (kmallea@gmail.com)\n *\n * @license: http://creativecommons.org/publicdomain/zero/1.0/\n */\n(function (global) {\n\n    var apple_phone         = /iPhone/i,\n        apple_ipod          = /iPod/i,\n        apple_tablet        = /iPad/i,\n        android_phone       = /(?=.*\\bAndroid\\b)(?=.*\\bMobile\\b)/i, // Match 'Android' AND 'Mobile'\n        android_tablet      = /Android/i,\n        amazon_phone        = /(?=.*\\bAndroid\\b)(?=.*\\bSD4930UR\\b)/i,\n        amazon_tablet       = /(?=.*\\bAndroid\\b)(?=.*\\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\\b)/i,\n        windows_phone       = /Windows Phone/i,\n        windows_tablet      = /(?=.*\\bWindows\\b)(?=.*\\bARM\\b)/i, // Match 'Windows' AND 'ARM'\n        other_blackberry    = /BlackBerry/i,\n        other_blackberry_10 = /BB10/i,\n        other_opera         = /Opera Mini/i,\n        other_chrome        = /(CriOS|Chrome)(?=.*\\bMobile\\b)/i,\n        other_firefox       = /(?=.*\\bFirefox\\b)(?=.*\\bMobile\\b)/i, // Match 'Firefox' AND 'Mobile'\n        seven_inch = new RegExp(\n            '(?:' +         // Non-capturing group\n\n            'Nexus 7' +     // Nexus 7\n\n            '|' +           // OR\n\n            'BNTV250' +     // B&N Nook Tablet 7 inch\n\n            '|' +           // OR\n\n            'Kindle Fire' + // Kindle Fire\n\n            '|' +           // OR\n\n            'Silk' +        // Kindle Fire, Silk Accelerated\n\n            '|' +           // OR\n\n            'GT-P1000' +    // Galaxy Tab 7 inch\n\n            ')',            // End non-capturing group\n\n            'i');           // Case-insensitive matching\n\n    var match = function(regex, userAgent) {\n        return regex.test(userAgent);\n    };\n\n    var IsMobileClass = function(userAgent) {\n        var ua = userAgent || navigator.userAgent;\n\n        // Facebook mobile app's integrated browser adds a bunch of strings that\n        // match everything. Strip it out if it exists.\n        var tmp = ua.split('[FBAN');\n        if (typeof tmp[1] !== 'undefined') {\n            ua = tmp[0];\n        }\n\n        // Twitter mobile app's integrated browser on iPad adds a \"Twitter for\n        // iPhone\" string. Same probable happens on other tablet platforms.\n        // This will confuse detection so strip it out if it exists.\n        tmp = ua.split('Twitter');\n        if (typeof tmp[1] !== 'undefined') {\n            ua = tmp[0];\n        }\n\n        this.apple = {\n            phone:  match(apple_phone, ua),\n            ipod:   match(apple_ipod, ua),\n            tablet: !match(apple_phone, ua) && match(apple_tablet, ua),\n            device: match(apple_phone, ua) || match(apple_ipod, ua) || match(apple_tablet, ua)\n        };\n        this.amazon = {\n            phone:  match(amazon_phone, ua),\n            tablet: !match(amazon_phone, ua) && match(amazon_tablet, ua),\n            device: match(amazon_phone, ua) || match(amazon_tablet, ua)\n        };\n        this.android = {\n            phone:  match(amazon_phone, ua) || match(android_phone, ua),\n            tablet: !match(amazon_phone, ua) && !match(android_phone, ua) && (match(amazon_tablet, ua) || match(android_tablet, ua)),\n            device: match(amazon_phone, ua) || match(amazon_tablet, ua) || match(android_phone, ua) || match(android_tablet, ua)\n        };\n        this.windows = {\n            phone:  match(windows_phone, ua),\n            tablet: match(windows_tablet, ua),\n            device: match(windows_phone, ua) || match(windows_tablet, ua)\n        };\n        this.other = {\n            blackberry:   match(other_blackberry, ua),\n            blackberry10: match(other_blackberry_10, ua),\n            opera:        match(other_opera, ua),\n            firefox:      match(other_firefox, ua),\n            chrome:       match(other_chrome, ua),\n            device:       match(other_blackberry, ua) || match(other_blackberry_10, ua) || match(other_opera, ua) || match(other_firefox, ua) || match(other_chrome, ua)\n        };\n        this.seven_inch = match(seven_inch, ua);\n        this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch;\n\n        // excludes 'other' devices and ipods, targeting touchscreen phones\n        this.phone = this.apple.phone || this.android.phone || this.windows.phone;\n\n        // excludes 7 inch devices, classifying as phone or tablet is left to the user\n        this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet;\n\n        if (typeof window === 'undefined') {\n            return this;\n        }\n    };\n\n    var instantiate = function() {\n        var IM = new IsMobileClass();\n        IM.Class = IsMobileClass;\n        return IM;\n    };\n\n    if (typeof module !== 'undefined' && module.exports && typeof window === 'undefined') {\n        //node\n        module.exports = IsMobileClass;\n    } else if (typeof module !== 'undefined' && module.exports && typeof window !== 'undefined') {\n        //browserify\n        module.exports = instantiate();\n    } else if (typeof define === 'function' && define.amd) {\n        //AMD\n        define('isMobile', [], global.isMobile = instantiate());\n    } else {\n        global.isMobile = instantiate();\n    }\n\n})(this);\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* FileSaver.js\r\n * A saveAs() FileSaver implementation.\r\n *\r\n * By Eli Grey, http://eligrey.com\r\n * ES6ified by Cole Chamberlain, https://github.com/cchamberlain\r\n *\r\n * License: MIT\r\n *   See https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md\r\n */\n\n/*global self */\n/*jslint bitwise: true, indent: 4, laxbreak: true, laxcomma: true, smarttabs: true, plusplus: true */\n\n/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */\n\nvar saveAs = exports.saveAs = window.saveAs || function (view) {\n  // IE <10 is explicitly unsupported\n  if (typeof navigator !== 'undefined' && /MSIE [1-9]\\./.test(navigator.userAgent)) return;\n  var doc = view.document;\n  // only get URL when necessary in case Blob.js hasn't overridden it yet\n  var get_URL = function get_URL() {\n    return view.URL || view.webkitURL || view;\n  };\n  var save_link = doc.createElementNS('http://www.w3.org/1999/xhtml', 'a');\n  var can_use_save_link = 'download' in save_link;\n  var click = function click(node) {\n    var event = new MouseEvent('click');\n    node.dispatchEvent(event);\n  };\n  var is_safari = /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent);\n  var webkit_req_fs = view.webkitRequestFileSystem;\n  var req_fs = view.requestFileSystem || webkit_req_fs || view.mozRequestFileSystem;\n  var throw_outside = function throw_outside(ex) {\n    (view.setImmediate || view.setTimeout)(function () {\n      throw ex;\n    }, 0);\n  };\n  var force_saveable_type = 'application/octet-stream';\n  var fs_min_size = 0;\n  // the Blob API is fundamentally broken as there is no \"downloadfinished\" event to subscribe to\n  var arbitrary_revoke_timeout = 1000 * 40; // in ms\n  var revoke = function revoke(file) {\n    var revoker = function revoker() {\n      if (typeof file === 'string') // file is an object URL\n        get_URL().revokeObjectURL(file);else // file is a File\n        file.remove();\n    };\n    /* // Take note W3C:\r\n    var\r\n      uri = typeof file === \"string\" ? file : file.toURL()\r\n    , revoker = function(evt) {\r\n      // idealy DownloadFinishedEvent.data would be the URL requested\r\n      if (evt.data === uri) {\r\n        if (typeof file === \"string\") { // file is an object URL\r\n          get_URL().revokeObjectURL(file);\r\n        } else { // file is a File\r\n          file.remove();\r\n        }\r\n      }\r\n    }\r\n    ;\r\n    view.addEventListener(\"downloadfinished\", revoker);\r\n    */\n    setTimeout(revoker, arbitrary_revoke_timeout);\n  };\n  var dispatch = function dispatch(filesaver, event_types, event) {\n    event_types = [].concat(event_types);\n    var i = event_types.length;\n    while (i--) {\n      var listener = filesaver['on' + event_types[i]];\n      if (typeof listener === 'function') {\n        try {\n          listener.call(filesaver, event || filesaver);\n        } catch (ex) {\n          throw_outside(ex);\n        }\n      }\n    }\n  };\n  var auto_bom = function auto_bom(blob) {\n    // prepend BOM for UTF-8 XML and text/* types (including HTML)\n    if (/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) return new Blob(['﻿', blob], { type: blob.type });\n    return blob;\n  };\n\n  var FileSaver = function FileSaver(blob, name, no_auto_bom) {\n    _classCallCheck(this, FileSaver);\n\n    if (!no_auto_bom) blob = auto_bom(blob);\n    // First try a.download, then web filesystem, then object URLs\n    var filesaver = this,\n        type = blob.type,\n        blob_changed = false,\n        object_url,\n        target_view,\n        dispatch_all = function dispatch_all() {\n      dispatch(filesaver, 'writestart progress write writeend'.split(' '));\n    }\n    // on any filesys errors revert to saving with object URLs\n    ,\n        fs_error = function fs_error() {\n      if (target_view && is_safari && typeof FileReader !== 'undefined') {\n        // Safari doesn't allow downloading of blob urls\n        var reader = new FileReader();\n        reader.onloadend = function () {\n          var base64Data = reader.result;\n          target_view.location.href = 'data:attachment/file' + base64Data.slice(base64Data.search(/[,;]/));\n          filesaver.readyState = filesaver.DONE;\n          dispatch_all();\n        };\n        reader.readAsDataURL(blob);\n        filesaver.readyState = filesaver.INIT;\n        return;\n      }\n      // don't create more object URLs than needed\n      if (blob_changed || !object_url) {\n        object_url = get_URL().createObjectURL(blob);\n      }\n      if (target_view) {\n        target_view.location.href = object_url;\n      } else {\n        var new_tab = view.open(object_url, '_blank');\n        if (new_tab === undefined && is_safari) {\n          //Apple do not allow window.open, see http://bit.ly/1kZffRI\n          view.location.href = object_url;\n        }\n      }\n      filesaver.readyState = filesaver.DONE;\n      dispatch_all();\n      revoke(object_url);\n    },\n        abortable = function abortable(func) {\n      return function () {\n        if (filesaver.readyState !== filesaver.DONE) {\n          return func.apply(this, arguments);\n        }\n      };\n    },\n        create_if_not_found = { create: true, exclusive: false },\n        slice;\n\n    filesaver.readyState = filesaver.INIT;\n    if (!name) {\n      name = 'download';\n    }\n    if (can_use_save_link) {\n      object_url = get_URL().createObjectURL(blob);\n      setTimeout(function () {\n        save_link.href = object_url;\n        save_link.download = name;\n        click(save_link);\n        dispatch_all();\n        revoke(object_url);\n        filesaver.readyState = filesaver.DONE;\n      });\n      return;\n    }\n    // Object and web filesystem URLs have a problem saving in Google Chrome when\n    // viewed in a tab, so I force save with application/octet-stream\n    // http://code.google.com/p/chromium/issues/detail?id=91158\n    // Update: Google errantly closed 91158, I submitted it again:\n    // https://code.google.com/p/chromium/issues/detail?id=389642\n    if (view.chrome && type && type !== force_saveable_type) {\n      slice = blob.slice || blob.webkitSlice;\n      blob = slice.call(blob, 0, blob.size, force_saveable_type);\n      blob_changed = true;\n    }\n    // Since I can't be sure that the guessed media type will trigger a download\n    // in WebKit, I append .download to the filename.\n    // https://bugs.webkit.org/show_bug.cgi?id=65440\n    if (webkit_req_fs && name !== 'download') {\n      name += '.download';\n    }\n    if (type === force_saveable_type || webkit_req_fs) {\n      target_view = view;\n    }\n    if (!req_fs) {\n      fs_error();\n      return;\n    }\n    fs_min_size += blob.size;\n    req_fs(view.TEMPORARY, fs_min_size, abortable(function (fs) {\n      fs.root.getDirectory('saved', create_if_not_found, abortable(function (dir) {\n        var save = function save() {\n          dir.getFile(name, create_if_not_found, abortable(function (file) {\n            file.createWriter(abortable(function (writer) {\n              writer.onwriteend = function (event) {\n                target_view.location.href = file.toURL();\n                filesaver.readyState = filesaver.DONE;\n                dispatch(filesaver, 'writeend', event);\n                revoke(file);\n              };\n              writer.onerror = function () {\n                var error = writer.error;\n                if (error.code !== error.ABORT_ERR) {\n                  fs_error();\n                }\n              };\n              'writestart progress write abort'.split(' ').forEach(function (event) {\n                writer['on' + event] = filesaver['on' + event];\n              });\n              writer.write(blob);\n              filesaver.abort = function () {\n                writer.abort();\n                filesaver.readyState = filesaver.DONE;\n              };\n              filesaver.readyState = filesaver.WRITING;\n            }), fs_error);\n          }), fs_error);\n        };\n        dir.getFile(name, { create: false }, abortable(function (file) {\n          // delete file if it already exists\n          file.remove();\n          save();\n        }), abortable(function (ex) {\n          if (ex.code === ex.NOT_FOUND_ERR) {\n            save();\n          } else {\n            fs_error();\n          }\n        }));\n      }), fs_error);\n    }), fs_error);\n  };\n\n  var FS_proto = FileSaver.prototype;\n  var saveAs = function saveAs(blob, name, no_auto_bom) {\n    return new FileSaver(blob, name, no_auto_bom);\n  };\n\n  // IE 10+ (native saveAs)\n  if (typeof navigator !== 'undefined' && navigator.msSaveOrOpenBlob) {\n    return function (blob, name, no_auto_bom) {\n      if (!no_auto_bom) blob = auto_bom(blob);\n      return navigator.msSaveOrOpenBlob(blob, name || 'download');\n    };\n  }\n\n  FS_proto.abort = function () {\n    var filesaver = this;\n    filesaver.readyState = filesaver.DONE;\n    dispatch(filesaver, 'abort');\n  };\n  FS_proto.readyState = FS_proto.INIT = 0;\n  FS_proto.WRITING = 1;\n  FS_proto.DONE = 2;\n\n  FS_proto.error = FS_proto.onwritestart = FS_proto.onprogress = FS_proto.onwrite = FS_proto.onabort = FS_proto.onerror = FS_proto.onwriteend = null;\n\n  return saveAs;\n}(typeof self !== 'undefined' && self || typeof window !== 'undefined' && window || undefined.content);\n// `self` is undefined in Firefox for Android content script context\n// while `this` is nsIContentFrameMessageManager\n// with an attribute `content` that corresponds to the window\n\nexports.default = saveAs;","/**\n *  StartAudioContext.js\n *  @author Yotam Mann\n *  @license http://opensource.org/licenses/MIT MIT License\n *  @copyright 2016 Yotam Mann\n */\n(function (root, factory) {\n\tif (typeof define === \"function\" && define.amd) {\n\t\tdefine([], factory)\n\t } else if (typeof module === \"object\" && module.exports) {\n        module.exports = factory()\n\t} else {\n\t\troot.StartAudioContext = factory()\n  }\n}(this, function () {\n\n\t//TAP LISTENER/////////////////////////////////////////////////////////////\n\n\t/**\n\t * @class  Listens for non-dragging tap ends on the given element\n\t * @param {Element} element\n\t * @internal\n\t */\n\tvar TapListener = function(element, context){\n\n\t\tthis._dragged = false\n\n\t\tthis._element = element\n\n\t\tthis._bindedMove = this._moved.bind(this)\n\t\tthis._bindedEnd = this._ended.bind(this, context)\n\n\t\telement.addEventListener(\"touchstart\", this._bindedEnd)\n\t\telement.addEventListener(\"touchmove\", this._bindedMove)\n\t\telement.addEventListener(\"touchend\", this._bindedEnd)\n\t\telement.addEventListener(\"mouseup\", this._bindedEnd)\n\t}\n\n\t/**\n\t * drag move event\n\t */\n\tTapListener.prototype._moved = function(e){\n\t\tthis._dragged = true\n\t};\n\n\t/**\n\t * tap ended listener\n\t */\n\tTapListener.prototype._ended = function(context){\n\t\tif (!this._dragged){\n\t\t\tstartContext(context)\n\t\t}\n\t\tthis._dragged = false\n\t};\n\n\t/**\n\t * remove all the bound events\n\t */\n\tTapListener.prototype.dispose = function(){\n\t\tthis._element.removeEventListener(\"touchstart\", this._bindedEnd)\n\t\tthis._element.removeEventListener(\"touchmove\", this._bindedMove)\n\t\tthis._element.removeEventListener(\"touchend\", this._bindedEnd)\n\t\tthis._element.removeEventListener(\"mouseup\", this._bindedEnd)\n\t\tthis._bindedMove = null\n\t\tthis._bindedEnd = null\n\t\tthis._element = null\n\t};\n\n\t//END TAP LISTENER/////////////////////////////////////////////////////////\n\n\t/**\n\t * Plays a silent sound and also invoke the \"resume\" method\n\t * @param {AudioContext} context\n\t * @private\n\t */\n\tfunction startContext(context){\n\t\t// this accomplishes the iOS specific requirement\n\t\tvar buffer = context.createBuffer(1, 1, context.sampleRate)\n\t\tvar source = context.createBufferSource()\n\t\tsource.buffer = buffer\n\t\tsource.connect(context.destination)\n\t\tsource.start(0)\n\n\t\t// resume the audio context\n\t\tif (context.resume){\n\t\t\tcontext.resume()\n\t\t}\n\t}\n\n\t/**\n\t * Returns true if the audio context is started\n\t * @param  {AudioContext}  context\n\t * @return {Boolean}\n\t * @private\n\t */\n\tfunction isStarted(context){\n\t\t return context.state === \"running\"\n\t}\n\n\t/**\n\t * Invokes the callback as soon as the AudioContext\n\t * is started\n\t * @param  {AudioContext}   context\n\t * @param  {Function} callback\n\t */\n\tfunction onStarted(context, callback){\n\n\t\tfunction checkLoop(){\n\t\t\tif (isStarted(context)){\n\t\t\t\tcallback()\n\t\t\t} else {\n\t\t\t\trequestAnimationFrame(checkLoop)\n\t\t\t\tif (context.resume){\n\t\t\t\t\tcontext.resume()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (isStarted(context)){\n\t\t\tcallback()\n\t\t} else {\n\t\t\tcheckLoop()\n\t\t}\n\t}\n\n\t/**\n\t * Add a tap listener to the audio context\n\t * @param  {Array|Element|String|jQuery} element\n\t * @param {Array} tapListeners\n\t */\n\tfunction bindTapListener(element, tapListeners, context){\n\t\tif (Array.isArray(element) || (NodeList && element instanceof NodeList)){\n\t\t\tfor (var i = 0; i < element.length; i++){\n\t\t\t\tbindTapListener(element[i], tapListeners, context)\n\t\t\t}\n\t\t} else if (typeof element === \"string\"){\n\t\t\tbindTapListener(document.querySelectorAll(element), tapListeners, context)\n\t\t} else if (element.jquery && typeof element.toArray === \"function\"){\n\t\t\tbindTapListener(element.toArray(), tapListeners, context)\n\t\t} else if (Element && element instanceof Element){\n\t\t\t//if it's an element, create a TapListener\n\t\t\tvar tap = new TapListener(element, context)\n\t\t\ttapListeners.push(tap)\n\t\t} \n\t}\n\n\t/**\n\t * @param {AudioContext} context The AudioContext to start.\n\t * @param {Array|String|Element|jQuery=} elements For iOS, the list of elements\n\t *                                               to bind tap event listeners\n\t *                                               which will start the AudioContext. If\n\t *                                               no elements are given, it will bind\n\t *                                               to the document.body.\n\t * @param {Function=} callback The callback to invoke when the AudioContext is started.\n\t * @return {Promise} The promise is invoked when the AudioContext\n\t *                       is started.\n\t */\n\tfunction StartAudioContext(context, elements, callback){\n\n\t\t//the promise is invoked when the AudioContext is started\n\t\tvar promise = new Promise(function(success) {\n\t\t\tonStarted(context, success)\n\t\t})\n\n\t\t// The TapListeners bound to the elements\n\t\tvar tapListeners = []\n\n\t\t// add all the tap listeners\n\t\tif (!elements){\n\t\t\telements = document.body\n\t\t}\n\t\tbindTapListener(elements, tapListeners, context)\n\n\t\t//dispose all these tap listeners when the context is started\n\t\tpromise.then(function(){\n\t\t\tfor (var i = 0; i < tapListeners.length; i++){\n\t\t\t\ttapListeners[i].dispose()\n\t\t\t}\n\t\t\ttapListeners = null\n\n\t\t\tif (callback){\n\t\t\t\tcallback()\n\t\t\t}\n\t\t})\n\n\t\treturn promise\n\t}\n\n\treturn StartAudioContext\n}))","(function(root, factory){\n\n\t//UMD\n\tif ( typeof define === \"function\" && define.amd ) {\n\t\tdefine(function() {\n\t\t\treturn factory();\n\t\t});\n\t} else if (typeof module === \"object\") {\n\t\tmodule.exports = factory();\n \t} else {\n\t\troot.Tone = factory();\n\t}\n\n}(this, function(){\n\n\t\"use strict\";\n\t\n\tvar Tone;\n\t//constructs the main Tone object\n\tfunction Main(func){\n\t\tTone = func();\n\t}\n\t//invokes each of the modules with the main Tone object as the argument\n\tfunction Module(func){\n\t\tfunc(Tone);\n\t}\t/**\n\t *  Tone.js\n\t *  @author Yotam Mann\n\t *  @license http://opensource.org/licenses/MIT MIT License\n\t *  @copyright 2014-2017 Yotam Mann\n\t */\n\tMain(function () {\n\t    \n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTONE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  @class  Tone is the base class of all other classes. It provides \n\t\t *          a lot of methods and functionality to all classes that extend\n\t\t *          it. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @alias Tone\n\t\t *  @param {number} [inputs=1] the number of input nodes\n\t\t *  @param {number} [outputs=1] the number of output nodes\n\t\t */\n\t    var Tone = function (inputs, outputs) {\n\t        /**\n\t\t\t *  the input node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(inputs) || inputs === 1) {\n\t            this.input = this.context.createGain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        /**\n\t\t\t *  the output node(s)\n\t\t\t *  @type {GainNode|Array}\n\t\t\t */\n\t        if (this.isUndef(outputs) || outputs === 1) {\n\t            this.output = this.context.createGain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    /**\n\t\t *  Set the parameters at once. Either pass in an\n\t\t *  object mapping parameters to values, or to set a\n\t\t *  single parameter, by passing in a string and value.\n\t\t *  The last argument is an optional ramp time which \n\t\t *  will ramp any signal values to their destination value\n\t\t *  over the duration of the rampTime.\n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //set values using an object\n\t\t * filter.set({\n\t\t * \t\"frequency\" : 300,\n\t\t * \t\"type\" : highpass\n\t\t * });\n\t\t *  @example\n\t\t * filter.set(\"type\", \"highpass\");\n\t\t *  @example\n\t\t * //ramp to the value 220 over 3 seconds. \n\t\t * oscillator.set({\n\t\t * \t\"frequency\" : 220\n\t\t * }, 3);\n\t\t */\n\t    Tone.prototype.set = function (params, value, rampTime) {\n\t        if (this.isObject(params)) {\n\t            rampTime = value;\n\t        } else if (this.isString(params)) {\n\t            var tmpObj = {};\n\t            tmpObj[params] = value;\n\t            params = tmpObj;\n\t        }\n\t        paramLoop:\n\t            for (var attr in params) {\n\t                value = params[attr];\n\t                var parent = this;\n\t                if (attr.indexOf('.') !== -1) {\n\t                    var attrSplit = attr.split('.');\n\t                    for (var i = 0; i < attrSplit.length - 1; i++) {\n\t                        parent = parent[attrSplit[i]];\n\t                        if (parent instanceof Tone) {\n\t                            attrSplit.splice(0, i + 1);\n\t                            var innerParam = attrSplit.join('.');\n\t                            parent.set(innerParam, value);\n\t                            continue paramLoop;\n\t                        }\n\t                    }\n\t                    attr = attrSplit[attrSplit.length - 1];\n\t                }\n\t                var param = parent[attr];\n\t                if (this.isUndef(param)) {\n\t                    continue;\n\t                }\n\t                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {\n\t                    if (param.value !== value) {\n\t                        if (this.isUndef(rampTime)) {\n\t                            param.value = value;\n\t                        } else {\n\t                            param.rampTo(value, rampTime);\n\t                        }\n\t                    }\n\t                } else if (param instanceof AudioParam) {\n\t                    if (param.value !== value) {\n\t                        param.value = value;\n\t                    }\n\t                } else if (param instanceof Tone) {\n\t                    param.set(value);\n\t                } else if (param !== value) {\n\t                    parent[attr] = value;\n\t                }\n\t            }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the object's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @example\n\t\t * osc.get();\n\t\t * //returns {\"type\" : \"sine\", \"frequency\" : 440, ...etc}\n\t\t *  @example\n\t\t * osc.get(\"type\");\n\t\t * //returns { \"type\" : \"sine\"}\n\t\t * @example\n\t\t * //use dot notation to access deep properties\n\t\t * synth.get([\"envelope.attack\", \"envelope.release\"]);\n\t\t * //returns {\"envelope\" : {\"attack\" : 0.2, \"release\" : 0.4}}\n\t\t *  @param {Array=|string|undefined} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t                  all available.\n\t\t *  @returns {Object}\n\t\t */\n\t    Tone.prototype.get = function (params) {\n\t        if (this.isUndef(params)) {\n\t            params = this._collectDefaults(this.constructor);\n\t        } else if (this.isString(params)) {\n\t            params = [params];\n\t        }\n\t        var ret = {};\n\t        for (var i = 0; i < params.length; i++) {\n\t            var attr = params[i];\n\t            var parent = this;\n\t            var subRet = ret;\n\t            if (attr.indexOf('.') !== -1) {\n\t                var attrSplit = attr.split('.');\n\t                for (var j = 0; j < attrSplit.length - 1; j++) {\n\t                    var subAttr = attrSplit[j];\n\t                    subRet[subAttr] = subRet[subAttr] || {};\n\t                    subRet = subRet[subAttr];\n\t                    parent = parent[subAttr];\n\t                }\n\t                attr = attrSplit[attrSplit.length - 1];\n\t            }\n\t            var param = parent[attr];\n\t            if (this.isObject(params[attr])) {\n\t                subRet[attr] = param.get();\n\t            } else if (Tone.Signal && param instanceof Tone.Signal) {\n\t                subRet[attr] = param.value;\n\t            } else if (Tone.Param && param instanceof Tone.Param) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof AudioParam) {\n\t                subRet[attr] = param.value;\n\t            } else if (param instanceof Tone) {\n\t                subRet[attr] = param.get();\n\t            } else if (!this.isFunction(param) && !this.isUndef(param)) {\n\t                subRet[attr] = param;\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  collect all of the default attributes in one\n\t\t *  @private\n\t\t *  @param {function} constr the constructor to find the defaults from\n\t\t *  @return {Array} all of the attributes which belong to the class\n\t\t */\n\t    Tone.prototype._collectDefaults = function (constr) {\n\t        var ret = [];\n\t        if (!this.isUndef(constr.defaults)) {\n\t            ret = Object.keys(constr.defaults);\n\t        }\n\t        if (!this.isUndef(constr._super)) {\n\t            var superDefs = this._collectDefaults(constr._super);\n\t            //filter out repeats\n\t            for (var i = 0; i < superDefs.length; i++) {\n\t                if (ret.indexOf(superDefs[i]) === -1) {\n\t                    ret.push(superDefs[i]);\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  @returns {string} returns the name of the class as a string\n\t\t */\n\t    Tone.prototype.toString = function () {\n\t        for (var className in Tone) {\n\t            var isLetter = className[0].match(/^[A-Z]$/);\n\t            var sameConstructor = Tone[className] === this.constructor;\n\t            if (this.isFunction(Tone[className]) && isLetter && sameConstructor) {\n\t                return className;\n\t            }\n\t        }\n\t        return 'Tone';\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCLASS VARS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The number of inputs feeding into the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfInputs', {\n\t        get: function () {\n\t            if (this.input) {\n\t                if (this.isArray(this.input)) {\n\t                    return this.input.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of outputs coming out of the AudioNode. \n\t\t *  For source nodes, this will be 0.\n\t\t *  @memberOf Tone#\n\t\t *  @name numberOfInputs\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'numberOfOutputs', {\n\t        get: function () {\n\t            if (this.output) {\n\t                if (this.isArray(this.output)) {\n\t                    return this.output.length;\n\t                } else {\n\t                    return 1;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONNECTIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.dispose = function () {\n\t        if (!this.isUndef(this.input)) {\n\t            if (this.input instanceof AudioNode) {\n\t                this.input.disconnect();\n\t            }\n\t            this.input = null;\n\t        }\n\t        if (!this.isUndef(this.output)) {\n\t            if (this.output instanceof AudioNode) {\n\t                this.output.disconnect();\n\t            }\n\t            this.output = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode\n\t\t *  @param  {Tone | AudioParam | AudioNode} unit \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connect = function (unit, outputNum, inputNum) {\n\t        if (Array.isArray(this.output)) {\n\t            outputNum = this.defaultArg(outputNum, 0);\n\t            this.output[outputNum].connect(unit, 0, inputNum);\n\t        } else {\n\t            this.output.connect(unit, outputNum, inputNum);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  disconnect the output\n\t\t *  @param {Number|AudioNode} output Either the output index to disconnect\n\t\t *                                   if the output is an array, or the\n\t\t *                                   node to disconnect from.\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.disconnect = function (destination, outputNum, inputNum) {\n\t        if (this.isArray(this.output)) {\n\t            if (this.isNumber(destination)) {\n\t                this.output[destination].disconnect();\n\t            } else {\n\t                outputNum = this.defaultArg(outputNum, 0);\n\t                this.output[outputNum].disconnect(destination, 0, inputNum);\n\t            }\n\t        } else {\n\t            this.output.disconnect.apply(this.output, arguments);\n\t        }\n\t    };\n\t    /**\n\t\t *  connect together all of the arguments in series\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.connectSeries = function () {\n\t        if (arguments.length > 1) {\n\t            var currentUnit = arguments[0];\n\t            for (var i = 1; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Connect the output of this node to the rest of the nodes in series.\n\t\t *  @example\n\t\t *  //connect a node to an effect, panVol and then to the master output\n\t\t *  node.chain(effect, panVol, Tone.Master);\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.chain = function () {\n\t        if (arguments.length > 0) {\n\t            var currentUnit = this;\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                var toUnit = arguments[i];\n\t                currentUnit.connect(toUnit);\n\t                currentUnit = toUnit;\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the output of this node to the rest of the nodes in parallel.\n\t\t *  @param {...AudioParam|Tone|AudioNode} nodes\n\t\t *  @returns {Tone} this\n\t\t */\n\t    Tone.prototype.fan = function () {\n\t        if (arguments.length > 0) {\n\t            for (var i = 0; i < arguments.length; i++) {\n\t                this.connect(arguments[i]);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    //give native nodes chain and fan methods\n\t    AudioNode.prototype.chain = Tone.prototype.chain;\n\t    AudioNode.prototype.fan = Tone.prototype.fan;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUTILITIES / HELPERS / MATHS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  If the `given` parameter is undefined, use the `fallback`. \n\t\t *  If both `given` and `fallback` are object literals, it will\n\t\t *  return a deep copy which includes all of the parameters from both \n\t\t *  objects. If a parameter is undefined in given, it will return\n\t\t *  the fallback property. \n\t\t *  <br><br>\n\t\t *  WARNING: if object is self referential, it will go into an an \n\t\t *  infinite recursive loop.\n\t\t *  \n\t\t *  @param  {*} given    \n\t\t *  @param  {*} fallback \n\t\t *  @return {*}          \n\t\t */\n\t    Tone.prototype.defaultArg = function (given, fallback) {\n\t        if (this.isObject(given) && this.isObject(fallback)) {\n\t            var ret = {};\n\t            //make a deep copy of the given object\n\t            for (var givenProp in given) {\n\t                ret[givenProp] = this.defaultArg(fallback[givenProp], given[givenProp]);\n\t            }\n\t            for (var fallbackProp in fallback) {\n\t                ret[fallbackProp] = this.defaultArg(given[fallbackProp], fallback[fallbackProp]);\n\t            }\n\t            return ret;\n\t        } else {\n\t            return this.isUndef(given) ? fallback : given;\n\t        }\n\t    };\n\t    /**\n\t\t *  returns the args as an options object with given arguments\n\t\t *  mapped to the names provided. \n\t\t *\n\t\t *  if the args given is an array containing only one object, it is assumed\n\t\t *  that that's already the options object and will just return it. \n\t\t *  \n\t\t *  @param  {Array} values  the 'arguments' object of the function\n\t\t *  @param  {Array} keys the names of the arguments as they\n\t\t *                                 should appear in the options object\n\t\t *  @param {Object=} defaults optional defaults to mixin to the returned \n\t\t *                            options object                              \n\t\t *  @return {Object}       the options object with the names mapped to the arguments\n\t\t */\n\t    Tone.prototype.optionsObject = function (values, keys, defaults) {\n\t        var options = {};\n\t        if (values.length === 1 && this.isObject(values[0])) {\n\t            options = values[0];\n\t        } else {\n\t            for (var i = 0; i < keys.length; i++) {\n\t                options[keys[i]] = values[i];\n\t            }\n\t        }\n\t        if (!this.isUndef(defaults)) {\n\t            return this.defaultArg(options, defaults);\n\t        } else {\n\t            return options;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // TYPE CHECKING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  test if the arg is undefined\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is undefined\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isUndef = function (val) {\n\t        return typeof val === 'undefined';\n\t    };\n\t    /**\n\t\t *  test if the arg is a function\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a function\n\t\t *  @function\n\t\t */\n\t    Tone.prototype.isFunction = function (val) {\n\t        return typeof val === 'function';\n\t    };\n\t    /**\n\t\t *  Test if the argument is a number.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a number\n\t\t */\n\t    Tone.prototype.isNumber = function (arg) {\n\t        return typeof arg === 'number';\n\t    };\n\t    /**\n\t\t *  Test if the given argument is an object literal (i.e. `{}`);\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an object literal.\n\t\t */\n\t    Tone.prototype.isObject = function (arg) {\n\t        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;\n\t    };\n\t    /**\n\t\t *  Test if the argument is a boolean.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a boolean\n\t\t */\n\t    Tone.prototype.isBoolean = function (arg) {\n\t        return typeof arg === 'boolean';\n\t    };\n\t    /**\n\t\t *  Test if the argument is an Array\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is an array\n\t\t */\n\t    Tone.prototype.isArray = function (arg) {\n\t        return Array.isArray(arg);\n\t    };\n\t    /**\n\t\t *  Test if the argument is a string.\n\t\t *  @param {*} arg the argument to test\n\t\t *  @returns {boolean} true if the arg is a string\n\t\t */\n\t    Tone.prototype.isString = function (arg) {\n\t        return typeof arg === 'string';\n\t    };\n\t    /**\n\t\t *  An empty function.\n\t\t *  @static\n\t\t */\n\t    Tone.noOp = function () {\n\t    };\n\t    /**\n\t\t *  Make the property not writable. Internal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make not writable\n\t\t */\n\t    Tone.prototype._readOnly = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._readOnly(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, {\n\t                writable: false,\n\t                enumerable: true\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  Make an attribute writeable. Interal use only. \n\t\t *  @private\n\t\t *  @param  {string}  property  the property to make writable\n\t\t */\n\t    Tone.prototype._writable = function (property) {\n\t        if (Array.isArray(property)) {\n\t            for (var i = 0; i < property.length; i++) {\n\t                this._writable(property[i]);\n\t            }\n\t        } else {\n\t            Object.defineProperty(this, property, { writable: true });\n\t        }\n\t    };\n\t    /**\n\t\t * Possible play states. \n\t\t * @enum {string}\n\t\t */\n\t    Tone.State = {\n\t        Started: 'started',\n\t        Stopped: 'stopped',\n\t        Paused: 'paused'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Equal power gain scale. Good for cross-fading.\n\t\t *  @param  {NormalRange} percent (0-1)\n\t\t *  @return {Number}         output gain (0-1)\n\t\t */\n\t    Tone.prototype.equalPowerScale = function (percent) {\n\t        var piFactor = 0.5 * Math.PI;\n\t        return Math.sin(percent * piFactor);\n\t    };\n\t    /**\n\t\t *  Convert decibels into gain.\n\t\t *  @param  {Decibels} db\n\t\t *  @return {Number}   \n\t\t */\n\t    Tone.prototype.dbToGain = function (db) {\n\t        return Math.pow(2, db / 6);\n\t    };\n\t    /**\n\t\t *  Convert gain to decibels.\n\t\t *  @param  {Number} gain (0-1)\n\t\t *  @return {Decibels}   \n\t\t */\n\t    Tone.prototype.gainToDb = function (gain) {\n\t        return 20 * (Math.log(gain) / Math.LN10);\n\t    };\n\t    /**\n\t\t *  Convert an interval (in semitones) to a frequency ratio.\n\t\t *  @param  {Interval} interval the number of semitones above the base note\n\t\t *  @return {number}          the frequency ratio\n\t\t *  @example\n\t\t * tone.intervalToFrequencyRatio(0); // 1\n\t\t * tone.intervalToFrequencyRatio(12); // 2\n\t\t * tone.intervalToFrequencyRatio(-12); // 0.5\n\t\t */\n\t    Tone.prototype.intervalToFrequencyRatio = function (interval) {\n\t        return Math.pow(2, interval / 12);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTIMING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t */\n\t    Tone.prototype.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    /**\n\t\t *  Return the current time of the AudioContext clock.\n\t\t *  @return {Number} the currentTime from the AudioContext\n\t\t *  @static\n\t\t */\n\t    Tone.now = function () {\n\t        return Tone.context.now();\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINHERITANCE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  have a child inherit all of Tone's (or a parent's) prototype\n\t\t *  to inherit the parent's properties, make sure to call \n\t\t *  Parent.call(this) in the child's constructor\n\t\t *\n\t\t *  based on closure library's inherit function\n\t\t *\n\t\t *  @static\n\t\t *  @param  {function} \tchild  \n\t\t *  @param  {function=} parent (optional) parent to inherit from\n\t\t *                             if no parent is supplied, the child\n\t\t *                             will inherit from Tone\n\t\t */\n\t    Tone.extend = function (child, parent) {\n\t        if (Tone.prototype.isUndef(parent)) {\n\t            parent = Tone;\n\t        }\n\t        function TempConstructor() {\n\t        }\n\t        TempConstructor.prototype = parent.prototype;\n\t        child.prototype = new TempConstructor();\n\t        /** @override */\n\t        child.prototype.constructor = child;\n\t        child._super = parent;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tCONTEXT\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The private audio context shared by all Tone Nodes. \n\t\t *  @private\n\t\t *  @type {Tone.Context|undefined}\n\t\t */\n\t    var audioContext;\n\t    /**\n\t\t *  A static pointer to the audio context accessible as Tone.context. \n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone\n\t\t */\n\t    Object.defineProperty(Tone, 'context', {\n\t        get: function () {\n\t            return audioContext;\n\t        },\n\t        set: function (context) {\n\t            if (Tone.Context && context instanceof Tone.Context) {\n\t                audioContext = context;\n\t            } else {\n\t                audioContext = new Tone.Context(context);\n\t            }\n\t            //initialize the new audio context\n\t            if (Tone.Context) {\n\t                Tone.Context.emit('init', audioContext);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The AudioContext\n\t\t *  @type {Tone.Context}\n\t\t *  @name context\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'context', {\n\t        get: function () {\n\t            return Tone.context;\n\t        }\n\t    });\n\t    /**\n\t\t *  Tone automatically creates a context on init, but if you are working\n\t\t *  with other libraries which also create an AudioContext, it can be\n\t\t *  useful to set your own. If you are going to set your own context, \n\t\t *  be sure to do it at the start of your code, before creating any objects.\n\t\t *  @static\n\t\t *  @param {AudioContext} ctx The new audio context to set\n\t\t */\n\t    Tone.setContext = function (ctx) {\n\t        Tone.context = ctx;\n\t    };\n\t    /**\n\t\t *  The number of seconds of 1 processing block (128 samples)\n\t\t *  @type {Number}\n\t\t *  @name blockTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'blockTime', {\n\t        get: function () {\n\t            return 128 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  The duration in seconds of one sample.\n\t\t *  @type {Number}\n\t\t *  @name sampleTime\n\t\t *  @memberOf Tone#\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.prototype, 'sampleTime', {\n\t        get: function () {\n\t            return 1 / this.context.sampleRate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Whether or not all the technologies that Tone.js relies on are supported by the current browser. \n\t\t *  @type {Boolean}\n\t\t *  @name supported\n\t\t *  @memberOf Tone\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone, 'supported', {\n\t        get: function () {\n\t            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');\n\t            var hasPromises = window.hasOwnProperty('Promise');\n\t            var hasWorkers = window.hasOwnProperty('Worker');\n\t            return hasAudioContext && hasPromises && hasWorkers;\n\t        }\n\t    });\n\t    Tone.version = 'r10';\n\t    // allow optional silencing of this log\n\t    if (!window.TONE_SILENCE_VERSION_LOGGING) {\n\t        console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');\n\t    }\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for all Signals. Used Internally. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.SignalBase = function () {\n\t    };\n\t    Tone.extend(Tone.SignalBase);\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {\n\t        //zero it out so that the signal can have full control\n\t        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor || Tone.TimelineSignal && Tone.TimelineSignal === node.constructor) {\n\t            //cancel changes\n\t            node._param.cancelScheduledValues(0);\n\t            //reset the value\n\t            node._param.value = 0;\n\t            //mark the value as overridden\n\t            node.overridden = true;\n\t        } else if (node instanceof AudioParam) {\n\t            node.cancelScheduledValues(0);\n\t            node.value = 0;\n\t        }\n\t        Tone.prototype.connect.call(this, node, outputNumber, inputNumber);\n\t        return this;\n\t    };\n\t    return Tone.SignalBase;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Wraps the native Web Audio API \n\t\t *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {function|Array|Number} mapping The function used to define the values. \n\t\t *                                    The mapping function should take two arguments: \n\t\t *                                    the first is the value at the current position \n\t\t *                                    and the second is the array position. \n\t\t *                                    If the argument is an array, that array will be\n\t\t *                                    set as the wave shaping function. The input\n\t\t *                                    signal is an AudioRange [-1, 1] value and the output\n\t\t *                                    signal can take on any numerical values. \n\t\t *                                    \n\t\t *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.\n\t\t *  @example\n\t\t * var timesTwo = new Tone.WaveShaper(function(val){\n\t\t * \treturn val * 2;\n\t\t * }, 2048);\n\t\t *  @example\n\t\t * //a waveshaper can also be constructed with an array of values\n\t\t * var invert = new Tone.WaveShaper([1, -1]);\n\t\t */\n\t    Tone.WaveShaper = function (mapping, bufferLen) {\n\t        /**\n\t\t\t *  the waveshaper\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = this.input = this.output = this.context.createWaveShaper();\n\t        /**\n\t\t\t *  the waveshapers curve\n\t\t\t *  @type {Float32Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._curve = null;\n\t        if (Array.isArray(mapping)) {\n\t            this.curve = mapping;\n\t        } else if (isFinite(mapping) || this.isUndef(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(mapping, 1024));\n\t        } else if (this.isFunction(mapping)) {\n\t            this._curve = new Float32Array(this.defaultArg(bufferLen, 1024));\n\t            this.setMap(mapping);\n\t        }\n\t    };\n\t    Tone.extend(Tone.WaveShaper, Tone.SignalBase);\n\t    /**\n\t\t *  Uses a mapping function to set the value of the curve. \n\t\t *  @param {function} mapping The function used to define the values. \n\t\t *                            The mapping function take two arguments: \n\t\t *                            the first is the value at the current position \n\t\t *                            which goes from -1 to 1 over the number of elements\n\t\t *                            in the curve array. The second argument is the array position. \n\t\t *  @returns {Tone.WaveShaper} this\n\t\t *  @example\n\t\t * //map the input signal from [-1, 1] to [0, 10]\n\t\t * shaper.setMap(function(val, index){\n\t\t * \treturn (val + 1) * 5;\n\t\t * })\n\t\t */\n\t    Tone.WaveShaper.prototype.setMap = function (mapping) {\n\t        for (var i = 0, len = this._curve.length; i < len; i++) {\n\t            var normalized = i / (len - 1) * 2 - 1;\n\t            this._curve[i] = mapping(normalized, i);\n\t        }\n\t        this._shaper.curve = this._curve;\n\t        return this;\n\t    };\n\t    /**\n\t\t * The array to set as the waveshaper curve. For linear curves\n\t\t * array length does not make much difference, but for complex curves\n\t\t * longer arrays will provide smoother interpolation. \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {Array}\n\t\t * @name curve\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {\n\t        get: function () {\n\t            return this._shaper.curve;\n\t        },\n\t        set: function (mapping) {\n\t            this._curve = new Float32Array(mapping);\n\t            this._shaper.curve = this._curve;\n\t        }\n\t    });\n\t    /**\n\t\t * Specifies what type of oversampling (if any) should be used when \n\t\t * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\". \n\t\t * @memberOf Tone.WaveShaper#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            if ([\n\t                    'none',\n\t                    '2x',\n\t                    '4x'\n\t                ].indexOf(oversampling) !== -1) {\n\t                this._shaper.oversample = oversampling;\n\t            } else {\n\t                throw new RangeError('Tone.WaveShaper: oversampling must be either \\'none\\', \\'2x\\', or \\'4x\\'');\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.WaveShaper} this\n\t\t */\n\t    Tone.WaveShaper.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.disconnect();\n\t        this._shaper = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.WaveShaper;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TimeBase is a flexible encoding of time\n\t\t *         which can be evaluated to and from a string.\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *  @extends {Tone}\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @example\n\t\t * Tone.TimeBase(4, \"n\")\n\t\t * Tone.TimeBase(2, \"t\")\n\t\t * Tone.TimeBase(\"2t\").add(\"1m\")\n\t\t * Tone.TimeBase(\"2t + 1m\");\n\t\t */\n\t    Tone.TimeBase = function (val, units) {\n\t        //allows it to be constructed with or without 'new'\n\t        if (this instanceof Tone.TimeBase) {\n\t            /**\n\t\t\t\t *  Any expressions parsed from the Time\n\t\t\t\t *  @type  {Array}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._expr = this._noOp;\n\t            if (val instanceof Tone.TimeBase) {\n\t                this.copy(val);\n\t            } else if (!this.isUndef(units) || this.isNumber(val)) {\n\t                //default units\n\t                units = this.defaultArg(units, this._defaultUnits);\n\t                var method = this._primaryExpressions[units].method;\n\t                this._expr = method.bind(this, val);\n\t            } else if (this.isString(val)) {\n\t                this.set(val);\n\t            } else if (this.isUndef(val)) {\n\t                //default expression\n\t                this._expr = this._defaultExpr();\n\t            }\n\t        } else {\n\t            return new Tone.TimeBase(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TimeBase);\n\t    /**\n\t\t *  Repalce the current time value with the value\n\t\t *  given by the expression string.\n\t\t *  @param  {String}  exprString\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.set = function (exprString) {\n\t        this._expr = this._parseExprString(exprString);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Return a clone of the TimeBase object.\n\t\t *  @return  {Tone.TimeBase} The new cloned Tone.TimeBase\n\t\t */\n\t    Tone.TimeBase.prototype.clone = function () {\n\t        var instance = new this.constructor();\n\t        instance.copy(this);\n\t        return instance;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.TimeBase} time\n\t\t *  @return  {TimeBase}\n\t\t */\n\t    Tone.TimeBase.prototype.copy = function (time) {\n\t        var val = time._expr();\n\t        return this.set(val);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tABSTRACT SYNTAX TREE PARSER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  All the primary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._primaryExpressions = {\n\t        'n': {\n\t            regexp: /^(\\d+)n/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                if (value === 1) {\n\t                    return this._beatsToUnits(this._timeSignature());\n\t                } else {\n\t                    return this._beatsToUnits(4 / value);\n\t                }\n\t            }\n\t        },\n\t        't': {\n\t            regexp: /^(\\d+)t/i,\n\t            method: function (value) {\n\t                value = parseInt(value);\n\t                return this._beatsToUnits(8 / (parseInt(value) * 3));\n\t            }\n\t        },\n\t        'm': {\n\t            regexp: /^(\\d+)m/i,\n\t            method: function (value) {\n\t                return this._beatsToUnits(parseInt(value) * this._timeSignature());\n\t            }\n\t        },\n\t        'i': {\n\t            regexp: /^(\\d+)i/i,\n\t            method: function (value) {\n\t                return this._ticksToUnits(parseInt(value));\n\t            }\n\t        },\n\t        'hz': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)hz/i,\n\t            method: function (value) {\n\t                return this._frequencyToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'tr': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t            method: function (m, q, s) {\n\t                var total = 0;\n\t                if (m && m !== '0') {\n\t                    total += this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t                }\n\t                if (q && q !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(q));\n\t                }\n\t                if (s && s !== '0') {\n\t                    total += this._beatsToUnits(parseFloat(s) / 4);\n\t                }\n\t                return total;\n\t            }\n\t        },\n\t        's': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?s)/,\n\t            method: function (value) {\n\t                return this._secondsToUnits(parseFloat(value));\n\t            }\n\t        },\n\t        'samples': {\n\t            regexp: /^(\\d+)samples/,\n\t            method: function (value) {\n\t                return parseInt(value) / this.context.sampleRate;\n\t            }\n\t        },\n\t        'default': {\n\t            regexp: /^(\\d+(?:\\.\\d+)?)/,\n\t            method: function (value) {\n\t                return this._primaryExpressions[this._defaultUnits].method.call(this, value);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the binary expressions that TimeBase can accept.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._binaryExpressions = {\n\t        '+': {\n\t            regexp: /^\\+/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() + rh();\n\t            }\n\t        },\n\t        '-': {\n\t            regexp: /^\\-/,\n\t            precedence: 2,\n\t            method: function (lh, rh) {\n\t                return lh() - rh();\n\t            }\n\t        },\n\t        '*': {\n\t            regexp: /^\\*/,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() * rh();\n\t            }\n\t        },\n\t        '/': {\n\t            regexp: /^\\//,\n\t            precedence: 1,\n\t            method: function (lh, rh) {\n\t                return lh() / rh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  All the unary expressions.\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._unaryExpressions = {\n\t        'neg': {\n\t            regexp: /^\\-/,\n\t            method: function (lh) {\n\t                return -lh();\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Syntactic glue which holds expressions together\n\t\t *  @private\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.TimeBase.prototype._syntaxGlue = {\n\t        '(': { regexp: /^\\(/ },\n\t        ')': { regexp: /^\\)/ }\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr, this);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr, context) {\n\t            var expressions = [\n\t                '_binaryExpressions',\n\t                '_unaryExpressions',\n\t                '_primaryExpressions',\n\t                '_syntaxGlue'\n\t            ];\n\t            for (var i = 0; i < expressions.length; i++) {\n\t                var group = context[expressions[i]];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            method: op.method,\n\t                            precedence: op.precedence,\n\t                            regexp: op.regexp,\n\t                            value: match[0]\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Given a token, find the value within the groupName\n\t\t *  @param {Object} token\n\t\t *  @param {String} groupName\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._matchGroup = function (token, group, prec) {\n\t        var ret = false;\n\t        if (!this.isUndef(token)) {\n\t            for (var opName in group) {\n\t                var op = group[opName];\n\t                if (op.regexp.test(token.value)) {\n\t                    if (!this.isUndef(prec)) {\n\t                        if (op.precedence === prec) {\n\t                            return op;\n\t                        }\n\t                    } else {\n\t                        return op;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return ret;\n\t    };\n\t    /**\n\t\t *  Match a binary expression given the token and the precedence\n\t\t *  @param {Lexer} lexer\n\t\t *  @param {Number} precedence\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseBinary = function (lexer, precedence) {\n\t        if (this.isUndef(precedence)) {\n\t            precedence = 2;\n\t        }\n\t        var expr;\n\t        if (precedence < 0) {\n\t            expr = this._parseUnary(lexer);\n\t        } else {\n\t            expr = this._parseBinary(lexer, precedence - 1);\n\t        }\n\t        var token = lexer.peek();\n\t        while (token && this._matchGroup(token, this._binaryExpressions, precedence)) {\n\t            token = lexer.next();\n\t            expr = token.method.bind(this, expr, this._parseBinary(lexer, precedence - 1));\n\t            token = lexer.peek();\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  Match a unary expression.\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseUnary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        var op = this._matchGroup(token, this._unaryExpressions);\n\t        if (op) {\n\t            token = lexer.next();\n\t            expr = this._parseUnary(lexer);\n\t            return op.method.bind(this, expr);\n\t        }\n\t        return this._parsePrimary(lexer);\n\t    };\n\t    /**\n\t\t *  Match a primary expression (a value).\n\t\t *  @param {Lexer} lexer\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parsePrimary = function (lexer) {\n\t        var token, expr;\n\t        token = lexer.peek();\n\t        if (this.isUndef(token)) {\n\t            throw new SyntaxError('Tone.TimeBase: Unexpected end of expression');\n\t        }\n\t        if (this._matchGroup(token, this._primaryExpressions)) {\n\t            token = lexer.next();\n\t            var matching = token.value.match(token.regexp);\n\t            return token.method.bind(this, matching[1], matching[2], matching[3]);\n\t        }\n\t        if (token && token.value === '(') {\n\t            lexer.next();\n\t            expr = this._parseBinary(lexer);\n\t            token = lexer.next();\n\t            if (!(token && token.value === ')')) {\n\t                throw new SyntaxError('Expected )');\n\t            }\n\t            return expr;\n\t        }\n\t        throw new SyntaxError('Tone.TimeBase: Cannot process token ' + token.value);\n\t    };\n\t    /**\n\t\t *  Recursively parse the string expression into a syntax tree.\n\t\t *  @param   {string} expr \n\t\t *  @return  {Function} the bound method to be evaluated later\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._parseExprString = function (exprString) {\n\t        if (!this.isString(exprString)) {\n\t            exprString = exprString.toString();\n\t        }\n\t        var lexer = this._tokenize(exprString);\n\t        var tree = this._parseBinary(lexer);\n\t        return tree;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tDEFAULTS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The initial expression value\n\t\t *  @return  {Number}  The initial value 0\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._noOp = function () {\n\t        return 0;\n\t    };\n\t    /**\n\t\t *  The default expression value if no arguments are given\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultExpr = function () {\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._defaultUnits = 's';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {\n\t        return 1 / freq;\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._beatsToUnits = function (beats) {\n\t        return 60 / Tone.Transport.bpm.value * beats;\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {\n\t        return seconds;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {\n\t        return ticks * (this._beatsToUnits(1) / Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time signature.\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._timeSignature = function () {\n\t        return Tone.Transport.timeSignature;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Push an expression onto the expression list\n\t\t *  @param  {Time}  val\n\t\t *  @param  {String}  type\n\t\t *  @param  {String}  units\n\t\t *  @return  {Tone.TimeBase} \n\t\t *  @private\n\t\t */\n\t    Tone.TimeBase.prototype._pushExpr = function (val, name, units) {\n\t        //create the expression\n\t        if (!(val instanceof Tone.TimeBase)) {\n\t            val = new this.constructor(val, units);\n\t        }\n\t        this._expr = this._binaryExpressions[name].method.bind(this, this._expr, val._expr);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add to the current value.\n\t\t *  @param  {Time}  val    The value to add\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").add(\"1m\"); //\"3m\"\n\t\t */\n\t    Tone.TimeBase.prototype.add = function (val, units) {\n\t        return this._pushExpr(val, '+', units);\n\t    };\n\t    /**\n\t\t *  Subtract the value from the current time.\n\t\t *  @param  {Time}  val    The value to subtract\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").sub(\"1m\"); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.sub = function (val, units) {\n\t        return this._pushExpr(val, '-', units);\n\t    };\n\t    /**\n\t\t *  Multiply the current value by the given time.\n\t\t *  @param  {Time}  val    The value to multiply\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").mult(\"2\"); //\"4m\"\n\t\t */\n\t    Tone.TimeBase.prototype.mult = function (val, units) {\n\t        return this._pushExpr(val, '*', units);\n\t    };\n\t    /**\n\t\t *  Divide the current value by the given time.\n\t\t *  @param  {Time}  val    The value to divide by\n\t\t *  @param  {String=}  units  Optional units to use with the value.\n\t\t *  @return  {Tone.TimeBase}  this\n\t\t *  @example\n\t\t * Tone.TimeBase(\"2m\").div(2); //\"1m\"\n\t\t */\n\t    Tone.TimeBase.prototype.div = function (val, units) {\n\t        return this._pushExpr(val, '/', units);\n\t    };\n\t    /**\n\t\t *  Evaluate the time value. Returns the time\n\t\t *  in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.TimeBase.prototype.valueOf = function () {\n\t        return this._expr();\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return {Tone.TimeBase} this\n\t\t */\n\t    Tone.TimeBase.prototype.dispose = function () {\n\t        this._expr = null;\n\t    };\n\t    return Tone.TimeBase;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Time is a primitive type for encoding Time values. \n\t\t *         Eventually all time values are evaluated to seconds\n\t\t *         using the `eval` method. Tone.Time can be constructed\n\t\t *         with or without the `new` keyword. Tone.Time can be passed\n\t\t *         into the parameter of any method which takes time as an argument. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * var t = Tone.Time(\"4n\");//encodes a quarter note\n\t\t * t.mult(4); // multiply that value by 4\n\t\t * t.toNotation(); //returns \"1m\"\n\t\t */\n\t    Tone.Time = function (val, units) {\n\t        if (this instanceof Tone.Time) {\n\t            /**\n\t\t\t\t *  If the current clock time should\n\t\t\t\t *  be added to the output\n\t\t\t\t *  @type  {Boolean}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._plusNow = false;\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Time(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Time, Tone.TimeBase);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Time.prototype._unaryExpressions = Object.create(Tone.TimeBase.prototype._unaryExpressions);\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            return Tone.Transport.nextSubdivision(rh());\n\t        }\n\t    };\n\t    /*\n\t\t *  Adds an additional unary expression\n\t\t *  which adds the current clock time.\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._unaryExpressions.now = {\n\t        regexp: /^\\+/,\n\t        method: function (lh) {\n\t            this._plusNow = true;\n\t            return lh();\n\t        }\n\t    };\n\t    /**\n\t\t *  Quantize the time by the given subdivision. Optionally add a\n\t\t *  percentage which will move the time value towards the ideal\n\t\t *  quantized value by that percentage. \n\t\t *  @param  {Number|Time}  val    The subdivision to quantize to\n\t\t *  @param  {NormalRange}  [percent=1]  Move the time value\n\t\t *                                   towards the quantized value by\n\t\t *                                   a percentage.\n\t\t *  @return  {Tone.Time}  this\n\t\t *  @example\n\t\t * Tone.Time(21).quantize(2) //returns 22\n\t\t * Tone.Time(0.6).quantize(\"4n\", 0.5) //returns 0.55\n\t\t */\n\t    Tone.Time.prototype.quantize = function (subdiv, percent) {\n\t        percent = this.defaultArg(percent, 1);\n\t        this._expr = function (expr, subdivision, percent) {\n\t            expr = expr();\n\t            subdivision = subdivision.toSeconds();\n\t            var multiple = Math.round(expr / subdivision);\n\t            var ideal = multiple * subdivision;\n\t            var diff = ideal - expr;\n\t            return expr + diff * percent;\n\t        }.bind(this, this._expr, new this.constructor(subdiv), percent);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Adds the clock time to the time expression at the \n\t\t *  moment of evaluation. \n\t\t *  @return  {Tone.Time}  this\n\t\t */\n\t    Tone.Time.prototype.addNow = function () {\n\t        this._plusNow = true;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @override\n\t\t *  Override the default value return when no arguments are passed in.\n\t\t *  The default value is 'now'\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._defaultExpr = function () {\n\t        this._plusNow = true;\n\t        return this._noOp;\n\t    };\n\t    /**\n\t\t *  Copies the value of time to this Time\n\t\t *  @param {Tone.Time} time\n\t\t *  @return  {Time}\n\t\t */\n\t    Tone.Time.prototype.copy = function (time) {\n\t        Tone.TimeBase.prototype.copy.call(this, time);\n\t        this._plusNow = time._plusNow;\n\t        return this;\n\t    };\n\t    //CONVERSIONS//////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert a Time to Notation. Values will be thresholded to the nearest 128th note. \n\t\t *  @return {Notation} \n\t\t *  @example\n\t\t * //if the Transport is at 120bpm:\n\t\t * Tone.Time(2).toNotation();//returns \"1m\"\n\t\t */\n\t    Tone.Time.prototype.toNotation = function () {\n\t        var time = this.toSeconds();\n\t        var testNotations = [\n\t            '1m',\n\t            '2n',\n\t            '4n',\n\t            '8n',\n\t            '16n',\n\t            '32n',\n\t            '64n',\n\t            '128n'\n\t        ];\n\t        var retNotation = this._toNotationHelper(time, testNotations);\n\t        //try the same thing but with tripelets\n\t        var testTripletNotations = [\n\t            '1m',\n\t            '2n',\n\t            '2t',\n\t            '4n',\n\t            '4t',\n\t            '8n',\n\t            '8t',\n\t            '16n',\n\t            '16t',\n\t            '32n',\n\t            '32t',\n\t            '64n',\n\t            '64t',\n\t            '128n'\n\t        ];\n\t        var retTripletNotation = this._toNotationHelper(time, testTripletNotations);\n\t        //choose the simpler expression of the two\n\t        if (retTripletNotation.split('+').length < retNotation.split('+').length) {\n\t            return retTripletNotation;\n\t        } else {\n\t            return retNotation;\n\t        }\n\t    };\n\t    /**\n\t\t *  Helper method for Tone.toNotation\n\t\t *  @param {Number} units \n\t\t *  @param {Array} testNotations\n\t\t *  @return {String}\n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._toNotationHelper = function (units, testNotations) {\n\t        //the threshold is the last value in the array\n\t        var threshold = this._notationToUnits(testNotations[testNotations.length - 1]);\n\t        var retNotation = '';\n\t        for (var i = 0; i < testNotations.length; i++) {\n\t            var notationTime = this._notationToUnits(testNotations[i]);\n\t            //account for floating point errors (i.e. round up if the value is 0.999999)\n\t            var multiple = units / notationTime;\n\t            var floatingPointError = 0.000001;\n\t            if (1 - multiple % 1 < floatingPointError) {\n\t                multiple += floatingPointError;\n\t            }\n\t            multiple = Math.floor(multiple);\n\t            if (multiple > 0) {\n\t                if (multiple === 1) {\n\t                    retNotation += testNotations[i];\n\t                } else {\n\t                    retNotation += multiple.toString() + '*' + testNotations[i];\n\t                }\n\t                units -= multiple * notationTime;\n\t                if (units < threshold) {\n\t                    break;\n\t                } else {\n\t                    retNotation += ' + ';\n\t                }\n\t            }\n\t        }\n\t        if (retNotation === '') {\n\t            retNotation = '0';\n\t        }\n\t        return retNotation;\n\t    };\n\t    /**\n\t\t *  Convert a notation value to the current units\n\t\t *  @param  {Notation}  notation \n\t\t *  @return  {Number} \n\t\t *  @private\n\t\t */\n\t    Tone.Time.prototype._notationToUnits = function (notation) {\n\t        var primaryExprs = this._primaryExpressions;\n\t        var notationExprs = [\n\t            primaryExprs.n,\n\t            primaryExprs.t,\n\t            primaryExprs.m\n\t        ];\n\t        for (var i = 0; i < notationExprs.length; i++) {\n\t            var expr = notationExprs[i];\n\t            var match = notation.match(expr.regexp);\n\t            if (match) {\n\t                return expr.method.call(this, match[1]);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the time encoded as Bars:Beats:Sixteenths.\n\t\t *  @return  {BarsBeatsSixteenths}\n\t\t */\n\t    Tone.Time.prototype.toBarsBeatsSixteenths = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.toSeconds() / quarterTime;\n\t        var measures = Math.floor(quarters / this._timeSignature());\n\t        var sixteenths = quarters % 1 * 4;\n\t        quarters = Math.floor(quarters) % this._timeSignature();\n\t        sixteenths = sixteenths.toString();\n\t        if (sixteenths.length > 3) {\n\t            sixteenths = parseFloat(sixteenths).toFixed(3);\n\t        }\n\t        var progress = [\n\t            measures,\n\t            quarters,\n\t            sixteenths\n\t        ];\n\t        return progress.join(':');\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Time.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Return the time in samples\n\t\t *  @return  {Samples}  \n\t\t */\n\t    Tone.Time.prototype.toSamples = function () {\n\t        return this.toSeconds() * this.context.sampleRate;\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t *  @example\n\t\t * Tone.Time(2).toFrequency(); //0.5\n\t\t */\n\t    Tone.Time.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.toSeconds = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in milliseconds.\n\t\t *  @return  {Milliseconds} \n\t\t */\n\t    Tone.Time.prototype.toMilliseconds = function () {\n\t        return this.toSeconds() * 1000;\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds} \n\t\t */\n\t    Tone.Time.prototype.valueOf = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? this.now() : 0);\n\t    };\n\t    return Tone.Time;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Frequency is a primitive type for encoding Frequency values. \n\t\t *         Eventually all time values are evaluated to hertz\n\t\t *         using the `eval` method. \n\t\t *  @constructor\n\t\t *  @extends {Tone.TimeBase}\n\t\t *  @param  {String|Number}  val    The time value.\n\t\t *  @param  {String=}  units  The units of the value.\n\t\t *  @example\n\t\t * Tone.Frequency(\"C3\") // 261\n\t\t * Tone.Frequency(38, \"midi\") //\n\t\t * Tone.Frequency(\"C3\").transpose(4);\n\t\t */\n\t    Tone.Frequency = function (val, units) {\n\t        if (this instanceof Tone.Frequency) {\n\t            Tone.TimeBase.call(this, val, units);\n\t        } else {\n\t            return new Tone.Frequency(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Frequency, Tone.TimeBase);\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT BASE EXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.Frequency.prototype._primaryExpressions = Object.create(Tone.TimeBase.prototype._primaryExpressions);\n\t    /*\n\t\t *  midi type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.midi = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n\t        method: function (value) {\n\t            return this.midiToFrequency(value);\n\t        }\n\t    };\n\t    /*\n\t\t *  note type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.note = {\n\t        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n\t        method: function (pitch, octave) {\n\t            var index = noteToScaleIndex[pitch.toLowerCase()];\n\t            var noteNumber = index + (parseInt(octave) + 1) * 12;\n\t            return this.midiToFrequency(noteNumber);\n\t        }\n\t    };\n\t    /*\n\t\t *  BeatsBarsSixteenths type primary expression\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._primaryExpressions.tr = {\n\t        regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n\t        method: function (m, q, s) {\n\t            var total = 1;\n\t            if (m && m !== '0') {\n\t                total *= this._beatsToUnits(this._timeSignature() * parseFloat(m));\n\t            }\n\t            if (q && q !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(q));\n\t            }\n\t            if (s && s !== '0') {\n\t                total *= this._beatsToUnits(parseFloat(s) / 4);\n\t            }\n\t            return total;\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEXPRESSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Transposes the frequency by the given number of semitones.\n\t\t *  @param  {Interval}  interval\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").transpose(3); //\"C5\"\n\t\t */\n\t    Tone.Frequency.prototype.transpose = function (interval) {\n\t        this._expr = function (expr, interval) {\n\t            var val = expr();\n\t            return val * this.intervalToFrequencyRatio(interval);\n\t        }.bind(this, this._expr, interval);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Takes an array of semitone intervals and returns\n\t\t *  an array of frequencies transposed by those intervals.\n\t\t *  @param  {Array}  intervals\n\t\t *  @return  {Tone.Frequency} this\n\t\t *  @example\n\t\t * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); //[\"A4\", \"C5\", \"E5\"]\n\t\t */\n\t    Tone.Frequency.prototype.harmonize = function (intervals) {\n\t        this._expr = function (expr, intervals) {\n\t            var val = expr();\n\t            var ret = [];\n\t            for (var i = 0; i < intervals.length; i++) {\n\t                ret[i] = val * this.intervalToFrequencyRatio(intervals[i]);\n\t            }\n\t            return ret;\n\t        }.bind(this, this._expr, intervals);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Return the value of the frequency as a MIDI note\n\t\t *  @return  {MIDI}\n\t\t *  @example\n\t\t * Tone.Frequency(\"C4\").toMidi(); //60\n\t\t */\n\t    Tone.Frequency.prototype.toMidi = function () {\n\t        return this.frequencyToMidi(this.valueOf());\n\t    };\n\t    /**\n\t\t *  Return the value of the frequency in Scientific Pitch Notation\n\t\t *  @return  {Note}\n\t\t *  @example\n\t\t * Tone.Frequency(69, \"midi\").toNote(); //\"A4\"\n\t\t */\n\t    Tone.Frequency.prototype.toNote = function () {\n\t        var freq = this.valueOf();\n\t        var log = Math.log(freq / Tone.Frequency.A4) / Math.LN2;\n\t        var noteNumber = Math.round(12 * log) + 57;\n\t        var octave = Math.floor(noteNumber / 12);\n\t        if (octave < 0) {\n\t            noteNumber += -12 * octave;\n\t        }\n\t        var noteName = scaleIndexToNote[noteNumber % 12];\n\t        return noteName + octave.toString();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.Frequency.prototype.toSeconds = function () {\n\t        return 1 / this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the value in Hertz\n\t\t *  @return  {Frequency}\n\t\t */\n\t    Tone.Frequency.prototype.toFrequency = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the duration of one cycle in ticks\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.Frequency.prototype.toTicks = function () {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = this.valueOf() / quarterTime;\n\t        return Math.floor(quarters * Tone.Transport.PPQ);\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tUNIT CONVERSIONS HELPERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value of a frequency in the current units\n\t\t *  @param {Frequency} freq\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._frequencyToUnits = function (freq) {\n\t        return freq;\n\t    };\n\t    /**\n\t\t *  Returns the value of a tick in the current time units\n\t\t *  @param {Ticks} ticks\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._ticksToUnits = function (ticks) {\n\t        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));\n\t    };\n\t    /**\n\t\t *  Return the value of the beats in the current units\n\t\t *  @param {Number} beats\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._beatsToUnits = function (beats) {\n\t        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);\n\t    };\n\t    /**\n\t\t *  Returns the value of a second in the current units\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._secondsToUnits = function (seconds) {\n\t        return 1 / seconds;\n\t    };\n\t    /**\n\t\t *  The default units if none are given.\n\t\t *  @private\n\t\t */\n\t    Tone.Frequency.prototype._defaultUnits = 'hz';\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tFREQUENCY CONVERSIONS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Note to scale index\n\t\t *  @type  {Object}\n\t\t */\n\t    var noteToScaleIndex = {\n\t        'cbb': -2,\n\t        'cb': -1,\n\t        'c': 0,\n\t        'c#': 1,\n\t        'cx': 2,\n\t        'dbb': 0,\n\t        'db': 1,\n\t        'd': 2,\n\t        'd#': 3,\n\t        'dx': 4,\n\t        'ebb': 2,\n\t        'eb': 3,\n\t        'e': 4,\n\t        'e#': 5,\n\t        'ex': 6,\n\t        'fbb': 3,\n\t        'fb': 4,\n\t        'f': 5,\n\t        'f#': 6,\n\t        'fx': 7,\n\t        'gbb': 5,\n\t        'gb': 6,\n\t        'g': 7,\n\t        'g#': 8,\n\t        'gx': 9,\n\t        'abb': 7,\n\t        'ab': 8,\n\t        'a': 9,\n\t        'a#': 10,\n\t        'ax': 11,\n\t        'bbb': 9,\n\t        'bb': 10,\n\t        'b': 11,\n\t        'b#': 12,\n\t        'bx': 13\n\t    };\n\t    /**\n\t\t *  scale index to note (sharps)\n\t\t *  @type  {Array}\n\t\t */\n\t    var scaleIndexToNote = [\n\t        'C',\n\t        'C#',\n\t        'D',\n\t        'D#',\n\t        'E',\n\t        'F',\n\t        'F#',\n\t        'G',\n\t        'G#',\n\t        'A',\n\t        'A#',\n\t        'B'\n\t    ];\n\t    /**\n\t\t *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)\n\t\t *  A4's values in Hertz. \n\t\t *  @type {Frequency}\n\t\t *  @static\n\t\t */\n\t    Tone.Frequency.A4 = 440;\n\t    /**\n\t\t *  Convert a MIDI note to frequency value. \n\t\t *  @param  {MIDI} midi The midi number to convert.\n\t\t *  @return {Frequency} the corresponding frequency value\n\t\t *  @example\n\t\t * tone.midiToFrequency(69); // returns 440\n\t\t */\n\t    Tone.Frequency.prototype.midiToFrequency = function (midi) {\n\t        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);\n\t    };\n\t    /**\n\t\t *  Convert a frequency value to a MIDI note.\n\t\t *  @param {Frequency} frequency The value to frequency value to convert.\n\t\t *  @returns  {MIDI}\n\t\t *  @example\n\t\t * tone.midiToFrequency(440); // returns 69\n\t\t */\n\t    Tone.Frequency.prototype.frequencyToMidi = function (frequency) {\n\t        return 69 + 12 * Math.log(frequency / Tone.Frequency.A4) / Math.LN2;\n\t    };\n\t    return Tone.Frequency;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.TransportTime is a the time along the Transport's\n\t\t *         timeline. It is similar to Tone.Time, but instead of evaluating\n\t\t *         against the AudioContext's clock, it is evaluated against\n\t\t *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n\t\t *  @constructor\n\t\t *  @param  {Time}  val    The time value as a number or string\n\t\t *  @param  {String=}  units  Unit values\n\t\t *  @extends {Tone.Time}\n\t\t */\n\t    Tone.TransportTime = function (val, units) {\n\t        if (this instanceof Tone.TransportTime) {\n\t            Tone.Time.call(this, val, units);\n\t        } else {\n\t            return new Tone.TransportTime(val, units);\n\t        }\n\t    };\n\t    Tone.extend(Tone.TransportTime, Tone.Time);\n\t    //clone the expressions so that \n\t    //we can add more without modifying the original\n\t    Tone.TransportTime.prototype._unaryExpressions = Object.create(Tone.Time.prototype._unaryExpressions);\n\t    /**\n\t\t *  Adds an additional unary expression\n\t\t *  which quantizes values to the next subdivision\n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._unaryExpressions.quantize = {\n\t        regexp: /^@/,\n\t        method: function (rh) {\n\t            var subdivision = this._secondsToTicks(rh());\n\t            var multiple = Math.ceil(Tone.Transport.ticks / subdivision);\n\t            return this._ticksToUnits(multiple * subdivision);\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert seconds into ticks\n\t\t *  @param {Seconds} seconds\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.TransportTime.prototype._secondsToTicks = function (seconds) {\n\t        var quarterTime = this._beatsToUnits(1);\n\t        var quarters = seconds / quarterTime;\n\t        return Math.round(quarters * Tone.Transport.PPQ);\n\t    };\n\t    /**\n\t\t *  Evaluate the time expression. Returns values in ticks\n\t\t *  @return {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.valueOf = function () {\n\t        var val = this._secondsToTicks(this._expr());\n\t        return val + (this._plusNow ? Tone.Transport.ticks : 0);\n\t    };\n\t    /**\n\t\t *  Return the time in ticks.\n\t\t *  @return  {Ticks}\n\t\t */\n\t    Tone.TransportTime.prototype.toTicks = function () {\n\t        return this.valueOf();\n\t    };\n\t    /**\n\t\t *  Return the time in seconds.\n\t\t *  @return  {Seconds}\n\t\t */\n\t    Tone.TransportTime.prototype.toSeconds = function () {\n\t        var val = this._expr();\n\t        return val + (this._plusNow ? Tone.Transport.seconds : 0);\n\t    };\n\t    /**\n\t\t *  Return the time as a frequency value\n\t\t *  @return  {Frequency} \n\t\t */\n\t    Tone.TransportTime.prototype.toFrequency = function () {\n\t        return 1 / this.toSeconds();\n\t    };\n\t    return Tone.TransportTime;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Emitter gives classes which extend it\n\t\t *         the ability to listen for and emit events. \n\t\t *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n\t\t *         MIT (c) 2011 Jerome Etienne.\n\t\t *         \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Emitter = function () {\n\t        /**\n\t\t\t *  Contains all of the events.\n\t\t\t *  @private\n\t\t\t *  @type  {Object}\n\t\t\t */\n\t        this._events = {};\n\t    };\n\t    Tone.extend(Tone.Emitter);\n\t    /**\n\t\t *  Bind a callback to a specific event.\n\t\t *  @param  {String}    event     The name of the event to listen for.\n\t\t *  @param  {Function}  callback  The callback to invoke when the\n\t\t *                                event is emitted\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.on = function (event, callback) {\n\t        //split the event\n\t        var events = event.split(/\\W+/);\n\t        for (var i = 0; i < events.length; i++) {\n\t            var eventName = events[i];\n\t            if (!this._events.hasOwnProperty(eventName)) {\n\t                this._events[eventName] = [];\n\t            }\n\t            this._events[eventName].push(callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove the event listener.\n\t\t *  @param  {String}    event     The event to stop listening to.\n\t\t *  @param  {Function=}  callback  The callback which was bound to \n\t\t *                                the event with Tone.Emitter.on.\n\t\t *                                If no callback is given, all callbacks\n\t\t *                                events are removed.\n\t\t *  @return  {Tone.Emitter}    this\n\t\t */\n\t    Tone.Emitter.prototype.off = function (event, callback) {\n\t        var events = event.split(/\\W+/);\n\t        for (var ev = 0; ev < events.length; ev++) {\n\t            event = events[ev];\n\t            if (this._events.hasOwnProperty(event)) {\n\t                if (Tone.prototype.isUndef(callback)) {\n\t                    this._events[event] = [];\n\t                } else {\n\t                    var eventList = this._events[event];\n\t                    for (var i = 0; i < eventList.length; i++) {\n\t                        if (eventList[i] === callback) {\n\t                            eventList.splice(i, 1);\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Invoke all of the callbacks bound to the event\n\t\t *  with any arguments passed in. \n\t\t *  @param  {String}  event  The name of the event.\n\t\t *  @param {*...} args The arguments to pass to the functions listening.\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.emit = function (event) {\n\t        if (this._events) {\n\t            var args = Array.apply(null, arguments).slice(1);\n\t            if (this._events.hasOwnProperty(event)) {\n\t                var eventList = this._events[event];\n\t                for (var i = 0, len = eventList.length; i < len; i++) {\n\t                    eventList[i].apply(this, args);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add Emitter functions (on/off/emit) to the object\n\t\t *  @param  {Object|Function}  object  The object or class to extend.\n\t\t */\n\t    Tone.Emitter.mixin = function (object) {\n\t        var functions = [\n\t            'on',\n\t            'off',\n\t            'emit'\n\t        ];\n\t        object._events = {};\n\t        for (var i = 0; i < functions.length; i++) {\n\t            var func = functions[i];\n\t            var emitterFunc = Tone.Emitter.prototype[func];\n\t            object[func] = emitterFunc;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Emitter}  this\n\t\t */\n\t    Tone.Emitter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Emitter;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {\n\t        window.AudioContext = window.webkitAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native AudioContext.\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @param {AudioContext=} context optionally pass in a context\n\t\t */\n\t    Tone.Context = function (context) {\n\t        Tone.Emitter.call(this);\n\t        if (!context) {\n\t            context = new window.AudioContext();\n\t        }\n\t        this._context = context;\n\t        // extend all of the methods\n\t        for (var prop in this._context) {\n\t            this._defineProperty(this._context, prop);\n\t        }\n\t        ///////////////////////////////////////////////////////////////////////\n\t        // WORKER\n\t        ///////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The default latency hint\n\t\t\t *  @type  {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._latencyHint = 'interactive';\n\t        /**\n\t\t\t *  The amount of time events are scheduled\n\t\t\t *  into the future\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lookAhead = 0.1;\n\t        /**\n\t\t\t *  How often the update look runs\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._updateInterval = this._lookAhead / 3;\n\t        /**\n\t\t\t *  A reference to the actual computed update interval\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._computedUpdateInterval = 0;\n\t        /**\n\t\t\t *  The web worker which is used to update Tone.Clock\n\t\t\t *  @private\n\t\t\t *  @type  {WebWorker}\n\t\t\t */\n\t        this._worker = this._createWorker();\n\t        /**\n\t\t\t *  An object containing all of the constants AudioBufferSourceNodes\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._constants = {};\n\t    };\n\t    Tone.extend(Tone.Context, Tone.Emitter);\n\t    Tone.Emitter.mixin(Tone.Context);\n\t    /**\n\t\t *  Define a property on this Tone.Context. \n\t\t *  This is used to extend the native AudioContext\n\t\t *  @param  {AudioContext}  context\n\t\t *  @param  {String}  prop \n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._defineProperty = function (context, prop) {\n\t        if (this.isUndef(this[prop])) {\n\t            Object.defineProperty(this, prop, {\n\t                get: function () {\n\t                    if (typeof context[prop] === 'function') {\n\t                        return context[prop].bind(context);\n\t                    } else {\n\t                        return context[prop];\n\t                    }\n\t                },\n\t                set: function (val) {\n\t                    context[prop] = val;\n\t                }\n\t            });\n\t        }\n\t    };\n\t    /**\n\t\t *  The current audio context time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.Context.prototype.now = function () {\n\t        return this._context.currentTime;\n\t    };\n\t    /**\n\t\t *  Generate a web worker\n\t\t *  @return  {WebWorker}\n\t\t *  @private\n\t\t */\n\t    Tone.Context.prototype._createWorker = function () {\n\t        //URL Shim\n\t        window.URL = window.URL || window.webkitURL;\n\t        var blob = new Blob([//the initial timeout time\n\t            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback\n\t            'self.onmessage = function(msg){' + '\\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message\n\t            //and schedules a new tick\n\t            'function tick(){' + '\\tsetTimeout(tick, timeoutTime);' + '\\tself.postMessage(\\'tick\\');' + '}' + //call tick initially\n\t            'tick();']);\n\t        var blobUrl = URL.createObjectURL(blob);\n\t        var worker = new Worker(blobUrl);\n\t        worker.addEventListener('message', function () {\n\t            // tick the clock\n\t            this.emit('tick');\n\t        }.bind(this));\n\t        //lag compensation\n\t        worker.addEventListener('message', function () {\n\t            var now = this.now();\n\t            if (this.isNumber(this._lastUpdate)) {\n\t                var diff = now - this._lastUpdate;\n\t                this._computedUpdateInterval = Math.max(diff, this._computedUpdateInterval * 0.97);\n\t            }\n\t            this._lastUpdate = now;\n\t        }.bind(this));\n\t        return worker;\n\t    };\n\t    /**\n\t\t *  Generate a looped buffer at some constant value.\n\t\t *  @param  {Number}  val\n\t\t *  @return  {BufferSourceNode}\n\t\t */\n\t    Tone.Context.prototype.getConstant = function (val) {\n\t        if (this._constants[val]) {\n\t            return this._constants[val];\n\t        } else {\n\t            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n\t            var arr = buffer.getChannelData(0);\n\t            for (var i = 0; i < arr.length; i++) {\n\t                arr[i] = val;\n\t            }\n\t            var constant = this._context.createBufferSource();\n\t            constant.channelCount = 1;\n\t            constant.channelCountMode = 'explicit';\n\t            constant.buffer = buffer;\n\t            constant.loop = true;\n\t            constant.start(0);\n\t            this._constants[val] = constant;\n\t            return constant;\n\t        }\n\t    };\n\t    /**\n\t\t *  This is the time that the clock is falling behind\n\t\t *  the scheduled update interval. The Context automatically\n\t\t *  adjusts for the lag and schedules further in advance.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lag\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lag', {\n\t        get: function () {\n\t            var diff = this._computedUpdateInterval - this._updateInterval;\n\t            diff = Math.max(diff, 0);\n\t            return diff;\n\t        }\n\t    });\n\t    /**\n\t\t *  The amount of time in advance that events are scheduled.\n\t\t *  The lookAhead will adjust slightly in response to the \n\t\t *  measured update time to try to avoid clicks.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name lookAhead\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'lookAhead', {\n\t        get: function () {\n\t            return this._lookAhead;\n\t        },\n\t        set: function (lA) {\n\t            this._lookAhead = lA;\n\t        }\n\t    });\n\t    /**\n\t\t *  How often the Web Worker callback is invoked.\n\t\t *  This number corresponds to how responsive the scheduling\n\t\t *  can be. Context.updateInterval + Context.lookAhead gives you the\n\t\t *  total latency between scheduling an event and hearing it.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Context\n\t\t *  @name updateInterval\n\t\t *  @static\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {\n\t        get: function () {\n\t            return this._updateInterval;\n\t        },\n\t        set: function (interval) {\n\t            this._updateInterval = Math.max(interval, Tone.prototype.blockTime);\n\t            this._worker.postMessage(Math.max(interval * 1000, 1));\n\t        }\n\t    });\n\t    /**\n\t\t *  The type of playback, which affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @type {String|Seconds}\n\t\t *  @memberOf Tone.Context#\n\t\t *  @name latencyHint\n\t\t *  @static\n\t\t *  @example\n\t\t * //set the lookAhead to 0.3 seconds\n\t\t * Tone.context.latencyHint = 0.3;\n\t\t */\n\t    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return this._latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            var lookAhead = hint;\n\t            this._latencyHint = hint;\n\t            if (this.isString(hint)) {\n\t                switch (hint) {\n\t                case 'interactive':\n\t                    lookAhead = 0.1;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'playback':\n\t                    lookAhead = 0.8;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'balanced':\n\t                    lookAhead = 0.25;\n\t                    this._context.latencyHint = hint;\n\t                    break;\n\t                case 'fastest':\n\t                    lookAhead = 0.01;\n\t                    break;\n\t                }\n\t            }\n\t            this.lookAhead = lookAhead;\n\t            this.updateInterval = lookAhead / 3;\n\t        }\n\t    });\n\t    /**\n\t\t *  Shim all connect/disconnect and some deprecated methods which are still in\n\t\t *  some older implementations.\n\t\t *  @private\n\t\t */\n\t    function shimConnect() {\n\t        var nativeConnect = AudioNode.prototype.connect;\n\t        var nativeDisconnect = AudioNode.prototype.disconnect;\n\t        //replace the old connect method\n\t        function toneConnect(B, outNum, inNum) {\n\t            if (B.input) {\n\t                if (Array.isArray(B.input)) {\n\t                    if (Tone.prototype.isUndef(inNum)) {\n\t                        inNum = 0;\n\t                    }\n\t                    this.connect(B.input[inNum]);\n\t                } else {\n\t                    this.connect(B.input, outNum, inNum);\n\t                }\n\t            } else {\n\t                try {\n\t                    if (B instanceof AudioNode) {\n\t                        nativeConnect.call(this, B, outNum, inNum);\n\t                    } else {\n\t                        nativeConnect.call(this, B, outNum);\n\t                    }\n\t                } catch (e) {\n\t                    throw new Error('error connecting to node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        //replace the old disconnect method\n\t        function toneDisconnect(B, outNum, inNum) {\n\t            if (B && B.input && Array.isArray(B.input)) {\n\t                if (Tone.prototype.isUndef(inNum)) {\n\t                    inNum = 0;\n\t                }\n\t                this.disconnect(B.input[inNum], outNum, inNum);\n\t            } else if (B && B.input) {\n\t                this.disconnect(B.input, outNum, inNum);\n\t            } else {\n\t                try {\n\t                    nativeDisconnect.apply(this, arguments);\n\t                } catch (e) {\n\t                    throw new Error('error disconnecting node: ' + B + '\\n' + e);\n\t                }\n\t            }\n\t        }\n\t        if (AudioNode.prototype.connect !== toneConnect) {\n\t            AudioNode.prototype.connect = toneConnect;\n\t            AudioNode.prototype.disconnect = toneDisconnect;\n\t        }\n\t    }\n\t    // set the audio context initially\n\t    if (Tone.supported) {\n\t        shimConnect();\n\t        Tone.context = new Tone.Context();\n\t    } else {\n\t        console.warn('This browser does not support Tone.js');\n\t    }\n\t    return Tone.Context;\n\t});\n\tModule(function (Tone) {\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tTYPES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t * Units which a value can take on.\n\t\t * @enum {String}\n\t\t */\n\t    Tone.Type = {\n\t        /** \n\t\t\t *  Default units\n\t\t\t *  @typedef {Default}\n\t\t\t */\n\t        Default: 'number',\n\t        /**\n\t\t\t *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).\n\t\t\t *\n\t\t\t *  <ul>\n\t\t\t *  <li>Numbers, which will be taken literally as the time (in seconds).</li>\n\t\t\t *  <li>Notation, (\"4n\", \"8t\") describes time in BPM and time signature relative values.</li>\n\t\t\t *  <li>TransportTime, (\"4:3:2\") will also provide tempo and time signature relative times \n\t\t\t *  in the form BARS:QUARTERS:SIXTEENTHS.</li>\n\t\t\t *  <li>Frequency, (\"8hz\") is converted to the length of the cycle in seconds.</li>\n\t\t\t *  <li>Now-Relative, (\"+1\") prefix any of the above with \"+\" and it will be interpreted as \n\t\t\t *  \"the current time plus whatever expression follows\".</li>\n\t\t\t *  <li>Expressions, (\"3:0 + 2 - (1m / 7)\") any of the above can also be combined \n\t\t\t *  into a mathematical expression which will be evaluated to compute the desired time.</li>\n\t\t\t *  <li>No Argument, for methods which accept time, no argument will be interpreted as \n\t\t\t *  \"now\" (i.e. the currentTime).</li>\n\t\t\t *  </ul>\n\t\t\t *  \n\t\t\t *  @typedef {Time}\n\t\t\t */\n\t        Time: 'time',\n\t        /**\n\t\t\t *  Frequency can be described similar to time, except ultimately the\n\t\t\t *  values are converted to frequency instead of seconds. A number\n\t\t\t *  is taken literally as the value in hertz. Additionally any of the \n\t\t\t *  Time encodings can be used. Note names in the form\n\t\t\t *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their\n\t\t\t *  frequency value. \n\t\t\t *  @typedef {Frequency}\n\t\t\t */\n\t        Frequency: 'frequency',\n\t        /**\n\t\t\t *  TransportTime describes a position along the Transport's timeline. It is\n\t\t\t *  similar to Time in that it uses all the same encodings, but TransportTime specifically\n\t\t\t *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable. \n\t\t\t *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)\n\t\t\t *  @typedef {TransportTime}\n\t\t\t */\n\t        TransportTime: 'transportTime',\n\t        /** \n\t\t\t *  Ticks are the basic subunit of the Transport. They are\n\t\t\t *  the smallest unit of time that the Transport supports.\n\t\t\t *  @typedef {Ticks}\n\t\t\t */\n\t        Ticks: 'ticks',\n\t        /** \n\t\t\t *  Normal values are within the range [0, 1].\n\t\t\t *  @typedef {NormalRange}\n\t\t\t */\n\t        NormalRange: 'normalRange',\n\t        /** \n\t\t\t *  AudioRange values are between [-1, 1].\n\t\t\t *  @typedef {AudioRange}\n\t\t\t */\n\t        AudioRange: 'audioRange',\n\t        /** \n\t\t\t *  Decibels are a logarithmic unit of measurement which is useful for volume\n\t\t\t *  because of the logarithmic way that we perceive loudness. 0 decibels \n\t\t\t *  means no change in volume. -10db is approximately half as loud and 10db \n\t\t\t *  is twice is loud. \n\t\t\t *  @typedef {Decibels}\n\t\t\t */\n\t        Decibels: 'db',\n\t        /** \n\t\t\t *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.\n\t\t\t *  @typedef {Interval}\n\t\t\t */\n\t        Interval: 'interval',\n\t        /** \n\t\t\t *  Beats per minute. \n\t\t\t *  @typedef {BPM}\n\t\t\t */\n\t        BPM: 'bpm',\n\t        /** \n\t\t\t *  The value must be greater than or equal to 0.\n\t\t\t *  @typedef {Positive}\n\t\t\t */\n\t        Positive: 'positive',\n\t        /** \n\t\t\t *  A cent is a hundredth of a semitone. \n\t\t\t *  @typedef {Cents}\n\t\t\t */\n\t        Cents: 'cents',\n\t        /** \n\t\t\t *  Angle between 0 and 360. \n\t\t\t *  @typedef {Degrees}\n\t\t\t */\n\t        Degrees: 'degrees',\n\t        /** \n\t\t\t *  A number representing a midi note.\n\t\t\t *  @typedef {MIDI}\n\t\t\t */\n\t        MIDI: 'midi',\n\t        /** \n\t\t\t *  A colon-separated representation of time in the form of\n\t\t\t *  Bars:Beats:Sixteenths. \n\t\t\t *  @typedef {BarsBeatsSixteenths}\n\t\t\t */\n\t        BarsBeatsSixteenths: 'barsBeatsSixteenths',\n\t        /** \n\t\t\t *  Sampling is the reduction of a continuous signal to a discrete signal.\n\t\t\t *  Audio is typically sampled 44100 times per second. \n\t\t\t *  @typedef {Samples}\n\t\t\t */\n\t        Samples: 'samples',\n\t        /** \n\t\t\t *  Hertz are a frequency representation defined as one cycle per second.\n\t\t\t *  @typedef {Hertz}\n\t\t\t */\n\t        Hertz: 'hertz',\n\t        /** \n\t\t\t *  A frequency represented by a letter name, \n\t\t\t *  accidental and octave. This system is known as\n\t\t\t *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).\n\t\t\t *  @typedef {Note}\n\t\t\t */\n\t        Note: 'note',\n\t        /** \n\t\t\t *  One millisecond is a thousandth of a second. \n\t\t\t *  @typedef {Milliseconds}\n\t\t\t */\n\t        Milliseconds: 'milliseconds',\n\t        /** \n\t\t\t *  Seconds are the time unit of the AudioContext. In the end, \n\t\t\t *  all values need to be evaluated to seconds. \n\t\t\t *  @typedef {Seconds}\n\t\t\t */\n\t        Seconds: 'seconds',\n\t        /** \n\t\t\t *  A string representing a duration relative to a measure. \n\t\t\t *  <ul>\n\t\t\t *  \t<li>\"4n\" = quarter note</li>\n\t\t\t *   \t<li>\"2m\" = two measures</li>\n\t\t\t *    \t<li>\"8t\" = eighth-note triplet</li>\n\t\t\t *  </ul>\n\t\t\t *  @typedef {Notation}\n\t\t\t */\n\t        Notation: 'notation'\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // AUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Convert Time into seconds.\n\t\t *  \n\t\t *  Unlike the method which it overrides, this takes into account \n\t\t *  transporttime and musical notation.\n\t\t *\n\t\t *  Time : 1.40\n\t\t *  Notation: 4n|1m|2t\n\t\t *  Now Relative: +3n\n\t\t *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)\n\t\t *\n\t\t *  @param  {Time} time \n\t\t *  @return {Seconds} \n\t\t */\n\t    Tone.prototype.toSeconds = function (time) {\n\t        if (this.isNumber(time)) {\n\t            return time;\n\t        } else if (this.isUndef(time)) {\n\t            return this.now();\n\t        } else if (this.isString(time)) {\n\t            return new Tone.Time(time).toSeconds();\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toSeconds();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a frequency representation into a number.\n\t\t *  @param  {Frequency} freq \n\t\t *  @return {Hertz}      the frequency in hertz\n\t\t */\n\t    Tone.prototype.toFrequency = function (freq) {\n\t        if (this.isNumber(freq)) {\n\t            return freq;\n\t        } else if (this.isString(freq) || this.isUndef(freq)) {\n\t            return new Tone.Frequency(freq).valueOf();\n\t        } else if (freq instanceof Tone.TimeBase) {\n\t            return freq.toFrequency();\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert a time representation into ticks.\n\t\t *  @param  {Time} time\n\t\t *  @return {Ticks}  the time in ticks\n\t\t */\n\t    Tone.prototype.toTicks = function (time) {\n\t        if (this.isNumber(time) || this.isString(time)) {\n\t            return new Tone.TransportTime(time).toTicks();\n\t        } else if (this.isUndef(time)) {\n\t            return Tone.Transport.ticks;\n\t        } else if (time instanceof Tone.TimeBase) {\n\t            return time.toTicks();\n\t        }\n\t    };\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Param wraps the native Web Audio's AudioParam to provide\n\t\t *         additional unit conversion functionality. It also\n\t\t *         serves as a base-class for classes which have a single,\n\t\t *         automatable parameter. \n\t\t *  @extends {Tone}\n\t\t *  @param  {AudioParam}  param  The parameter to wrap.\n\t\t *  @param  {Tone.Type} units The units of the audio param.\n\t\t *  @param  {Boolean} convert If the param should be converted.\n\t\t */\n\t    Tone.Param = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'param',\n\t            'units',\n\t            'convert'\n\t        ], Tone.Param.defaults);\n\t        /**\n\t\t\t *  The native parameter to control\n\t\t\t *  @type  {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input = options.param;\n\t        /**\n\t\t\t *  The units of the parameter\n\t\t\t *  @type {Tone.Type}\n\t\t\t */\n\t        this.units = options.units;\n\t        /**\n\t\t\t *  If the value should be converted or not\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.convert = options.convert;\n\t        /**\n\t\t\t *  True if the signal value is being overridden by \n\t\t\t *  a connected signal.\n\t\t\t *  @readOnly\n\t\t\t *  @type  {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this.overridden = false;\n\t        /**\n\t\t\t *  If there is an LFO, this is where it is held.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = null;\n\t        if (this.isObject(options.lfo)) {\n\t            this.value = options.lfo;\n\t        } else if (!this.isUndef(options.value)) {\n\t            this.value = options.value;\n\t        }\n\t    };\n\t    Tone.extend(Tone.Param);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Param.defaults = {\n\t        'units': Tone.Type.Default,\n\t        'convert': true,\n\t        'param': undefined\n\t    };\n\t    /**\n\t\t * The current value of the parameter. \n\t\t * @memberOf Tone.Param#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'value', {\n\t        get: function () {\n\t            return this._toUnits(this._param.value);\n\t        },\n\t        set: function (value) {\n\t            if (this.isObject(value)) {\n\t                //throw an error if the LFO needs to be included\n\t                if (this.isUndef(Tone.LFO)) {\n\t                    throw new Error('Include \\'Tone.LFO\\' to use an LFO as a Param value.');\n\t                }\n\t                //remove the old one\n\t                if (this._lfo) {\n\t                    this._lfo.dispose();\n\t                }\n\t                this._lfo = new Tone.LFO(value).start();\n\t                this._lfo.connect(this.input);\n\t            } else {\n\t                var convertedVal = this._fromUnits(value);\n\t                this._param.cancelScheduledValues(0);\n\t                this._param.value = convertedVal;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert the given value from the type specified by Tone.Param.units\n\t\t *  into the destination value (such as Gain or Frequency).\n\t\t *  @private\n\t\t *  @param  {*} val the value to convert\n\t\t *  @return {number}     the number which the value should be set to\n\t\t */\n\t    Tone.Param.prototype._fromUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Time:\n\t                return this.toSeconds(val);\n\t            case Tone.Type.Frequency:\n\t                return this.toFrequency(val);\n\t            case Tone.Type.Decibels:\n\t                return this.dbToGain(val);\n\t            case Tone.Type.NormalRange:\n\t                return Math.min(Math.max(val, 0), 1);\n\t            case Tone.Type.AudioRange:\n\t                return Math.min(Math.max(val, -1), 1);\n\t            case Tone.Type.Positive:\n\t                return Math.max(val, 0);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t * Convert the parameters value into the units specified by Tone.Param.units.\n\t\t * @private\n\t\t * @param  {number} val the value to convert\n\t\t * @return {number}\n\t\t */\n\t    Tone.Param.prototype._toUnits = function (val) {\n\t        if (this.convert || this.isUndef(this.convert)) {\n\t            switch (this.units) {\n\t            case Tone.Type.Decibels:\n\t                return this.gainToDb(val);\n\t            default:\n\t                return val;\n\t            }\n\t        } else {\n\t            return val;\n\t        }\n\t    };\n\t    /**\n\t\t *  the minimum output value\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Param.prototype._minOutput = 0.00001;\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.Param.prototype.setValueAtTime = function (value, time) {\n\t        value = this._fromUnits(value);\n\t        time = this.toSeconds(time);\n\t        if (time <= this.now() + this.blockTime) {\n\t            this._param.value = value;\n\t        } else {\n\t            this._param.setValueAtTime(value, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Creates a schedule point with the current value at the current time.\n\t\t *  This is useful for creating an automation anchor point in order to \n\t\t *  schedule changes from the current value. \n\t\t *\n\t\t *  @param {number=} now (Optionally) pass the now value in. \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setRampPoint = function (now) {\n\t        now = this.defaultArg(now, this.now());\n\t        var currentVal = this._param.value;\n\t        // exponentialRampToValueAt cannot ever ramp from or to 0\n\t        // More info: https://bugzilla.mozilla.org/show_bug.cgi?id=1125600#c2\n\t        if (currentVal === 0) {\n\t            currentVal = this._minOutput;\n\t        }\n\t        this._param.setValueAtTime(currentVal, now);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        this._param.linearRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        this._param.exponentialRampToValueAtTime(value, this.toSeconds(endTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //exponentially ramp to the value 2 over 4 seconds. \n\t\t * signal.exponentialRampToValue(2, 4);\n\t\t */\n\t    Tone.Param.prototype.exponentialRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an linear continuous change in parameter value from \n\t\t *  the current time and current value to the given value over the \n\t\t *  duration of the rampTime.\n\t\t *  \n\t\t *  @param  {number} value   The value to ramp to.\n\t\t *  @param  {Time} rampTime the time that it takes the \n\t\t *                               value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //linearly ramp to the value 4 over 3 seconds. \n\t\t * signal.linearRampToValue(4, 3);\n\t\t */\n\t    Tone.Param.prototype.linearRampToValue = function (value, rampTime, startTime) {\n\t        startTime = this.toSeconds(startTime);\n\t        this.setRampPoint(startTime);\n\t        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.Param} this \n\t\t */\n\t    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        // The value will never be able to approach without timeConstant > 0.\n\t        // http://www.w3.org/TR/webaudio/#dfn-setTargetAtTime, where the equation\n\t        // is described. 0 results in a division by 0.\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        this._param.setTargetAtTime(value, this.toSeconds(startTime), timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets an array of arbitrary parameter values starting at the given time\n\t\t *  for the given duration.\n\t\t *  \t\n\t\t *  @param {Array} values    \n\t\t *  @param {Time} startTime \n\t\t *  @param {Time} duration  \n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration) {\n\t        for (var i = 0; i < values.length; i++) {\n\t            values[i] = this._fromUnits(values[i]);\n\t        }\n\t        this._param.setValueCurveAtTime(values, this.toSeconds(startTime), this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.cancelScheduledValues = function (startTime) {\n\t        this._param.cancelScheduledValues(this.toSeconds(startTime));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Ramps to the given value over the duration of the rampTime. \n\t\t *  Automatically selects the best ramp type (exponential or linear)\n\t\t *  depending on the `units` of the signal\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} rampTime \tThe time that it takes the \n\t\t *                              value to ramp from it's current value\n\t\t *  @param {Time}\t[startTime=now] \tWhen the ramp should start. \n\t\t *  @returns {Tone.Param} this\n\t\t *  @example\n\t\t * //ramp to the value either linearly or exponentially \n\t\t * //depending on the \"units\" value of the signal\n\t\t * signal.rampTo(0, 10);\n\t\t *  @example\n\t\t * //schedule it to ramp starting at a specific time\n\t\t * signal.rampTo(0, 10, 5)\n\t\t */\n\t    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {\n\t        rampTime = this.defaultArg(rampTime, 0);\n\t        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {\n\t            this.exponentialRampToValue(value, rampTime, startTime);\n\t        } else {\n\t            this.linearRampToValue(value, rampTime, startTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The LFO created by the signal instance. If none\n\t\t *  was created, this is null.\n\t\t *  @type {Tone.LFO}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Param#\n\t\t *  @name lfo\n\t\t */\n\t    Object.defineProperty(Tone.Param.prototype, 'lfo', {\n\t        get: function () {\n\t            return this._lfo;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Param} this\n\t\t */\n\t    Tone.Param.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param = null;\n\t        if (this._lfo) {\n\t            this._lfo.dispose();\n\t            this._lfo = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Param;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createGain shim\n\t\t *  @private\n\t\t */\n\t    if (window.GainNode && !AudioContext.prototype.createGain) {\n\t        AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;\n\t    }\n\t    /**\n\t\t *  @class A thin wrapper around the Native Web Audio GainNode.\n\t\t *         The GainNode is a basic building block of the Web Audio\n\t\t *         API and is useful for routing audio and adjusting gains. \n\t\t *  @extends {Tone}\n\t\t *  @param  {Number=}  gain  The initial gain of the GainNode\n\t\t *  @param {Tone.Type=} units The units of the gain parameter. \n\t\t */\n\t    Tone.Gain = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'gain',\n\t            'units'\n\t        ], Tone.Gain.defaults);\n\t        /**\n\t\t\t *  The GainNode\n\t\t\t *  @type  {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = this._gainNode = this.context.createGain();\n\t        /**\n\t\t\t *  The gain parameter of the gain node.\n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Param({\n\t            'param': this._gainNode.gain,\n\t            'units': options.units,\n\t            'value': options.gain,\n\t            'convert': options.convert\n\t        });\n\t        this._readOnly('gain');\n\t    };\n\t    Tone.extend(Tone.Gain);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Gain.defaults = {\n\t        'gain': 1,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Gain}  this\n\t\t */\n\t    Tone.Gain.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._gainNode.disconnect();\n\t        this._gainNode = null;\n\t        this._writable('gain');\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t    };\n\t    //STATIC///////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Create input and outputs for this object.\n\t\t *  @param  {Number}  input   The number of inputs\n\t\t *  @param  {Number=}  outputs  The number of outputs\n\t\t *  @return  {Tone}  this\n\t\t *  @internal\n\t\t */\n\t    Tone.prototype.createInsOuts = function (inputs, outputs) {\n\t        if (inputs === 1) {\n\t            this.input = new Tone.Gain();\n\t        } else if (inputs > 1) {\n\t            this.input = new Array(inputs);\n\t        }\n\t        if (outputs === 1) {\n\t            this.output = new Tone.Gain();\n\t        } else if (outputs > 1) {\n\t            this.output = new Array(inputs);\n\t        }\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.Gain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.\n\t\t *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n\t\t *          has all of the methods available to native Web Audio \n\t\t *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n\t\t *          as well as additional conveniences. Read more about working with signals \n\t\t *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam\n\t\t *                                     is passed in, that parameter will be wrapped\n\t\t *                                     and controlled by the Signal. \n\t\t *  @param {string} [units=Number] unit The units the signal is in. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(10);\n\t\t */\n\t    Tone.Signal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t * The node where the constant signal value is scaled.\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this._gain = this.context.createGain();\n\t        options.param = this._gain.gain;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t * The node where the value is set.\n\t\t\t * @type {Tone.Param}\n\t\t\t * @private\n\t\t\t */\n\t        this.input = this._param = this._gain.gain;\n\t        //connect the const output to the node output\n\t        this.context.getConstant(1).chain(this._gain);\n\t    };\n\t    Tone.extend(Tone.Signal, Tone.Param);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Signal.defaults = {\n\t        'value': 0,\n\t        'units': Tone.Type.Default,\n\t        'convert': true\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t *  @method\n\t\t */\n\t    Tone.Signal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Signal} this\n\t\t */\n\t    Tone.Signal.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._param = null;\n\t        this._gain.disconnect();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Signal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Timeline class for scheduling and maintaining state\n\t\t *         along a timeline. All events must have a \"time\" property. \n\t\t *         Internally, events are stored in time order for fast \n\t\t *         retrieval.\n\t\t *  @extends {Tone}\n\t\t *  @param {Positive} [memory=Infinity] The number of previous events that are retained.\n\t\t */\n\t    Tone.Timeline = function () {\n\t        var options = this.optionsObject(arguments, ['memory'], Tone.Timeline.defaults);\n\t        /**\n\t\t\t *  The array of scheduled timeline events\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = [];\n\t        /**\n\t\t\t *  An array of items to remove from the list. \n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._toRemove = [];\n\t        /**\n\t\t\t *  Flag if the tieline is mid iteration\n\t\t\t *  @private\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this._iterating = false;\n\t        /**\n\t\t\t *  The memory of the timeline, i.e.\n\t\t\t *  how many events in the past it will retain\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.memory = options.memory;\n\t    };\n\t    Tone.extend(Tone.Timeline);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Timeline.defaults = { 'memory': Infinity };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Timeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Timeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._timeline.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Insert an event object onto the timeline. Events must have a \"time\" attribute.\n\t\t *  @param  {Object}  event  The event object to insert into the \n\t\t *                           timeline. \n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.add = function (event) {\n\t        //the event needs to have a time attribute\n\t        if (this.isUndef(event.time)) {\n\t            throw new Error('Tone.Timeline: events must have a time attribute');\n\t        }\n\t        if (this._timeline.length) {\n\t            var index = this._search(event.time);\n\t            this._timeline.splice(index + 1, 0, event);\n\t        } else {\n\t            this._timeline.push(event);\n\t        }\n\t        //if the length is more than the memory, remove the previous ones\n\t        if (this.length > this.memory) {\n\t            var diff = this.length - this.memory;\n\t            this._timeline.splice(0, diff);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event object to remove from the list.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.remove = function (event) {\n\t        if (this._iterating) {\n\t            this._toRemove.push(event);\n\t        } else {\n\t            var index = this._timeline.indexOf(event);\n\t            if (index !== -1) {\n\t                this._timeline.splice(index, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the nearest event whose time is less than or equal to the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object set after that time.\n\t\t */\n\t    Tone.Timeline.prototype.get = function (time) {\n\t        var index = this._search(time);\n\t        if (index !== -1) {\n\t            return this._timeline[index];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline without removing it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.peek = function () {\n\t        return this._timeline[0];\n\t    };\n\t    /**\n\t\t *  Return the first event in the timeline and remove it\n\t\t *  @returns {Object} The first event object\n\t\t */\n\t    Tone.Timeline.prototype.shift = function () {\n\t        return this._timeline.shift();\n\t    };\n\t    /**\n\t\t *  Get the event which is scheduled after the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object after the given time\n\t\t */\n\t    Tone.Timeline.prototype.getAfter = function (time) {\n\t        var index = this._search(time);\n\t        if (index + 1 < this._timeline.length) {\n\t            return this._timeline[index + 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the event before the event at the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Object} The event object before the given time\n\t\t */\n\t    Tone.Timeline.prototype.getBefore = function (time) {\n\t        var len = this._timeline.length;\n\t        //if it's after the last item, return the last item\n\t        if (len > 0 && this._timeline[len - 1].time < time) {\n\t            return this._timeline[len - 1];\n\t        }\n\t        var index = this._search(time);\n\t        if (index - 1 >= 0) {\n\t            return this._timeline[index - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Cancel events after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancel = function (after) {\n\t        if (this._timeline.length > 1) {\n\t            var index = this._search(after);\n\t            if (index >= 0) {\n\t                if (this._timeline[index].time === after) {\n\t                    //get the first item with that time\n\t                    for (var i = index; i >= 0; i--) {\n\t                        if (this._timeline[i].time === after) {\n\t                            index = i;\n\t                        } else {\n\t                            break;\n\t                        }\n\t                    }\n\t                    this._timeline = this._timeline.slice(0, index);\n\t                } else {\n\t                    this._timeline = this._timeline.slice(0, index + 1);\n\t                }\n\t            } else {\n\t                this._timeline = [];\n\t            }\n\t        } else if (this._timeline.length === 1) {\n\t            //the first item's time\n\t            if (this._timeline[0].time >= after) {\n\t                this._timeline = [];\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events before or equal to the given time.\n\t\t *  @param  {Number}  time  The time to cancel before.\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.cancelBefore = function (time) {\n\t        if (this._timeline.length) {\n\t            var index = this._search(time);\n\t            if (index >= 0) {\n\t                this._timeline = this._timeline.slice(index + 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Does a binary serach on the timeline array and returns the \n\t\t *  nearest event index whose time is after or equal to the given time.\n\t\t *  If a time is searched before the first index in the timeline, -1 is returned.\n\t\t *  If the time is after the end, the index of the last item is returned.\n\t\t *  @param  {Number}  time  \n\t\t *  @return  {Number} the index in the timeline array \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._search = function (time) {\n\t        var beginning = 0;\n\t        var len = this._timeline.length;\n\t        var end = len;\n\t        if (len > 0 && this._timeline[len - 1].time <= time) {\n\t            return len - 1;\n\t        }\n\t        while (beginning < end) {\n\t            // calculate the midpoint for roughly equal partition\n\t            var midPoint = Math.floor(beginning + (end - beginning) / 2);\n\t            var event = this._timeline[midPoint];\n\t            var nextEvent = this._timeline[midPoint + 1];\n\t            if (event.time === time) {\n\t                //choose the last one that has the same time\n\t                for (var i = midPoint; i < this._timeline.length; i++) {\n\t                    var testEvent = this._timeline[i];\n\t                    if (testEvent.time === time) {\n\t                        midPoint = i;\n\t                    }\n\t                }\n\t                return midPoint;\n\t            } else if (event.time < time && nextEvent.time > time) {\n\t                return midPoint;\n\t            } else if (event.time > time) {\n\t                //search lower\n\t                end = midPoint;\n\t            } else if (event.time < time) {\n\t                //search upper\n\t                beginning = midPoint + 1;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t    /**\n\t\t *  Internal iterator. Applies extra safety checks for \n\t\t *  removing items from the array. \n\t\t *  @param  {Function}  callback \n\t\t *  @param  {Number=}    lowerBound     \n\t\t *  @param  {Number=}    upperBound    \n\t\t *  @private\n\t\t */\n\t    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {\n\t        this._iterating = true;\n\t        lowerBound = this.defaultArg(lowerBound, 0);\n\t        upperBound = this.defaultArg(upperBound, this._timeline.length - 1);\n\t        for (var i = lowerBound; i <= upperBound; i++) {\n\t            callback(this._timeline[i]);\n\t        }\n\t        this._iterating = false;\n\t        if (this._toRemove.length > 0) {\n\t            for (var j = 0; j < this._toRemove.length; j++) {\n\t                var index = this._timeline.indexOf(this._toRemove[j]);\n\t                if (index !== -1) {\n\t                    this._timeline.splice(index, 1);\n\t                }\n\t            }\n\t            this._toRemove = [];\n\t        }\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEach = function (callback) {\n\t        this._iterate(callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or before the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachBefore = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(callback, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array after the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAfter = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at or after the given time. Similar to \n\t\t *  forEachAfter, but includes the item(s) at the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachFrom = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var lowerBound = this._search(time);\n\t        //work backwards until the event time is less than time\n\t        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n\t            lowerBound--;\n\t        }\n\t        this._iterate(callback, lowerBound + 1);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array at the given time\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.Timeline} this\n\t\t */\n\t    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {\n\t        //iterate over the items in reverse so that removing an item doesn't break things\n\t        var upperBound = this._search(time);\n\t        if (upperBound !== -1) {\n\t            this._iterate(function (event) {\n\t                if (event.time === time) {\n\t                    callback(event);\n\t                }\n\t            }, 0, upperBound);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Timeline}  this\n\t\t */\n\t    Tone.Timeline.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._timeline = null;\n\t        this._toRemove = null;\n\t    };\n\t    return Tone.Timeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A signal which adds the method getValueAtTime. \n\t\t *         Code and inspiration from https://github.com/jsantell/web-audio-automation-timeline\n\t\t *  @extends {Tone.Param}\n\t\t *  @param {Number=} value The initial value of the signal\n\t\t *  @param {String=} units The conversion units of the signal.\n\t\t */\n\t    Tone.TimelineSignal = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'value',\n\t            'units'\n\t        ], Tone.Signal.defaults);\n\t        /**\n\t\t\t *  The scheduled events\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline(10);\n\t        //constructors\n\t        Tone.Signal.apply(this, options);\n\t        options.param = this._param;\n\t        Tone.Param.call(this, options);\n\t        /**\n\t\t\t *  The initial scheduled value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._initial = this._fromUnits(this._param.value);\n\t    };\n\t    Tone.extend(Tone.TimelineSignal, Tone.Param);\n\t    /**\n\t\t *  The event types of a schedulable signal.\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.Type = {\n\t        Linear: 'linear',\n\t        Exponential: 'exponential',\n\t        Target: 'target',\n\t        Curve: 'curve',\n\t        Set: 'set'\n\t    };\n\t    /**\n\t\t * The current value of the signal. \n\t\t * @memberOf Tone.TimelineSignal#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.TimelineSignal.prototype, 'value', {\n\t        get: function () {\n\t            var now = this.now();\n\t            var val = this.getValueAtTime(now);\n\t            return this._toUnits(val);\n\t        },\n\t        set: function (value) {\n\t            var convertedVal = this._fromUnits(value);\n\t            this._initial = convertedVal;\n\t            this.cancelScheduledValues();\n\t            this._param.value = convertedVal;\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULING\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedules a parameter value change at the given time.\n\t\t *  @param {*}\tvalue The value to set the signal.\n\t\t *  @param {Time}  time The time when the change should occur.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @example\n\t\t * //set the frequency to \"G4\" in exactly 1 second from now. \n\t\t * freq.setValueAtTime(\"G4\", \"+1\");\n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueAtTime = function (value, startTime) {\n\t        value = this._fromUnits(value);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Set,\n\t            'value': value,\n\t            'time': startTime\n\t        });\n\t        //invoke the original event\n\t        this._param.setValueAtTime(value, startTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules a linear continuous change in parameter value from the \n\t\t *  previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueAtTime = function (value, endTime) {\n\t        value = this._fromUnits(value);\n\t        endTime = this.toSeconds(endTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Linear,\n\t            'value': value,\n\t            'time': endTime\n\t        });\n\t        this._param.linearRampToValueAtTime(value, endTime);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Schedules an exponential continuous change in parameter value from \n\t\t *  the previous scheduled parameter value to the given value.\n\t\t *  \n\t\t *  @param  {number} value   \n\t\t *  @param  {Time} endTime \n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueAtTime = function (value, endTime) {\n\t        //get the previous event and make sure it's not starting from 0\n\t        endTime = this.toSeconds(endTime);\n\t        var beforeEvent = this._searchBefore(endTime);\n\t        if (beforeEvent && beforeEvent.value === 0) {\n\t            //reschedule that event\n\t            this.setValueAtTime(this._minOutput, beforeEvent.time);\n\t        }\n\t        value = this._fromUnits(value);\n\t        var setValue = Math.max(value, this._minOutput);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Exponential,\n\t            'value': setValue,\n\t            'time': endTime\n\t        });\n\t        //if the ramped to value is 0, make it go to the min output, and then set to 0.\n\t        if (value < this._minOutput) {\n\t            this._param.exponentialRampToValueAtTime(this._minOutput, endTime - this.sampleTime);\n\t            this.setValueAtTime(0, endTime);\n\t        } else {\n\t            this._param.exponentialRampToValueAtTime(value, endTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start exponentially approaching the target value at the given time with\n\t\t *  a rate having the given time constant.\n\t\t *  @param {number} value        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {number} timeConstant \n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {\n\t        value = this._fromUnits(value);\n\t        value = Math.max(this._minOutput, value);\n\t        timeConstant = Math.max(this._minOutput, timeConstant);\n\t        startTime = this.toSeconds(startTime);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Target,\n\t            'value': value,\n\t            'time': startTime,\n\t            'constant': timeConstant\n\t        });\n\t        this._param.setTargetAtTime(value, startTime, timeConstant);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set an array of arbitrary values starting at the given time for the given duration.\n\t\t *  @param {Float32Array} values        \n\t\t *  @param {Time} startTime    \n\t\t *  @param {Time} duration\n\t\t *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value\n\t\t *  @returns {Tone.TimelineSignal} this \n\t\t */\n\t    Tone.TimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {\n\t        scaling = this.defaultArg(scaling, 1);\n\t        //copy the array\n\t        var floats = new Array(values.length);\n\t        for (var i = 0; i < floats.length; i++) {\n\t            floats[i] = this._fromUnits(values[i]) * scaling;\n\t        }\n\t        startTime = this.toSeconds(startTime);\n\t        duration = this.toSeconds(duration);\n\t        this._events.add({\n\t            'type': Tone.TimelineSignal.Type.Curve,\n\t            'value': floats,\n\t            'time': startTime,\n\t            'duration': duration\n\t        });\n\t        //set the first value\n\t        this._param.setValueAtTime(floats[0], startTime);\n\t        //schedule a lienar ramp for each of the segments\n\t        for (var j = 1; j < floats.length; j++) {\n\t            var segmentTime = startTime + j / (floats.length - 1) * duration;\n\t            this._param.linearRampToValueAtTime(floats[j], segmentTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled parameter changes with times greater than or \n\t\t *  equal to startTime.\n\t\t *  \n\t\t *  @param  {Time} startTime\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.cancelScheduledValues = function (after) {\n\t        after = this.toSeconds(after);\n\t        this._events.cancel(after);\n\t        this._param.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the computed value at the given time. This provides\n\t\t *  a point from which a linear or exponential curve\n\t\t *  can be scheduled after. Will cancel events after \n\t\t *  the given time and shorten the currently scheduled\n\t\t *  linear or exponential ramp so that it ends at `time` .\n\t\t *  This is to avoid discontinuities and clicks in envelopes. \n\t\t *  @param {Time} time When to set the ramp point\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.setRampPoint = function (time) {\n\t        time = this.toSeconds(time);\n\t        //get the value at the given time\n\t        var val = this._toUnits(this.getValueAtTime(time));\n\t        //if there is an event at the given time\n\t        //and that even is not a \"set\"\n\t        var before = this._searchBefore(time);\n\t        if (before && before.time === time) {\n\t            //remove everything after\n\t            this.cancelScheduledValues(time + this.sampleTime);\n\t        } else if (before && before.type === Tone.TimelineSignal.Type.Curve && before.time + before.duration > time) {\n\t            //if the curve is still playing\n\t            //cancel the curve\n\t            this.cancelScheduledValues(time);\n\t            this.linearRampToValueAtTime(val, time);\n\t        } else {\n\t            //reschedule the next event to end at the given time\n\t            var after = this._searchAfter(time);\n\t            if (after) {\n\t                //cancel the next event(s)\n\t                this.cancelScheduledValues(time);\n\t                if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t                    this.linearRampToValueAtTime(val, time);\n\t                } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t                    this.exponentialRampToValueAtTime(val, time);\n\t                }\n\t            }\n\t            this.setValueAtTime(val, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a linear ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the linear ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.linearRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.linearRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Do a exponential ramp to the given value between the start and finish times.\n\t\t *  @param {Number} value The value to ramp to.\n\t\t *  @param {Time} start The beginning anchor point to do the exponential ramp\n\t\t *  @param {Time} finish The ending anchor point by which the value of\n\t\t *                       the signal will equal the given value.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.exponentialRampToValueBetween = function (value, start, finish) {\n\t        this.setRampPoint(start);\n\t        this.exponentialRampToValueAtTime(value, finish);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tGETTING SCHEDULED VALUES\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the value before or equal to the given time\n\t\t *  @param  {Number}  time  The time to query\n\t\t *  @return  {Object}  The event at or before the given time.\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchBefore = function (time) {\n\t        return this._events.get(time);\n\t    };\n\t    /**\n\t\t *  The event after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {Object}  The next event after the given time\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._searchAfter = function (time) {\n\t        return this._events.getAfter(time);\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.TimelineSignal.prototype.getValueAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        var after = this._searchAfter(time);\n\t        var before = this._searchBefore(time);\n\t        var value = this._initial;\n\t        //if it was set by\n\t        if (before === null) {\n\t            value = this._initial;\n\t        } else if (before.type === Tone.TimelineSignal.Type.Target) {\n\t            var previous = this._events.getBefore(before.time);\n\t            var previouVal;\n\t            if (previous === null) {\n\t                previouVal = this._initial;\n\t            } else {\n\t                previouVal = previous.value;\n\t            }\n\t            value = this._exponentialApproach(before.time, previouVal, before.value, before.constant, time);\n\t        } else if (before.type === Tone.TimelineSignal.Type.Curve) {\n\t            value = this._curveInterpolate(before.time, before.value, before.duration, time);\n\t        } else if (after === null) {\n\t            value = before.value;\n\t        } else if (after.type === Tone.TimelineSignal.Type.Linear) {\n\t            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else if (after.type === Tone.TimelineSignal.Type.Exponential) {\n\t            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);\n\t        } else {\n\t            value = before.value;\n\t        }\n\t        return value;\n\t    };\n\t    /**\n\t\t *  When signals connect to other signals or AudioParams, \n\t\t *  they take over the output value of that signal or AudioParam. \n\t\t *  For all other nodes, the behavior is the same as a default <code>connect</code>. \n\t\t *\n\t\t *  @override\n\t\t *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node \n\t\t *  @param {number} [outputNumber=0] The output number to connect from.\n\t\t *  @param {number} [inputNumber=0] The input number to connect to.\n\t\t *  @returns {Tone.TimelineSignal} this\n\t\t *  @method\n\t\t */\n\t    Tone.TimelineSignal.prototype.connect = Tone.SignalBase.prototype.connect;\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUTOMATION CURVE CALCULATIONS\n\t    //\tMIT License, copyright (c) 2014 Jordan Santell\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setTargetAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {\n\t        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by linearRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {\n\t        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by exponentialRampToValueAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {\n\t        v0 = Math.max(this._minOutput, v0);\n\t        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n\t    };\n\t    /**\n\t\t *  Calculates the the value along the curve produced by setValueCurveAtTime\n\t\t *  @private\n\t\t */\n\t    Tone.TimelineSignal.prototype._curveInterpolate = function (start, curve, duration, time) {\n\t        var len = curve.length;\n\t        // If time is after duration, return the last curve value\n\t        if (time >= start + duration) {\n\t            return curve[len - 1];\n\t        } else if (time <= start) {\n\t            return curve[0];\n\t        } else {\n\t            var progress = (time - start) / duration;\n\t            var lowerIndex = Math.floor((len - 1) * progress);\n\t            var upperIndex = Math.ceil((len - 1) * progress);\n\t            var lowerVal = curve[lowerIndex];\n\t            var upperVal = curve[upperIndex];\n\t            if (upperIndex === lowerIndex) {\n\t                return lowerVal;\n\t            } else {\n\t                return this._linearInterpolate(lowerIndex, lowerVal, upperIndex, upperVal, progress * (len - 1));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.TimelineSignal} this\n\t\t */\n\t    Tone.TimelineSignal.prototype.dispose = function () {\n\t        Tone.Signal.prototype.dispose.call(this);\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._events.dispose();\n\t        this._events = null;\n\t    };\n\t    return Tone.TimelineSignal;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Pow applies an exponent to the incoming signal. The incoming signal\n\t\t *         must be AudioRange.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. \n\t\t *  @example\n\t\t * var pow = new Tone.Pow(2);\n\t\t * var sig = new Tone.Signal(0.5).connect(pow);\n\t\t * //output of pow is 0.25. \n\t\t */\n\t    Tone.Pow = function (exp) {\n\t        /**\n\t\t\t * the exponent\n\t\t\t * @private\n\t\t\t * @type {number}\n\t\t\t */\n\t        this._exp = this.defaultArg(exp, 1);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);\n\t    };\n\t    Tone.extend(Tone.Pow, Tone.SignalBase);\n\t    /**\n\t\t * The value of the exponent.\n\t\t * @memberOf Tone.Pow#\n\t\t * @type {number}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Pow.prototype, 'value', {\n\t        get: function () {\n\t            return this._exp;\n\t        },\n\t        set: function (exp) {\n\t            this._exp = exp;\n\t            this._expScaler.setMap(this._expFunc(this._exp));\n\t        }\n\t    });\n\t    /**\n\t\t *  the function which maps the waveshaper\n\t\t *  @param   {number} exp\n\t\t *  @return {function}\n\t\t *  @private\n\t\t */\n\t    Tone.Pow.prototype._expFunc = function (exp) {\n\t        return function (val) {\n\t            return Math.pow(Math.abs(val), exp);\n\t        };\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Pow} this\n\t\t */\n\t    Tone.Pow.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._expScaler.dispose();\n\t        this._expScaler = null;\n\t        return this;\n\t    };\n\t    return Tone.Pow;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n\t\t *          envelope generator. Tone.Envelope outputs a signal which \n\t\t *          can be connected to an AudioParam or Tone.Signal. \n\t\t *          <img src=\"https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time} [attack] The amount of time it takes for the envelope to go from \n\t\t *                         0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * //an amplitude envelope\n\t\t * var gainNode = Tone.context.createGain();\n\t\t * var env = new Tone.Envelope({\n\t\t * \t\"attack\" : 0.1,\n\t\t * \t\"decay\" : 0.2,\n\t\t * \t\"sustain\" : 1,\n\t\t * \t\"release\" : 0.8,\n\t\t * });\n\t\t * env.connect(gainNode.gain);\n\t\t */\n\t    Tone.Envelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        /** \n\t\t\t *  When triggerAttack is called, the attack time is the amount of\n\t\t\t *  time it takes for the envelope to reach it's maximum value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.attack = options.attack;\n\t        /**\n\t\t\t *  After the attack portion of the envelope, the value will fall\n\t\t\t *  over the duration of the decay time to it's sustain value. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.decay = options.decay;\n\t        /**\n\t\t\t * \tThe sustain value is the value \n\t\t\t * \twhich the envelope rests at after triggerAttack is\n\t\t\t * \tcalled, but before triggerRelease is invoked. \n\t\t\t *  @type {NormalRange}\n\t\t\t */\n\t        this.sustain = options.sustain;\n\t        /**\n\t\t\t *  After triggerRelease is called, the envelope's\n\t\t\t *  value will fall to it's miminum value over the\n\t\t\t *  duration of the release time. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.release = options.release;\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._attackCurve = 'linear';\n\t        /**\n\t\t\t *  the next time the envelope is at standby\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._releaseCurve = 'exponential';\n\t        /**\n\t\t\t *  the signal\n\t\t\t *  @type {Tone.TimelineSignal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sig = this.output = new Tone.TimelineSignal();\n\t        this._sig.setValueAtTime(0, 0);\n\t        //set the attackCurve initially\n\t        this.attackCurve = options.attackCurve;\n\t        this.releaseCurve = options.releaseCurve;\n\t    };\n\t    Tone.extend(Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Envelope.defaults = {\n\t        'attack': 0.01,\n\t        'decay': 0.1,\n\t        'sustain': 0.5,\n\t        'release': 1,\n\t        'attackCurve': 'linear',\n\t        'releaseCurve': 'exponential'\n\t    };\n\t    /**\n\t\t * Read the current value of the envelope. Useful for \n\t\t * syncronizing visual output to the envelope. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'value', {\n\t        get: function () {\n\t            return this.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the attack. \n\t\t * Can be any of these strings:\n\t\t * <ul>\n\t\t *   <li>linear</li>\n\t\t *   <li>exponential</li>\n\t\t *   <li>sine</li>\n\t\t *   <li>cosine</li>\n\t\t *   <li>bounce</li>\n\t\t *   <li>ripple</li>\n\t\t *   <li>step</li>\n\t\t * </ul>\n\t\t * Can also be an array which describes the curve. Values\n\t\t * in the array are evenly subdivided and linearly\n\t\t * interpolated over the duration of the attack. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name attackCurve\n\t\t * @example\n\t\t * env.attackCurve = \"linear\";\n\t\t * @example\n\t\t * //can also be an array\n\t\t * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {\n\t        get: function () {\n\t            if (this.isString(this._attackCurve)) {\n\t                return this._attackCurve;\n\t            } else if (this.isArray(this._attackCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].In === this._attackCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._attackCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._attackCurve = curveDef.In;\n\t                } else {\n\t                    this._attackCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._attackCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The shape of the release. See the attack curve types. \n\t\t * @memberOf Tone.Envelope#\n\t\t * @type {String|Array}\n\t\t * @name releaseCurve\n\t\t * @example\n\t\t * env.releaseCurve = \"linear\";\n\t\t */\n\t    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {\n\t        get: function () {\n\t            if (this.isString(this._releaseCurve)) {\n\t                return this._releaseCurve;\n\t            } else if (this.isArray(this._releaseCurve)) {\n\t                //look up the name in the curves array\n\t                for (var type in Tone.Envelope.Type) {\n\t                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {\n\t                        return type;\n\t                    }\n\t                }\n\t                //otherwise just return the array\n\t                return this._releaseCurve;\n\t            }\n\t        },\n\t        set: function (curve) {\n\t            //check if it's a valid type\n\t            if (Tone.Envelope.Type.hasOwnProperty(curve)) {\n\t                var curveDef = Tone.Envelope.Type[curve];\n\t                if (this.isObject(curveDef)) {\n\t                    this._releaseCurve = curveDef.Out;\n\t                } else {\n\t                    this._releaseCurve = curveDef;\n\t                }\n\t            } else if (this.isArray(curve)) {\n\t                this._releaseCurve = curve;\n\t            } else {\n\t                throw new Error('Tone.Envelope: invalid curve: ' + curve);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Trigger the attack/decay portion of the ADSR envelope. \n\t\t *  @param  {Time} [time=now] When the attack should start.\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.\n\t\t *                               number between 0-1\n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger the attack 0.5 seconds from now with a velocity of 0.2\n\t\t *  env.triggerAttack(\"+0.5\", 0.2);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        var originalAttack = this.toSeconds(this.attack);\n\t        var attack = originalAttack;\n\t        var decay = this.toSeconds(this.decay);\n\t        velocity = this.defaultArg(velocity, 1);\n\t        //check if it's not a complete attack\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            //subtract the current value from the attack time\n\t            var attackRate = 1 / attack;\n\t            var remainingDistance = 1 - currentValue;\n\t            //the attack is now the remaining time\n\t            attack = remainingDistance / attackRate;\n\t        }\n\t        //attack\n\t        if (this._attackCurve === 'linear') {\n\t            this._sig.linearRampToValue(velocity, attack, time);\n\t        } else if (this._attackCurve === 'exponential') {\n\t            this._sig.exponentialRampToValue(velocity, attack, time);\n\t        } else if (attack > 0) {\n\t            this._sig.setRampPoint(time);\n\t            var curve = this._attackCurve;\n\t            //take only a portion of the curve\n\t            if (attack < originalAttack) {\n\t                var percentComplete = 1 - attack / originalAttack;\n\t                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);\n\t                curve = this._attackCurve.slice(sliceIndex);\n\t                //the first index is the current value\n\t                curve[0] = currentValue;\n\t            }\n\t            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n\t        }\n\t        //decay\n\t        this._sig.exponentialRampToValue(velocity * this.sustain, decay, attack + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Triggers the release of the envelope.\n\t\t *  @param  {Time} [time=now] When the release portion of the envelope should start. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t *  //trigger release immediately\n\t\t *  env.triggerRelease();\n\t\t */\n\t    Tone.Envelope.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        var currentValue = this.getValueAtTime(time);\n\t        if (currentValue > 0) {\n\t            var release = this.toSeconds(this.release);\n\t            if (this._releaseCurve === 'linear') {\n\t                this._sig.linearRampToValue(0, release, time);\n\t            } else if (this._releaseCurve === 'exponential') {\n\t                this._sig.exponentialRampToValue(0, release, time);\n\t            } else {\n\t                var curve = this._releaseCurve;\n\t                if (this.isArray(curve)) {\n\t                    this._sig.setRampPoint(time);\n\t                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the scheduled value at the given time. This will\n\t\t *  return the unconverted (raw) value.\n\t\t *  @param  {Number}  time  The time in seconds.\n\t\t *  @return  {Number}  The scheduled value at the given time.\n\t\t */\n\t    Tone.Envelope.prototype.getValueAtTime = function (time) {\n\t        return this._sig.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  triggerAttackRelease is shorthand for triggerAttack, then waiting\n\t\t *  some duration, then triggerRelease. \n\t\t *  @param {Time} duration The duration of the sustain.\n\t\t *  @param {Time} [time=now] When the attack should be triggered.\n\t\t *  @param {number} [velocity=1] The velocity of the envelope. \n\t\t *  @returns {Tone.Envelope} this\n\t\t *  @example\n\t\t * //trigger the attack and then the release after 0.6 seconds.\n\t\t * env.triggerAttackRelease(0.6);\n\t\t */\n\t    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + this.toSeconds(duration));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancels all scheduled envelope changes after the given time.\n\t\t *  @param  {Time} after\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.cancel = function (after) {\n\t        this._sig.cancelScheduledValues(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Borrows the connect method from Tone.Signal. \n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.Envelope.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t \t *  Generate some complex envelope curves. \n\t \t */\n\t    (function _createCurves() {\n\t        var curveLen = 128;\n\t        var i, k;\n\t        //cosine curve\n\t        var cosineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));\n\t        }\n\t        //ripple curve\n\t        var rippleCurve = [];\n\t        var rippleCurveFreq = 6.4;\n\t        for (i = 0; i < curveLen - 1; i++) {\n\t            k = i / (curveLen - 1);\n\t            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n\t            rippleCurve[i] = sineWave / 10 + k * 0.83;\n\t        }\n\t        rippleCurve[curveLen - 1] = 1;\n\t        //stairs curve\n\t        var stairsCurve = [];\n\t        var steps = 5;\n\t        for (i = 0; i < curveLen; i++) {\n\t            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;\n\t        }\n\t        //in-out easing curve\n\t        var sineCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n\t        }\n\t        //a bounce curve\n\t        var bounceCurve = [];\n\t        for (i = 0; i < curveLen; i++) {\n\t            k = i / (curveLen - 1);\n\t            var freq = Math.pow(k, 3) * 4 + 0.2;\n\t            var val = Math.cos(freq * Math.PI * 2 * k);\n\t            bounceCurve[i] = Math.abs(val * (1 - k));\n\t        }\n\t        /**\n\t\t\t *  Invert a value curve to make it work for the release\n\t\t\t *  @private\n\t\t\t */\n\t        function invertCurve(curve) {\n\t            var out = new Array(curve.length);\n\t            for (var j = 0; j < curve.length; j++) {\n\t                out[j] = 1 - curve[j];\n\t            }\n\t            return out;\n\t        }\n\t        /**\n\t\t\t *  reverse the curve\n\t\t\t *  @private\n\t\t\t */\n\t        function reverseCurve(curve) {\n\t            return curve.slice(0).reverse();\n\t        }\n\t        /**\n\t\t\t *  attack and release curve arrays\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        Tone.Envelope.Type = {\n\t            'linear': 'linear',\n\t            'exponential': 'exponential',\n\t            'bounce': {\n\t                In: invertCurve(bounceCurve),\n\t                Out: bounceCurve\n\t            },\n\t            'cosine': {\n\t                In: cosineCurve,\n\t                Out: reverseCurve(cosineCurve)\n\t            },\n\t            'step': {\n\t                In: stairsCurve,\n\t                Out: invertCurve(stairsCurve)\n\t            },\n\t            'ripple': {\n\t                In: rippleCurve,\n\t                Out: invertCurve(rippleCurve)\n\t            },\n\t            'sine': {\n\t                In: sineCurve,\n\t                Out: invertCurve(sineCurve)\n\t            }\n\t        };\n\t    }());\n\t    /**\n\t\t *  Disconnect and dispose.\n\t\t *  @returns {Tone.Envelope} this\n\t\t */\n\t    Tone.Envelope.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sig.dispose();\n\t        this._sig = null;\n\t        this._attackCurve = null;\n\t        this._releaseCurve = null;\n\t        return this;\n\t    };\n\t    return Tone.Envelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node. \n\t\t *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts\n\t\t *          an audio signal as the input and will apply the envelope to the amplitude\n\t\t *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from \n\t\t *                               0 to it's maximum value. \n\t\t *  @param {Time} [decay]\tThe period of time after the attack that it takes for the envelope\n\t\t *                       \tto fall to the sustain value. \n\t\t *  @param {NormalRange} [sustain]\tThe percent of the maximum value that the envelope rests at until\n\t\t *                                \tthe release is triggered. \n\t\t *  @param {Time} [release]\tThe amount of time after the release is triggered it takes to reach 0. \n\t\t *  @example\n\t\t * var ampEnv = new Tone.AmplitudeEnvelope({\n\t\t * \t\"attack\": 0.1,\n\t\t * \t\"decay\": 0.2,\n\t\t * \t\"sustain\": 1.0,\n\t\t * \t\"release\": 0.8\n\t\t * }).toMaster();\n\t\t * //create an oscillator and connect it\n\t\t * var osc = new Tone.Oscillator().connect(ampEnv).start();\n\t\t * //trigger the envelopes attack and release \"8t\" apart\n\t\t * ampEnv.triggerAttackRelease(\"8t\");\n\t\t */\n\t    Tone.AmplitudeEnvelope = function () {\n\t        Tone.Envelope.apply(this, arguments);\n\t        /**\n\t\t\t *  the input node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = this.output = new Tone.Gain();\n\t        this._sig.connect(this.output.gain);\n\t    };\n\t    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.AmplitudeEnvelope}  this\n\t\t */\n\t    Tone.AmplitudeEnvelope.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        this.input = null;\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.AmplitudeEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AnalyserNode.getFloatTimeDomainData polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AnalyserNode && !AnalyserNode.prototype.getFloatTimeDomainData) {\n\t        //referenced https://github.com/mohayonao/get-float-time-domain-data \n\t        AnalyserNode.prototype.getFloatTimeDomainData = function (array) {\n\t            var uint8 = new Uint8Array(array.length);\n\t            this.getByteTimeDomainData(uint8);\n\t            for (var i = 0; i < uint8.length; i++) {\n\t                array[i] = (uint8[i] - 128) / 128;\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Wrapper around the native Web Audio's \n\t\t *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).\n\t\t *          Extracts FFT or Waveform data from the incoming signal.\n\t\t *  @extends {Tone}\n\t\t *  @param {String=} type The return type of the analysis, either \"fft\", or \"waveform\". \n\t\t *  @param {Number=} size The size of the FFT. Value must be a power of \n\t\t *                       two in the range 32 to 32768.\n\t\t */\n\t    Tone.Analyser = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'size'\n\t        ], Tone.Analyser.defaults);\n\t        /**\n\t\t\t *  The analyser node.\n\t\t\t *  @private\n\t\t\t *  @type {AnalyserNode}\n\t\t\t */\n\t        this._analyser = this.input = this.output = this.context.createAnalyser();\n\t        /**\n\t\t\t *  The analysis type\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The return type of the analysis\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._returnType = options.returnType;\n\t        /**\n\t\t\t *  The buffer that the FFT data is written to\n\t\t\t *  @type {TypedArray}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        //set the values initially\n\t        this.size = options.size;\n\t        this.type = options.type;\n\t        this.returnType = options.returnType;\n\t        this.minDecibels = options.minDecibels;\n\t        this.maxDecibels = options.maxDecibels;\n\t    };\n\t    Tone.extend(Tone.Analyser);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Analyser.defaults = {\n\t        'size': 1024,\n\t        'returnType': 'byte',\n\t        'type': 'fft',\n\t        'smoothing': 0.8,\n\t        'maxDecibels': -30,\n\t        'minDecibels': -100\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse()\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.Type = {\n\t        Waveform: 'waveform',\n\t        FFT: 'fft'\n\t    };\n\t    /**\n\t\t *  Possible return types of Tone.Analyser.analyse(). \n\t\t *  byte values are between [0,255]. float values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Analyser.ReturnType = {\n\t        Byte: 'byte',\n\t        Float: 'float'\n\t    };\n\t    /**\n\t\t *  Run the analysis given the current settings and return the \n\t\t *  result as a TypedArray. \n\t\t *  @returns {TypedArray}\n\t\t */\n\t    Tone.Analyser.prototype.analyse = function () {\n\t        if (this._type === Tone.Analyser.Type.FFT) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteFrequencyData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatFrequencyData(this._buffer);\n\t            }\n\t        } else if (this._type === Tone.Analyser.Type.Waveform) {\n\t            if (this._returnType === Tone.Analyser.ReturnType.Byte) {\n\t                this._analyser.getByteTimeDomainData(this._buffer);\n\t            } else {\n\t                this._analyser.getFloatTimeDomainData(this._buffer);\n\t            }\n\t        }\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  The size of analysis. This must be a power of two in the range 32 to 32768.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Number}\n\t\t *  @name size\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'size', {\n\t        get: function () {\n\t            return this._analyser.frequencyBinCount;\n\t        },\n\t        set: function (size) {\n\t            this._analyser.fftSize = size * 2;\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The return type of Tone.Analyser.analyse(), either \"byte\" or \"float\". \n\t\t *  When the type is set to \"byte\" the range of values returned in the array\n\t\t *  are between 0-255. \"float\" values are between \n\t\t *  [-1, 1] when the type is set to \"waveform\" and between \n\t\t *  [minDecibels,maxDecibels] when the type is \"fft\".\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'returnType', {\n\t        get: function () {\n\t            return this._returnType;\n\t        },\n\t        set: function (type) {\n\t            if (type === Tone.Analyser.ReturnType.Byte) {\n\t                this._buffer = new Uint8Array(this._analyser.frequencyBinCount);\n\t            } else if (type === Tone.Analyser.ReturnType.Float) {\n\t                this._buffer = new Float32Array(this._analyser.frequencyBinCount);\n\t            } else {\n\t                throw new TypeError('Tone.Analayser: invalid return type: ' + type);\n\t            }\n\t            this._returnType = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  The analysis function returned by Tone.Analyser.analyse(), either \"fft\" or \"waveform\". \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {String}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {\n\t                throw new TypeError('Tone.Analyser: invalid type: ' + type);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  0 represents no time averaging with the last analysis frame.\n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {NormalRange}\n\t\t *  @name smoothing\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {\n\t        get: function () {\n\t            return this._analyser.smoothingTimeConstant;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.smoothingTimeConstant = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The smallest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name minDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'minDecibels', {\n\t        get: function () {\n\t            return this._analyser.minDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.minDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The largest decibel value which is analysed by the FFT. \n\t\t *  @memberOf Tone.Analyser#\n\t\t *  @type {Decibels}\n\t\t *  @name maxDecibels\n\t\t */\n\t    Object.defineProperty(Tone.Analyser.prototype, 'maxDecibels', {\n\t        get: function () {\n\t            return this._analyser.maxDecibels;\n\t        },\n\t        set: function (val) {\n\t            this._analyser.maxDecibels = val;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Analyser}  this\n\t\t */\n\t    Tone.Analyser.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.disconnect();\n\t        this._analyser = null;\n\t        this._buffer = null;\n\t    };\n\t    return Tone.Analyser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Compressor is a thin wrapper around the Web Audio \n\t\t *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n\t\t *         Compression reduces the volume of loud sounds or amplifies quiet sounds \n\t\t *         by narrowing or \"compressing\" an audio signal's dynamic range. \n\t\t *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.\n\t\t *  @param {Positive} [ratio] The gain reduction ratio.\n\t\t *  @example\n\t\t * var comp = new Tone.Compressor(-30, 3);\n\t\t */\n\t    Tone.Compressor = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'ratio'\n\t        ], Tone.Compressor.defaults);\n\t        /**\n\t\t\t *  the compressor node\n\t\t\t *  @type {DynamicsCompressorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();\n\t        /**\n\t\t\t *  the threshold vaue\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.threshold = new Tone.Param({\n\t            'param': this._compressor.threshold,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The attack parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);\n\t        /**\n\t\t\t *  The release parameter\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);\n\t        /**\n\t\t\t *  The knee parameter\n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.knee = new Tone.Param({\n\t            'param': this._compressor.knee,\n\t            'units': Tone.Type.Decibels,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The ratio value\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.ratio = new Tone.Param({\n\t            'param': this._compressor.ratio,\n\t            'convert': false\n\t        });\n\t        //set the defaults\n\t        this._readOnly([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.Compressor);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Compressor.defaults = {\n\t        'ratio': 12,\n\t        'threshold': -24,\n\t        'release': 0.25,\n\t        'attack': 0.003,\n\t        'knee': 30\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Compressor} this\n\t\t */\n\t    Tone.Compressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'knee',\n\t            'release',\n\t            'attack',\n\t            'ratio',\n\t            'threshold'\n\t        ]);\n\t        this._compressor.disconnect();\n\t        this._compressor = null;\n\t        this.attack.dispose();\n\t        this.attack = null;\n\t        this.release.dispose();\n\t        this.release = null;\n\t        this.threshold.dispose();\n\t        this.threshold = null;\n\t        this.ratio.dispose();\n\t        this.ratio = null;\n\t        this.knee.dispose();\n\t        this.knee = null;\n\t        return this;\n\t    };\n\t    return Tone.Compressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Add a signal and a number or two signals. When no value is\n\t\t *         passed into the constructor, Tone.Add will sum <code>input[0]</code>\n\t\t *         and <code>input[1]</code>. If a value is passed into the constructor, \n\t\t *         the it will be added to the input.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value If no value is provided, Tone.Add will sum the first\n\t\t *                         and second inputs. \n\t\t *  @example\n\t\t * var signal = new Tone.Signal(2);\n\t\t * var add = new Tone.Add(2);\n\t\t * signal.connect(add);\n\t\t * //the output of add equals 4\n\t\t *  @example\n\t\t * //if constructed with no arguments\n\t\t * //it will add the first and second inputs\n\t\t * var add = new Tone.Add();\n\t\t * var sig0 = new Tone.Signal(3).connect(add, 0, 0);\n\t\t * var sig1 = new Tone.Signal(4).connect(add, 0, 1);\n\t\t * //the output of add equals 7. \n\t\t */\n\t    Tone.Add = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.connect(this._sum);\n\t    };\n\t    Tone.extend(Tone.Add, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Add} this\n\t\t */\n\t    Tone.Add.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sum.dispose();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Add;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Multiply two incoming signals. Or, if a number is given in the constructor, \n\t\t *          multiplies the incoming signal by that value. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number=} value Constant value to multiple. If no value is provided,\n\t\t *                         it will return the product of the first and second inputs\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply();\n\t\t * var sigA = new Tone.Signal(3);\n\t\t * var sigB = new Tone.Signal(4);\n\t\t * sigA.connect(mult, 0, 0);\n\t\t * sigB.connect(mult, 0, 1);\n\t\t * //output of mult is 12.\n\t\t *  @example\n\t\t * var mult = new Tone.Multiply(10);\n\t\t * var sig = new Tone.Signal(2).connect(mult);\n\t\t * //the output of mult is 20. \n\t\t */\n\t    Tone.Multiply = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the input node is the same as the output node\n\t\t\t *  it is also the GainNode which handles the scaling of incoming signal\n\t\t\t *  \n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the scaling parameter\n\t\t\t *  @type {AudioParam}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[1] = this.output.gain;\n\t        this._param.value = this.defaultArg(value, 0);\n\t    };\n\t    Tone.extend(Tone.Multiply, Tone.Signal);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Multiply} this\n\t\t */\n\t    Tone.Multiply.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Multiply;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var neg = new Tone.Negate();\n\t\t * var sig = new Tone.Signal(-2).connect(neg);\n\t\t * //output of neg is positive 2. \n\t\t */\n\t    Tone.Negate = function () {\n\t        /**\n\t\t\t *  negation is done by multiplying by -1\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = this.input = this.output = new Tone.Multiply(-1);\n\t    };\n\t    Tone.extend(Tone.Negate, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Negate} this\n\t\t */\n\t    Tone.Negate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        return this;\n\t    };\n\t    return Tone.Negate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected \n\t\t *         to <code>input[0]</code>. If an argument is provided in the constructor, the \n\t\t *         signals <code>.value</code> will be subtracted from the incoming signal.\n\t\t *\n\t\t *  @extends {Tone.Signal}\n\t\t *  @constructor\n\t\t *  @param {number=} value The value to subtract from the incoming signal. If the value\n\t\t *                         is omitted, it will subtract the second signal from the first.\n\t\t *  @example\n\t\t * var sub = new Tone.Subtract(1);\n\t\t * var sig = new Tone.Signal(4).connect(sub);\n\t\t * //the output of sub is 3. \n\t\t *  @example\n\t\t * var sub = new Tone.Subtract();\n\t\t * var sigA = new Tone.Signal(10);\n\t\t * var sigB = new Tone.Signal(2.5);\n\t\t * sigA.connect(sub, 0, 0);\n\t\t * sigB.connect(sub, 0, 1);\n\t\t * //output of sub is 7.5\n\t\t */\n\t    Tone.Subtract = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  the summing node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sum = this.input[0] = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  negate the input of the second input before connecting it\n\t\t\t *  to the summing node.\n\t\t\t *  @type {Tone.Negate}\n\t\t\t *  @private\n\t\t\t */\n\t        this._neg = new Tone.Negate();\n\t        /**\n\t\t\t *  the node where the value is set\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Signal}\n\t\t\t */\n\t        this._param = this.input[1] = new Tone.Signal(value);\n\t        this._param.chain(this._neg, this._sum);\n\t    };\n\t    Tone.extend(Tone.Subtract, Tone.Signal);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.SignalBase} this\n\t\t */\n\t    Tone.Subtract.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._neg.dispose();\n\t        this._neg = null;\n\t        this._sum.disconnect();\n\t        this._sum = null;\n\t        this._param.dispose();\n\t        this._param = null;\n\t        return this;\n\t    };\n\t    return Tone.Subtract;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var gt0 = new Tone.GreaterThanZero();\n\t\t * var sig = new Tone.Signal(0.01).connect(gt0);\n\t\t * //the output of gt0 is 1. \n\t\t * sig.value = 0;\n\t\t * //the output of gt0 is 0. \n\t\t */\n\t    Tone.GreaterThanZero = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val <= 0) {\n\t                return 0;\n\t            } else {\n\t                return 1;\n\t            }\n\t        }, 127);\n\t        /**\n\t\t\t *  scale the first thresholded signal by a large value.\n\t\t\t *  this will help with values which are very close to 0\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(10000);\n\t        //connections\n\t        this._scale.connect(this._thresh);\n\t    };\n\t    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThanZero} this\n\t\t */\n\t    Tone.GreaterThanZero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThanZero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.\n\t\t *          can compare two signals or a signal and a number. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Signal}\n\t\t *  @param {number} [value=0] the value to compare to the incoming signal\n\t\t *  @example\n\t\t * var gt = new Tone.GreaterThan(2);\n\t\t * var sig = new Tone.Signal(4).connect(gt);\n\t\t * //output of gt is equal 1. \n\t\t */\n\t    Tone.GreaterThan = function (value) {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  subtract the amount from the incoming signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._param = this.input[0] = new Tone.Subtract(value);\n\t        this.input[1] = this._param.input[1];\n\t        /**\n\t\t\t *  compare that amount to zero\n\t\t\t *  @type {Tone.GreaterThanZero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gtz = this.output = new Tone.GreaterThanZero();\n\t        //connect\n\t        this._param.connect(this._gtz);\n\t    };\n\t    Tone.extend(Tone.GreaterThan, Tone.Signal);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.GreaterThan} this\n\t\t */\n\t    Tone.GreaterThan.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._param.dispose();\n\t        this._param = null;\n\t        this._gtz.dispose();\n\t        this._gtz = null;\n\t        return this;\n\t    };\n\t    return Tone.GreaterThan;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Return the absolute value of an incoming signal. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @example\n\t\t * var signal = new Tone.Signal(-1);\n\t\t * var abs = new Tone.Abs();\n\t\t * signal.connect(abs);\n\t\t * //the output of abs is 1. \n\t\t */\n\t    Tone.Abs = function () {\n\t        /**\n\t\t\t *  @type {Tone.LessThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (val === 0) {\n\t                return 0;\n\t            } else {\n\t                return Math.abs(val);\n\t            }\n\t        }, 127);\n\t    };\n\t    Tone.extend(Tone.Abs, Tone.SignalBase);\n\t    /**\n\t\t *  dispose method\n\t\t *  @returns {Tone.Abs} this\n\t\t */\n\t    Tone.Abs.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        return this;\n\t    };\n\t    return Tone.Abs;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus\n\t\t *         values in the NormalRange. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {NormalRange} modulus The modulus to apply.\n\t\t *  @example\n\t\t * var mod = new Tone.Modulo(0.2)\n\t\t * var sig = new Tone.Signal(0.5).connect(mod);\n\t\t * //mod outputs 0.1\n\t\t */\n\t    Tone.Modulo = function (modulus) {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  A waveshaper gets the integer multiple of \n\t\t\t *  the input signal and the modulus.\n\t\t\t *  @private\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));\n\t        /**\n\t\t\t *  the integer multiple is multiplied by the modulus\n\t\t\t *  @type  {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multiply = new Tone.Multiply();\n\t        /**\n\t\t\t *  and subtracted from the input signal\n\t\t\t *  @type  {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = this.output = new Tone.Subtract();\n\t        /**\n\t\t\t *  the modulus signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modSignal = new Tone.Signal(modulus);\n\t        //connections\n\t        this.input.fan(this._shaper, this._subtract);\n\t        this._modSignal.connect(this._multiply, 0, 0);\n\t        this._shaper.connect(this._multiply, 0, 1);\n\t        this._multiply.connect(this._subtract, 0, 1);\n\t        this._setWaveShaper(modulus);\n\t    };\n\t    Tone.extend(Tone.Modulo, Tone.SignalBase);\n\t    /**\n\t\t *  @param  {number}  mod  the modulus to apply\n\t\t *  @private\n\t\t */\n\t    Tone.Modulo.prototype._setWaveShaper = function (mod) {\n\t        this._shaper.setMap(function (val) {\n\t            var multiple = Math.floor((val + 0.0001) / mod);\n\t            return multiple;\n\t        });\n\t    };\n\t    /**\n\t\t * The modulus value.\n\t\t * @memberOf Tone.Modulo#\n\t\t * @type {NormalRange}\n\t\t * @name value\n\t\t */\n\t    Object.defineProperty(Tone.Modulo.prototype, 'value', {\n\t        get: function () {\n\t            return this._modSignal.value;\n\t        },\n\t        set: function (mod) {\n\t            this._modSignal.value = mod;\n\t            this._setWaveShaper(mod);\n\t        }\n\t    });\n\t    /**\n\t\t * clean up\n\t\t *  @returns {Tone.Modulo} this\n\t\t */\n\t    Tone.Modulo.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        this._multiply.dispose();\n\t        this._multiply = null;\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modSignal.dispose();\n\t        this._modSignal = null;\n\t        return this;\n\t    };\n\t    return Tone.Modulo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. \n\t\t *         See Tone.GainToAudio.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t *  var a2g = new Tone.AudioToGain();\n\t\t */\n\t    Tone.AudioToGain = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return (x + 1) / 2;\n\t        });\n\t    };\n\t    Tone.extend(Tone.AudioToGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AudioToGain} this\n\t\t */\n\t    Tone.AudioToGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.AudioToGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Evaluate an expression at audio rate. <br><br>\n\t\t *         Parsing code modified from https://code.google.com/p/tapdigit/\n\t\t *         Copyright 2011 2012 Ariya Hidayat, New BSD License\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {string} expr the expression to generate\n\t\t *  @example\n\t\t * //adds the signals from input[0] and input[1].\n\t\t * var expr = new Tone.Expr(\"$0 + $1\");\n\t\t */\n\t    Tone.Expr = function () {\n\t        var expr = this._replacements(Array.prototype.slice.call(arguments));\n\t        var inputCount = this._parseInputs(expr);\n\t        /**\n\t\t\t *  hold onto all of the nodes for disposal\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nodes = [];\n\t        /**\n\t\t\t *  The inputs. The length is determined by the expression. \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.input = new Array(inputCount);\n\t        //create a gain for each input\n\t        for (var i = 0; i < inputCount; i++) {\n\t            this.input[i] = this.context.createGain();\n\t        }\n\t        //parse the syntax tree\n\t        var tree = this._parseTree(expr);\n\t        //evaluate the results\n\t        var result;\n\t        try {\n\t            result = this._eval(tree);\n\t        } catch (e) {\n\t            this._disposeNodes();\n\t            throw new Error('Tone.Expr: Could evaluate expression: ' + expr);\n\t        }\n\t        /**\n\t\t\t *  The output node is the result of the expression\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this.output = result;\n\t    };\n\t    Tone.extend(Tone.Expr, Tone.SignalBase);\n\t    //some helpers to cut down the amount of code\n\t    function applyBinary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        self._eval(args[1]).connect(op, 0, 1);\n\t        return op;\n\t    }\n\t    function applyUnary(Constructor, args, self) {\n\t        var op = new Constructor();\n\t        self._eval(args[0]).connect(op, 0, 0);\n\t        return op;\n\t    }\n\t    function getNumber(arg) {\n\t        return arg ? parseFloat(arg) : undefined;\n\t    }\n\t    function literalNumber(arg) {\n\t        return arg && arg.args ? parseFloat(arg.args) : undefined;\n\t    }\n\t    /*\n\t\t *  the Expressions that Tone.Expr can parse.\n\t\t *\n\t\t *  each expression belongs to a group and contains a regexp \n\t\t *  for selecting the operator as well as that operators method\n\t\t *  \n\t\t *  @type {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr._Expressions = {\n\t        //values\n\t        'value': {\n\t            'signal': {\n\t                regexp: /^\\d+\\.\\d+|^\\d+/,\n\t                method: function (arg) {\n\t                    var sig = new Tone.Signal(getNumber(arg));\n\t                    return sig;\n\t                }\n\t            },\n\t            'input': {\n\t                regexp: /^\\$\\d/,\n\t                method: function (arg, self) {\n\t                    return self.input[getNumber(arg.substr(1))];\n\t                }\n\t            }\n\t        },\n\t        //syntactic glue\n\t        'glue': {\n\t            '(': { regexp: /^\\(/ },\n\t            ')': { regexp: /^\\)/ },\n\t            ',': { regexp: /^,/ }\n\t        },\n\t        //functions\n\t        'func': {\n\t            'abs': {\n\t                regexp: /^abs/,\n\t                method: applyUnary.bind(this, Tone.Abs)\n\t            },\n\t            'mod': {\n\t                regexp: /^mod/,\n\t                method: function (args, self) {\n\t                    var modulus = literalNumber(args[1]);\n\t                    var op = new Tone.Modulo(modulus);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'pow': {\n\t                regexp: /^pow/,\n\t                method: function (args, self) {\n\t                    var exp = literalNumber(args[1]);\n\t                    var op = new Tone.Pow(exp);\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            },\n\t            'a2g': {\n\t                regexp: /^a2g/,\n\t                method: function (args, self) {\n\t                    var op = new Tone.AudioToGain();\n\t                    self._eval(args[0]).connect(op);\n\t                    return op;\n\t                }\n\t            }\n\t        },\n\t        //binary expressions\n\t        'binary': {\n\t            '+': {\n\t                regexp: /^\\+/,\n\t                precedence: 1,\n\t                method: applyBinary.bind(this, Tone.Add)\n\t            },\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                precedence: 1,\n\t                method: function (args, self) {\n\t                    //both unary and binary op\n\t                    if (args.length === 1) {\n\t                        return applyUnary(Tone.Negate, args, self);\n\t                    } else {\n\t                        return applyBinary(Tone.Subtract, args, self);\n\t                    }\n\t                }\n\t            },\n\t            '*': {\n\t                regexp: /^\\*/,\n\t                precedence: 0,\n\t                method: applyBinary.bind(this, Tone.Multiply)\n\t            }\n\t        },\n\t        //unary expressions\n\t        'unary': {\n\t            '-': {\n\t                regexp: /^\\-/,\n\t                method: applyUnary.bind(this, Tone.Negate)\n\t            },\n\t            '!': {\n\t                regexp: /^\\!/,\n\t                method: applyUnary.bind(this, Tone.NOT)\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  @param   {string} expr the expression string\n\t\t *  @return  {number}      the input count\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseInputs = function (expr) {\n\t        var inputArray = expr.match(/\\$\\d/g);\n\t        var inputMax = 0;\n\t        if (inputArray !== null) {\n\t            for (var i = 0; i < inputArray.length; i++) {\n\t                var inputNum = parseInt(inputArray[i].substr(1)) + 1;\n\t                inputMax = Math.max(inputMax, inputNum);\n\t            }\n\t        }\n\t        return inputMax;\n\t    };\n\t    /**\n\t\t *  @param   {Array} args \tan array of arguments\n\t\t *  @return  {string} the results of the replacements being replaced\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._replacements = function (args) {\n\t        var expr = args.shift();\n\t        for (var i = 0; i < args.length; i++) {\n\t            expr = expr.replace(/\\%/i, args[i]);\n\t        }\n\t        return expr;\n\t    };\n\t    /**\n\t\t *  tokenize the expression based on the Expressions object\n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}      returns two methods on the tokenized list, next and peek\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._tokenize = function (expr) {\n\t        var position = -1;\n\t        var tokens = [];\n\t        while (expr.length > 0) {\n\t            expr = expr.trim();\n\t            var token = getNextToken(expr);\n\t            tokens.push(token);\n\t            expr = expr.substr(token.value.length);\n\t        }\n\t        function getNextToken(expr) {\n\t            for (var type in Tone.Expr._Expressions) {\n\t                var group = Tone.Expr._Expressions[type];\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    var reg = op.regexp;\n\t                    var match = expr.match(reg);\n\t                    if (match !== null) {\n\t                        return {\n\t                            type: type,\n\t                            value: match[0],\n\t                            method: op.method\n\t                        };\n\t                    }\n\t                }\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Unexpected token ' + expr);\n\t        }\n\t        return {\n\t            next: function () {\n\t                return tokens[++position];\n\t            },\n\t            peek: function () {\n\t                return tokens[position + 1];\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  recursively parse the string expression into a syntax tree\n\t\t *  \n\t\t *  @param   {string} expr \n\t\t *  @return  {Object}\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._parseTree = function (expr) {\n\t        var lexer = this._tokenize(expr);\n\t        var isUndef = this.isUndef.bind(this);\n\t        function matchSyntax(token, syn) {\n\t            return !isUndef(token) && token.type === 'glue' && token.value === syn;\n\t        }\n\t        function matchGroup(token, groupName, prec) {\n\t            var ret = false;\n\t            var group = Tone.Expr._Expressions[groupName];\n\t            if (!isUndef(token)) {\n\t                for (var opName in group) {\n\t                    var op = group[opName];\n\t                    if (op.regexp.test(token.value)) {\n\t                        if (!isUndef(prec)) {\n\t                            if (op.precedence === prec) {\n\t                                return true;\n\t                            }\n\t                        } else {\n\t                            return true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            return ret;\n\t        }\n\t        function parseExpression(precedence) {\n\t            if (isUndef(precedence)) {\n\t                precedence = 5;\n\t            }\n\t            var expr;\n\t            if (precedence < 0) {\n\t                expr = parseUnary();\n\t            } else {\n\t                expr = parseExpression(precedence - 1);\n\t            }\n\t            var token = lexer.peek();\n\t            while (matchGroup(token, 'binary', precedence)) {\n\t                token = lexer.next();\n\t                expr = {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [\n\t                        expr,\n\t                        parseExpression(precedence - 1)\n\t                    ]\n\t                };\n\t                token = lexer.peek();\n\t            }\n\t            return expr;\n\t        }\n\t        function parseUnary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (matchGroup(token, 'unary')) {\n\t                token = lexer.next();\n\t                expr = parseUnary();\n\t                return {\n\t                    operator: token.value,\n\t                    method: token.method,\n\t                    args: [expr]\n\t                };\n\t            }\n\t            return parsePrimary();\n\t        }\n\t        function parsePrimary() {\n\t            var token, expr;\n\t            token = lexer.peek();\n\t            if (isUndef(token)) {\n\t                throw new SyntaxError('Tone.Expr: Unexpected termination of expression');\n\t            }\n\t            if (token.type === 'func') {\n\t                token = lexer.next();\n\t                return parseFunctionCall(token);\n\t            }\n\t            if (token.type === 'value') {\n\t                token = lexer.next();\n\t                return {\n\t                    method: token.method,\n\t                    args: token.value\n\t                };\n\t            }\n\t            if (matchSyntax(token, '(')) {\n\t                lexer.next();\n\t                expr = parseExpression();\n\t                token = lexer.next();\n\t                if (!matchSyntax(token, ')')) {\n\t                    throw new SyntaxError('Expected )');\n\t                }\n\t                return expr;\n\t            }\n\t            throw new SyntaxError('Tone.Expr: Parse error, cannot process token ' + token.value);\n\t        }\n\t        function parseFunctionCall(func) {\n\t            var token, args = [];\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, '(')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ( in a function call \"' + func.value + '\"');\n\t            }\n\t            token = lexer.peek();\n\t            if (!matchSyntax(token, ')')) {\n\t                args = parseArgumentList();\n\t            }\n\t            token = lexer.next();\n\t            if (!matchSyntax(token, ')')) {\n\t                throw new SyntaxError('Tone.Expr: Expected ) in a function call \"' + func.value + '\"');\n\t            }\n\t            return {\n\t                method: func.method,\n\t                args: args,\n\t                name: name\n\t            };\n\t        }\n\t        function parseArgumentList() {\n\t            var token, expr, args = [];\n\t            while (true) {\n\t                expr = parseExpression();\n\t                if (isUndef(expr)) {\n\t                    // TODO maybe throw exception?\n\t                    break;\n\t                }\n\t                args.push(expr);\n\t                token = lexer.peek();\n\t                if (!matchSyntax(token, ',')) {\n\t                    break;\n\t                }\n\t                lexer.next();\n\t            }\n\t            return args;\n\t        }\n\t        return parseExpression();\n\t    };\n\t    /**\n\t\t *  recursively evaluate the expression tree\n\t\t *  @param   {Object} tree \n\t\t *  @return  {AudioNode}      the resulting audio node from the expression\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._eval = function (tree) {\n\t        if (!this.isUndef(tree)) {\n\t            var node = tree.method(tree.args, this);\n\t            this._nodes.push(node);\n\t            return node;\n\t        }\n\t    };\n\t    /**\n\t\t *  dispose all the nodes\n\t\t *  @private\n\t\t */\n\t    Tone.Expr.prototype._disposeNodes = function () {\n\t        for (var i = 0; i < this._nodes.length; i++) {\n\t            var node = this._nodes[i];\n\t            if (this.isFunction(node.dispose)) {\n\t                node.dispose();\n\t            } else if (this.isFunction(node.disconnect)) {\n\t                node.disconnect();\n\t            }\n\t            node = null;\n\t            this._nodes[i] = null;\n\t        }\n\t        this._nodes = null;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t */\n\t    Tone.Expr.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._disposeNodes();\n\t    };\n\t    return Tone.Expr;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var eqPowGain = new Tone.EqualPowerGain();\n\t\t */\n\t    Tone.EqualPowerGain = function () {\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {\n\t            if (Math.abs(val) < 0.001) {\n\t                //should output 0 when input is 0\n\t                return 0;\n\t            } else {\n\t                return this.equalPowerScale(val);\n\t            }\n\t        }.bind(this), 4096);\n\t    };\n\t    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EqualPowerGain} this\n\t\t */\n\t    Tone.EqualPowerGain.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._eqPower.dispose();\n\t        this._eqPower = null;\n\t        return this;\n\t    };\n\t    return Tone.EqualPowerGain;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * @class  Tone.Crossfade provides equal power fading between two inputs. \n\t\t *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n\t\t *\n\t\t * @constructor\n\t\t * @extends {Tone}\n\t\t * @param {NormalRange} [initialFade=0.5]\n\t\t * @example\n\t\t * var crossFade = new Tone.CrossFade(0.5);\n\t\t * //connect effect A to crossfade from\n\t\t * //effect output 0 to crossfade input 0\n\t\t * effectA.connect(crossFade, 0, 0);\n\t\t * //connect effect B to crossfade from\n\t\t * //effect output 0 to crossfade input 1\n\t\t * effectB.connect(crossFade, 0, 1);\n\t\t * crossFade.fade.value = 0;\n\t\t * // ^ only effectA is output\n\t\t * crossFade.fade.value = 1;\n\t\t * // ^ only effectB is output\n\t\t * crossFade.fade.value = 0.5;\n\t\t * // ^ the two signals are mixed equally. \n\t\t */\n\t    Tone.CrossFade = function (initialFade) {\n\t        this.createInsOuts(2, 1);\n\t        /**\n\t\t\t *  Alias for <code>input[0]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.a = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Alias for <code>input[1]</code>. \n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.b = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t * \tThe mix between the two inputs. A fade value of 0\n\t\t\t * \twill output 100% <code>input[0]</code> and \n\t\t\t * \ta value of 1 will output 100% <code>input[1]</code>. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.fade = new Tone.Signal(this.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerA = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  equal power gain cross fade\n\t\t\t *  @private\n\t\t\t *  @type {Tone.EqualPowerGain}\n\t\t\t */\n\t        this._equalPowerB = new Tone.EqualPowerGain();\n\t        /**\n\t\t\t *  invert the incoming signal\n\t\t\t *  @private\n\t\t\t *  @type {Tone}\n\t\t\t */\n\t        this._invert = new Tone.Expr('1 - $0');\n\t        //connections\n\t        this.a.connect(this.output);\n\t        this.b.connect(this.output);\n\t        this.fade.chain(this._equalPowerB, this.b.gain);\n\t        this.fade.chain(this._invert, this._equalPowerA, this.a.gain);\n\t        this._readOnly('fade');\n\t    };\n\t    Tone.extend(Tone.CrossFade);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.CrossFade} this\n\t\t */\n\t    Tone.CrossFade.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('fade');\n\t        this._equalPowerA.dispose();\n\t        this._equalPowerA = null;\n\t        this._equalPowerB.dispose();\n\t        this._equalPowerB = null;\n\t        this.fade.dispose();\n\t        this.fade = null;\n\t        this._invert.dispose();\n\t        this._invert = null;\n\t        this.a.dispose();\n\t        this.a = null;\n\t        this.b.dispose();\n\t        this.b = null;\n\t        return this;\n\t    };\n\t    return Tone.CrossFade;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Filter is a filter which allows for all of the same native methods\n\t\t *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface). \n\t\t *          Tone.Filter has the added ability to set the filter rolloff at -12 \n\t\t *          (default), -24 and -48. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.\n\t\t *  @param {string=} type The type of filter.\n\t\t *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.\n\t\t *                            3 choices: -12, -24, and -48\n\t\t *  @example\n\t\t *  var filter = new Tone.Filter(200, \"highpass\");\n\t\t */\n\t    Tone.Filter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'rolloff'\n\t        ], Tone.Filter.defaults);\n\t        /**\n\t\t\t *  the filter(s)\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filters = [];\n\t        /**\n\t\t\t *  The cutoff frequency of the filter. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune parameter\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(0, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The gain of the filter, only used in certain filter types\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.gain = new Tone.Signal({\n\t            'value': options.gain,\n\t            'convert': false\n\t        });\n\t        /**\n\t\t\t *  The Q or Quality of the filter\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        /**\n\t\t\t *  the type of the filter\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  the rolloff value of the filter\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rolloff = options.rolloff;\n\t        //set the rolloff;\n\t        this.rolloff = options.rolloff;\n\t        this._readOnly([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Filter);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Filter.defaults = {\n\t        'type': 'lowpass',\n\t        'frequency': 350,\n\t        'rolloff': -12,\n\t        'Q': 1,\n\t        'gain': 0\n\t    };\n\t    /**\n\t\t * The type of the filter. Types: \"lowpass\", \"highpass\", \n\t\t * \"bandpass\", \"lowshelf\", \"highshelf\", \"notch\", \"allpass\", or \"peaking\". \n\t\t * @memberOf Tone.Filter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var types = [\n\t                'lowpass',\n\t                'highpass',\n\t                'bandpass',\n\t                'lowshelf',\n\t                'highshelf',\n\t                'notch',\n\t                'allpass',\n\t                'peaking'\n\t            ];\n\t            if (types.indexOf(type) === -1) {\n\t                throw new TypeError('Tone.Filter: invalid type ' + type);\n\t            }\n\t            this._type = type;\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The rolloff of the filter which is the drop in db\n\t\t * per octave. Implemented internally by cascading filters.\n\t\t * Only accepts the values -12, -24, -48 and -96.\n\t\t * @memberOf Tone.Filter#\n\t\t * @type {number}\n\t\t * @name rolloff\n\t\t */\n\t    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {\n\t        get: function () {\n\t            return this._rolloff;\n\t        },\n\t        set: function (rolloff) {\n\t            rolloff = parseInt(rolloff, 10);\n\t            var possibilities = [\n\t                -12,\n\t                -24,\n\t                -48,\n\t                -96\n\t            ];\n\t            var cascadingCount = possibilities.indexOf(rolloff);\n\t            //check the rolloff is valid\n\t            if (cascadingCount === -1) {\n\t                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');\n\t            }\n\t            cascadingCount += 1;\n\t            this._rolloff = rolloff;\n\t            //first disconnect the filters and throw them away\n\t            this.input.disconnect();\n\t            for (var i = 0; i < this._filters.length; i++) {\n\t                this._filters[i].disconnect();\n\t                this._filters[i] = null;\n\t            }\n\t            this._filters = new Array(cascadingCount);\n\t            for (var count = 0; count < cascadingCount; count++) {\n\t                var filter = this.context.createBiquadFilter();\n\t                filter.type = this._type;\n\t                this.frequency.connect(filter.frequency);\n\t                this.detune.connect(filter.detune);\n\t                this.Q.connect(filter.Q);\n\t                this.gain.connect(filter.gain);\n\t                this._filters[count] = filter;\n\t            }\n\t            //connect them up\n\t            var connectionChain = [this.input].concat(this._filters).concat([this.output]);\n\t            this.connectSeries.apply(this, connectionChain);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @return {Tone.Filter} this\n\t\t */\n\t    Tone.Filter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._filters.length; i++) {\n\t            this._filters[i].disconnect();\n\t            this._filters[i] = null;\n\t        }\n\t        this._filters = null;\n\t        this._writable([\n\t            'detune',\n\t            'frequency',\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.Q.dispose();\n\t        this.frequency = null;\n\t        this.Q = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.gain.dispose();\n\t        this.gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Filter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Split the incoming signal into three bands (low, mid, high)\n\t\t *         with two crossover frequency controls. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency\n\t\t *  @param {Frequency} [highFrequency] the mid/high crossover frequency\n\t\t */\n\t    Tone.MultibandSplit = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ], Tone.MultibandSplit.defaults);\n\t        /**\n\t\t\t *  the input\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.input = new Tone.Gain();\n\t        /**\n\t\t\t *  the outputs\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Array(3);\n\t        /**\n\t\t\t *  The low band. Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  the lower filter of the mid band\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowMidFilter = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The mid band output. Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');\n\t        /**\n\t\t\t *  The high band output. Alias for <code>output[2]</code>\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.high = this.output[2] = new Tone.Filter(0, 'highpass');\n\t        /**\n\t\t\t *  The low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The quality of all the filters\n\t\t\t *  @type {Number}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q);\n\t        this.input.fan(this.low, this.high);\n\t        this.input.chain(this._lowMidFilter, this.mid);\n\t        //the frequency control signal\n\t        this.lowFrequency.connect(this.low.frequency);\n\t        this.lowFrequency.connect(this._lowMidFilter.frequency);\n\t        this.highFrequency.connect(this.mid.frequency);\n\t        this.highFrequency.connect(this.high.frequency);\n\t        //the Q value\n\t        this.Q.connect(this.low.Q);\n\t        this.Q.connect(this._lowMidFilter.Q);\n\t        this.Q.connect(this.mid.Q);\n\t        this.Q.connect(this.high.Q);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandSplit);\n\t    /**\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandSplit.defaults = {\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500,\n\t        'Q': 1\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MultibandSplit} this\n\t\t */\n\t    Tone.MultibandSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.low = null;\n\t        this._lowMidFilter.dispose();\n\t        this._lowMidFilter = null;\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.high.dispose();\n\t        this.high = null;\n\t        this.lowFrequency.dispose();\n\t        this.lowFrequency = null;\n\t        this.highFrequency.dispose();\n\t        this.highFrequency = null;\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as\n\t\t *         well as the low and high crossover frequencies.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  \n\t\t *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.\n\t\t *  @param {Decibels} [midLevel] The gain applied to the mid.\n\t\t *  @param {Decibels} [highLevel] The gain applied to the high.\n\t\t *  @example\n\t\t * var eq = new Tone.EQ3(-10, 3, -20);\n\t\t */\n\t    Tone.EQ3 = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'low',\n\t            'mid',\n\t            'high'\n\t        ], Tone.EQ3.defaults);\n\t        /**\n\t\t\t *  the output node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  the multiband split\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._multibandSplit = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  The gain for the lower signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);\n\t        /**\n\t\t\t *  The gain for the mid signals\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Tone.Gain}\n\t\t\t * @private\n\t\t\t */\n\t        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The gain in decibels of the low part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.low = this._lowGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the mid part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.mid = this._midGain.gain;\n\t        /**\n\t\t\t * The gain in decibels of the high part\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.high = this._highGain.gain;\n\t        /**\n\t\t\t *  The Q value for all of the filters. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = this._multibandSplit.Q;\n\t        /**\n\t\t\t *  The low/mid crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._multibandSplit.lowFrequency;\n\t        /**\n\t\t\t *  The mid/high crossover frequency. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._multibandSplit.highFrequency;\n\t        //the frequency bands\n\t        this._multibandSplit.low.chain(this._lowGain, this.output);\n\t        this._multibandSplit.mid.chain(this._midGain, this.output);\n\t        this._multibandSplit.high.chain(this._highGain, this.output);\n\t        this._readOnly([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.EQ3);\n\t    /**\n\t\t *  the default values\n\t\t */\n\t    Tone.EQ3.defaults = {\n\t        'low': 0,\n\t        'mid': 0,\n\t        'high': 0,\n\t        'lowFrequency': 400,\n\t        'highFrequency': 2500\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.EQ3} this\n\t\t */\n\t    Tone.EQ3.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'low',\n\t            'mid',\n\t            'high',\n\t            'lowFrequency',\n\t            'highFrequency'\n\t        ]);\n\t        this._multibandSplit.dispose();\n\t        this._multibandSplit = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        this._lowGain.dispose();\n\t        this._lowGain = null;\n\t        this._midGain.dispose();\n\t        this._midGain = null;\n\t        this._highGain.dispose();\n\t        this._highGain = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.EQ3;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Performs a linear scaling on an input signal.\n\t\t *          Scales a NormalRange input to between\n\t\t *          outputMin and outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @example\n\t\t * var scale = new Tone.Scale(50, 100);\n\t\t * var signal = new Tone.Signal(0.5).connect(scale);\n\t\t * //the output of scale equals 75\n\t\t */\n\t    Tone.Scale = function (outputMin, outputMax) {\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMin = this.defaultArg(outputMin, 0);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._outputMax = this.defaultArg(outputMax, 1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.input = new Tone.Multiply(1);\n\t        /** \n\t\t\t *  @private\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._add = this.output = new Tone.Add(0);\n\t        this._scale.connect(this._add);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Scale, Tone.SignalBase);\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'min', {\n\t        get: function () {\n\t            return this._outputMin;\n\t        },\n\t        set: function (min) {\n\t            this._outputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.Scale#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Scale.prototype, 'max', {\n\t        get: function () {\n\t            return this._outputMax;\n\t        },\n\t        set: function (max) {\n\t            this._outputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Scale.prototype._setRange = function () {\n\t        this._add.value = this._outputMin;\n\t        this._scale.value = this._outputMax - this._outputMin;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Scale} this\n\t\t */\n\t    Tone.Scale.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._add.dispose();\n\t        this._add = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        return this;\n\t    };\n\t    return Tone.Scale;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class  Performs an exponential scaling on an input signal.\n\t\t *          Scales a NormalRange value [0,1] exponentially\n\t\t *          to the output range of outputMin to outputMax.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @param {number} [outputMin=0] The output value when the input is 0. \n\t\t *  @param {number} [outputMax=1]\tThe output value when the input is 1. \n\t\t *  @param {number} [exponent=2] The exponent which scales the incoming signal.\n\t\t *  @example\n\t\t * var scaleExp = new Tone.ScaleExp(0, 100, 2);\n\t\t * var signal = new Tone.Signal(0.5).connect(scaleExp);\n\t\t */\n\t    Tone.ScaleExp = function (outputMin, outputMax, exponent) {\n\t        /**\n\t\t\t *  scale the input to the output range\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(outputMin, outputMax);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.input = new Tone.Pow(this.defaultArg(exponent, 2));\n\t        this._exp.connect(this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaleExp, Tone.SignalBase);\n\t    /**\n\t\t * Instead of interpolating linearly between the <code>min</code> and \n\t\t * <code>max</code> values, setting the exponent will interpolate between\n\t\t * the two values with an exponential curve. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum output value. This number is output when \n\t\t * the value input value is 0. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output value. This number is output when \n\t\t * the value input value is 1. \n\t\t * @memberOf Tone.ScaleExp#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.ScaleExp} this\n\t\t */\n\t    Tone.ScaleExp.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaleExp;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  createDelay shim\n\t\t *  @private\n\t\t */\n\t    if (window.DelayNode && !AudioContext.prototype.createDelay) {\n\t        AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface). \n\t\t *  @extends {Tone}\n\t\t *  @param {Time=} delayTime The delay applied to the incoming signal.\n\t\t *  @param {Time=} maxDelay The maximum delay time. \n\t\t */\n\t    Tone.Delay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'maxDelay'\n\t        ], Tone.Delay.defaults);\n\t        /**\n\t\t\t *  The native delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = this.input = this.output = this.context.createDelay(this.toSeconds(options.maxDelay));\n\t        /**\n\t\t\t *  The amount of time the incoming signal is\n\t\t\t *  delayed. \n\t\t\t *  @type {Tone.Param}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Param({\n\t            'param': this._delayNode.delayTime,\n\t            'units': Tone.Type.Time,\n\t            'value': options.delayTime\n\t        });\n\t        this._readOnly('delayTime');\n\t    };\n\t    Tone.extend(Tone.Delay);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Delay.defaults = {\n\t        'maxDelay': 1,\n\t        'delayTime': 0\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Delay}  this\n\t\t */\n\t    Tone.Delay.prototype.dispose = function () {\n\t        Tone.Param.prototype.dispose.call(this);\n\t        this._delayNode.disconnect();\n\t        this._delayNode = null;\n\t        this._writable('delayTime');\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.Delay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Comb filters are basic building blocks for physical modeling. Read more\n\t\t *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the filter. \n\t\t *  @param {NormalRange=} resonance The amount of feedback the filter has. \n\t\t */\n\t    Tone.FeedbackCombFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance'\n\t        ], Tone.FeedbackCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the feedback node\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        this._delay.chain(this._feedback, this._delay);\n\t        this._readOnly([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FeedbackCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackCombFilter} this\n\t\t */\n\t    Tone.FeedbackCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._feedback.dispose();\n\t        this._feedback = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Follower is a  crude envelope follower which will follow \n\t\t *          the amplitude of an incoming signal. \n\t\t *          Take care with small (< 0.02) attack or decay values \n\t\t *          as follower has some ripple which is exaggerated\n\t\t *          at these values. Read more about envelope followers (also known \n\t\t *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Time|Object} [attack] The rate at which the follower rises.\n\t\t *  @param {Time=} release The rate at which the folower falls. \n\t\t *  @example\n\t\t * var follower = new Tone.Follower(0.2, 0.4);\n\t\t */\n\t    Tone.Follower = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'release'\n\t        ], Tone.Follower.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Abs}\n\t\t\t *  @private\n\t\t\t */\n\t        this._abs = new Tone.Abs();\n\t        /**\n\t\t\t *  the lowpass filter which smooths the input\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filter = this.context.createBiquadFilter();\n\t        this._filter.type = 'lowpass';\n\t        this._filter.frequency.value = 0;\n\t        this._filter.Q.value = -100;\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequencyValues = new Tone.WaveShaper();\n\t        /**\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = new Tone.Subtract();\n\t        /**\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = new Tone.Delay(this.blockTime);\n\t        /**\n\t\t\t *  this keeps it far from 0, even for very small differences\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mult = new Tone.Multiply(10000);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._attack = options.attack;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._release = options.release;\n\t        //the smoothed signal to get the values\n\t        this.input.chain(this._abs, this._filter, this.output);\n\t        //the difference path\n\t        this._abs.connect(this._sub, 0, 1);\n\t        this._filter.chain(this._delay, this._sub);\n\t        //threshold the difference and use the thresh to set the frequency\n\t        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);\n\t        //set the attack and release values in the table\n\t        this._setAttackRelease(this._attack, this._release);\n\t    };\n\t    Tone.extend(Tone.Follower);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Follower.defaults = {\n\t        'attack': 0.05,\n\t        'release': 0.5\n\t    };\n\t    /**\n\t\t *  sets the attack and release times in the wave shaper\n\t\t *  @param   {Time} attack  \n\t\t *  @param   {Time} release \n\t\t *  @private\n\t\t */\n\t    Tone.Follower.prototype._setAttackRelease = function (attack, release) {\n\t        var minTime = this.blockTime;\n\t        attack = Tone.Time(attack).toFrequency();\n\t        release = Tone.Time(release).toFrequency();\n\t        attack = Math.max(attack, minTime);\n\t        release = Math.max(release, minTime);\n\t        this._frequencyValues.setMap(function (val) {\n\t            if (val <= 0) {\n\t                return attack;\n\t            } else {\n\t                return release;\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t * The attack time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'attack', {\n\t        get: function () {\n\t            return this._attack;\n\t        },\n\t        set: function (attack) {\n\t            this._attack = attack;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t * The release time.\n\t\t * @memberOf Tone.Follower#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Follower.prototype, 'release', {\n\t        get: function () {\n\t            return this._release;\n\t        },\n\t        set: function (release) {\n\t            this._release = release;\n\t            this._setAttackRelease(this._attack, this._release);\n\t        }\n\t    });\n\t    /**\n\t\t *  Borrows the connect method from Signal so that the output can be used\n\t\t *  as a Tone.Signal control signal.\n\t\t *  @function\n\t\t */\n\t    Tone.Follower.prototype.connect = Tone.Signal.prototype.connect;\n\t    /**\n\t\t *  dispose\n\t\t *  @returns {Tone.Follower} this\n\t\t */\n\t    Tone.Follower.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._filter.disconnect();\n\t        this._filter = null;\n\t        this._frequencyValues.disconnect();\n\t        this._frequencyValues = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this._sub.disconnect();\n\t        this._sub = null;\n\t        this._abs.dispose();\n\t        this._abs = null;\n\t        this._mult.dispose();\n\t        this._mult = null;\n\t        this._curve = null;\n\t        return this;\n\t    };\n\t    return Tone.Follower;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ScaledEnvelop is an envelope which can be scaled \n\t\t *         to any range. It's useful for applying an envelope \n\t\t *         to a frequency or any other non-NormalRange signal \n\t\t *         parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var scaledEnv = new Tone.ScaledEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"min\" : 200,\n\t\t *  \t\"max\" : 2000\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.ScaledEnvelope = function () {\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.Envelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.ScaledEnvelope.defaults);\n\t        /** \n\t\t\t *  scale the incoming signal by an exponent\n\t\t\t *  @type {Tone.Pow}\n\t\t\t *  @private\n\t\t\t */\n\t        this._exp = this.output = new Tone.Pow(options.exponent);\n\t        /**\n\t\t\t *  scale the signal to the desired range\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = this.output = new Tone.Scale(options.min, options.max);\n\t        this._sig.chain(this._exp, this._scale);\n\t    };\n\t    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.ScaledEnvelope.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'exponent': 1\n\t    };\n\t    /**\n\t\t * The envelope's min output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's max output value. In other words, the value\n\t\t * at the peak of the attack portion of the envelope. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {\n\t        get: function () {\n\t            return this._scale.max;\n\t        },\n\t        set: function (max) {\n\t            this._scale.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.ScaledEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.ScaledEnvelope} this\n\t\t */\n\t    Tone.ScaledEnvelope.prototype.dispose = function () {\n\t        Tone.Envelope.prototype.dispose.call(this);\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._exp.dispose();\n\t        this._exp = null;\n\t        return this;\n\t    };\n\t    return Tone.ScaledEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`\n\t\t *         it's got a `baseFrequency` and `octaves` parameter. \n\t\t *\n\t\t *  @extends {Tone.Envelope}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [attack]\tthe attack time in seconds\n\t\t *  @param {Time} [decay]\tthe decay time in seconds\n\t\t *  @param {number} [sustain] \ta percentage (0-1) of the full amplitude\n\t\t *  @param {Time} [release]\tthe release time in seconds\n\t\t *  @example\n\t\t *  var env = new Tone.FrequencyEnvelope({\n\t\t *  \t\"attack\" : 0.2,\n\t\t *  \t\"baseFrequency\" : \"C2\",\n\t\t *  \t\"octaves\" : 4\n\t\t *  });\n\t\t *  scaledEnv.connect(oscillator.frequency);\n\t\t */\n\t    Tone.FrequencyEnvelope = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'attack',\n\t            'decay',\n\t            'sustain',\n\t            'release'\n\t        ], Tone.Envelope.defaults);\n\t        Tone.ScaledEnvelope.call(this, options);\n\t        options = this.defaultArg(options, Tone.FrequencyEnvelope.defaults);\n\t        /**\n\t\t\t *  Stores the octave value\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        //setup\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.FrequencyEnvelope.defaults = {\n\t        'baseFrequency': 200,\n\t        'octaves': 4,\n\t        'exponent': 2\n\t    };\n\t    /**\n\t\t * The envelope's mininum output value. This is the value which it\n\t\t * starts at. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._scale.min;\n\t        },\n\t        set: function (min) {\n\t            this._scale.min = this.toFrequency(min);\n\t            //also update the octaves\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The number of octaves above the baseFrequency that the\n\t\t * envelope will scale to.\n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._scale.max = this.baseFrequency * Math.pow(2, octaves);\n\t        }\n\t    });\n\t    /**\n\t\t * The envelope's exponent value. \n\t\t * @memberOf Tone.FrequencyEnvelope#\n\t\t * @type {number}\n\t\t * @name exponent\n\t\t */\n\t    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {\n\t        get: function () {\n\t            return this._exp.value;\n\t        },\n\t        set: function (exp) {\n\t            this._exp.value = exp;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FrequencyEnvelope} this\n\t\t */\n\t    Tone.FrequencyEnvelope.prototype.dispose = function () {\n\t        Tone.ScaledEnvelope.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.FrequencyEnvelope;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Gate only passes a signal through when the incoming \n\t\t *          signal exceeds a specified threshold. To do this, Gate uses \n\t\t *          a Tone.Follower to follow the amplitude of the incoming signal. \n\t\t *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels|Object} [threshold] The threshold above which the gate will open. \n\t\t *  @param {Time=} attack The follower's attack time\n\t\t *  @param {Time=} release The follower's release time\n\t\t *  @example\n\t\t * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();\n\t\t * var mic = new Tone.UserMedia().connect(gate);\n\t\t * //the gate will only pass through the incoming \n\t\t * //signal when it's louder than -30db\n\t\t */\n\t    Tone.Gate = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'threshold',\n\t            'attack',\n\t            'release'\n\t        ], Tone.Gate.defaults);\n\t        /**\n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this._follower = new Tone.Follower(options.attack, options.release);\n\t        /**\n\t\t\t *  @type {Tone.GreaterThan}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gt = new Tone.GreaterThan(this.dbToGain(options.threshold));\n\t        //the connections\n\t        this.input.connect(this.output);\n\t        //the control signal\n\t        this.input.chain(this._gt, this._follower, this.output.gain);\n\t    };\n\t    Tone.extend(Tone.Gate);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Gate.defaults = {\n\t        'attack': 0.1,\n\t        'release': 0.1,\n\t        'threshold': -40\n\t    };\n\t    /**\n\t\t * The threshold of the gate in decibels\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Decibels}\n\t\t * @name threshold\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'threshold', {\n\t        get: function () {\n\t            return this.gainToDb(this._gt.value);\n\t        },\n\t        set: function (thresh) {\n\t            this._gt.value = this.dbToGain(thresh);\n\t        }\n\t    });\n\t    /**\n\t\t * The attack speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name attack\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'attack', {\n\t        get: function () {\n\t            return this._follower.attack;\n\t        },\n\t        set: function (attackTime) {\n\t            this._follower.attack = attackTime;\n\t        }\n\t    });\n\t    /**\n\t\t * The release speed of the gate\n\t\t * @memberOf Tone.Gate#\n\t\t * @type {Time}\n\t\t * @name release\n\t\t */\n\t    Object.defineProperty(Tone.Gate.prototype, 'release', {\n\t        get: function () {\n\t            return this._follower.release;\n\t        },\n\t        set: function (releaseTime) {\n\t            this._follower.release = releaseTime;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Gate} this\n\t\t */\n\t    Tone.Gate.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._follower.dispose();\n\t        this._gt.dispose();\n\t        this._follower = null;\n\t        this._gt = null;\n\t        return this;\n\t    };\n\t    return Tone.Gate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A Timeline State. Provides the methods: <code>setStateAtTime(\"state\", time)</code>\n\t\t *          and <code>getValueAtTime(time)</code>.\n\t\t *\n\t\t *  @extends {Tone.Timeline}\n\t\t *  @param {String} initial The initial state of the TimelineState. \n\t\t *                          Defaults to <code>undefined</code>\n\t\t */\n\t    Tone.TimelineState = function (initial) {\n\t        Tone.Timeline.call(this);\n\t        /**\n\t\t\t *  The initial state\n\t\t\t *  @private\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this._initial = initial;\n\t    };\n\t    Tone.extend(Tone.TimelineState, Tone.Timeline);\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t */\n\t    Tone.TimelineState.prototype.getValueAtTime = function (time) {\n\t        var event = this.get(time);\n\t        if (event !== null) {\n\t            return event.state;\n\t        } else {\n\t            return this._initial;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state scheduled before or at\n\t\t *  the given time.\n\t\t *  @param  {String}  state The name of the state to set.\n\t\t *  @param  {Number}  time  The time to query.\n\t\t */\n\t    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {\n\t        this.add({\n\t            'state': state,\n\t            'time': time\n\t        });\n\t    };\n\t    return Tone.TimelineState;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A sample accurate clock which provides a callback at the given rate. \n\t\t *          While the callback is not sample-accurate (it is still susceptible to\n\t\t *          loose JS timing), the time passed in as the argument to the callback\n\t\t *          is precise. For most applications, it is better to use Tone.Transport\n\t\t *          instead of the Clock by itself since you can synchronize multiple callbacks.\n\t\t *\n\t\t * \t@constructor\n\t\t *  @extends {Tone.Emitter}\n\t\t * \t@param {function} callback The callback to be invoked with the time of the audio event\n\t\t * \t@param {Frequency} frequency The rate of the callback\n\t\t * \t@example\n\t\t * //the callback will be invoked approximately once a second\n\t\t * //and will print the time exactly once a second apart.\n\t\t * var clock = new Tone.Clock(function(time){\n\t\t * \tconsole.log(time);\n\t\t * }, 1);\n\t\t */\n\t    Tone.Clock = function () {\n\t        Tone.Emitter.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'frequency'\n\t        ], Tone.Clock.defaults);\n\t        /**\n\t\t\t *  The callback function to invoke at the scheduled tick.\n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The next time the callback is scheduled.\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._nextTick = 0;\n\t        /**\n\t\t\t *  The last state of the clock.\n\t\t\t *  @type  {State}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastState = Tone.State.Stopped;\n\t        /**\n\t\t\t *  The rate the callback function should be invoked. \n\t\t\t *  @type  {BPM}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.TimelineSignal(options.frequency, Tone.Type.Frequency);\n\t        this._readOnly('frequency');\n\t        /**\n\t\t\t *  The number of times the callback was invoked. Starts counting at 0\n\t\t\t *  and increments after the callback was invoked. \n\t\t\t *  @type {Ticks}\n\t\t\t *  @readOnly\n\t\t\t */\n\t        this.ticks = 0;\n\t        /**\n\t\t\t *  The state timeline\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The loop function bound to its context. \n\t\t\t *  This is necessary to remove the event in the end.\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundLoop = this._loop.bind(this);\n\t        //bind a callback to the worker thread\n\t        this.context.on('tick', this._boundLoop);\n\t    };\n\t    Tone.extend(Tone.Clock, Tone.Emitter);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Clock.defaults = {\n\t        'callback': Tone.noOp,\n\t        'frequency': 1,\n\t        'lookAhead': 'auto'\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Clock#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Clock.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the clock at the given time. Optionally pass in an offset\n\t\t *  of where to start the tick counter from.\n\t\t *  @param  {Time}  time    The time the clock should start\n\t\t *  @param  {Ticks=}  offset  Where the tick counter starts counting from.\n\t\t *  @return  {Tone.Clock}  this\n\t\t */\n\t    Tone.Clock.prototype.start = function (time, offset) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) !== Tone.State.Started) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'offset': offset\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the clock. Stopping the clock resets the tick counter to 0.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t *  @example\n\t\t * clock.stop();\n\t\t */\n\t    Tone.Clock.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the clock. Pausing does not reset the tick counter.\n\t\t *  @param {Time} [time=now] The time when the clock should stop.\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.pause = function (time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Paused, time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The scheduling loop.\n\t\t *  @param  {Number}  time  The current page time starting from 0\n\t\t *                          when the page was loaded.\n\t\t *  @private\n\t\t */\n\t    Tone.Clock.prototype._loop = function () {\n\t        //get the frequency value to compute the value of the next loop\n\t        var now = this.now();\n\t        //if it's started\n\t        var lookAhead = this.context.lookAhead;\n\t        var updateInterval = this.context.updateInterval;\n\t        var lagCompensation = this.context.lag * 2;\n\t        var loopInterval = now + lookAhead + updateInterval + lagCompensation;\n\t        while (loopInterval > this._nextTick && this._state) {\n\t            var currentState = this._state.getValueAtTime(this._nextTick);\n\t            if (currentState !== this._lastState) {\n\t                this._lastState = currentState;\n\t                var event = this._state.get(this._nextTick);\n\t                // emit an event\n\t                if (currentState === Tone.State.Started) {\n\t                    //correct the time\n\t                    this._nextTick = event.time;\n\t                    if (!this.isUndef(event.offset)) {\n\t                        this.ticks = event.offset;\n\t                    }\n\t                    this.emit('start', event.time, this.ticks);\n\t                } else if (currentState === Tone.State.Stopped) {\n\t                    this.ticks = 0;\n\t                    this.emit('stop', event.time);\n\t                } else if (currentState === Tone.State.Paused) {\n\t                    this.emit('pause', event.time);\n\t                }\n\t            }\n\t            var tickTime = this._nextTick;\n\t            if (this.frequency) {\n\t                this._nextTick += 1 / this.frequency.getValueAtTime(this._nextTick);\n\t                if (currentState === Tone.State.Started) {\n\t                    this.callback(tickTime);\n\t                    this.ticks++;\n\t                }\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the scheduled state at the given time.\n\t\t *  @param  {Time}  time  The time to query.\n\t\t *  @return  {String}  The name of the state input in setStateAtTime.\n\t\t *  @example\n\t\t * clock.start(\"+0.1\");\n\t\t * clock.getStateAtTime(\"+0.1\"); //returns \"started\"\n\t\t */\n\t    Tone.Clock.prototype.getStateAtTime = function (time) {\n\t        time = this.toSeconds(time);\n\t        return this._state.getValueAtTime(time);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.Clock} this\n\t\t */\n\t    Tone.Clock.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this.context.off('tick', this._boundLoop);\n\t        this._writable('frequency');\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._boundLoop = null;\n\t        this._nextTick = Infinity;\n\t        this.callback = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Clock;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Similar to Tone.Timeline, but all events represent\n\t\t *         intervals with both \"time\" and \"duration\" times. The \n\t\t *         events are placed in a tree structure optimized\n\t\t *         for querying an intersection point with the timeline\n\t\t *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n\t\t *         to represent the data.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.IntervalTimeline = function () {\n\t        /**\n\t\t\t *  The root node of the inteval tree\n\t\t\t *  @type  {IntervalNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._root = null;\n\t        /**\n\t\t\t *  Keep track of the length of the timeline.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._length = 0;\n\t    };\n\t    Tone.extend(Tone.IntervalTimeline);\n\t    /**\n\t\t *  The event to add to the timeline. All events must \n\t\t *  have a time and duration value\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.add = function (event) {\n\t        if (this.isUndef(event.time) || this.isUndef(event.duration)) {\n\t            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');\n\t        }\n\t        var node = new IntervalNode(event.time, event.time + event.duration, event);\n\t        if (this._root === null) {\n\t            this._root = node;\n\t        } else {\n\t            this._root.insert(node);\n\t        }\n\t        this._length++;\n\t        // Restructure tree to be balanced\n\t        while (node !== null) {\n\t            node.updateHeight();\n\t            node.updateMax();\n\t            this._rebalance(node);\n\t            node = node.parent;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove an event from the timeline.\n\t\t *  @param  {Object}  event  The event to remove from the timeline\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.remove = function (event) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(event.time, results);\n\t            for (var i = 0; i < results.length; i++) {\n\t                var node = results[i];\n\t                if (node.event === event) {\n\t                    this._removeNode(node);\n\t                    this._length--;\n\t                    break;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The number of items in the timeline.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.IntervalTimeline#\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {\n\t        get: function () {\n\t            return this._length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Remove events whose time time is after the given time\n\t\t *  @param  {Number}  time  The time to query.\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.cancel = function (after) {\n\t        this.forEachAfter(after, function (event) {\n\t            this.remove(event);\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the root node as the given node\n\t\t *  @param {IntervalNode} node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._setRoot = function (node) {\n\t        this._root = node;\n\t        if (this._root !== null) {\n\t            this._root.parent = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Replace the references to the node in the node's parent\n\t\t *  with the replacement node.\n\t\t *  @param  {IntervalNode}  node        \n\t\t *  @param  {IntervalNode}  replacement \n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {\n\t        if (node.parent !== null) {\n\t            if (node.isLeftChild()) {\n\t                node.parent.left = replacement;\n\t            } else {\n\t                node.parent.right = replacement;\n\t            }\n\t            this._rebalance(node.parent);\n\t        } else {\n\t            this._setRoot(replacement);\n\t        }\n\t    };\n\t    /**\n\t\t *  Remove the node from the tree and replace it with \n\t\t *  a successor which follows the schema.\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._removeNode = function (node) {\n\t        if (node.left === null && node.right === null) {\n\t            this._replaceNodeInParent(node, null);\n\t        } else if (node.right === null) {\n\t            this._replaceNodeInParent(node, node.left);\n\t        } else if (node.left === null) {\n\t            this._replaceNodeInParent(node, node.right);\n\t        } else {\n\t            var balance = node.getBalance();\n\t            var replacement, temp;\n\t            if (balance > 0) {\n\t                if (node.left.right === null) {\n\t                    replacement = node.left;\n\t                    replacement.right = node.right;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.left.right;\n\t                    while (replacement.right !== null) {\n\t                        replacement = replacement.right;\n\t                    }\n\t                    replacement.parent.right = replacement.left;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            } else {\n\t                if (node.right.left === null) {\n\t                    replacement = node.right;\n\t                    replacement.left = node.left;\n\t                    temp = replacement;\n\t                } else {\n\t                    replacement = node.right.left;\n\t                    while (replacement.left !== null) {\n\t                        replacement = replacement.left;\n\t                    }\n\t                    replacement.parent = replacement.parent;\n\t                    replacement.parent.left = replacement.right;\n\t                    temp = replacement.parent;\n\t                    replacement.left = node.left;\n\t                    replacement.right = node.right;\n\t                }\n\t            }\n\t            if (node.parent !== null) {\n\t                if (node.isLeftChild()) {\n\t                    node.parent.left = replacement;\n\t                } else {\n\t                    node.parent.right = replacement;\n\t                }\n\t            } else {\n\t                this._setRoot(replacement);\n\t            }\n\t            // this._replaceNodeInParent(node, replacement);\n\t            this._rebalance(temp);\n\t        }\n\t        node.dispose();\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the left\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.right the new root of this sub tree (instead of node)\n\t        var pivotNode = node.right;\n\t        node.right = pivotNode.left;\n\t        pivotNode.left = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Rotate the tree to the right\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rotateRight = function (node) {\n\t        var parent = node.parent;\n\t        var isLeftChild = node.isLeftChild();\n\t        // Make node.left the new root of this sub tree (instead of node)\n\t        var pivotNode = node.left;\n\t        node.left = pivotNode.right;\n\t        pivotNode.right = node;\n\t        if (parent !== null) {\n\t            if (isLeftChild) {\n\t                parent.left = pivotNode;\n\t            } else {\n\t                parent.right = pivotNode;\n\t            }\n\t        } else {\n\t            this._setRoot(pivotNode);\n\t        }\n\t    };\n\t    /**\n\t\t *  Balance the BST\n\t\t *  @param  {IntervalNode}  node\n\t\t *  @private\n\t\t */\n\t    Tone.IntervalTimeline.prototype._rebalance = function (node) {\n\t        var balance = node.getBalance();\n\t        if (balance > 1) {\n\t            if (node.left.getBalance() < 0) {\n\t                this._rotateLeft(node.left);\n\t            } else {\n\t                this._rotateRight(node);\n\t            }\n\t        } else if (balance < -1) {\n\t            if (node.right.getBalance() > 0) {\n\t                this._rotateRight(node.right);\n\t            } else {\n\t                this._rotateLeft(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Get an event whose time and duration span the give time. Will\n\t\t *  return the match whose \"time\" value is closest to the given time.\n\t\t *  @param  {Object}  event  The event to add to the timeline\n\t\t *  @return  {Object}  The event which spans the desired time\n\t\t */\n\t    Tone.IntervalTimeline.prototype.get = function (time) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            if (results.length > 0) {\n\t                var max = results[0];\n\t                for (var i = 1; i < results.length; i++) {\n\t                    if (results[i].low > max.low) {\n\t                        max = results[i];\n\t                    }\n\t                }\n\t                return max.event;\n\t            }\n\t        }\n\t        return null;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the timeline.\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEach = function (callback) {\n\t        if (this._root !== null) {\n\t            var allNodes = [];\n\t            if (this._root !== null) {\n\t                this._root.traverse(function (node) {\n\t                    allNodes.push(node);\n\t                });\n\t            }\n\t            for (var i = 0; i < allNodes.length; i++) {\n\t                var ev = allNodes[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the given time\n\t\t *  overlaps with the time and duration time of the event.\n\t\t *  @param  {Number}  time The time to check if items are overlapping\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.search(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over everything in the array in which the time is greater\n\t\t *  than the given time.\n\t\t *  @param  {Number}  time The time to check if items are before\n\t\t *  @param  {Function}  callback The callback to invoke with every item\n\t\t *  @returns {Tone.IntervalTimeline} this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.forEachAfter = function (time, callback) {\n\t        if (this._root !== null) {\n\t            var results = [];\n\t            this._root.searchAfter(time, results);\n\t            for (var i = results.length - 1; i >= 0; i--) {\n\t                var ev = results[i].event;\n\t                if (ev) {\n\t                    callback(ev);\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.IntervalTimeline}  this\n\t\t */\n\t    Tone.IntervalTimeline.prototype.dispose = function () {\n\t        var allNodes = [];\n\t        if (this._root !== null) {\n\t            this._root.traverse(function (node) {\n\t                allNodes.push(node);\n\t            });\n\t        }\n\t        for (var i = 0; i < allNodes.length; i++) {\n\t            allNodes[i].dispose();\n\t        }\n\t        allNodes = null;\n\t        this._root = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tINTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Represents a node in the binary search tree, with the addition\n\t\t *  of a \"high\" value which keeps track of the highest value of\n\t\t *  its children. \n\t\t *  References: \n\t\t *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n\t\t *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n\t\t *  @param {Number} low\n\t\t *  @param {Number} high\n\t\t *  @private\n\t\t */\n\t    var IntervalNode = function (low, high, event) {\n\t        //the event container\n\t        this.event = event;\n\t        //the low value\n\t        this.low = low;\n\t        //the high value\n\t        this.high = high;\n\t        //the high value for this and all child nodes\n\t        this.max = this.high;\n\t        //the nodes to the left\n\t        this._left = null;\n\t        //the nodes to the right\n\t        this._right = null;\n\t        //the parent node\n\t        this.parent = null;\n\t        //the number of child nodes\n\t        this.height = 0;\n\t    };\n\t    /** \n\t\t *  Insert a node into the correct spot in the tree\n\t\t *  @param  {IntervalNode}  node\n\t\t */\n\t    IntervalNode.prototype.insert = function (node) {\n\t        if (node.low <= this.low) {\n\t            if (this.left === null) {\n\t                this.left = node;\n\t            } else {\n\t                this.left.insert(node);\n\t            }\n\t        } else {\n\t            if (this.right === null) {\n\t                this.right = node;\n\t            } else {\n\t                this.right.insert(node);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which overlap \n\t\t *  with the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.search = function (point, results) {\n\t        // If p is to the right of the rightmost point of any interval\n\t        // in this node and all children, there won't be any matches.\n\t        if (point > this.max) {\n\t            return;\n\t        }\n\t        // Search left children\n\t        if (this.left !== null) {\n\t            this.left.search(point, results);\n\t        }\n\t        // Check this node\n\t        if (this.low <= point && this.high > point) {\n\t            results.push(this);\n\t        }\n\t        // If p is to the left of the time of this interval,\n\t        // then it can't be in any child to the right.\n\t        if (this.low > point) {\n\t            return;\n\t        }\n\t        // Search right children\n\t        if (this.right !== null) {\n\t            this.right.search(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Search the tree for nodes which are less \n\t\t *  than the given point\n\t\t *  @param  {Number}  point  The point to query\n\t\t *  @param  {Array}  results  The array to put the results\n\t\t */\n\t    IntervalNode.prototype.searchAfter = function (point, results) {\n\t        // Check this node\n\t        if (this.low >= point) {\n\t            results.push(this);\n\t            if (this.left !== null) {\n\t                this.left.searchAfter(point, results);\n\t            }\n\t        }\n\t        // search the right side\n\t        if (this.right !== null) {\n\t            this.right.searchAfter(point, results);\n\t        }\n\t    };\n\t    /**\n\t\t *  Invoke the callback on this element and both it's branches\n\t\t *  @param  {Function}  callback\n\t\t */\n\t    IntervalNode.prototype.traverse = function (callback) {\n\t        callback(this);\n\t        if (this.left !== null) {\n\t            this.left.traverse(callback);\n\t        }\n\t        if (this.right !== null) {\n\t            this.right.traverse(callback);\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateHeight = function () {\n\t        if (this.left !== null && this.right !== null) {\n\t            this.height = Math.max(this.left.height, this.right.height) + 1;\n\t        } else if (this.right !== null) {\n\t            this.height = this.right.height + 1;\n\t        } else if (this.left !== null) {\n\t            this.height = this.left.height + 1;\n\t        } else {\n\t            this.height = 0;\n\t        }\n\t    };\n\t    /**\n\t\t *  Update the height of the node\n\t\t */\n\t    IntervalNode.prototype.updateMax = function () {\n\t        this.max = this.high;\n\t        if (this.left !== null) {\n\t            this.max = Math.max(this.max, this.left.max);\n\t        }\n\t        if (this.right !== null) {\n\t            this.max = Math.max(this.max, this.right.max);\n\t        }\n\t    };\n\t    /**\n\t\t *  The balance is how the leafs are distributed on the node\n\t\t *  @return  {Number}  Negative numbers are balanced to the right\n\t\t */\n\t    IntervalNode.prototype.getBalance = function () {\n\t        var balance = 0;\n\t        if (this.left !== null && this.right !== null) {\n\t            balance = this.left.height - this.right.height;\n\t        } else if (this.left !== null) {\n\t            balance = this.left.height + 1;\n\t        } else if (this.right !== null) {\n\t            balance = -(this.right.height + 1);\n\t        }\n\t        return balance;\n\t    };\n\t    /**\n\t\t *  @returns {Boolean} true if this node is the left child\n\t\t *  of its parent\n\t\t */\n\t    IntervalNode.prototype.isLeftChild = function () {\n\t        return this.parent !== null && this.parent.left === this;\n\t    };\n\t    /**\n\t\t *  get/set the left node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'left', {\n\t        get: function () {\n\t            return this._left;\n\t        },\n\t        set: function (node) {\n\t            this._left = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  get/set the right node\n\t\t *  @type {IntervalNode}\n\t\t */\n\t    Object.defineProperty(IntervalNode.prototype, 'right', {\n\t        get: function () {\n\t            return this._right;\n\t        },\n\t        set: function (node) {\n\t            this._right = node;\n\t            if (node !== null) {\n\t                node.parent = this;\n\t            }\n\t            this.updateHeight();\n\t            this.updateMax();\n\t        }\n\t    });\n\t    /**\n\t\t *  null out references.\n\t\t */\n\t    IntervalNode.prototype.dispose = function () {\n\t        this.parent = null;\n\t        this._left = null;\n\t        this._right = null;\n\t        this.event = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tEND INTERVAL NODE HELPER\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    return Tone.IntervalTimeline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Transport for timing musical events.\n\t\t *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n\t\t *          Tone.Transport timing events pass in the exact time of the scheduled event\n\t\t *          in the argument of the callback function. Pass that time value to the object\n\t\t *          you're scheduling. <br><br>\n\t\t *          A single transport is created for you when the library is initialized. \n\t\t *          <br><br>\n\t\t *          The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n\t\t *          called with the time of that event as the argument. \n\t\t *\n\t\t *  @extends {Tone.Emitter}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //repeated event every 8th note\n\t\t * Tone.Transport.scheduleRepeat(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"8n\");\n\t\t *  @example\n\t\t * //schedule an event on the 16th measure\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//do something with the time\n\t\t * }, \"16:0:0\");\n\t\t */\n\t    Tone.Transport = function () {\n\t        Tone.Emitter.call(this);\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tLOOPING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /** \n\t\t\t * \tIf the transport loops or not.\n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.loop = false;\n\t        /** \n\t\t\t * \tThe loop start position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /** \n\t\t\t * \tThe loop end position in ticks\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tCLOCK/TEMPO\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  Pulses per quarter is the number of ticks per quarter note.\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._ppq = TransportConstructor.defaults.PPQ;\n\t        /**\n\t\t\t *  watches the main oscillator for timing ticks\n\t\t\t *  initially starts at 120bpm\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Clock}\n\t\t\t */\n\t        this._clock = new Tone.Clock({\n\t            'callback': this._processTick.bind(this),\n\t            'frequency': 0\n\t        });\n\t        this._bindClockEvents();\n\t        /**\n\t\t\t *  The Beats Per Minute of the Transport. \n\t\t\t *  @type {BPM}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * Tone.Transport.bpm.value = 80;\n\t\t\t * //ramp the bpm to 120 over 10 seconds\n\t\t\t * Tone.Transport.bpm.rampTo(120, 10);\n\t\t\t */\n\t        this.bpm = this._clock.frequency;\n\t        this.bpm._toUnits = this._toUnits.bind(this);\n\t        this.bpm._fromUnits = this._fromUnits.bind(this);\n\t        this.bpm.units = Tone.Type.BPM;\n\t        this.bpm.value = TransportConstructor.defaults.bpm;\n\t        this._readOnly('bpm');\n\t        /**\n\t\t\t *  The time signature, or more accurately the numerator\n\t\t\t *  of the time signature over a denominator of 4. \n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeSignature = TransportConstructor.defaults.timeSignature;\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tTIMELINE EVENTS\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  All the events in an object to keep track by ID\n\t\t\t *  @type {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduledEvents = {};\n\t        /**\n\t\t\t *  The event ID counter\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._eventID = 0;\n\t        /**\n\t\t\t * \tThe scheduled events.\n\t\t\t *  @type {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._timeline = new Tone.Timeline();\n\t        /**\n\t\t\t *  Repeated events\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._repeatedEvents = new Tone.IntervalTimeline();\n\t        /**\n\t\t\t *  Events that occur once\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._onceEvents = new Tone.Timeline();\n\t        /** \n\t\t\t *  All of the synced Signals\n\t\t\t *  @private \n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._syncedSignals = [];\n\t        ///////////////////////////////////////////////////////////////////////\n\t        //\tSWING\n\t        //////////////////////////////////////////////////////////////////////\n\t        /**\n\t\t\t *  The subdivision of the swing\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingTicks = TransportConstructor.defaults.PPQ / 2;\n\t        //8n\n\t        /**\n\t\t\t *  The swing amount\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._swingAmount = 0;\n\t    };\n\t    Tone.extend(Tone.Transport, Tone.Emitter);\n\t    /**\n\t\t *  the defaults\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Transport.defaults = {\n\t        'bpm': 120,\n\t        'swing': 0,\n\t        'swingSubdivision': '8n',\n\t        'timeSignature': 4,\n\t        'loopStart': 0,\n\t        'loopEnd': '4m',\n\t        'PPQ': 192\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tTICKS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  called on every tick\n\t\t *  @param   {number} tickTime clock relative tick time\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._processTick = function (tickTime) {\n\t        var ticks = this._clock.ticks;\n\t        //handle swing\n\t        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat\n\t            ticks % (this._swingTicks * 2) !== 0) {\n\t            //add some swing\n\t            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);\n\t            var amount = Math.sin(progress * Math.PI) * this._swingAmount;\n\t            tickTime += Tone.Time(this._swingTicks * 2 / 3, 'i') * amount;\n\t        }\n\t        //do the loop test\n\t        if (this.loop) {\n\t            if (ticks === this._loopEnd) {\n\t                this.emit('loopEnd', tickTime);\n\t                this._clock.ticks = this._loopStart;\n\t                ticks = this._loopStart;\n\t                this.emit('loopStart', tickTime, this.seconds);\n\t                this.emit('loop', tickTime);\n\t            }\n\t        }\n\t        //process the single occurrence events\n\t        this._onceEvents.forEachBefore(ticks, function (event) {\n\t            event.callback(tickTime);\n\t            //remove the event\n\t            delete this._scheduledEvents[event.id.toString()];\n\t        }.bind(this));\n\t        //and clear the single occurrence timeline\n\t        this._onceEvents.cancelBefore(ticks);\n\t        //fire the next tick events if their time has come\n\t        this._timeline.forEachAtTime(ticks, function (event) {\n\t            event.callback(tickTime);\n\t        });\n\t        //process the repeated events\n\t        this._repeatedEvents.forEachAtTime(ticks, function (event) {\n\t            if ((ticks - event.time) % event.interval === 0) {\n\t                event.callback(tickTime);\n\t            }\n\t        });\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSCHEDULABLE EVENTS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Schedule an event along the timeline.\n\t\t *  @param {Function} callback The callback to be invoked at the time.\n\t\t *  @param {TransportTime}  time The time to invoke the callback at.\n\t\t *  @return {Number} The id of the event which can be used for canceling the event. \n\t\t *  @example\n\t\t * //trigger the callback when the Transport reaches the desired time\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \tenvelope.triggerAttack(time);\n\t\t * }, \"128i\");\n\t\t */\n\t    Tone.Transport.prototype.schedule = function (callback, time) {\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._timeline\n\t        };\n\t        this._timeline.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule a repeated event along the timeline. The event will fire\n\t\t *  at the `interval` starting at the `startTime` and for the specified\n\t\t *  `duration`. \n\t\t *  @param  {Function}  callback   The callback to invoke.\n\t\t *  @param  {Time}    interval   The duration between successive\n\t\t *                               callbacks.\n\t\t *  @param  {TimelinePosition=}    startTime  When along the timeline the events should\n\t\t *                               start being invoked.\n\t\t *  @param {Time} [duration=Infinity] How long the event should repeat. \n\t\t *  @return  {Number}    The ID of the scheduled event. Use this to cancel\n\t\t *                           the event. \n\t\t *  @example\n\t\t * //a callback invoked every eighth note after the first measure\n\t\t * Tone.Transport.scheduleRepeat(callback, \"8n\", \"1m\");\n\t\t */\n\t    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {\n\t        if (interval <= 0) {\n\t            throw new Error('Tone.Transport: repeat events must have an interval larger than 0');\n\t        }\n\t        var event = {\n\t            'time': this.toTicks(startTime),\n\t            'duration': this.toTicks(this.defaultArg(duration, Infinity)),\n\t            'interval': this.toTicks(interval),\n\t            'callback': callback\n\t        };\n\t        var id = this._eventID++;\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._repeatedEvents\n\t        };\n\t        this._repeatedEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Schedule an event that will be removed after it is invoked. \n\t\t *  Note that if the given time is less than the current transport time, \n\t\t *  the event will be invoked immediately. \n\t\t *  @param {Function} callback The callback to invoke once.\n\t\t *  @param {TransportTime} time The time the callback should be invoked.\n\t\t *  @returns {Number} The ID of the scheduled event. \n\t\t */\n\t    Tone.Transport.prototype.scheduleOnce = function (callback, time) {\n\t        var id = this._eventID++;\n\t        var event = {\n\t            'time': this.toTicks(time),\n\t            'callback': callback,\n\t            'id': id\n\t        };\n\t        this._scheduledEvents[id.toString()] = {\n\t            'event': event,\n\t            'timeline': this._onceEvents\n\t        };\n\t        this._onceEvents.add(event);\n\t        return id;\n\t    };\n\t    /**\n\t\t *  Clear the passed in event id from the timeline\n\t\t *  @param {Number} eventId The id of the event.\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.clear = function (eventId) {\n\t        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n\t            var item = this._scheduledEvents[eventId.toString()];\n\t            item.timeline.remove(item.event);\n\t            delete this._scheduledEvents[eventId.toString()];\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove scheduled events from the timeline after\n\t\t *  the given time. Repeated events will be removed\n\t\t *  if their startTime is after the given time\n\t\t *  @param {TransportTime} [after=0] Clear all events after\n\t\t *                          this time. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.cancel = function (after) {\n\t        after = this.defaultArg(after, 0);\n\t        after = this.toTicks(after);\n\t        this._timeline.cancel(after);\n\t        this._onceEvents.cancel(after);\n\t        this._repeatedEvents.cancel(after);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSTART/STOP/PAUSE\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Bind start/stop/pause events from the clock and emit them.\n\t\t */\n\t    Tone.Transport.prototype._bindClockEvents = function () {\n\t        this._clock.on('start', function (time, offset) {\n\t            offset = Tone.Time(this._clock.ticks, 'i').toSeconds();\n\t            this.emit('start', time, offset);\n\t        }.bind(this));\n\t        this._clock.on('stop', function (time) {\n\t            this.emit('stop', time);\n\t        }.bind(this));\n\t        this._clock.on('pause', function (time) {\n\t            this.emit('pause', time);\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'state', {\n\t        get: function () {\n\t            return this._clock.getStateAtTime(this.now());\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should start.\n\t\t *  @param  {TransportTime=} offset The timeline offset to start the transport.\n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //start the transport in one second starting at beginning of the 5th measure. \n\t\t * Tone.Transport.start(\"+1\", \"4:0:0\");\n\t\t */\n\t    Tone.Transport.prototype.start = function (time, offset) {\n\t        //start the clock\n\t        if (!this.isUndef(offset)) {\n\t            offset = this.toTicks(offset);\n\t        }\n\t        this._clock.start(time, offset);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now] The time when the transport should stop. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * Tone.Transport.stop();\n\t\t */\n\t    Tone.Transport.prototype.stop = function (time) {\n\t        this._clock.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Pause the transport and all sources synced to the transport.\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.pause = function (time) {\n\t        this._clock.pause(time);\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSETTERS/GETTERS\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  The time signature as just the numerator over 4. \n\t\t *  For example 4/4 would be just 4 and 6/8 would be 3.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number|Array}\n\t\t *  @name timeSignature\n\t\t *  @example\n\t\t * //common time\n\t\t * Tone.Transport.timeSignature = 4;\n\t\t * // 7/8\n\t\t * Tone.Transport.timeSignature = [7, 8];\n\t\t * //this will be reduced to a single number\n\t\t * Tone.Transport.timeSignature; //returns 3.5\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {\n\t        get: function () {\n\t            return this._timeSignature;\n\t        },\n\t        set: function (timeSig) {\n\t            if (this.isArray(timeSig)) {\n\t                timeSig = timeSig[0] / timeSig[1] * 4;\n\t            }\n\t            this._timeSignature = timeSig;\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the starting position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toSeconds();\n\t        },\n\t        set: function (startPosition) {\n\t            this._loopStart = this.toTicks(startPosition);\n\t        }\n\t    });\n\t    /**\n\t\t * When the Tone.Transport.loop = true, this is the ending position of the loop.\n\t\t * @memberOf Tone.Transport#\n\t\t * @type {TransportTime}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toSeconds();\n\t        },\n\t        set: function (endPosition) {\n\t            this._loopEnd = this.toTicks(endPosition);\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the loop start and stop at the same time. \n\t\t *  @param {TransportTime} startPosition \n\t\t *  @param {TransportTime} endPosition   \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @example\n\t\t * //loop over the first measure\n\t\t * Tone.Transport.setLoopPoints(0, \"1m\");\n\t\t * Tone.Transport.loop = true;\n\t\t */\n\t    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {\n\t        this.loopStart = startPosition;\n\t        this.loopEnd = endPosition;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The swing value. Between 0-1 where 1 equal to \n\t\t *  the note + half the subdivision.\n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {NormalRange}\n\t\t *  @name swing\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swing', {\n\t        get: function () {\n\t            return this._swingAmount;\n\t        },\n\t        set: function (amount) {\n\t            //scale the values to a normal range\n\t            this._swingAmount = amount;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the subdivision which the swing will be applied to. \n\t\t *  The default value is an 8th note. Value must be less \n\t\t *  than a quarter note.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Time}\n\t\t *  @name swingSubdivision\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._swingTicks, 'i').toNotation();\n\t        },\n\t        set: function (subdivision) {\n\t            this._swingTicks = this.toTicks(subdivision);\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in Bars:Beats:Sixteenths.\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {BarsBeatsSixteenths}\n\t\t *  @name position\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'position', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toBarsBeatsSixteenths();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's position in seconds\n\t\t *  Setting the value will jump to that position right away. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds}\n\t\t *  @name seconds\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'seconds', {\n\t        get: function () {\n\t            return Tone.TransportTime(this.ticks, 'i').toSeconds();\n\t        },\n\t        set: function (progress) {\n\t            var ticks = this.toTicks(progress);\n\t            this.ticks = ticks;\n\t        }\n\t    });\n\t    /**\n\t\t *  The Transport's loop position as a normalized value. Always\n\t\t *  returns 0 if the transport if loop is not true. \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @name progress\n\t\t *  @type {NormalRange}\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'progress', {\n\t        get: function () {\n\t            if (this.loop) {\n\t                return (this.ticks - this._loopStart) / (this._loopEnd - this._loopStart);\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The transports current tick position.\n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Ticks}\n\t\t *  @name ticks\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'ticks', {\n\t        get: function () {\n\t            return this._clock.ticks;\n\t        },\n\t        set: function (t) {\n\t            if (this._clock.ticks !== t) {\n\t                var now = this.now();\n\t                //stop everything synced to the transport\n\t                if (this.state === Tone.State.Started) {\n\t                    this.emit('stop', now);\n\t                    this._clock.ticks = t;\n\t                    //restart it with the new time\n\t                    this.emit('start', now, this.seconds);\n\t                } else {\n\t                    this._clock.ticks = t;\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Pulses Per Quarter note. This is the smallest resolution\n\t\t *  the Transport timing supports. This should be set once\n\t\t *  on initialization and not set again. Changing this value \n\t\t *  after other objects have been created can cause problems. \n\t\t *  \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Number}\n\t\t *  @name PPQ\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {\n\t        get: function () {\n\t            return this._ppq;\n\t        },\n\t        set: function (ppq) {\n\t            var bpm = this.bpm.value;\n\t            this._ppq = ppq;\n\t            this.bpm.value = bpm;\n\t        }\n\t    });\n\t    /**\n\t\t *  The hint to the type of playback. Affects tradeoffs between audio \n\t\t *  output latency and responsiveness. \n\t\t *  \n\t\t *  In addition to setting the value in seconds, the latencyHint also\n\t\t *  accepts the strings \"interactive\" (prioritizes low latency), \n\t\t *  \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n\t\t *  latency and performance), and \"fastest\" (lowest latency, might glitch more often). \n\t\t *  @memberOf Tone.Transport#\n\t\t *  @type {Seconds|String}\n\t\t *  @name latencyHint\n\t\t */\n\t    Object.defineProperty(Tone.Transport.prototype, 'latencyHint', {\n\t        get: function () {\n\t            return Tone.Clock.latencyHint;\n\t        },\n\t        set: function (hint) {\n\t            Tone.Clock.latencyHint = hint;\n\t        }\n\t    });\n\t    /**\n\t\t *  Convert from BPM to frequency (factoring in PPQ)\n\t\t *  @param  {BPM}  bpm The BPM value to convert to frequency\n\t\t *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._fromUnits = function (bpm) {\n\t        return 1 / (60 / bpm / this.PPQ);\n\t    };\n\t    /**\n\t\t *  Convert from frequency (with PPQ) into BPM\n\t\t *  @param  {Frequency}  freq The clocks frequency to convert to BPM\n\t\t *  @return  {BPM}  The frequency value as BPM.\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype._toUnits = function (freq) {\n\t        return freq / this.PPQ * 60;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tSYNCING\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Returns the time aligned to the next subdivision\n\t\t *  of the Transport. If the Transport is not started,\n\t\t *  it will return 0.\n\t\t *  Note: this will not work precisely during tempo ramps.\n\t\t *  @param  {Time}  subdivision  The subdivision to quantize to\n\t\t *  @return  {Number}  The context time of the next subdivision.\n\t\t *  @example\n\t\t * Tone.Transport.start(); //the transport must be started\n\t\t * Tone.Transport.nextSubdivision(\"4n\");\n\t\t */\n\t    Tone.Transport.prototype.nextSubdivision = function (subdivision) {\n\t        subdivision = this.toSeconds(subdivision);\n\t        //if the transport's not started, return 0\n\t        var now;\n\t        if (this.state === Tone.State.Started) {\n\t            now = this._clock._nextTick;\n\t        } else {\n\t            return 0;\n\t        }\n\t        var transportPos = Tone.Time(this.ticks, 'i');\n\t        var remainingTime = subdivision - transportPos % subdivision;\n\t        if (remainingTime === 0) {\n\t            remainingTime = subdivision;\n\t        }\n\t        return now + remainingTime;\n\t    };\n\t    /**\n\t\t *  Attaches the signal to the tempo control signal so that \n\t\t *  any changes in the tempo will change the signal in the same\n\t\t *  ratio. \n\t\t *  \n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @param {number=} ratio Optionally pass in the ratio between\n\t\t *                         the two signals. Otherwise it will be computed\n\t\t *                         based on their current values. \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.syncSignal = function (signal, ratio) {\n\t        if (!ratio) {\n\t            //get the sync ratio\n\t            if (signal._param.value !== 0) {\n\t                ratio = signal._param.value / this.bpm._param.value;\n\t            } else {\n\t                ratio = 0;\n\t            }\n\t        }\n\t        var ratioSignal = new Tone.Gain(ratio);\n\t        this.bpm.chain(ratioSignal, signal._param);\n\t        this._syncedSignals.push({\n\t            'ratio': ratioSignal,\n\t            'signal': signal,\n\t            'initial': signal._param.value\n\t        });\n\t        signal._param.value = 0;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsyncs a previously synced signal from the transport's control. \n\t\t *  See Tone.Transport.syncSignal.\n\t\t *  @param  {Tone.Signal} signal \n\t\t *  @returns {Tone.Transport} this\n\t\t */\n\t    Tone.Transport.prototype.unsyncSignal = function (signal) {\n\t        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {\n\t            var syncedSignal = this._syncedSignals[i];\n\t            if (syncedSignal.signal === signal) {\n\t                syncedSignal.ratio.dispose();\n\t                syncedSignal.signal._param.value = syncedSignal.initial;\n\t                this._syncedSignals.splice(i, 1);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Transport} this\n\t\t *  @private\n\t\t */\n\t    Tone.Transport.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        this._writable('bpm');\n\t        this.bpm = null;\n\t        this._timeline.dispose();\n\t        this._timeline = null;\n\t        this._onceEvents.dispose();\n\t        this._onceEvents = null;\n\t        this._repeatedEvents.dispose();\n\t        this._repeatedEvents = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    //\tINITIALIZATION\n\t    ///////////////////////////////////////////////////////////////////////////////\n\t    var TransportConstructor = Tone.Transport;\n\t    Tone.Transport = new TransportConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Transport instanceof TransportConstructor) {\n\t            Tone.Transport = context.Transport;\n\t        } else {\n\t            Tone.Transport = new TransportConstructor();\n\t            //store the Transport on the context so it can be retrieved later\n\t            context.Transport = Tone.Transport;\n\t        }\n\t    });\n\t    return Tone.Transport;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Volume is a simple volume node, useful for creating a volume fader. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Decibels} [volume=0] the initial volume\n\t\t *  @example\n\t\t * var vol = new Tone.Volume(-12);\n\t\t * instrument.chain(vol, Tone.Master);\n\t\t */\n\t    Tone.Volume = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.Volume.defaults);\n\t        /**\n\t\t\t * the output node\n\t\t\t * @type {GainNode}\n\t\t\t * @private\n\t\t\t */\n\t        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);\n\t        /**\n\t\t\t * The unmuted volume\n\t\t\t * @type {Decibels}\n\t\t\t * @private\n\t\t\t */\n\t        this._unmutedVolume = options.volume;\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this.output.gain;\n\t        this._readOnly('volume');\n\t        //set the mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Volume);\n\t    /**\n\t\t *  Defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Volume.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Volume#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * volume.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Volume.prototype, 'mute', {\n\t        get: function () {\n\t            return this.volume.value === -Infinity;\n\t        },\n\t        set: function (mute) {\n\t            if (!this.mute && mute) {\n\t                this._unmutedVolume = this.volume.value;\n\t                //maybe it should ramp here?\n\t                this.volume.value = -Infinity;\n\t            } else if (this.mute && !mute) {\n\t                this.volume.value = this._unmutedVolume;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Volume} this\n\t\t */\n\t    Tone.Volume.prototype.dispose = function () {\n\t        this.input.dispose();\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this.volume.dispose();\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Volume;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A single master output which is connected to the\n\t\t *          AudioDestinationNode (aka your speakers). \n\t\t *          It provides useful conveniences such as the ability \n\t\t *          to set the volume and mute the entire application. \n\t\t *          It also gives you the ability to apply master effects to your application. \n\t\t *          <br><br>\n\t\t *          Like Tone.Transport, A single Tone.Master is created\n\t\t *          on initialization and you do not need to explicitly construct one.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @example\n\t\t * //the audio will go from the oscillator to the speakers\n\t\t * oscillator.connect(Tone.Master);\n\t\t * //a convenience for connecting to the master output is also provided:\n\t\t * oscillator.toMaster();\n\t\t * //the above two examples are equivalent.\n\t\t */\n\t    Tone.Master = function () {\n\t        this.createInsOuts(1, 1);\n\t        /**\n\t\t\t *  The private volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume();\n\t        /**\n\t\t\t * The volume of the master output.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //connections\n\t        this.input.chain(this.output, this.context.destination);\n\t    };\n\t    Tone.extend(Tone.Master);\n\t    /**\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Master.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Master#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * Tone.Master.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Master.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously \n\t\t *  chained in the master effects chain. \n\t\t *  @param {AudioNode|Tone...} args All arguments will be connected in a row\n\t\t *                                  and the Master will be routed through it.\n\t\t *  @return  {Tone.Master}  this\n\t\t *  @example\n\t\t * //some overall compression to keep the levels in check\n\t\t * var masterCompressor = new Tone.Compressor({\n\t\t * \t\"threshold\" : -6,\n\t\t * \t\"ratio\" : 3,\n\t\t * \t\"attack\" : 0.5,\n\t\t * \t\"release\" : 0.1\n\t\t * });\n\t\t * //give a little boost to the lows\n\t\t * var lowBump = new Tone.Filter(200, \"lowshelf\");\n\t\t * //route everything through the filter \n\t\t * //and compressor before going to the speakers\n\t\t * Tone.Master.chain(lowBump, masterCompressor);\n\t\t */\n\t    Tone.Master.prototype.chain = function () {\n\t        this.input.disconnect();\n\t        this.input.chain.apply(this.input, arguments);\n\t        arguments[arguments.length - 1].connect(this.output);\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Master}  this\n\t\t */\n\t    Tone.Master.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //\tAUGMENT TONE's PROTOTYPE\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    /**\n\t\t *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)\n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * //connect an oscillator to the master output\n\t\t * var osc = new Tone.Oscillator().toMaster();\n\t\t */\n\t    Tone.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Also augment AudioNode's prototype to include toMaster\n\t\t *  as a convenience\n\t\t *  @returns {AudioNode} this\n\t\t */\n\t    AudioNode.prototype.toMaster = function () {\n\t        this.connect(Tone.Master);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  initialize the module and listen for new audio contexts\n\t\t */\n\t    var MasterConstructor = Tone.Master;\n\t    Tone.Master = new MasterConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        // if it already exists, just restore it\n\t        if (context.Master instanceof MasterConstructor) {\n\t            Tone.Master = context.Master;\n\t        } else {\n\t            Tone.Master = new MasterConstructor();\n\t        }\n\t        context.Master = Tone.Master;\n\t    });\n\t    return Tone.Master;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base class for sources. Sources have start/stop methods\n\t\t *          and the ability to be synced to the \n\t\t *          start/stop of Tone.Transport. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //Multiple state change events can be chained together,\n\t\t * //but must be set in the correct order and with ascending times\n\t\t * \n\t\t * // OK\n\t\t * state.start().stop(\"+0.2\");\n\t\t * // AND\n\t\t * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n\t\t *\n\t\t * // BAD\n\t\t * state.stop(\"+0.2\").start();\n\t\t * // OR\n\t\t * state.start(\"+0.3\").stop(\"+0.2\");\n\t\t * \n\t\t */\n\t    Tone.Source = function (options) {\n\t        // this.createInsOuts(0, 1);\n\t        options = this.defaultArg(options, Tone.Source.defaults);\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        /**\n\t\t\t * \tKeep track of the scheduled state.\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        this._state.memory = 10;\n\t        /**\n\t\t\t *  The synced `start` callback function from the transport\n\t\t\t *  @type {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._synced = false;\n\t        /**\n\t\t\t *  Keep track of all of the scheduled event ids\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scheduled = [];\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.Source);\n\t    /**\n\t\t *  The default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Source.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Source#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'state', {\n\t        get: function () {\n\t            if (this._synced) {\n\t                if (Tone.Transport.state === Tone.State.Started) {\n\t                    return this._state.getValueAtTime(Tone.Transport.seconds);\n\t                } else {\n\t                    return Tone.State.Stopped;\n\t                }\n\t            } else {\n\t                return this._state.getValueAtTime(this.now());\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.Source#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.Source.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    //overwrite these functions\n\t    Tone.Source.prototype._start = Tone.noOp;\n\t    Tone.Source.prototype._stop = Tone.noOp;\n\t    /**\n\t\t *  Start the source at the specified time. If no time is given, \n\t\t *  start the source now.\n\t\t *  @param  {Time} [time=now] When the source should be started.\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.start(\"+0.5\"); //starts the source 0.5 seconds from now\n\t\t */\n\t    Tone.Source.prototype.start = function (time, offset, duration) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        //if it's started, stop it and restart it\n\t        if (!this.retrigger && this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this.stop(time);\n\t        }\n\t        this._state.setStateAtTime(Tone.State.Started, time);\n\t        if (this._synced) {\n\t            // add the offset time to the event\n\t            var event = this._state.get(time);\n\t            event.offset = this.defaultArg(offset, 0);\n\t            event.duration = duration;\n\t            var sched = Tone.Transport.schedule(function (t) {\n\t                this._start(t, offset, duration);\n\t            }.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        } else {\n\t            this._start.apply(this, arguments);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the source at the specified time. If no time is given, \n\t\t *  stop the source now.\n\t\t *  @param  {Time} [time=now] When the source should be stopped. \n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * source.stop(); // stops the source immediately\n\t\t */\n\t    Tone.Source.prototype.stop = function (time) {\n\t        if (this.isUndef(time) && this._synced) {\n\t            time = Tone.Transport.seconds;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._state.cancel(time);\n\t        this._state.setStateAtTime(Tone.State.Stopped, time);\n\t        if (!this._synced) {\n\t            this._stop.apply(this, arguments);\n\t        } else {\n\t            var sched = Tone.Transport.schedule(this._stop.bind(this), time);\n\t            this._scheduled.push(sched);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the source to the Transport so that all subsequent\n\t\t *  calls to `start` and `stop` are synced to the TransportTime\n\t\t *  instead of the AudioContext time. \n\t\t *\n\t\t *  @returns {Tone.Source} this\n\t\t *  @example\n\t\t * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n\t\t * source.sync().start(0).stop(0.3);\n\t\t * //start the transport.\n\t\t * Tone.Transport.start();\n\t\t *\n\t\t *  @example\n\t\t * //start the transport with an offset and the sync'ed sources\n\t\t * //will start in the correct position\n\t\t * source.sync().start(0.1);\n\t\t * //the source will be invoked with an offset of 0.4\n\t\t * Tone.Transport.start(\"+0.5\", 0.5);\n\t\t */\n\t    Tone.Source.prototype.sync = function () {\n\t        this._synced = true;\n\t        Tone.Transport.on('start loopStart', function (time, offset) {\n\t            if (offset > 0) {\n\t                // get the playback state at that time\n\t                var stateEvent = this._state.get(offset);\n\t                // listen for start events which may occur in the middle of the sync'ed time\n\t                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {\n\t                    // get the offset\n\t                    var startOffset = offset - this.toSeconds(stateEvent.time);\n\t                    var duration;\n\t                    if (stateEvent.duration) {\n\t                        duration = this.toSeconds(stateEvent.duration) - startOffset;\n\t                    }\n\t                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n\t                }\n\t            }\n\t        }.bind(this));\n\t        Tone.Transport.on('stop pause loopEnd', function (time) {\n\t            if (this._state.getValueAtTime(Tone.Transport.seconds) === Tone.State.Started) {\n\t                this._stop(time);\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the source to the Transport. See Tone.Source.sync\n\t\t *  @returns {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.unsync = function () {\n\t        this._synced = false;\n\t        Tone.Transport.off('start stop pause loopEnd loopStart');\n\t        // clear all of the scheduled ids\n\t        for (var i = 0; i < this._scheduled.length; i++) {\n\t            var id = this._scheduled[i];\n\t            Tone.Transport.clear(id);\n\t        }\n\t        this._scheduled = [];\n\t        this._state.cancel(0);\n\t        return this;\n\t    };\n\t    /**\n\t\t *\tClean up.\n\t\t *  @return {Tone.Source} this\n\t\t */\n\t    Tone.Source.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.unsync();\n\t        this._scheduled = null;\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        this._state.dispose();\n\t        this._state = null;\n\t    };\n\t    return Tone.Source;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  OscillatorNode shim\n\t\t *  @private\n\t\t */\n\t    if (window.OscillatorNode && !OscillatorNode.prototype.start) {\n\t        OscillatorNode.prototype.start = OscillatorNode.prototype.noteOn;\n\t        OscillatorNode.prototype.stop = OscillatorNode.prototype.noteOff;\n\t        if (!OscillatorNode.prototype.setPeriodicWave) {\n\t            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;\n\t        }\n\t        if (!AudioContext.prototype.createPeriodicWave) {\n\t            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;\n\t        }\n\t    }\n\t    /**\n\t\t *  @class Tone.Oscillator supports a number of features including\n\t\t *         phase rotation, multiple oscillator types (see Tone.Oscillator.type), \n\t\t *         and Transport syncing (see Tone.Oscillator.syncFrequency).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {Frequency} [frequency] Starting frequency\n\t\t *  @param {string} [type] The oscillator type. Read more about type below.\n\t\t *  @example\n\t\t * //make and start a 440hz sine tone\n\t\t * var osc = new Tone.Oscillator(440, \"sine\").toMaster().start();\n\t\t */\n\t    Tone.Oscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the main oscillator\n\t\t\t *  @type {OscillatorNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the periodic wave\n\t\t\t *  @type {PeriodicWave}\n\t\t\t *  @private\n\t\t\t */\n\t        this._wave = null;\n\t        /**\n\t\t\t *  The partials of the oscillator\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, [1]);\n\t        /**\n\t\t\t *  the phase of the oscillator\n\t\t\t *  between 0 - 360\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  the type of the oscillator\n\t\t\t *  @type {string}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        //setup\n\t        this.type = options.type;\n\t        this.phase = this._phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Oscillator, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Oscillator.defaults = {\n\t        'type': 'sine',\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'partials': []\n\t    };\n\t    /**\n\t\t *  The Oscillator types\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Oscillator.Type = {\n\t        Sine: 'sine',\n\t        Triangle: 'triangle',\n\t        Sawtooth: 'sawtooth',\n\t        Square: 'square',\n\t        Custom: 'custom'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now] \n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._start = function (time) {\n\t        //new oscillator with previous values\n\t        this._oscillator = this.context.createOscillator();\n\t        this._oscillator.setPeriodicWave(this._wave);\n\t        //connect the control signal to the oscillator frequency & detune\n\t        this._oscillator.connect(this.output);\n\t        this.frequency.connect(this._oscillator.frequency);\n\t        this.detune.connect(this._oscillator.detune);\n\t        //start the oscillator\n\t        this._oscillator.start(this.toSeconds(time));\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @private\n\t\t *  @param  {Time} [time=now] (optional) timing parameter\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype._stop = function (time) {\n\t        if (this._oscillator) {\n\t            this._oscillator.stop(this.toSeconds(time));\n\t            this._oscillator = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n\t\t *  will also affect the oscillators frequency. \n\t\t *  @returns {Tone.Oscillator} this\n\t\t *  @example\n\t\t * Tone.Transport.bpm.value = 120;\n\t\t * osc.frequency.value = 440;\n\t\t * //the ration between the bpm and the frequency will be maintained\n\t\t * osc.syncFrequency();\n\t\t * Tone.Transport.bpm.value = 240; \n\t\t * // the frequency of the oscillator is doubled to 880\n\t\t */\n\t    Tone.Oscillator.prototype.syncFrequency = function () {\n\t        Tone.Transport.syncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Unsync the oscillator's frequency from the Transport. \n\t\t *  See Tone.Oscillator.syncFrequency\n\t\t *  @returns {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.unsyncFrequency = function () {\n\t        Tone.Transport.unsyncSignal(this.frequency);\n\t        return this;\n\t    };\n\t    /**\n\t\t * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of\n\t\t * setting the first x number of partials of the oscillator. For example: \"sine4\" would\n\t\t * set be the first 4 partials of the sine wave and \"triangle8\" would set the first\n\t\t * 8 partials of the triangle wave.\n\t\t * <br><br> \n\t\t * Uses PeriodicWave internally even for native types so that it can set the phase. \n\t\t * PeriodicWave equations are from the \n\t\t * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).\n\t\t *  \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * //set it to a square wave\n\t\t * osc.type = \"square\";\n\t\t * @example\n\t\t * //set the first 6 partials of a sawtooth wave\n\t\t * osc.type = \"sawtooth6\";\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            var coefs = this._getRealImaginary(type, this._phase);\n\t            var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);\n\t            this._wave = periodicWave;\n\t            if (this._oscillator !== null) {\n\t                this._oscillator.setPeriodicWave(this._wave);\n\t            }\n\t            this._type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the real and imaginary components based \n\t\t *  on the oscillator type.\n\t\t *  @returns {Array} [real, imaginary]\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {\n\t        var fftSize = 4096;\n\t        var periodicWaveSize = fftSize / 2;\n\t        var real = new Float32Array(periodicWaveSize);\n\t        var imag = new Float32Array(periodicWaveSize);\n\t        var partialCount = 1;\n\t        if (type === Tone.Oscillator.Type.Custom) {\n\t            partialCount = this._partials.length + 1;\n\t            periodicWaveSize = partialCount;\n\t        } else {\n\t            var partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n\t            if (partial) {\n\t                partialCount = parseInt(partial[2]) + 1;\n\t                type = partial[1];\n\t                partialCount = Math.max(partialCount, 2);\n\t                periodicWaveSize = partialCount;\n\t            }\n\t        }\n\t        for (var n = 1; n < periodicWaveSize; ++n) {\n\t            var piFactor = 2 / (n * Math.PI);\n\t            var b;\n\t            switch (type) {\n\t            case Tone.Oscillator.Type.Sine:\n\t                b = n <= partialCount ? 1 : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Square:\n\t                b = n & 1 ? 2 * piFactor : 0;\n\t                break;\n\t            case Tone.Oscillator.Type.Sawtooth:\n\t                b = piFactor * (n & 1 ? 1 : -1);\n\t                break;\n\t            case Tone.Oscillator.Type.Triangle:\n\t                if (n & 1) {\n\t                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);\n\t                } else {\n\t                    b = 0;\n\t                }\n\t                break;\n\t            case Tone.Oscillator.Type.Custom:\n\t                b = this._partials[n - 1];\n\t                break;\n\t            default:\n\t                throw new TypeError('Tone.Oscillator: invalid type: ' + type);\n\t            }\n\t            if (b !== 0) {\n\t                real[n] = -b * Math.sin(phase * n);\n\t                imag[n] = b * Math.cos(phase * n);\n\t            } else {\n\t                real[n] = 0;\n\t                imag[n] = 0;\n\t            }\n\t        }\n\t        return [\n\t            real,\n\t            imag\n\t        ];\n\t    };\n\t    /**\n\t\t *  Compute the inverse FFT for a given phase.\t\n\t\t *  @param  {Float32Array}  real\n\t\t *  @param  {Float32Array}  imag \n\t\t *  @param  {NormalRange}  phase \n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {\n\t        var sum = 0;\n\t        var len = real.length;\n\t        for (var i = 0; i < len; i++) {\n\t            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n\t        }\n\t        return sum;\n\t    };\n\t    /**\n\t\t *  Returns the initial value of the oscillator.\n\t\t *  @return  {AudioRange}\n\t\t *  @private\n\t\t */\n\t    Tone.Oscillator.prototype._getInitialValue = function () {\n\t        var coefs = this._getRealImaginary(this._type, 0);\n\t        var real = coefs[0];\n\t        var imag = coefs[1];\n\t        var maxValue = 0;\n\t        var twoPi = Math.PI * 2;\n\t        //check for peaks in 8 places\n\t        for (var i = 0; i < 8; i++) {\n\t            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);\n\t        }\n\t        return -this._inverseFFT(real, imag, this._phase) / maxValue;\n\t    };\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {\n\t        get: function () {\n\t            if (this._type !== Tone.Oscillator.Type.Custom) {\n\t                return [];\n\t            } else {\n\t                return this._partials;\n\t            }\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this.type = Tone.Oscillator.Type.Custom;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.Oscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t * @example\n\t\t * osc.phase = 180; //flips the phase of the oscillator\n\t\t */\n\t    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase * (180 / Math.PI);\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase * Math.PI / 180;\n\t            //reset the type\n\t            this.type = this._type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Oscillator} this\n\t\t */\n\t    Tone.Oscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._oscillator !== null) {\n\t            this._oscillator.disconnect();\n\t            this._oscillator = null;\n\t        }\n\t        this._wave = null;\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.Oscillator;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be\n\t\t *         it's own class is that many browsers optimize out Tone.Signal\n\t\t *         with a value of 0 and will not process nodes further down the graph. \n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Zero = function () {\n\t        /**\n\t\t\t *  The gain node\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = this.input = this.output = new Tone.Gain();\n\t        this.context.getConstant(0).connect(this._gain);\n\t    };\n\t    Tone.extend(Tone.Zero);\n\t    /**\n\t\t *  clean up\n\t\t *  @return  {Tone.Zero}  this\n\t\t */\n\t    Tone.Zero.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._gain.dispose();\n\t        this._gain = null;\n\t        return this;\n\t    };\n\t    return Tone.Zero;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal \n\t\t *          which can be attached to an AudioParam or Tone.Signal \n\t\t *          in order to modulate that parameter with an oscillator. The LFO can \n\t\t *          also be synced to the transport to start/stop and change when the tempo changes.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be\n\t\t *                               in the frequency range of 0.1 to 10 hertz. \n\t\t *  @param {number=} min The minimum output value of the LFO. \n\t\t *  @param {number=} max The maximum value of the LFO. \n\t\t *  @example\n\t\t * var lfo = new Tone.LFO(\"4n\", 400, 4000);\n\t\t * lfo.connect(filter.frequency);\n\t\t */\n\t    Tone.LFO = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'min',\n\t            'max'\n\t        ], Tone.LFO.defaults);\n\t        /** \n\t\t\t *  The oscillator. \n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'type': options.type\n\t        });\n\t        /**\n\t\t\t *  the lfo's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._oscillator.frequency;\n\t        /**\n\t\t\t * The amplitude of the LFO, which controls the output range between\n\t\t\t * the min and max output. For example if the min is -10 and the max \n\t\t\t * is 10, setting the amplitude to 0.5 would make the LFO modulate\n\t\t\t * between -5 and 5. \n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.amplitude = this._oscillator.volume;\n\t        this.amplitude.units = Tone.Type.NormalRange;\n\t        this.amplitude.value = options.amplitude;\n\t        /**\n\t\t\t *  The signal which is output when the LFO is stopped\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);\n\t        /**\n\t\t\t *  Just outputs zeros.\n\t\t\t *  @type {Tone.Zero}\n\t\t\t *  @private\n\t\t\t */\n\t        this._zeros = new Tone.Zero();\n\t        /**\n\t\t\t *  The value that the LFO outputs when it's stopped\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stoppedValue = 0;\n\t        /**\n\t\t\t *  @type {Tone.AudioToGain} \n\t\t\t *  @private\n\t\t\t */\n\t        this._a2g = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  @type {Tone.Scale} \n\t\t\t *  @private\n\t\t\t */\n\t        this._scaler = this.output = new Tone.Scale(options.min, options.max);\n\t        /**\n\t\t\t *  the units of the LFO (used for converting)\n\t\t\t *  @type {Tone.Type} \n\t\t\t *  @private\n\t\t\t */\n\t        this._units = Tone.Type.Default;\n\t        this.units = options.units;\n\t        //connect it up\n\t        this._oscillator.chain(this._a2g, this._scaler);\n\t        this._zeros.connect(this._a2g);\n\t        this._stoppedSignal.connect(this._a2g);\n\t        this._readOnly([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this.phase = options.phase;\n\t    };\n\t    Tone.extend(Tone.LFO, Tone.Oscillator);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LFO.defaults = {\n\t        'type': 'sine',\n\t        'min': 0,\n\t        'max': 1,\n\t        'phase': 0,\n\t        'frequency': '4n',\n\t        'amplitude': 1,\n\t        'units': Tone.Type.Default\n\t    };\n\t    /**\n\t\t *  Start the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will start\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(0, time);\n\t        this._oscillator.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the LFO. \n\t\t *  @param  {Time} [time=now] the time the LFO will stop\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);\n\t        this._oscillator.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sync the start/stop/pause to the transport \n\t\t *  and the frequency to the bpm of the transport\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @example\n\t\t *  lfo.frequency.value = \"8n\";\n\t\t *  lfo.sync().start(0)\n\t\t *  //the rate of the LFO will always be an eighth note, \n\t\t *  //even as the tempo changes\n\t\t */\n\t    Tone.LFO.prototype.sync = function () {\n\t        this._oscillator.sync();\n\t        this._oscillator.syncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t *  unsync the LFO from transport control\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.unsync = function () {\n\t        this._oscillator.unsync();\n\t        this._oscillator.unsyncFrequency();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The miniumum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'min', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.min);\n\t        },\n\t        set: function (min) {\n\t            min = this._fromUnits(min);\n\t            this._scaler.min = min;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum output of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'max', {\n\t        get: function () {\n\t            return this._toUnits(this._scaler.max);\n\t        },\n\t        set: function (max) {\n\t            max = this._fromUnits(max);\n\t            this._scaler.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator: sine, square, sawtooth, triangle. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'type', {\n\t        get: function () {\n\t            return this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            this._oscillator.type = type;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t            this._stoppedValue = this._oscillator._getInitialValue();\n\t            this._stoppedSignal.value = this._stoppedValue;\n\t        }\n\t    });\n\t    /**\n\t\t * The output units of the LFO.\n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Tone.Type}\n\t\t * @name units\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'units', {\n\t        get: function () {\n\t            return this._units;\n\t        },\n\t        set: function (val) {\n\t            var currentMin = this.min;\n\t            var currentMax = this.max;\n\t            //convert the min and the max\n\t            this._units = val;\n\t            this.min = currentMin;\n\t            this.max = currentMax;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.LFO#\n\t\t * @type {Boolean}\n\t\t * @name mute\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'mute', {\n\t        get: function () {\n\t            return this._oscillator.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._oscillator.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.LFO#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.LFO.prototype, 'state', {\n\t        get: function () {\n\t            return this._oscillator.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node. \n\t\t *  Tone.LFO will automatically convert to the destination units of the \n\t\t *  will get the units from the connected node.\n\t\t *  @param  {Tone | AudioParam | AudioNode} node \n\t\t *  @param {number} [outputNum=0] optionally which output to connect from\n\t\t *  @param {number} [inputNum=0] optionally which input to connect to\n\t\t *  @returns {Tone.LFO} this\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype.connect = function (node) {\n\t        if (node.constructor === Tone.Signal || node.constructor === Tone.Param || node.constructor === Tone.TimelineSignal) {\n\t            this.convert = node.convert;\n\t            this.units = node.units;\n\t        }\n\t        Tone.Signal.prototype.connect.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units from their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;\n\t    /**\n\t\t *  private method borrowed from Param converts \n\t\t *  units to their destination value\n\t\t *  @function\n\t\t *  @private\n\t\t */\n\t    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;\n\t    /**\n\t\t *  disconnect and dispose\n\t\t *  @returns {Tone.LFO} this\n\t\t */\n\t    Tone.LFO.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'amplitude',\n\t            'frequency'\n\t        ]);\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._stoppedSignal.dispose();\n\t        this._stoppedSignal = null;\n\t        this._zeros.dispose();\n\t        this._zeros = null;\n\t        this._scaler.dispose();\n\t        this._scaler = null;\n\t        this._a2g.dispose();\n\t        this._a2g = null;\n\t        this.frequency = null;\n\t        this.amplitude = null;\n\t        return this;\n\t    };\n\t    return Tone.LFO;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Limiter will limit the loudness of an incoming signal. \n\t\t *         It is composed of a Tone.Compressor with a fast attack \n\t\t *         and release. Limiters are commonly used to safeguard against \n\t\t *         signal clipping. Unlike a compressor, limiters do not provide \n\t\t *         smooth gain reduction and almost completely prevent \n\t\t *         additional gain above the threshold.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {number} threshold The theshold above which the limiting is applied. \n\t\t *  @example\n\t\t *  var limiter = new Tone.Limiter(-6);\n\t\t */\n\t    Tone.Limiter = function () {\n\t        var options = this.optionsObject(arguments, ['threshold'], Tone.Limiter.defaults);\n\t        /**\n\t\t\t *  the compressor\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this._compressor = this.input = this.output = new Tone.Compressor({\n\t            'attack': 0.001,\n\t            'decay': 0.001,\n\t            'threshold': options.threshold\n\t        });\n\t        /**\n\t\t\t * The threshold of of the limiter\n\t\t\t * @type {Decibel}\n\t\t\t * @signal\n\t\t\t */\n\t        this.threshold = this._compressor.threshold;\n\t        this._readOnly('threshold');\n\t    };\n\t    Tone.extend(Tone.Limiter);\n\t    /**\n\t\t *  The default value\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.Limiter.defaults = { 'threshold': -12 };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Limiter} this\n\t\t */\n\t    Tone.Limiter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._compressor.dispose();\n\t        this._compressor = null;\n\t        this._writable('threshold');\n\t        this.threshold = null;\n\t        return this;\n\t    };\n\t    return Tone.Limiter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to \n\t\t *         Tone.FeedbackCombFilter, but includes a lowpass filter.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Time|Object} [delayTime] The delay time of the comb filter\n\t\t *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter\n\t\t *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the\n\t\t *                                signal as it is fedback. \n\t\t */\n\t    Tone.LowpassCombFilter = function () {\n\t        this.createInsOuts(1, 1);\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'resonance',\n\t            'dampening'\n\t        ], Tone.LowpassCombFilter.defaults);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delay = this.input = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the comb filter. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delay.delayTime;\n\t        /**\n\t\t\t *  the lowpass filter\n\t\t\t *  @type  {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lowpass = this.output = this.context.createBiquadFilter();\n\t        this._lowpass.Q.value = -3.0102999566398125;\n\t        this._lowpass.type = 'lowpass';\n\t        /**\n\t\t\t *  The dampening control of the feedback\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Param({\n\t            'param': this._lowpass.frequency,\n\t            'units': Tone.Type.Frequency,\n\t            'value': options.dampening\n\t        });\n\t        /**\n\t\t\t *  the feedback gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of feedback of the delayed signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._feedback.gain;\n\t        //connections\n\t        this._delay.chain(this._lowpass, this._feedback, this._delay);\n\t        this._readOnly([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.LowpassCombFilter);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.LowpassCombFilter.defaults = {\n\t        'delayTime': 0.1,\n\t        'resonance': 0.5,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.LowpassCombFilter} this\n\t\t */\n\t    Tone.LowpassCombFilter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'dampening',\n\t            'resonance',\n\t            'delayTime'\n\t        ]);\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        this.resonance.dispose();\n\t        this.resonance = null;\n\t        this._delay.dispose();\n\t        this._delay = null;\n\t        this.delayTime = null;\n\t        this._lowpass.disconnect();\n\t        this._lowpass = null;\n\t        this._feedback.disconnect();\n\t        this._feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.LowpassCombFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Merge brings two signals into the left and right \n\t\t *          channels of a single stereo channel.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var merge = new Tone.Merge().toMaster();\n\t\t * //routing a sine tone in the left channel\n\t\t * //and noise in the right channel\n\t\t * var osc = new Tone.Oscillator().connect(merge.left);\n\t\t * var noise = new Tone.Noise().connect(merge.right);\n\t\t * //starting our oscillators\n\t\t * noise.start();\n\t\t * osc.start();\n\t\t */\n\t    Tone.Merge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The left input channel.\n\t\t\t *  Alias for <code>input[0]</code>\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.left = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  The right input channel.\n\t\t\t *  Alias for <code>input[1]</code>.\n\t\t\t *  @type {GainNode}\n\t\t\t */\n\t        this.right = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  the merger node for the two channels\n\t\t\t *  @type {ChannelMergerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merger = this.output = this.context.createChannelMerger(2);\n\t        //connections\n\t        this.left.connect(this._merger, 0, 0);\n\t        this.right.connect(this._merger, 0, 1);\n\t        this.left.channelCount = 1;\n\t        this.right.channelCount = 1;\n\t        this.left.channelCountMode = 'explicit';\n\t        this.right.channelCountMode = 'explicit';\n\t    };\n\t    Tone.extend(Tone.Merge);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Merge} this\n\t\t */\n\t    Tone.Merge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._merger.disconnect();\n\t        this._merger = null;\n\t        return this;\n\t    };\n\t    return Tone.Merge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)\n\t\t *          of an input signal with some averaging applied. It can also get the raw \n\t\t *          value of the input signal.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {String} type Either \"level\" or \"signal\". \n\t\t *  @param {Number} smoothing The amount of smoothing applied between frames.\n\t\t *  @example\n\t\t * var meter = new Tone.Meter();\n\t\t * var mic = new Tone.UserMedia().start();\n\t\t * //connect mic to the meter\n\t\t * mic.connect(meter);\n\t\t * //the current level of the mic input\n\t\t * var level = meter.value;\n\t\t */\n\t    Tone.Meter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'type',\n\t            'smoothing'\n\t        ], Tone.Meter.defaults);\n\t        /**\n\t\t\t *  The type of the meter, either \"level\" or \"signal\". \n\t\t\t *  A \"level\" meter will return the volume level (rms) of the \n\t\t\t *  input signal and a \"signal\" meter will return\n\t\t\t *  the signal value of the input. \n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.type = options.type;\n\t        /**\n\t\t\t *  The analyser node which computes the levels.\n\t\t\t *  @private\n\t\t\t *  @type  {Tone.Analyser}\n\t\t\t */\n\t        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 512);\n\t        this._analyser.returnType = 'float';\n\t        /**\n\t\t\t *  The amount of carryover between the current and last frame. \n\t\t\t *  Only applied meter for \"level\" type.\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.smoothing = options.smoothing;\n\t        /**\n\t\t\t *  The last computed value\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lastValue = 0;\n\t    };\n\t    Tone.extend(Tone.Meter);\n\t    /**\n\t\t *  @private\n\t\t *  @enum {String}\n\t\t */\n\t    Tone.Meter.Type = {\n\t        Level: 'level',\n\t        Signal: 'signal'\n\t    };\n\t    /**\n\t\t *  The defaults\n\t\t *  @type {Object}\n\t\t *  @static\n\t\t *  @const\n\t\t */\n\t    Tone.Meter.defaults = {\n\t        'smoothing': 0.8,\n\t        'type': Tone.Meter.Type.Level\n\t    };\n\t    /**\n\t\t * The current value of the meter. A value of 1 is\n\t\t * \"unity\".\n\t\t * @memberOf Tone.Meter#\n\t\t * @type {Number}\n\t\t * @name value\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Meter.prototype, 'value', {\n\t        get: function () {\n\t            var signal = this._analyser.analyse();\n\t            if (this.type === Tone.Meter.Type.Level) {\n\t                //rms\n\t                var sum = 0;\n\t                for (var i = 0; i < signal.length; i++) {\n\t                    sum += Math.pow(signal[i], 2);\n\t                }\n\t                var rms = Math.sqrt(sum / signal.length);\n\t                //smooth it\n\t                rms = Math.max(rms, this._lastValue * this.smoothing);\n\t                this._lastValue = rms;\n\t                //scale it\n\t                var unity = 0.35;\n\t                var val = rms / unity;\n\t                //scale the output curve\n\t                return Math.sqrt(val);\n\t            } else {\n\t                return signal[0];\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Meter} this\n\t\t */\n\t    Tone.Meter.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._analyser.dispose();\n\t        this._analyser = null;\n\t        return this;\n\t    };\n\t    return Tone.Meter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *\t@class  Tone.Split splits an incoming signal into left and right channels.\n\t\t *\t\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var split = new Tone.Split();\n\t\t * stereoSignal.connect(split);\n\t\t */\n\t    Tone.Split = function () {\n\t        this.createInsOuts(0, 2);\n\t        /** \n\t\t\t *  @type {ChannelSplitterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = this.context.createChannelSplitter(2);\n\t        /** \n\t\t\t *  Left channel output. \n\t\t\t *  Alias for <code>output[0]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.left = this.output[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  Right channel output.\n\t\t\t *  Alias for <code>output[1]</code>\n\t\t\t *  @type {Tone.Gain}\n\t\t\t */\n\t        this.right = this.output[1] = new Tone.Gain();\n\t        //connections\n\t        this._splitter.connect(this.left, 0, 0);\n\t        this._splitter.connect(this.right, 1, 0);\n\t    };\n\t    Tone.extend(Tone.Split);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Split} this\n\t\t */\n\t    Tone.Split.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.disconnect();\n\t        this.left.dispose();\n\t        this.left = null;\n\t        this.right.dispose();\n\t        this.right = null;\n\t        this._splitter = null;\n\t        return this;\n\t    };\n\t    return Tone.Split;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). <br><br>\n\t\t *         <code>\n\t\t *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>\n\t\t *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideSplit = function () {\n\t        this.createInsOuts(0, 2);\n\t        /**\n\t\t\t *  split the incoming signal into left and right channels\n\t\t\t *  @type  {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = this.input = new Tone.Split();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing. Alias for\n\t\t\t *  <code>output[0]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.mid = this.output[0] = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side output. Connect to side processing. Alias for\n\t\t\t *  <code>output[1]</code>\n\t\t\t *  @type {Tone.Expr}\n\t\t\t */\n\t        this.side = this.output[1] = new Tone.Expr('($0 - $1) * $2');\n\t        this._split.connect(this.mid, 0, 0);\n\t        this._split.connect(this.mid, 1, 1);\n\t        this._split.connect(this.side, 0, 0);\n\t        this._split.connect(this.side, 1, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.mid, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this.side, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideSplit);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideSplit} this\n\t\t */\n\t    Tone.MidSideSplit.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideSplit;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels). \n\t\t *         MidSideMerge merges the mid and side signal after they've been seperated\n\t\t *         by Tone.MidSideSplit.<br><br>\n\t\t *         <code>\n\t\t *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>\n\t\t *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideMerge = function () {\n\t        this.createInsOuts(2, 0);\n\t        /**\n\t\t\t *  The mid signal input. Alias for\n\t\t\t *  <code>input[0]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.mid = this.input[0] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Left\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._left = new Tone.Expr('($0 + $1) * $2');\n\t        /**\n\t\t\t *  The side signal input. Alias for\n\t\t\t *  <code>input[1]</code>\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t */\n\t        this.side = this.input[1] = new Tone.Gain();\n\t        /**\n\t\t\t *  recombine the mid/side into Right\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._right = new Tone.Expr('($0 - $1) * $2');\n\t        /**\n\t\t\t *  Merge the left/right signal back into a stereo signal.\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.mid.connect(this._left, 0, 0);\n\t        this.side.connect(this._left, 0, 1);\n\t        this.mid.connect(this._right, 0, 0);\n\t        this.side.connect(this._right, 0, 1);\n\t        this._left.connect(this._merge, 0, 0);\n\t        this._right.connect(this._merge, 0, 1);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._left, 0, 2);\n\t        this.context.getConstant(Math.SQRT1_2).connect(this._right, 0, 2);\n\t    };\n\t    Tone.extend(Tone.MidSideMerge);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MidSideMerge} this\n\t\t */\n\t    Tone.MidSideMerge.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._left.dispose();\n\t        this._left = null;\n\t        this._right.dispose();\n\t        this._right = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideMerge;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.MidSideCompressor applies two different compressors to the mid\n\t\t *         and side signal components. See Tone.MidSideSplit. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {Object} options The options that are passed to the mid and side\n\t\t *                          compressors. \n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideCompressor = function (options) {\n\t        options = this.defaultArg(options, Tone.MidSideCompressor.defaults);\n\t        /**\n\t\t\t *  the mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = this.input = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  the mid/side recombination\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = this.output = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The compressor applied to the mid signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the side signal\n\t\t\t *  @type  {Tone.Compressor}\n\t\t\t */\n\t        this.side = new Tone.Compressor(options.side);\n\t        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);\n\t        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);\n\t        this._readOnly([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MidSideCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MidSideCompressor.defaults = {\n\t        'mid': {\n\t            'ratio': 3,\n\t            'threshold': -24,\n\t            'release': 0.03,\n\t            'attack': 0.02,\n\t            'knee': 16\n\t        },\n\t        'side': {\n\t            'ratio': 6,\n\t            'threshold': -30,\n\t            'release': 0.25,\n\t            'attack': 0.03,\n\t            'knee': 10\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MidSideCompressor} this\n\t\t */\n\t    Tone.MidSideCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'mid',\n\t            'side'\n\t        ]);\n\t        this.mid.dispose();\n\t        this.mid = null;\n\t        this.side.dispose();\n\t        this.side = null;\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal\n\t\t *         where both left and right channels have the same value. This can be useful \n\t\t *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t */\n\t    Tone.Mono = function () {\n\t        this.createInsOuts(1, 0);\n\t        /**\n\t\t\t *  merge the signal\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = this.output = new Tone.Merge();\n\t        this.input.connect(this._merge, 0, 0);\n\t        this.input.connect(this._merge, 0, 1);\n\t        this.input.gain.value = this.dbToGain(-10);\n\t    };\n\t    Tone.extend(Tone.Mono);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Mono} this\n\t\t */\n\t    Tone.Mono.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        return this;\n\t    };\n\t    return Tone.Mono;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A compressor with seperate controls over low/mid/high dynamics\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {Object} options The low/mid/high compressor settings.\n\t\t *  @example\n\t\t *  var multiband = new Tone.MultibandCompressor({\n\t\t *  \t\"lowFrequency\" : 200,\n\t\t *  \t\"highFrequency\" : 1300\n\t\t *  \t\"low\" : {\n\t\t *  \t\t\"threshold\" : -12\n\t\t *  \t}\n\t\t *  })\n\t\t */\n\t    Tone.MultibandCompressor = function (options) {\n\t        options = this.defaultArg(arguments, Tone.MultibandCompressor.defaults);\n\t        /**\n\t\t\t *  split the incoming signal into high/mid/low\n\t\t\t *  @type {Tone.MultibandSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._splitter = this.input = new Tone.MultibandSplit({\n\t            'lowFrequency': options.lowFrequency,\n\t            'highFrequency': options.highFrequency\n\t        });\n\t        /**\n\t\t\t *  low/mid crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.lowFrequency = this._splitter.lowFrequency;\n\t        /**\n\t\t\t *  mid/high crossover frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.highFrequency = this._splitter.highFrequency;\n\t        /**\n\t\t\t *  the output\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The compressor applied to the low frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.low = new Tone.Compressor(options.low);\n\t        /**\n\t\t\t *  The compressor applied to the mid frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.mid = new Tone.Compressor(options.mid);\n\t        /**\n\t\t\t *  The compressor applied to the high frequencies.\n\t\t\t *  @type {Tone.Compressor}\n\t\t\t */\n\t        this.high = new Tone.Compressor(options.high);\n\t        //connect the compressor\n\t        this._splitter.low.chain(this.low, this.output);\n\t        this._splitter.mid.chain(this.mid, this.output);\n\t        this._splitter.high.chain(this.high, this.output);\n\t        this._readOnly([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MultibandCompressor);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MultibandCompressor.defaults = {\n\t        'low': Tone.Compressor.defaults,\n\t        'mid': Tone.Compressor.defaults,\n\t        'high': Tone.Compressor.defaults,\n\t        'lowFrequency': 250,\n\t        'highFrequency': 2000\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MultibandCompressor} this\n\t\t */\n\t    Tone.MultibandCompressor.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._splitter.dispose();\n\t        this._writable([\n\t            'high',\n\t            'mid',\n\t            'low',\n\t            'highFrequency',\n\t            'lowFrequency'\n\t        ]);\n\t        this.low.dispose();\n\t        this.mid.dispose();\n\t        this.high.dispose();\n\t        this._splitter = null;\n\t        this.low = null;\n\t        this.mid = null;\n\t        this.high = null;\n\t        this.lowFrequency = null;\n\t        this.highFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.MultibandCompressor;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Panner is an equal power Left/Right Panner and does not\n\t\t *          support 3D. Panner uses the StereoPannerNode when available. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange} [initialPan=0] The initail panner value (defaults to 0 = center)\n\t\t *  @example\n\t\t *  //pan the input signal hard right. \n\t\t *  var panner = new Tone.Panner(1);\n\t\t */\n\t    Tone.Panner = function (initialPan) {\n\t        if (this._hasStereoPanner) {\n\t            /**\n\t\t\t\t *  the panner node\n\t\t\t\t *  @type {StereoPannerNode}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._panner = this.input = this.output = this.context.createStereoPanner();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {NormalRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = this._panner.pan;\n\t        } else {\n\t            /**\n\t\t\t\t *  the dry/wet knob\n\t\t\t\t *  @type {Tone.CrossFade}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._crossFade = new Tone.CrossFade();\n\t            /**\n\t\t\t\t *  @type {Tone.Merge}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._merger = this.output = new Tone.Merge();\n\t            /**\n\t\t\t\t *  @type {Tone.Split}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._splitter = this.input = new Tone.Split();\n\t            /**\n\t\t\t\t *  The pan control. -1 = hard left, 1 = hard right. \n\t\t\t\t *  @type {AudioRange}\n\t\t\t\t *  @signal\n\t\t\t\t */\n\t            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);\n\t            /**\n\t\t\t\t *  always sends 0\n\t\t\t\t *  @type {Tone.Zero}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._zero = new Tone.Zero();\n\t            /**\n\t\t\t\t *  The analog to gain conversion\n\t\t\t\t *  @type  {Tone.AudioToGain}\n\t\t\t\t *  @private\n\t\t\t\t */\n\t            this._a2g = new Tone.AudioToGain();\n\t            //CONNECTIONS:\n\t            this._zero.connect(this._a2g);\n\t            this.pan.chain(this._a2g, this._crossFade.fade);\n\t            //left channel is a, right channel is b\n\t            this._splitter.connect(this._crossFade, 0, 0);\n\t            this._splitter.connect(this._crossFade, 1, 1);\n\t            //merge it back together\n\t            this._crossFade.a.connect(this._merger, 0, 0);\n\t            this._crossFade.b.connect(this._merger, 0, 1);\n\t        }\n\t        //initial value\n\t        this.pan.value = this.defaultArg(initialPan, 0);\n\t        this._readOnly('pan');\n\t    };\n\t    Tone.extend(Tone.Panner);\n\t    /**\n\t\t *  indicates if the panner is using the new StereoPannerNode internally\n\t\t *  @type  {boolean}\n\t\t *  @private\n\t\t */\n\t    Tone.Panner.prototype._hasStereoPanner = Tone.prototype.isFunction(Tone.context.createStereoPanner);\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner} this\n\t\t */\n\t    Tone.Panner.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable('pan');\n\t        if (this._hasStereoPanner) {\n\t            this._panner.disconnect();\n\t            this._panner = null;\n\t            this.pan = null;\n\t        } else {\n\t            this._zero.dispose();\n\t            this._zero = null;\n\t            this._crossFade.dispose();\n\t            this._crossFade = null;\n\t            this._splitter.dispose();\n\t            this._splitter = null;\n\t            this._merger.dispose();\n\t            this._merger = null;\n\t            this.pan.dispose();\n\t            this.pan = null;\n\t            this._a2g.dispose();\n\t            this._a2g = null;\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Panner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  A spatialized panner node which supports equalpower or HRTF panning.\n\t\t *          Tries to normalize the API across various browsers. See Tone.Listener\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Panner3D = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], Tone.Panner3D.defaults);\n\t        /**\n\t\t\t *  The panner node\n\t\t\t *  @type {PannerNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = this.output = this.context.createPanner();\n\t        //set some values\n\t        this._panner.panningModel = options.panningModel;\n\t        this._panner.maxDistance = options.maxDistance;\n\t        this._panner.distanceModel = options.distanceModel;\n\t        this._panner.coneOuterGain = options.coneOuterGain;\n\t        this._panner.coneOuterAngle = options.coneOuterAngle;\n\t        this._panner.coneInnerAngle = options.coneInnerAngle;\n\t        this._panner.refDistance = options.refDistance;\n\t        this._panner.rolloffFactor = options.rolloffFactor;\n\t        /**\n\t\t\t *  Holds the current orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.orientationX,\n\t            options.orientationY,\n\t            options.orientationZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/orientation\n\t        this.orientationX = options.orientationX;\n\t        this.orientationY = options.orientationY;\n\t        this.orientationZ = options.orientationZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Panner3D);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Panner3D.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'orientationX': 0,\n\t        'orientationY': 0,\n\t        'orientationZ': 0,\n\t        'panningModel': 'equalpower',\n\t        'maxDistance': 10000,\n\t        'distanceModel': 'inverse',\n\t        'coneOuterGain': 0,\n\t        'coneOuterAngle': 360,\n\t        'coneInnerAngle': 360,\n\t        'refDistance': 1,\n\t        'rolloffFactor': 1\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Panner3D.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setPosition = function (x, y, z) {\n\t        if (this._panner.positionX) {\n\t            var now = this.now();\n\t            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the source in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {\n\t        if (this._panner.orientationX) {\n\t            var now = this.now();\n\t            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this._panner.setOrientation(x, y, z);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationX\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationY\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z orientation of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name orientationZ\n\t\t */\n\t    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  Proxy a property on the panner to an exposed public propery\n\t\t *  @param  {String}  prop\n\t\t *  @private\n\t\t */\n\t    Tone.Panner3D._aliasProperty = function (prop) {\n\t        Object.defineProperty(Tone.Panner3D.prototype, prop, {\n\t            set: function (val) {\n\t                this._panner[prop] = val;\n\t            },\n\t            get: function () {\n\t                return this._panner[prop];\n\t            }\n\t        });\n\t    };\n\t    /**\n\t\t *  The panning model. Either \"equalpower\" or \"HRTF\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name panningModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('panningModel');\n\t    /**\n\t\t *  A reference distance for reducing volume as source move further from the listener\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name refDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('refDistance');\n\t    /**\n\t\t *  Describes how quickly the volume is reduced as source moves away from listener.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name rolloffFactor\n\t\t */\n\t    Tone.Panner3D._aliasProperty('rolloffFactor');\n\t    /**\n\t\t *  The distance model used by,  \"linear\", \"inverse\", or \"exponential\".\n\t\t *  @type {String}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name distanceModel\n\t\t */\n\t    Tone.Panner3D._aliasProperty('distanceModel');\n\t    /**\n\t\t *  The angle, in degrees, inside of which there will be no volume reduction\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneInnerAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneInnerAngle');\n\t    /**\n\t\t *  The angle, in degrees, outside of which the volume will be reduced \n\t\t *  to a constant value of coneOuterGain\n\t\t *  @type {Degrees}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterAngle\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterAngle');\n\t    /**\n\t\t *  The gain outside of the coneOuterAngle\n\t\t *  @type {Gain}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name coneOuterGain\n\t\t */\n\t    Tone.Panner3D._aliasProperty('coneOuterGain');\n\t    /**\n\t\t *  The maximum distance between source and listener, \n\t\t *  after which the volume will not be reduced any further.\n\t\t *  @type {Positive}\n\t\t *  @memberOf Tone.Panner3D#\n\t\t *  @name maxDistance\n\t\t */\n\t    Tone.Panner3D._aliasProperty('maxDistance');\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Panner3D} this\n\t\t */\n\t    Tone.Panner3D.prototype.dispose = function () {\n\t        this._panner.disconnect();\n\t        this._panner = null;\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    return Tone.Panner3D;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.\n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @constructor\n\t\t *  @param {AudioRange} pan the initial pan\n\t\t *  @param {number} volume The output volume. \n\t\t *  @example\n\t\t * //pan the incoming signal left and drop the volume\n\t\t * var panVol = new Tone.PanVol(0.25, -12);\n\t\t */\n\t    Tone.PanVol = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'pan',\n\t            'volume'\n\t        ], Tone.PanVol.defaults);\n\t        /**\n\t\t\t *  The panning node\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = this.input = new Tone.Panner(options.pan);\n\t        /**\n\t\t\t *  The L/R panning control.\n\t\t\t *  @type {AudioRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.pan = this._panner.pan;\n\t        /**\n\t\t\t *  The volume node\n\t\t\t *  @type {Tone.Volume}\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t *  The volume control in decibels. \n\t\t\t *  @type {Decibels}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        //connections\n\t        this._panner.connect(this._volume);\n\t        this._readOnly([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PanVol);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t *  @static\n\t\t */\n\t    Tone.PanVol.defaults = {\n\t        'pan': 0.5,\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.PanVol} this\n\t\t */\n\t    Tone.PanVol.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._writable([\n\t            'pan',\n\t            'volume'\n\t        ]);\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this.pan = null;\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.PanVol;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlInterpolate will interpolate between given values based\n\t\t *         on the \"index\" property. Passing in an array or object literal\n\t\t *         will interpolate each of the parameters. Note (i.e. \"C3\")\n\t\t *         and Time (i.e. \"4n + 2\") can be interpolated. All other values are\n\t\t *         assumed to be numbers. \n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);\n\t\t * interp.index = 0.75;\n\t\t * interp.value; //returns 1.5\n\t\t *\n\t\t *  @example\n\t\t * var interp = new Tone.CtrlInterpolate([\n\t\t * \t[2, 4, 5],\n\t\t * \t[9, 3, 2],\n\t\t * ]);\n\t\t * @param {Array} values The array of values to interpolate over\n\t\t * @param {Positive} index The initial interpolation index.\n\t\t * @extends {Tone}\n\t\t */\n\t    Tone.CtrlInterpolate = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'index'\n\t        ], Tone.CtrlInterpolate.defaults);\n\t        /**\n\t\t\t *  The values to interpolate between\n\t\t\t *  @type  {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The interpolated index between values. For example: a value of 1.5\n\t\t\t *  would interpolate equally between the value at index 1\n\t\t\t *  and the value at index 2. \n\t\t\t *  @example\n\t\t\t * interp.index = 0; \n\t\t\t * interp.value; //returns the value at 0\n\t\t\t * interp.index = 0.5;\n\t\t\t * interp.value; //returns the value between indices 0 and 1. \n\t\t\t *  @type  {Positive}\n\t\t\t */\n\t        this.index = options.index;\n\t    };\n\t    Tone.extend(Tone.CtrlInterpolate);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlInterpolate.defaults = {\n\t        'index': 0,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The current interpolated value based on the index\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlInterpolate#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {\n\t        get: function () {\n\t            var index = this.index;\n\t            index = Math.min(index, this.values.length - 1);\n\t            var lowerPosition = Math.floor(index);\n\t            var lower = this.values[lowerPosition];\n\t            var upper = this.values[Math.ceil(index)];\n\t            return this._interpolate(index - lowerPosition, lower, upper);\n\t        }\n\t    });\n\t    /**\n\t\t *  Internal interpolation routine\n\t\t *  @param  {NormalRange}  index  The index between the lower and upper\n\t\t *  @param  {*}  lower \n\t\t *  @param  {*}  upper \n\t\t *  @return  {*}  The interpolated value\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {\n\t        if (this.isArray(lower)) {\n\t            var retArray = [];\n\t            for (var i = 0; i < lower.length; i++) {\n\t                retArray[i] = this._interpolate(index, lower[i], upper[i]);\n\t            }\n\t            return retArray;\n\t        } else if (this.isObject(lower)) {\n\t            var retObj = {};\n\t            for (var attr in lower) {\n\t                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);\n\t            }\n\t            return retObj;\n\t        } else {\n\t            lower = this._toNumber(lower);\n\t            upper = this._toNumber(upper);\n\t            return (1 - index) * lower + index * upper;\n\t        }\n\t    };\n\t    /**\n\t\t *  Convert from the given type into a number\n\t\t *  @param  {Number|String}  value\n\t\t *  @return  {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlInterpolate.prototype._toNumber = function (val) {\n\t        if (this.isNumber(val)) {\n\t            return val;\n\t        } else {\n\t            //otherwise assume that it's Time...\n\t            return this.toSeconds(val);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlInterpolate}  this\n\t\t */\n\t    Tone.CtrlInterpolate.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlInterpolate;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.CtrlMarkov represents a Markov Chain where each call\n\t\t *         to Tone.CtrlMarkov.next will move to the next state. If the next\n\t\t *         state choice is an array, the next state is chosen randomly with\n\t\t *         even probability for all of the choices. For a weighted probability\n\t\t *         of the next choices, pass in an object with \"state\" and \"probability\" attributes. \n\t\t *         The probabilities will be normalized and then chosen. If no next options\n\t\t *         are given for the current state, the state will stay there. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [\"end\", \"middle\"],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" or \"middle\" with 50% probability\n\t\t *\n\t\t *  @example\n\t\t * var chain = new Tone.CtrlMarkov({\n\t\t * \t\"beginning\" : [{\"value\" : \"end\", \"probability\" : 0.8}, \n\t\t * \t\t\t\t\t{\"value\" : \"middle\", \"probability\" : 0.2}],\n\t\t * \t\"middle\" : \"end\"\n\t\t * });\n\t\t * chain.value = \"beginning\";\n\t\t * chain.next(); //returns \"end\" with 80% probability or \"middle\" with 20%.\n\t\t *  @param {Object} values An object with the state names as the keys\n\t\t *                         and the next state(s) as the values. \n\t\t */\n\t    Tone.CtrlMarkov = function (values, initial) {\n\t        /**\n\t\t\t *  The Markov values with states as the keys\n\t\t\t *  and next state(s) as the values. \n\t\t\t *  @type {Object}\n\t\t\t */\n\t        this.values = this.defaultArg(values, {});\n\t        /**\n\t\t\t *  The current state of the Markov values. The next\n\t\t\t *  state will be evaluated and returned when Tone.CtrlMarkov.next\n\t\t\t *  is invoked.\n\t\t\t *  @type {String}\n\t\t\t */\n\t        this.value = this.defaultArg(initial, Object.keys(this.values)[0]);\n\t    };\n\t    Tone.extend(Tone.CtrlMarkov);\n\t    /**\n\t\t *  Returns the next state of the Markov values. \n\t\t *  @return  {String}\n\t\t */\n\t    Tone.CtrlMarkov.prototype.next = function () {\n\t        if (this.values.hasOwnProperty(this.value)) {\n\t            var next = this.values[this.value];\n\t            if (this.isArray(next)) {\n\t                var distribution = this._getProbDistribution(next);\n\t                var rand = Math.random();\n\t                var total = 0;\n\t                for (var i = 0; i < distribution.length; i++) {\n\t                    var dist = distribution[i];\n\t                    if (rand > total && rand < total + dist) {\n\t                        var chosen = next[i];\n\t                        if (this.isObject(chosen)) {\n\t                            this.value = chosen.value;\n\t                        } else {\n\t                            this.value = chosen;\n\t                        }\n\t                    }\n\t                    total += dist;\n\t                }\n\t            } else {\n\t                this.value = next;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Choose randomly from an array weighted options in the form \n\t\t *  {\"state\" : string, \"probability\" : number} or an array of values\n\t\t *  @param  {Array}  options \n\t\t *  @return  {Array}  The randomly selected choice\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {\n\t        var distribution = [];\n\t        var total = 0;\n\t        var needsNormalizing = false;\n\t        for (var i = 0; i < options.length; i++) {\n\t            var option = options[i];\n\t            if (this.isObject(option)) {\n\t                needsNormalizing = true;\n\t                distribution[i] = option.probability;\n\t            } else {\n\t                distribution[i] = 1 / options.length;\n\t            }\n\t            total += distribution[i];\n\t        }\n\t        if (needsNormalizing) {\n\t            //normalize the values\n\t            for (var j = 0; j < distribution.length; j++) {\n\t                distribution[j] = distribution[j] / total;\n\t            }\n\t        }\n\t        return distribution;\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.CtrlMarkov}  this\n\t\t */\n\t    Tone.CtrlMarkov.prototype.dispose = function () {\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlMarkov;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Generate patterns from an array of values.\n\t\t *         Has a number of arpeggiation and randomized\n\t\t *         selection patterns. \n\t\t *           <ul>\n\t\t *  \t        <li>\"up\" - cycles upward</li>\n\t\t *  \t\t\t<li>\"down\" - cycles downward</li>\n\t\t *  \t\t\t<li>\"upDown\" - up then and down</li>\n\t\t *  \t\t\t<li>\"downUp\" - cycles down then and up</li>\n\t\t *  \t\t\t<li>\"alternateUp\" - jump up two and down one</li>\n\t\t *  \t\t\t<li>\"alternateDown\" - jump down two and up one</li>\n\t\t *  \t\t\t<li>\"random\" - randomly select an index</li>\n\t\t *  \t\t\t<li>\"randomWalk\" - randomly moves one index away from the current position</li>\n\t\t *  \t\t\t<li>\"randomOnce\" - randomly select an index without repeating until all values have been chosen.</li>\n\t\t *     \t\t</ul>\n\t\t *  @param  {Array}  values   An array of options to choose from.\n\t\t *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.CtrlPattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'values',\n\t            'type'\n\t        ], Tone.CtrlPattern.defaults);\n\t        /**\n\t\t\t *  The array of values to arpeggiate over\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.values = options.values;\n\t        /**\n\t\t\t *  The current position in the values array\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this.index = 0;\n\t        /**\n\t\t\t *  The type placeholder\n\t\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = null;\n\t        /**\n\t\t\t *  Shuffled values for the RandomOnce type\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shuffled = null;\n\t        /**\n\t\t\t *  The direction of the movement\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._direction = null;\n\t        this.type = options.type;\n\t    };\n\t    Tone.extend(Tone.CtrlPattern);\n\t    /**\n\t\t *  The Control Patterns\n\t\t *  @type  {Object}\n\t\t *  @static\n\t\t */\n\t    Tone.CtrlPattern.Type = {\n\t        Up: 'up',\n\t        Down: 'down',\n\t        UpDown: 'upDown',\n\t        DownUp: 'downUp',\n\t        AlternateUp: 'alternateUp',\n\t        AlternateDown: 'alternateDown',\n\t        Random: 'random',\n\t        RandomWalk: 'randomWalk',\n\t        RandomOnce: 'randomOnce'\n\t    };\n\t    /**\n\t\t *  The default values. \n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlPattern.defaults = {\n\t        'type': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  The value at the current index of the pattern.\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {\n\t        get: function () {\n\t            //some safeguards\n\t            if (this.values.length === 0) {\n\t                return;\n\t            } else if (this.values.length === 1) {\n\t                return this.values[0];\n\t            }\n\t            this.index = Math.min(this.index, this.values.length - 1);\n\t            var val = this.values[this.index];\n\t            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                if (this.values.length !== this._shuffled.length) {\n\t                    this._shuffleValues();\n\t                }\n\t                val = this.values[this._shuffled[this.index]];\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern used to select the next\n\t\t *  item from the values array\n\t\t *  @memberOf Tone.CtrlPattern#\n\t\t *  @type {Tone.CtrlPattern.Type}\n\t\t *  @name type\n\t\t */\n\t    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._shuffled = null;\n\t            //the first index\n\t            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this.index = 0;\n\t            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t            //the direction\n\t            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t            //randoms\n\t            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {\n\t                this._shuffleValues();\n\t            } else if (this._type === Tone.CtrlPattern.Random) {\n\t                this.index = Math.floor(Math.random() * this.values.length);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Return the next value given the current position\n\t\t *  and pattern.\n\t\t *  @return {*} The next value\n\t\t */\n\t    Tone.CtrlPattern.prototype.next = function () {\n\t        var type = this.type;\n\t        //choose the next index\n\t        if (type === Tone.CtrlPattern.Type.Up) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Down) {\n\t            this.index--;\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index++;\n\t            } else {\n\t                this.index--;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            } else if (this.index >= this.values.length) {\n\t                this.index = this.values.length - 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.Random) {\n\t            this.index = Math.floor(Math.random() * this.values.length);\n\t        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {\n\t            if (Math.random() < 0.5) {\n\t                this.index--;\n\t                this.index = Math.max(this.index, 0);\n\t            } else {\n\t                this.index++;\n\t                this.index = Math.min(this.index, this.values.length - 1);\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {\n\t            this.index++;\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                //reshuffle the values for next time\n\t                this._shuffleValues();\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 2;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 1;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index >= this.values.length) {\n\t                this.index = 0;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {\n\t            if (this._direction === Tone.CtrlPattern.Type.Up) {\n\t                this.index += 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            } else {\n\t                this.index -= 2;\n\t                this._direction = Tone.CtrlPattern.Type.Up;\n\t            }\n\t            if (this.index < 0) {\n\t                this.index = this.values.length - 1;\n\t                this._direction = Tone.CtrlPattern.Type.Down;\n\t            }\n\t        }\n\t        return this.value;\n\t    };\n\t    /**\n\t\t *  Shuffles the values and places the results into the _shuffled\n\t\t *  @private\n\t\t */\n\t    Tone.CtrlPattern.prototype._shuffleValues = function () {\n\t        var copy = [];\n\t        this._shuffled = [];\n\t        for (var i = 0; i < this.values.length; i++) {\n\t            copy[i] = i;\n\t        }\n\t        while (copy.length > 0) {\n\t            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);\n\t            this._shuffled.push(randVal[0]);\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.CtrlPattern} this\n\t\t */\n\t    Tone.CtrlPattern.prototype.dispose = function () {\n\t        this._shuffled = null;\n\t        this.values = null;\n\t    };\n\t    return Tone.CtrlPattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Choose a random value.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var randomWalk = new Tone.CtrlRandom({\n\t\t * \t\"min\" : 0,\n\t\t * \t\"max\" : 10,\n\t\t * \t\"integer\" : true\n\t\t * });\n\t\t * randomWalk.eval();\n\t\t *\n\t\t *  @param {Number|Time=} min The minimum return value.\n\t\t *  @param {Number|Time=} max The maximum return value.\n\t\t */\n\t    Tone.CtrlRandom = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'min',\n\t            'max'\n\t        ], Tone.CtrlRandom.defaults);\n\t        /**\n\t\t\t *  The minimum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.min = options.min;\n\t        /**\n\t\t\t *  The maximum return value\n\t\t\t *  @type  {Number|Time}\n\t\t\t */\n\t        this.max = options.max;\n\t        /**\n\t\t\t *  If the return value should be an integer\n\t\t\t *  @type  {Boolean}\n\t\t\t */\n\t        this.integer = options.integer;\n\t    };\n\t    Tone.extend(Tone.CtrlRandom);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.CtrlRandom.defaults = {\n\t        'min': 0,\n\t        'max': 1,\n\t        'integer': false\n\t    };\n\t    /**\n\t\t *  Return a random value between min and max. \n\t\t *  @readOnly\n\t\t *  @memberOf Tone.CtrlRandom#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t */\n\t    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {\n\t        get: function () {\n\t            var min = this.toSeconds(this.min);\n\t            var max = this.toSeconds(this.max);\n\t            var rand = Math.random();\n\t            var val = rand * min + (1 - rand) * max;\n\t            if (this.integer) {\n\t                val = Math.floor(val);\n\t            }\n\t            return val;\n\t        }\n\t    });\n\t    return Tone.CtrlRandom;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  AudioBuffer.copyToChannel polyfill\n\t\t *  @private\n\t\t */\n\t    if (window.AudioBuffer && !AudioBuffer.prototype.copyToChannel) {\n\t        AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                channel[i + start] = src[i];\n\t            }\n\t        };\n\t        AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {\n\t            var channel = this.getChannelData(chanNum);\n\t            start = start || 0;\n\t            for (var i = 0; i < channel.length; i++) {\n\t                dest[i] = channel[i + start];\n\t            }\n\t        };\n\t    }\n\t    /**\n\t\t *  @class  Buffer loading and storage. Tone.Buffer is used internally by all \n\t\t *          classes that make requests for audio files such as Tone.Player,\n\t\t *          Tone.Sampler and Tone.Convolver.\n\t\t *          <br><br>\n\t\t *          Aside from load callbacks from individual buffers, Tone.Buffer \n\t\t *  \t\tprovides static methods which keep track of the loading progress \n\t\t *  \t\tof all of the buffers. These methods are Tone.Buffer.on(\"load\" / \"progress\" / \"error\")\n\t\t *\n\t\t *  @constructor \n\t\t *  @extends {Tone}\n\t\t *  @param {AudioBuffer|string} url The url to load, or the audio buffer to set. \n\t\t *  @param {Function=} onload A callback which is invoked after the buffer is loaded. \n\t\t *                            It's recommended to use Tone.Buffer.onload instead \n\t\t *                            since it will give you a callback when ALL buffers are loaded.\n\t\t *  @param {Function=} onerror The callback to invoke if there is an error\n\t\t *  @example\n\t\t * var buffer = new Tone.Buffer(\"path/to/sound.mp3\", function(){\n\t\t * \t//the buffer is now available.\n\t\t * \tvar buff = buffer.get();\n\t\t * });\n\t\t */\n\t    Tone.Buffer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload',\n\t            'onerror'\n\t        ], Tone.Buffer.defaults);\n\t        /**\n\t\t\t *  stores the loaded AudioBuffer\n\t\t\t *  @type {AudioBuffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = null;\n\t        /**\n\t\t\t *  indicates if the buffer should be reversed or not\n\t\t\t *  @type {Boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._reversed = options.reverse;\n\t        /**\n\t\t\t *  The XHR\n\t\t\t *  @type  {XMLHttpRequest}\n\t\t\t *  @private\n\t\t\t */\n\t        this._xhr = null;\n\t        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {\n\t            this.set(options.url);\n\t            // invoke the onload callback\n\t            if (options.onload) {\n\t                options.onload(this);\n\t            }\n\t        } else if (this.isString(options.url)) {\n\t            this.load(options.url, options.onload, options.onerror);\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffer);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Buffer.defaults = {\n\t        'url': undefined,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Pass in an AudioBuffer or Tone.Buffer to set the value\n\t\t *  of this buffer.\n\t\t *  @param {AudioBuffer|Tone.Buffer} buffer the buffer\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.set = function (buffer) {\n\t        if (buffer instanceof Tone.Buffer) {\n\t            this._buffer = buffer.get();\n\t        } else {\n\t            this._buffer = buffer;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  @return {AudioBuffer} The audio buffer stored in the object.\n\t\t */\n\t    Tone.Buffer.prototype.get = function () {\n\t        return this._buffer;\n\t    };\n\t    /**\n\t\t *  Makes an xhr reqest for the selected url then decodes\n\t\t *  the file as an audio buffer. Invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {String} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer\n\t\t */\n\t    Tone.Buffer.prototype.load = function (url, onload, onerror) {\n\t        var promise = new Promise(function (load, error) {\n\t            this._xhr = Tone.Buffer.load(url, //success\n\t            function (buff) {\n\t                this._xhr = null;\n\t                this.set(buff);\n\t                load(this);\n\t                if (onload) {\n\t                    onload(this);\n\t                }\n\t            }.bind(this), //error\n\t            function (err) {\n\t                this._xhr = null;\n\t                error(err);\n\t                if (onerror) {\n\t                    onerror(err);\n\t                }\n\t            }.bind(this));\n\t        }.bind(this));\n\t        return promise;\n\t    };\n\t    /**\n\t\t *  dispose and disconnect\n\t\t *  @returns {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.dispose = function () {\n\t        Tone.Emitter.prototype.dispose.call(this);\n\t        this._buffer = null;\n\t        if (this._xhr) {\n\t            Tone.Buffer._currentDownloads--;\n\t            this._xhr.abort();\n\t            this._xhr = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * If the buffer is loaded or not\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {\n\t        get: function () {\n\t            return this.length > 0;\n\t        }\n\t    });\n\t    /**\n\t\t * The duration of the buffer. \n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name duration\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'duration', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.duration;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The length of the buffer in samples\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name length\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'length', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.length;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of discrete audio channels. Returns 0 if no buffer\n\t\t * is loaded.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Number}\n\t\t * @name numberOfChannels\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {\n\t        get: function () {\n\t            if (this._buffer) {\n\t                return this._buffer.numberOfChannels;\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Set the audio buffer from the array\n\t\t *  @param {Float32Array} array The array to fill the audio buffer\n\t\t *  @param {Number} [channels=1] The number of channels contained in the array. \n\t\t *                               If the channel is more than 1, the input array\n\t\t *                               is expected to be a multidimensional array\n\t\t *                               with dimensions equal to the number of channels.\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.fromArray = function (array) {\n\t        var isMultidimensional = array[0].length > 0;\n\t        var channels = isMultidimensional ? array.length : 1;\n\t        var len = isMultidimensional ? array[0].length : array.length;\n\t        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);\n\t        if (!isMultidimensional && channels === 1) {\n\t            array = [array];\n\t        }\n\t        for (var c = 0; c < channels; c++) {\n\t            buffer.copyToChannel(array[c], c);\n\t        }\n\t        this._buffer = buffer;\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tSums muliple channels into 1 channel\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toMono = function (chanNum) {\n\t        if (this.isNumber(chanNum)) {\n\t            this.fromArray(this.toArray(chanNum));\n\t        } else {\n\t            var outputArray = new Float32Array(this.length);\n\t            var numChannels = this.numberOfChannels;\n\t            for (var channel = 0; channel < numChannels; channel++) {\n\t                var channelArray = this.toArray(channel);\n\t                for (var i = 0; i < channelArray.length; i++) {\n\t                    outputArray[i] += channelArray[i];\n\t                }\n\t            }\n\t            //divide by the number of channels\n\t            outputArray = outputArray.map(function (sample) {\n\t                return sample / numChannels;\n\t            });\n\t            this.fromArray(outputArray);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * \tGet the buffer as an array. Single channel buffers will return a 1-dimensional \n\t\t * \tFloat32Array, and multichannel buffers will return multidimensional arrays.\n\t\t *  @param {Number=} channel Optionally only copy a single channel from the array.\n\t\t *  @return {Array}\n\t\t */\n\t    Tone.Buffer.prototype.toArray = function (channel) {\n\t        if (this.isNumber(channel)) {\n\t            return this.getChannelData(channel);\n\t        } else if (this.numberOfChannels === 1) {\n\t            return this.toArray(0);\n\t        } else {\n\t            var ret = [];\n\t            for (var c = 0; c < this.numberOfChannels; c++) {\n\t                ret[c] = this.getChannelData(c);\n\t            }\n\t            return ret;\n\t        }\n\t    };\n\t    /**\n\t\t *  Returns the Float32Array representing the PCM audio data for the specific channel.\n\t\t *  @param  {Number}  channel  The channel number to return\n\t\t *  @return  {Float32Array}  The audio as a TypedArray\n\t\t */\n\t    Tone.Buffer.prototype.getChannelData = function (channel) {\n\t        return this._buffer.getChannelData(channel);\n\t    };\n\t    /**\n\t\t *  Cut a subsection of the array and return a buffer of the\n\t\t *  subsection. Does not modify the original buffer\n\t\t *  @param {Time} start The time to start the slice\n\t\t *  @param {Time=} end The end time to slice. If none is given\n\t\t *                     will default to the end of the buffer\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype.slice = function (start, end) {\n\t        end = this.defaultArg(end, this.duration);\n\t        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));\n\t        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));\n\t        var replacement = [];\n\t        for (var i = 0; i < this.numberOfChannels; i++) {\n\t            replacement[i] = this.toArray(i).slice(startSamples, endSamples);\n\t        }\n\t        var retBuffer = new Tone.Buffer().fromArray(replacement);\n\t        return retBuffer;\n\t    };\n\t    /**\n\t\t *  Reverse the buffer.\n\t\t *  @private\n\t\t *  @return {Tone.Buffer} this\n\t\t */\n\t    Tone.Buffer.prototype._reverse = function () {\n\t        if (this.loaded) {\n\t            for (var i = 0; i < this.numberOfChannels; i++) {\n\t                Array.prototype.reverse.call(this.getChannelData(i));\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t * Reverse the buffer.\n\t\t * @memberOf Tone.Buffer#\n\t\t * @type {Boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._reversed;\n\t        },\n\t        set: function (rev) {\n\t            if (this._reversed !== rev) {\n\t                this._reversed = rev;\n\t                this._reverse();\n\t            }\n\t        }\n\t    });\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // STATIC METHODS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //statically inherits Emitter methods\n\t    Tone.Emitter.mixin(Tone.Buffer);\n\t    /**\n\t\t *  the static queue for all of the xhr requests\n\t\t *  @type {Array}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._downloadQueue = [];\n\t    /**\n\t\t *  the total number of downloads\n\t\t *  @type {Number}\n\t\t *  @private\n\t\t */\n\t    Tone.Buffer._currentDownloads = 0;\n\t    /**\n\t\t *  A path which is prefixed before every url.\n\t\t *  @type  {String}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.baseUrl = '';\n\t    /**\n\t\t *  Loads a url using XMLHttpRequest.\n\t\t *  @param {String} url\n\t\t *  @param {Function} onload\n\t\t *  @param {Function} onerror\n\t\t *  @param {Function} onprogress\n\t\t *  @return {XMLHttpRequest}\n\t\t */\n\t    Tone.Buffer.load = function (url, onload, onerror) {\n\t        //default\n\t        onload = onload || Tone.noOp;\n\t        function onError(e) {\n\t            if (onerror) {\n\t                onerror(e);\n\t                Tone.Buffer.emit('error', e);\n\t            } else {\n\t                throw new Error(e);\n\t            }\n\t        }\n\t        function onProgress() {\n\t            //calculate the progress\n\t            var totalProgress = 0;\n\t            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {\n\t                totalProgress += Tone.Buffer._downloadQueue[i].progress;\n\t            }\n\t            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);\n\t        }\n\t        var request = new XMLHttpRequest();\n\t        request.open('GET', Tone.Buffer.baseUrl + url, true);\n\t        request.responseType = 'arraybuffer';\n\t        //start out as 0\n\t        request.progress = 0;\n\t        Tone.Buffer._currentDownloads++;\n\t        Tone.Buffer._downloadQueue.push(request);\n\t        request.addEventListener('load', function () {\n\t            if (request.status === 200) {\n\t                Tone.context.decodeAudioData(request.response, function (buff) {\n\t                    request.progress = 1;\n\t                    onProgress();\n\t                    onload(buff);\n\t                    Tone.Buffer._currentDownloads--;\n\t                    if (Tone.Buffer._currentDownloads === 0) {\n\t                        // clear the downloads\n\t                        Tone.Buffer._downloadQueue = [];\n\t                        //emit the event at the end\n\t                        Tone.Buffer.emit('load');\n\t                    }\n\t                }, function () {\n\t                    onError('Tone.Buffer: could not decode audio data: ' + url);\n\t                });\n\t            } else {\n\t                onError('Tone.Buffer: could not locate file: ' + url);\n\t            }\n\t        });\n\t        request.addEventListener('error', onError);\n\t        request.addEventListener('progress', function (event) {\n\t            if (event.lengthComputable) {\n\t                //only go to 95%, the last 5% is when the audio is decoded\n\t                request.progress = event.loaded / event.total * 0.95;\n\t                onProgress();\n\t            }\n\t        });\n\t        request.send();\n\t        return request;\n\t    };\n\t    /**\n\t\t *  Stop all of the downloads in progress\n\t\t *  @return {Tone.Buffer}\n\t\t *  @static\n\t\t */\n\t    Tone.Buffer.cancelDownloads = function () {\n\t        Tone.Buffer._downloadQueue.forEach(function (request) {\n\t            request.abort();\n\t        });\n\t        Tone.Buffer._currentDownloads = 0;\n\t        return Tone.Buffer;\n\t    };\n\t    /**\n\t\t *  Checks a url's extension to see if the current browser can play that file type.\n\t\t *  @param {String} url The url/extension to test\n\t\t *  @return {Boolean} If the file extension can be played\n\t\t *  @static\n\t\t *  @example\n\t\t * Tone.Buffer.supportsType(\"wav\"); //returns true\n\t\t * Tone.Buffer.supportsType(\"path/to/file.wav\"); //returns true\n\t\t */\n\t    Tone.Buffer.supportsType = function (url) {\n\t        var extension = url.split('.');\n\t        extension = extension[extension.length - 1];\n\t        var response = document.createElement('audio').canPlayType('audio/' + extension);\n\t        return response !== '';\n\t    };\n\t    /**\n\t\t *  Returns a Promise which resolves when all of the buffers have loaded\n\t\t *  @return {Promise}\n\t\t */\n\t    Tone.loaded = function () {\n\t        var onload, onerror;\n\t        function removeEvents() {\n\t            //remove the events when it's resolved\n\t            Tone.Buffer.off('load', onload);\n\t            Tone.Buffer.off('error', onerror);\n\t        }\n\t        return new Promise(function (success, fail) {\n\t            onload = function () {\n\t                success();\n\t            };\n\t            onerror = function () {\n\t                fail();\n\t            };\n\t            //add the event listeners\n\t            Tone.Buffer.on('load', onload);\n\t            Tone.Buffer.on('error', onerror);\n\t        }).then(removeEvents).catch(function (e) {\n\t            removeEvents();\n\t            throw new Error(e);\n\t        });\n\t    };\n\t    return Tone.Buffer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class A data structure for holding multiple buffers.\n\t\t *  \n\t\t *  @param  {Object|Array}    urls      An object literal or array\n\t\t *                                      of urls to load.\n\t\t *  @param  {Function=}  callback  The callback to invoke when\n\t\t *                                 the buffers are loaded. \n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * //load a whole bank of piano samples\n\t\t * var pianoSamples = new Tone.Buffers({\n\t\t * \t\"C4\" : \"path/to/C4.mp3\"\n\t\t * \t\"C#4\" : \"path/to/C#4.mp3\"\n\t\t * \t\"D4\" : \"path/to/D4.mp3\"\n\t\t * \t\"D#4\" : \"path/to/D#4.mp3\"\n\t\t * \t...\n\t\t * }, function(){\n\t\t * \t//play one of the samples when they all load\n\t\t * \tplayer.buffer = pianoSamples.get(\"C4\");\n\t\t * \tplayer.start();\n\t\t * });\n\t\t * \n\t\t */\n\t    Tone.Buffers = function (urls, onload, baseUrl) {\n\t        /**\n\t\t\t *  All of the buffers\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffers = {};\n\t        /**\n\t\t\t *  A path which is prefixed before every url.\n\t\t\t *  @type  {String}\n\t\t\t */\n\t        this.baseUrl = this.defaultArg(baseUrl, '');\n\t        urls = this._flattenUrls(urls);\n\t        this._loadingCount = 0;\n\t        //add each one\n\t        for (var key in urls) {\n\t            this._loadingCount++;\n\t            this.add(key, urls[key], this._bufferLoaded.bind(this, onload));\n\t        }\n\t    };\n\t    Tone.extend(Tone.Buffers);\n\t    /**\n\t\t *  True if the buffers object has a buffer by that name.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Boolean}\n\t\t */\n\t    Tone.Buffers.prototype.has = function (name) {\n\t        return this._buffers.hasOwnProperty(name);\n\t    };\n\t    /**\n\t\t *  Get a buffer by name. If an array was loaded, \n\t\t *  then use the array index.\n\t\t *  @param  {String|Number}  name  The key or index of the \n\t\t *                                 buffer.\n\t\t *  @return  {Tone.Buffer}\n\t\t */\n\t    Tone.Buffers.prototype.get = function (name) {\n\t        if (this.has(name)) {\n\t            return this._buffers[name];\n\t        } else {\n\t            throw new Error('Tone.Buffers: no buffer named ' + name);\n\t        }\n\t    };\n\t    /**\n\t\t *  A buffer was loaded. decrement the counter.\n\t\t *  @param  {Function}  callback \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._bufferLoaded = function (callback) {\n\t        this._loadingCount--;\n\t        if (this._loadingCount === 0 && callback) {\n\t            callback(this);\n\t        }\n\t    };\n\t    /**\n\t\t * If the buffers are loaded or not\n\t\t * @memberOf Tone.Buffers#\n\t\t * @type {Boolean}\n\t\t * @name loaded\n\t\t * @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {\n\t        get: function () {\n\t            var isLoaded = true;\n\t            for (var buffName in this._buffers) {\n\t                var buff = this.get(buffName);\n\t                isLoaded = isLoaded && buff.loaded;\n\t            }\n\t            return isLoaded;\n\t        }\n\t    });\n\t    /**\n\t\t *  Add a buffer by name and url to the Buffers\n\t\t *  @param  {String}    name      A unique name to give\n\t\t *                                the buffer\n\t\t *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, \n\t\t *                                                 or a buffer which will be added\n\t\t *                                                 with the given name.\n\t\t *  @param  {Function=}  callback  The callback to invoke \n\t\t *                                 when the url is loaded.\n\t\t */\n\t    Tone.Buffers.prototype.add = function (name, url, callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        if (url instanceof Tone.Buffer) {\n\t            this._buffers[name] = url;\n\t            callback(this);\n\t        } else if (url instanceof AudioBuffer) {\n\t            this._buffers[name] = new Tone.Buffer(url);\n\t            callback(this);\n\t        } else if (this.isString(url)) {\n\t            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Flatten an object into a single depth object. \n\t\t *  thanks to https://gist.github.com/penguinboy/762197\n\t\t *  @param   {Object} ob \t\n\t\t *  @return  {Object}    \n\t\t *  @private\n\t\t */\n\t    Tone.Buffers.prototype._flattenUrls = function (ob) {\n\t        var toReturn = {};\n\t        for (var i in ob) {\n\t            if (!ob.hasOwnProperty(i))\n\t                continue;\n\t            if (this.isObject(ob[i])) {\n\t                var flatObject = this._flattenUrls(ob[i]);\n\t                for (var x in flatObject) {\n\t                    if (!flatObject.hasOwnProperty(x))\n\t                        continue;\n\t                    toReturn[i + '.' + x] = flatObject[x];\n\t                }\n\t            } else {\n\t                toReturn[i] = ob[i];\n\t            }\n\t        }\n\t        return toReturn;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.Buffers} this\n\t\t */\n\t    Tone.Buffers.prototype.dispose = function () {\n\t        for (var name in this._buffers) {\n\t            this._buffers[name].dispose();\n\t        }\n\t        this._buffers = null;\n\t        return this;\n\t    };\n\t    return Tone.Buffers;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  buses are another way of routing audio\n\t\t *\n\t\t *  augments Tone.prototype to include send and recieve\n\t\t */\n\t    /**\n\t\t  *  All of the routes\n\t\t  *  \n\t\t  *  @type {Object}\n\t\t  *  @static\n\t\t  *  @private\n\t\t  */\n\t    var Buses = {};\n\t    /**\n\t\t *  Send this signal to the channel name. \n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param  {Decibels} amount The amount of the source to send to the bus. \n\t\t *  @return {GainNode} The gain node which connects this node to the desired channel. \n\t\t *                     Can be used to adjust the levels of the send.\n\t\t *  @example\n\t\t * source.send(\"reverb\", -12);\n\t\t */\n\t    Tone.prototype.send = function (channelName, amount) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        amount = this.defaultArg(amount, 0);\n\t        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);\n\t        this.output.chain(sendKnob, Buses[channelName]);\n\t        return sendKnob;\n\t    };\n\t    /**\n\t\t *  Recieve the input from the desired channelName to the input\n\t\t *\n\t\t *  @param  {string} channelName A named channel to send the signal to.\n\t\t *  @param {AudioNode} [input] If no input is selected, the\n\t\t *                                         input of the current node is\n\t\t *                                         chosen. \n\t\t *  @returns {Tone} this\n\t\t *  @example\n\t\t * reverbEffect.receive(\"reverb\");\n\t\t */\n\t    Tone.prototype.receive = function (channelName, input) {\n\t        if (!Buses.hasOwnProperty(channelName)) {\n\t            Buses[channelName] = this.context.createGain();\n\t        }\n\t        if (this.isUndef(input)) {\n\t            input = this.input;\n\t        }\n\t        Buses[channelName].connect(input);\n\t        return this;\n\t    };\n\t    //remove all the send/receives when a new audio context is passed in\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Buses) {\n\t            Buses = context.Buses;\n\t        } else {\n\t            Buses = {};\n\t            context.Buses = Buses;\n\t        }\n\t    });\n\t    return Tone;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Draw is useful for synchronizing visuals and audio events.\n\t\t *         Callbacks from Tone.Transport or any of the Tone.Event classes\n\t\t *         always happen _before_ the scheduled time and are not synchronized\n\t\t *         to the animation frame so they are not good for triggering tightly\n\t\t *         synchronized visuals and sound. Tone.Draw makes it easy to schedule\n\t\t *         callbacks using the AudioContext time and uses requestAnimationFrame.\n\t\t *         \n\t\t *  @singleton\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * Tone.Transport.schedule(function(time){\n\t\t * \t//use the time argument to schedule a callback with Tone.Draw\n\t\t * \tTone.Draw.schedule(function(){\n\t\t * \t\t//do drawing or DOM manipulation here\n\t\t * \t}, time)\n\t\t * }, \"+0.5\")\n\t\t */\n\t    Tone.Draw = function () {\n\t        /**\n\t\t\t *  All of the events.\n\t\t\t *  @type  {Tone.Timeline}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = new Tone.Timeline();\n\t        /**\n\t\t\t *  The duration after which events are not invoked.\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.25\n\t\t\t */\n\t        this.expiration = 0.25;\n\t        /**\n\t\t\t *  The amount of time before the scheduled time \n\t\t\t *  that the callback can be invoked. Default is\n\t\t\t *  half the time of an animation frame (0.008 seconds).\n\t\t\t *  @type  {Number}\n\t\t\t *  @default 0.008\n\t\t\t */\n\t        this.anticipation = 0.008;\n\t        /**\n\t\t\t *  The draw loop\n\t\t\t *  @type  {Function}\n\t\t\t *  @private\n\t\t\t */\n\t        this._boundDrawLoop = this._drawLoop.bind(this);\n\t    };\n\t    Tone.extend(Tone.Draw);\n\t    /**\n\t\t *  Schedule a function at the given time to be invoked\n\t\t *  on the nearest animation frame.\n\t\t *  @param  {Function}  callback  Callback is invoked at the given time.\n\t\t *  @param  {Time}    time      The time relative to the AudioContext time\n\t\t *                              to invoke the callback.\n\t\t *  @return  {Tone.Draw}    this\n\t\t */\n\t    Tone.Draw.prototype.schedule = function (callback, time) {\n\t        this._events.add({\n\t            callback: callback,\n\t            time: this.toSeconds(time)\n\t        });\n\t        //start the draw loop on the first event\n\t        if (this._events.length === 1) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel events scheduled after the given time\n\t\t *  @param  {Time=}  after  Time after which scheduled events will \n\t\t *                          be removed from the scheduling timeline.\n\t\t *  @return  {Tone.Draw}  this\n\t\t */\n\t    Tone.Draw.prototype.cancel = function (after) {\n\t        this._events.cancel(this.toSeconds(after));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The draw loop\n\t\t *  @private\n\t\t */\n\t    Tone.Draw.prototype._drawLoop = function () {\n\t        var now = Tone.now();\n\t        while (this._events.length && this._events.peek().time - this.anticipation <= now) {\n\t            var event = this._events.shift();\n\t            if (now - event.time <= this.expiration) {\n\t                event.callback();\n\t            }\n\t        }\n\t        if (this._events.length > 0) {\n\t            requestAnimationFrame(this._boundDrawLoop);\n\t        }\n\t    };\n\t    //make a singleton\n\t    Tone.Draw = new Tone.Draw();\n\t    return Tone.Draw;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space \n\t\t *          using a right-handed cartesian coordinate system. \n\t\t *          The units used in the coordinate system are not defined; \n\t\t *          these coordinates are independent/invariant of any particular \n\t\t *          units such as meters or feet. Tone.Panner3D objects have an forward \n\t\t *          vector representing the direction the sound is projecting. Additionally, \n\t\t *          they have a sound cone representing how directional the sound is. \n\t\t *          For example, the sound could be omnidirectional, in which case it would \n\t\t *          be heard anywhere regardless of its forward, or it can be more directional \n\t\t *          and heard only if it is facing the listener. Tone.Listener objects \n\t\t *          (representing a person's ears) have an forward and up vector \n\t\t *          representing in which direction the person is facing. Because both the \n\t\t *          source stream and the listener can be moving, they both have a velocity \n\t\t *          vector representing both the speed and direction of movement. Taken together, \n\t\t *          these two velocities can be used to generate a doppler shift effect which changes the pitch.\n\t\t *          <br><br>\n\t\t *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @singleton\n\t\t *  @param {Number} positionX The initial x position.\n\t\t *  @param {Number} positionY The initial y position.\n\t\t *  @param {Number} positionZ The initial z position.\n\t\t */\n\t    Tone.Listener = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'positionX',\n\t            'positionY',\n\t            'positionZ'\n\t        ], ListenerConstructor.defaults);\n\t        /**\n\t\t\t *  Holds the current forward orientation\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._orientation = [\n\t            options.forwardX,\n\t            options.forwardY,\n\t            options.forwardZ,\n\t            options.upX,\n\t            options.upY,\n\t            options.upZ\n\t        ];\n\t        /**\n\t\t\t *  Holds the current position\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._position = [\n\t            options.positionX,\n\t            options.positionY,\n\t            options.positionZ\n\t        ];\n\t        // set the default position/forward\n\t        this.forwardX = options.forwardX;\n\t        this.forwardY = options.forwardY;\n\t        this.forwardZ = options.forwardZ;\n\t        this.upX = options.upX;\n\t        this.upY = options.upY;\n\t        this.upZ = options.upZ;\n\t        this.positionX = options.positionX;\n\t        this.positionY = options.positionY;\n\t        this.positionZ = options.positionZ;\n\t    };\n\t    Tone.extend(Tone.Listener);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t *  Defaults according to the specification\n\t\t */\n\t    Tone.Listener.defaults = {\n\t        'positionX': 0,\n\t        'positionY': 0,\n\t        'positionZ': 0,\n\t        'forwardX': 0,\n\t        'forwardY': 0,\n\t        'forwardZ': 1,\n\t        'upX': 0,\n\t        'upY': 1,\n\t        'upZ': 0\n\t    };\n\t    /**\n\t\t * The ramp time which is applied to the setTargetAtTime\n\t\t * @type {Number}\n\t\t * @private\n\t\t */\n\t    Tone.Listener.prototype._rampTimeConstant = 0.01;\n\t    /**\n\t\t *  Sets the position of the listener in 3d space.\t\n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setPosition = function (x, y, z) {\n\t        if (this.context.listener.positionX) {\n\t            var now = this.now();\n\t            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setPosition(x, y, z);\n\t        }\n\t        this._position = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Sets the orientation of the listener using two vectors, the forward\n\t\t *  vector (which direction the listener is facing) and the up vector \n\t\t *  (which the up direction of the listener). An up vector\n\t\t *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction. \n\t\t *  @param  {Number}  x\n\t\t *  @param  {Number}  y\n\t\t *  @param  {Number}  z\n\t\t *  @param  {Number}  upX\n\t\t *  @param  {Number}  upY\n\t\t *  @param  {Number}  upZ\n\t\t *  @return {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {\n\t        if (this.context.listener.forwardX) {\n\t            var now = this.now();\n\t            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);\n\t            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);\n\t            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);\n\t            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);\n\t            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);\n\t            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);\n\t        } else {\n\t            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);\n\t        }\n\t        this._orientation = Array.prototype.slice.call(arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The x position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionX', {\n\t        set: function (pos) {\n\t            this._position[0] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionY', {\n\t        set: function (pos) {\n\t            this._position[1] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z position of the panner object.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name positionZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {\n\t        set: function (pos) {\n\t            this._position[2] = pos;\n\t            this.setPosition.apply(this, this._position);\n\t        },\n\t        get: function () {\n\t            return this._position[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {\n\t        set: function (pos) {\n\t            this._orientation[0] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[0];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {\n\t        set: function (pos) {\n\t            this._orientation[1] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[1];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listeners front direction. i.e. \n\t\t *  which way they are facing.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name forwardZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {\n\t        set: function (pos) {\n\t            this._orientation[2] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[2];\n\t        }\n\t    });\n\t    /**\n\t\t *  The x coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upX\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upX', {\n\t        set: function (pos) {\n\t            this._orientation[3] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[3];\n\t        }\n\t    });\n\t    /**\n\t\t *  The y coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upY\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upY', {\n\t        set: function (pos) {\n\t            this._orientation[4] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[4];\n\t        }\n\t    });\n\t    /**\n\t\t *  The z coordinate of the listener's up direction. i.e.\n\t\t *  the direction the listener is standing in.\n\t\t *  @type {Number}\n\t\t *  @memberOf Tone.Listener#\n\t\t *  @name upZ\n\t\t */\n\t    Object.defineProperty(Tone.Listener.prototype, 'upZ', {\n\t        set: function (pos) {\n\t            this._orientation[5] = pos;\n\t            this.setOrientation.apply(this, this._orientation);\n\t        },\n\t        get: function () {\n\t            return this._orientation[5];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Listener} this\n\t\t */\n\t    Tone.Listener.prototype.dispose = function () {\n\t        this._orientation = null;\n\t        this._position = null;\n\t        return this;\n\t    };\n\t    //SINGLETON SETUP\n\t    var ListenerConstructor = Tone.Listener;\n\t    Tone.Listener = new ListenerConstructor();\n\t    Tone.Context.on('init', function (context) {\n\t        if (context.Listener instanceof ListenerConstructor) {\n\t            //a single listener object\n\t            Tone.Listener = context.Listener;\n\t        } else {\n\t            //make new Listener insides\n\t            Tone.Listener = new ListenerConstructor();\n\t        }\n\t        context.Listener = Tone.Listener;\n\t    });\n\t    //END SINGLETON SETUP\n\t    return Tone.Listener;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  shim\n\t\t *  @private\n\t\t */\n\t    if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {\n\t        window.OfflineAudioContext = window.webkitOfflineAudioContext;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the OfflineAudioContext\n\t\t *  @extends {Tone.Context\n\t\t *  @param  {Number}  channels  The number of channels to render\n\t\t *  @param  {Number}  duration  The duration to render in samples\n\t\t *  @param {Number} sampleRate the sample rate to render at\n\t\t */\n\t    Tone.OfflineContext = function (channels, duration, sampleRate) {\n\t        /**\n\t\t\t *  The offline context\n\t\t\t *  @private\n\t\t\t *  @type  {OfflineAudioContext}\n\t\t\t */\n\t        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);\n\t        //wrap the methods/members\n\t        Tone.Context.call(this, offlineContext);\n\t        /**\n\t\t\t *  A private reference to the duration\n\t\t\t *  @private\n\t\t\t *  @type  {Number}\n\t\t\t */\n\t        this._duration = duration;\n\t        /**\n\t\t\t *  An artificial clock source\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._currentTime = 0;\n\t        //modify the lookAhead and updateInterval to one block\n\t        this.lookAhead = this.blockTime;\n\t        this.updateInterval = this.blockTime;\n\t    };\n\t    Tone.extend(Tone.OfflineContext, Tone.Context);\n\t    /**\n\t\t *  Override the now method to point to the internal clock time\n\t\t *  @return  {Number}\n\t\t */\n\t    Tone.OfflineContext.prototype.now = function () {\n\t        return this._currentTime;\n\t    };\n\t    /**\n\t\t *  Overwrite this method since the worker is not necessary for the offline context\n\t\t *  @private\n\t\t */\n\t    Tone.OfflineContext.prototype._createWorker = function () {\n\t        //dummy worker that does nothing\n\t        return {\n\t            postMessage: function () {\n\t            }\n\t        };\n\t    };\n\t    /**\n\t\t *  Render the output of the OfflineContext\n\t\t *  @return  {Promise}\n\t\t */\n\t    Tone.OfflineContext.prototype.render = function () {\n\t        while (this._duration - this._currentTime >= 0) {\n\t            //invoke all the callbacks on that time\n\t            this.emit('tick');\n\t            //increment the clock\n\t            this._currentTime += Tone.prototype.blockTime;\n\t        }\n\t        //promise returned is not yet implemented in all browsers\n\t        return new Promise(function (done) {\n\t            this._context.oncomplete = function (e) {\n\t                done(e.renderedBuffer);\n\t            };\n\t            this._context.startRendering();\n\t        }.bind(this));\n\t    };\n\t    return Tone.OfflineContext;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext. \n\t\t *  The OfflineAudioContext is capable of rendering much faster than real time in many cases. \n\t\t *  The callback function also passes in an offline instance of Tone.Transport which can be used\n\t\t *  to schedule events along the Transport. \n\t\t *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.\n\t\t *  @param  {Time}  duration     the amount of time to record for.\n\t\t *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.\n\t\t *  @example\n\t\t * //render 2 seconds of the oscillator\n\t\t * Tone.Offline(function(){\n\t\t * \t//only nodes created in this callback will be recorded\n\t\t * \tvar oscillator = new Tone.Oscillator().toMaster().start(0)\n\t\t * \t//schedule their events\n\t\t * }, 2).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t * @example\n\t\t * //can also schedule events along the Transport\n\t\t * //using the passed in Offline Transport\n\t\t * Tone.Offline(function(Transport){\n\t\t * \tvar osc = new Tone.Oscillator().toMaster()\n\t\t * \tTransport.schedule(function(time){\n\t\t * \t\tosc.start(time).stop(time + 0.1)\n\t\t * \t}, 1)\n\t\t * \tTransport.start(0.2)\n\t\t * }, 4).then(function(buffer){\n\t\t * \t//do something with the output buffer\n\t\t * })\n\t\t */\n\t    Tone.Offline = function (callback, duration) {\n\t        //set the OfflineAudioContext\n\t        var sampleRate = Tone.context.sampleRate;\n\t        var originalContext = Tone.context;\n\t        var context = new Tone.OfflineContext(2, duration, sampleRate);\n\t        Tone.context = context;\n\t        //invoke the callback/scheduling\n\t        callback(Tone.Transport);\n\t        //process the audio\n\t        var rendered = context.render();\n\t        //return the original AudioContext\n\t        Tone.context = originalContext;\n\t        //return the audio\n\t        return rendered.then(function (buffer) {\n\t            //wrap it in a Tone.Buffer\n\t            return new Tone.Buffer(buffer);\n\t        });\n\t    };\n\t    return Tone.Offline;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.Effect is the base class for effects. Connect the effect between\n\t\t * \t        the effectSend and effectReturn GainNodes, then control the amount of\n\t\t * \t        effect which goes to the output using the wet control.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {NormalRange|Object} [wet] The starting wet value. \n\t\t */\n\t    Tone.Effect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get all of the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control is how much of the effected\n\t\t\t *  will pass through to the output. 1 = 100% effected\n\t\t\t *  signal, 0 = 100% dry signal. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  connect the effectSend to the input of hte effect\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSend = new Tone.Gain();\n\t        /**\n\t\t\t *  connect the output of the effect to the effectReturn\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturn = new Tone.Gain();\n\t        //connections\n\t        this.input.connect(this._dryWet.a);\n\t        this.input.connect(this.effectSend);\n\t        this.effectReturn.connect(this._dryWet.b);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Effect.defaults = { 'wet': 1 };\n\t    /**\n\t\t *  chains the effect in between the effectSend and effectReturn\n\t\t *  @param  {Tone} effect\n\t\t *  @private\n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.connectEffect = function (effect) {\n\t        this.effectSend.chain(effect, this.effectReturn);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Effect} this\n\t\t */\n\t    Tone.Effect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this.effectSend.dispose();\n\t        this.effectSend = null;\n\t        this.effectReturn.dispose();\n\t        this.effectReturn = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.Effect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.\n\t\t *         Setting the LFO rate and depth allows for control over the filter modulation rate \n\t\t *         and depth.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Time|Object} [frequency] The rate of the LFO.\n\t\t *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation\n\t \t *  @param {Frequency=} octaves The number of octaves above the baseFrequency\n\t\t *  @example\n\t\t * //create an autofilter and start it's LFO\n\t\t * var autoFilter = new Tone.AutoFilter(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the filter and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoFilter).start();\n\t\t */\n\t    Tone.AutoFilter = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'baseFrequency',\n\t            'octaves'\n\t        ], Tone.AutoFilter.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the filter cutoff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth\n\t        });\n\t        /**\n\t\t\t * The range of the filter modulating between the min and max frequency. \n\t\t\t * 0 = no modulation. 1 = full modulation.\n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t * How fast the filter modulates between min and max. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The filter node\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The octaves placeholder\n\t\t\t *  @type {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = 0;\n\t        //connections\n\t        this.connectEffect(this.filter);\n\t        this._lfo.connect(this.filter.frequency);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.octaves = options.octaves;\n\t        this.baseFrequency = options.baseFrequency;\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoFilter, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoFilter.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1,\n\t        'baseFrequency': 200,\n\t        'octaves': 2.6,\n\t        'filter': {\n\t            'type': 'lowpass',\n\t            'rolloff': -12,\n\t            'Q': 1\n\t        }\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the filter to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The minimum value of the filter's cutoff frequency.\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Frequency}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._lfo.min;\n\t        },\n\t        set: function (freq) {\n\t            this._lfo.min = this.toFrequency(freq);\n\t            //and set the max\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value of the filter's cutoff frequency. \n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (oct) {\n\t            this._octaves = oct;\n\t            this._lfo.max = this.baseFrequency * Math.pow(2, oct);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.AutoFilter.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoFilter;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. \n\t\t *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. \n\t\t *  @example\n\t\t * //create an autopanner and start it's LFO\n\t\t * var autoPanner = new Tone.AutoPanner(\"4n\").toMaster().start();\n\t\t * //route an oscillator through the panner and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(autoPanner).start();\n\t\t */\n\t    Tone.AutoPanner = function () {\n\t        var options = this.optionsObject(arguments, ['frequency'], Tone.AutoPanner.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which drives the panning\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'amplitude': options.depth,\n\t            'min': -1,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t * The amount of panning between left and right. \n\t\t\t * 0 = always center. 1 = full range between left and right. \n\t\t\t * @type {NormalRange}\n\t\t\t * @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        /**\n\t\t\t *  the panner node which does the panning\n\t\t\t *  @type {Tone.Panner}\n\t\t\t *  @private\n\t\t\t */\n\t        this._panner = new Tone.Panner();\n\t        /**\n\t\t\t * How fast the panner modulates between left and right. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        //connections\n\t        this.connectEffect(this._panner);\n\t        this._lfo.connect(this._panner.pan);\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t    };\n\t    //extend Effect\n\t    Tone.extend(Tone.AutoPanner, Tone.Effect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoPanner.defaults = {\n\t        'frequency': 1,\n\t        'type': 'sine',\n\t        'depth': 1\n\t    };\n\t    /**\n\t\t * Start the effect.\n\t\t * @param {Time} [time=now] When the LFO will start. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.start = function (time) {\n\t        this._lfo.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the effect.\n\t\t * @param {Time} [time=now] When the LFO will stop. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.stop = function (time) {\n\t        this._lfo.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the panner to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                               Transport has started. \n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.sync = function (delay) {\n\t        this._lfo.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the panner from the transport\n\t\t * @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.unsync = function () {\n\t        this._lfo.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the AutoFilter. \n\t\t * Possible values: \"sine\", \"square\", \"triangle\", \"sawtooth\".\n\t\t * @memberOf Tone.AutoFilter#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AutoPanner} this\n\t\t */\n\t    Tone.AutoPanner.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._panner.dispose();\n\t        this._panner = null;\n\t        this._writable([\n\t            'depth',\n\t            'frequency'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoPanner;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).\n\t\t *          The frequency of the filter is adjusted proportionally to the \n\t\t *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set \n\t\t *                                            to at the low point of the wah\n\t\t *  @param {Positive} [octaves] The number of octaves above the baseFrequency\n\t\t *                                the filter will sweep to when fully open\n\t\t *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for \n\t\t *                                   the incoming signal. Normal range of -40 to 0. \n\t\t *  @example\n\t\t * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();\n\t\t * //initialize the synth and connect to autowah\n\t\t * var synth = new Synth.connect(autoWah);\n\t\t * //Q value influences the effect of the wah - default is 2\n\t\t * autoWah.Q.value = 6;\n\t\t * //more audible on higher notes\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\")\n\t\t */\n\t    Tone.AutoWah = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'baseFrequency',\n\t            'octaves',\n\t            'sensitivity'\n\t        ], Tone.AutoWah.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The envelope follower. Set the attack/release\n\t\t\t *  timing to adjust how the envelope is followed. \n\t\t\t *  @type {Tone.Follower}\n\t\t\t *  @private\n\t\t\t */\n\t        this.follower = new Tone.Follower(options.follower);\n\t        /**\n\t\t\t *  scales the follower value to the frequency domain\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  the input gain to adjust the sensitivity\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputBoost = new Tone.Gain();\n\t        /**\n\t\t\t *  @type {BiquadFilterNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bandpass = new Tone.Filter({\n\t            'rolloff': -48,\n\t            'frequency': 0,\n\t            'Q': options.Q\n\t        });\n\t        /**\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._peaking = new Tone.Filter(0, 'peaking');\n\t        this._peaking.gain.value = options.gain;\n\t        /**\n\t\t\t * The gain of the filter.\n\t\t\t * @type {Number}\n\t\t\t * @signal\n\t\t\t */\n\t        this.gain = this._peaking.gain;\n\t        /**\n\t\t\t * The quality of the filter.\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.Q = this._bandpass.Q;\n\t        //the control signal path\n\t        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);\n\t        this._sweepRange.connect(this._bandpass.frequency);\n\t        this._sweepRange.connect(this._peaking.frequency);\n\t        //the filtered path\n\t        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);\n\t        //set the initial value\n\t        this._setSweepRange();\n\t        this.sensitivity = options.sensitivity;\n\t        this._readOnly([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AutoWah, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AutoWah.defaults = {\n\t        'baseFrequency': 100,\n\t        'octaves': 6,\n\t        'sensitivity': 0,\n\t        'Q': 2,\n\t        'gain': 2,\n\t        'follower': {\n\t            'attack': 0.3,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * The number of octaves that the filter will sweep above the \n\t\t * baseFrequency. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Number}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The base frequency from which the sweep will start from.\n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Frequency}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (baseFreq) {\n\t            this._baseFrequency = baseFreq;\n\t            this._setSweepRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The sensitivity to control how responsive to the input signal the filter is. \n\t\t * @memberOf Tone.AutoWah#\n\t\t * @type {Decibels}\n\t\t * @name sensitivity\n\t\t */\n\t    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {\n\t        get: function () {\n\t            return this.gainToDb(1 / this._inputBoost.gain.value);\n\t        },\n\t        set: function (sensitivy) {\n\t            this._inputBoost.gain.value = 1 / this.dbToGain(sensitivy);\n\t        }\n\t    });\n\t    /**\n\t\t *  sets the sweep range of the scaler\n\t\t *  @private\n\t\t */\n\t    Tone.AutoWah.prototype._setSweepRange = function () {\n\t        this._sweepRange.min = this._baseFrequency;\n\t        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.AutoWah} this\n\t\t */\n\t    Tone.AutoWah.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this.follower.dispose();\n\t        this.follower = null;\n\t        this._sweepRange.dispose();\n\t        this._sweepRange = null;\n\t        this._bandpass.dispose();\n\t        this._bandpass = null;\n\t        this._peaking.dispose();\n\t        this._peaking = null;\n\t        this._inputBoost.dispose();\n\t        this._inputBoost = null;\n\t        this._writable([\n\t            'gain',\n\t            'Q'\n\t        ]);\n\t        this.gain = null;\n\t        this.Q = null;\n\t        return this;\n\t    };\n\t    return Tone.AutoWah;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth. \n\t\t *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing\n\t\t *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Number} bits The number of bits to downsample the signal. Nominal range\n\t\t *                       of 1 to 8. \n\t\t *  @example\n\t\t * //initialize crusher and route a synth through it\n\t\t * var crusher = new Tone.BitCrusher(4).toMaster();\n\t\t * var synth = new Tone.MonoSynth().connect(crusher);\n\t\t */\n\t    Tone.BitCrusher = function () {\n\t        var options = this.optionsObject(arguments, ['bits'], Tone.BitCrusher.defaults);\n\t        Tone.Effect.call(this, options);\n\t        var invStepSize = 1 / Math.pow(2, options.bits - 1);\n\t        /**\n\t\t\t *  Subtract the input signal and the modulus of the input signal\n\t\t\t *  @type {Tone.Subtract}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subtract = new Tone.Subtract();\n\t        /**\n\t\t\t *  The mod function\n\t\t\t *  @type  {Tone.Modulo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulo = new Tone.Modulo(invStepSize);\n\t        /**\n\t\t\t *  keeps track of the bits\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._bits = options.bits;\n\t        //connect it up\n\t        this.effectSend.fan(this._subtract, this._modulo);\n\t        this._modulo.connect(this._subtract, 0, 1);\n\t        this._subtract.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.BitCrusher, Tone.Effect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.BitCrusher.defaults = { 'bits': 4 };\n\t    /**\n\t\t * The bit depth of the effect. Nominal range of 1-8. \n\t\t * @memberOf Tone.BitCrusher#\n\t\t * @type {number}\n\t\t * @name bits\n\t\t */\n\t    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {\n\t        get: function () {\n\t            return this._bits;\n\t        },\n\t        set: function (bits) {\n\t            this._bits = bits;\n\t            var invStepSize = 1 / Math.pow(2, bits - 1);\n\t            this._modulo.value = invStepSize;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.BitCrusher} this\n\t\t */\n\t    Tone.BitCrusher.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._subtract.dispose();\n\t        this._subtract = null;\n\t        this._modulo.dispose();\n\t        this._modulo = null;\n\t        return this;\n\t    };\n\t    return Tone.BitCrusher;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good \n\t\t *         for making different types of distortion sounds.\n\t\t *         Note that odd orders sound very different from even ones, \n\t\t *         and order = 1 is no change. \n\t\t *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. \n\t\t *  @example\n\t\t * //create a new cheby\n\t\t * var cheby = new Tone.Chebyshev(50);\n\t\t * //create a monosynth connected to our cheby\n\t\t * synth = new Tone.MonoSynth().connect(cheby);\n\t\t */\n\t    Tone.Chebyshev = function () {\n\t        var options = this.optionsObject(arguments, ['order'], Tone.Chebyshev.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds onto the order of the filter\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._order = options.order;\n\t        this.connectEffect(this._shaper);\n\t        this.order = options.order;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Chebyshev, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chebyshev.defaults = {\n\t        'order': 1,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t *  get the coefficient for that degree\n\t\t *  @param {number} x the x value\n\t\t *  @param   {number} degree \n\t\t *  @param {Object} memo memoize the computed value. \n\t\t *                       this speeds up computation greatly. \n\t\t *  @return  {number}       the coefficient \n\t\t *  @private\n\t\t */\n\t    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {\n\t        if (memo.hasOwnProperty(degree)) {\n\t            return memo[degree];\n\t        } else if (degree === 0) {\n\t            memo[degree] = 0;\n\t        } else if (degree === 1) {\n\t            memo[degree] = x;\n\t        } else {\n\t            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);\n\t        }\n\t        return memo[degree];\n\t    };\n\t    /**\n\t\t * The order of the Chebyshev polynomial which creates\n\t\t * the equation which is applied to the incoming \n\t\t * signal through a Tone.WaveShaper. The equations\n\t\t * are in the form:<br>\n\t\t * order 2: 2x^2 + 1<br>\n\t\t * order 3: 4x^3 + 3x <br>\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {Positive}\n\t\t * @name order\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {\n\t        get: function () {\n\t            return this._order;\n\t        },\n\t        set: function (order) {\n\t            this._order = order;\n\t            var curve = new Array(4096);\n\t            var len = curve.length;\n\t            for (var i = 0; i < len; ++i) {\n\t                var x = i * 2 / len - 1;\n\t                if (x === 0) {\n\t                    //should output 0 when input is 0\n\t                    curve[i] = 0;\n\t                } else {\n\t                    curve[i] = this._getCoefficient(x, order, {});\n\t                }\n\t            }\n\t            this._shaper.curve = curve;\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Chebyshev#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chebyshev} this\n\t\t */\n\t    Tone.Chebyshev.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Chebyshev;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.Effect}\n\t\t */\n\t    Tone.StereoEffect = function () {\n\t        this.createInsOuts(1, 1);\n\t        //get the defaults\n\t        var options = this.optionsObject(arguments, ['wet'], Tone.Effect.defaults);\n\t        /**\n\t\t\t *  the drywet knob to control the amount of effect\n\t\t\t *  @type {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._dryWet = new Tone.CrossFade(options.wet);\n\t        /**\n\t\t\t *  The wet control, i.e. how much of the effected\n\t\t\t *  will pass through to the output. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.wet = this._dryWet.fade;\n\t        /**\n\t\t\t *  then split it\n\t\t\t *  @type {Tone.Split}\n\t\t\t *  @private\n\t\t\t */\n\t        this._split = new Tone.Split();\n\t        /**\n\t\t\t *  the effects send LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendL = this._split.left;\n\t        /**\n\t\t\t *  the effects send RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectSendR = this._split.right;\n\t        /**\n\t\t\t *  the stereo effect merger\n\t\t\t *  @type {Tone.Merge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._merge = new Tone.Merge();\n\t        /**\n\t\t\t *  the effect return LEFT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnL = this._merge.left;\n\t        /**\n\t\t\t *  the effect return RIGHT\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.effectReturnR = this._merge.right;\n\t        //connections\n\t        this.input.connect(this._split);\n\t        //dry wet connections\n\t        this.input.connect(this._dryWet, 0, 0);\n\t        this._merge.connect(this._dryWet, 0, 1);\n\t        this._dryWet.connect(this.output);\n\t        this._readOnly(['wet']);\n\t    };\n\t    Tone.extend(Tone.StereoEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoEffect} this\n\t\t */\n\t    Tone.StereoEffect.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._dryWet.dispose();\n\t        this._dryWet = null;\n\t        this._split.dispose();\n\t        this._split = null;\n\t        this._merge.dispose();\n\t        this._merge = null;\n\t        this.effectSendL = null;\n\t        this.effectSendR = null;\n\t        this.effectReturnL = null;\n\t        this.effectReturnR = null;\n\t        this._writable(['wet']);\n\t        this.wet = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t * \t@class  Tone.FeedbackEffect provides a loop between an \n\t\t * \t        audio source and its own output. This is a base-class\n\t\t * \t        for feedback effects. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {NormalRange|Object} [feedback] The initial feedback value.\n\t\t */\n\t    Tone.FeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback']);\n\t        options = this.defaultArg(options, Tone.FeedbackEffect.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  the gain which controls the feedback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of signal which is fed back into the effect input. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = this._feedbackGain.gain;\n\t        //the feedback loop\n\t        this.effectReturn.chain(this._feedbackGain, this.effectSend);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.FeedbackEffect, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.FeedbackEffect} this\n\t\t */\n\t    Tone.FeedbackEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this._feedbackGain.dispose();\n\t        this._feedbackGain = null;\n\t        this.feedback = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Just like a stereo feedback effect, but the feedback is routed from left to right\n\t\t *         and right to left instead of on the same channel.\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoXFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The amount of feedback from the output\n\t\t\t *  back into the input of the effect (routed\n\t\t\t *  across left and right channels).\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackLR = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackRL = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);\n\t        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);\n\t        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoXFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoXFeedbackEffect} this\n\t\t */\n\t    Tone.StereoXFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackLR.dispose();\n\t        this._feedbackLR = null;\n\t        this._feedbackRL.dispose();\n\t        this._feedbackRL = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoXFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Chorus is a stereo chorus effect with feedback composed of \n\t\t *         a left and right delay with a Tone.LFO applied to the delayTime of each channel. \n\t\t *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).\n\t\t *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).\n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.StereoXFeedbackEffect}\n\t\t *\t@param {Frequency|Object} [frequency] The frequency of the LFO.\n\t\t *\t@param {Milliseconds} [delayTime] The delay of the chorus effect in ms. \n\t\t *\t@param {NormalRange} [depth] The depth of the chorus.\n\t\t *\t@example\n\t\t * var chorus = new Tone.Chorus(4, 2.5, 0.5);\n\t\t * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);\n\t\t * synth.triggerAttackRelease([\"C3\",\"E3\",\"G3\"], \"8n\");\n\t\t */\n\t    Tone.Chorus = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'delayTime',\n\t            'depth'\n\t        ], Tone.Chorus.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the depth of the chorus\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._depth = options.depth;\n\t        /**\n\t\t\t *  the delayTime\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayTime = options.delayTime / 1000;\n\t        /**\n\t\t\t *  the lfo which controls the delayTime\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1\n\t        });\n\t        /**\n\t\t\t *  another LFO for the right side with a 180 degree phase diff\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'frequency': options.frequency,\n\t            'min': 0,\n\t            'max': 1,\n\t            'phase': 180\n\t        });\n\t        /**\n\t\t\t *  delay for left\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeL = new Tone.Delay();\n\t        /**\n\t\t\t *  delay for right\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNodeR = new Tone.Delay();\n\t        /**\n\t\t\t * The frequency of the LFO which modulates the delayTime. \n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        //connections\n\t        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);\n\t        //and pass through to make the detune apparent\n\t        this.effectSendL.connect(this.effectReturnL);\n\t        this.effectSendR.connect(this.effectReturnR);\n\t        //lfo setup\n\t        this._lfoL.connect(this._delayNodeL.delayTime);\n\t        this._lfoR.connect(this._delayNodeR.delayTime);\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        //have one LFO frequency control the other\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the initial values\n\t        this.depth = this._depth;\n\t        this.frequency.value = options.frequency;\n\t        this.type = options.type;\n\t        this._readOnly(['frequency']);\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Chorus, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Chorus.defaults = {\n\t        'frequency': 1.5,\n\t        'delayTime': 3.5,\n\t        'depth': 0.7,\n\t        'feedback': 0.1,\n\t        'type': 'sine',\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * The depth of the effect. A depth of 1 makes the delayTime\n\t\t * modulate between 0 and 2*delayTime (centered around the delayTime). \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {NormalRange}\n\t\t * @name depth\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'depth', {\n\t        get: function () {\n\t            return this._depth;\n\t        },\n\t        set: function (depth) {\n\t            this._depth = depth;\n\t            var deviation = this._delayTime * depth;\n\t            this._lfoL.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoL.max = this._delayTime + deviation;\n\t            this._lfoR.min = Math.max(this._delayTime - deviation, 0);\n\t            this._lfoR.max = this._delayTime + deviation;\n\t        }\n\t    });\n\t    /**\n\t\t * The delayTime in milliseconds of the chorus. A larger delayTime\n\t\t * will give a more pronounced effect. Nominal range a delayTime\n\t\t * is between 2 and 20ms. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Milliseconds}\n\t\t * @name delayTime\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {\n\t        get: function () {\n\t            return this._delayTime * 1000;\n\t        },\n\t        set: function (delayTime) {\n\t            this._delayTime = delayTime / 1000;\n\t            this.depth = this._depth;\n\t        }\n\t    });\n\t    /**\n\t\t * The oscillator type of the LFO. \n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Chorus#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Chorus.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Chorus} this\n\t\t */\n\t    Tone.Chorus.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._delayNodeL.dispose();\n\t        this._delayNodeL = null;\n\t        this._delayNodeR.dispose();\n\t        this._delayNodeR = null;\n\t        this._writable('frequency');\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Chorus;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Convolver is a wrapper around the Native Web Audio \n\t\t *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).\n\t\t *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on\n\t\t *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer\n\t\t *                                           contianing the impulse response. \n\t\t *  @param {Function} onload The callback to invoke when the url is loaded.\n\t\t *  @example\n\t\t * //initializing the convolver with an impulse response\n\t\t * var convolver = new Tone.Convolver(\"./path/to/ir.wav\").toMaster();\n\t\t */\n\t    Tone.Convolver = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Convolver.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  convolver node\n\t\t\t *  @type {ConvolverNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._convolver = this.context.createConvolver();\n\t        /**\n\t\t\t *  the convolution buffer\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._buffer = new Tone.Buffer();\n\t        if (this.isString(options.url)) {\n\t            this._buffer.load(options.url, function (buffer) {\n\t                this.buffer = buffer;\n\t                options.onload();\n\t            }.bind(this));\n\t        } else if (options.url) {\n\t            this.buffer = options.url;\n\t            options.onload();\n\t        }\n\t        this.connectEffect(this._convolver);\n\t    };\n\t    Tone.extend(Tone.Convolver, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Convolver.defaults = { 'onload': Tone.noOp };\n\t    /**\n\t\t *  The convolver's buffer\n\t\t *  @memberOf Tone.Convolver#\n\t\t *  @type {AudioBuffer}\n\t\t *  @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer.get();\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t            this._convolver.buffer = this._buffer.get();\n\t        }\n\t    });\n\t    /**\n\t\t *  Load an impulse response url as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads.\n\t\t *  @param {string} url The url of the buffer to load.\n\t\t *                      filetype support depends on the\n\t\t *                      browser.\n\t\t *  @param  {function=} callback\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Convolver.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, function (buff) {\n\t            this.buffer = buff;\n\t            if (callback) {\n\t                callback();\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Convolver} this\n\t\t */\n\t    Tone.Convolver.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._convolver.disconnect();\n\t        this._convolver = null;\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Convolver;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.\n\t\t *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)\n\t\t *  @example\n\t\t * var dist = new Tone.Distortion(0.8).toMaster();\n\t\t * var fm = new Tone.SimpleFM().connect(dist);\n\t\t * //this sounds good on bass notes\n\t\t * fm.triggerAttackRelease(\"A1\", \"8n\");\n\t\t */\n\t    Tone.Distortion = function () {\n\t        var options = this.optionsObject(arguments, ['distortion'], Tone.Distortion.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._shaper = new Tone.WaveShaper(4096);\n\t        /**\n\t\t\t * holds the distortion amount\n\t\t\t * @type {number}\n\t\t\t * @private\n\t\t\t */\n\t        this._distortion = options.distortion;\n\t        this.connectEffect(this._shaper);\n\t        this.distortion = options.distortion;\n\t        this.oversample = options.oversample;\n\t    };\n\t    Tone.extend(Tone.Distortion, Tone.Effect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Distortion.defaults = {\n\t        'distortion': 0.4,\n\t        'oversample': 'none'\n\t    };\n\t    /**\n\t\t * The amount of distortion.\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {NormalRange}\n\t\t * @name distortion\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {\n\t        get: function () {\n\t            return this._distortion;\n\t        },\n\t        set: function (amount) {\n\t            this._distortion = amount;\n\t            var k = amount * 100;\n\t            var deg = Math.PI / 180;\n\t            this._shaper.setMap(function (x) {\n\t                if (Math.abs(x) < 0.001) {\n\t                    //should output 0 when input is 0\n\t                    return 0;\n\t                } else {\n\t                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));\n\t                }\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The oversampling of the effect. Can either be \"none\", \"2x\" or \"4x\".\n\t\t * @memberOf Tone.Distortion#\n\t\t * @type {string}\n\t\t * @name oversample\n\t\t */\n\t    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {\n\t        get: function () {\n\t            return this._shaper.oversample;\n\t        },\n\t        set: function (oversampling) {\n\t            this._shaper.oversample = oversampling;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Distortion} this\n\t\t */\n\t    Tone.Distortion.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._shaper.dispose();\n\t        this._shaper = null;\n\t        return this;\n\t    };\n\t    return Tone.Distortion;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.FeedbackDelay is a DelayNode in which part of output\n\t\t *          signal is fed back into the delay. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delay applied to the incoming signal. \n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                            is fed back through the delay.\n\t\t *  @example\n\t\t * var feedbackDelay = new Tone.FeedbackDelay(\"8n\", 0.5).toMaster();\n\t\t * var tom = new Tone.DrumSynth({\n\t\t * \t\"octaves\" : 4,\n\t\t * \t\"pitchDecay\" : 0.1\n\t\t * }).connect(feedbackDelay);\n\t\t * tom.triggerAttackRelease(\"A2\",\"32n\");\n\t\t */\n\t    Tone.FeedbackDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.FeedbackDelay.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The delayTime of the DelayNode. \n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._delayNode.delayTime;\n\t        // connect it up\n\t        this.connectEffect(this._delayNode);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);\n\t    /**\n\t\t *  The default values. \n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FeedbackDelay.defaults = { 'delayTime': 0.25 };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FeedbackDelay} this\n\t\t */\n\t    Tone.FeedbackDelay.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.FeedbackDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of comb filter delay values from Freeverb implementation\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterTunings = [\n\t        1557 / 44100,\n\t        1617 / 44100,\n\t        1491 / 44100,\n\t        1422 / 44100,\n\t        1277 / 44100,\n\t        1356 / 44100,\n\t        1188 / 44100,\n\t        1116 / 44100\n\t    ];\n\t    /**\n\t\t *  an array of allpass filter frequency values from Freeverb implementation\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFrequencies = [\n\t        225,\n\t        556,\n\t        441,\n\t        341\n\t    ];\n\t    /**\n\t\t *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).\n\t\t *         Read more on reverb on [SoundOnSound](http://www.soundonsound.com/sos/may00/articles/reverb.htm).\n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Correlated to the decay time. \n\t\t *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part \n\t\t *                                 of the reverb. \n\t\t *  @example\n\t\t * var freeverb = new Tone.Freeverb().toMaster();\n\t\t * freeverb.dampening.value = 1000;\n\t\t * //routing synth through the reverb\n\t\t * var synth = new Tone.AMSynth().connect(freeverb);\n\t\t */\n\t    Tone.Freeverb = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'roomSize',\n\t            'dampening'\n\t        ], Tone.Freeverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The roomSize value between. A larger roomSize\n\t\t\t *  will result in a longer decay. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  The amount of dampening of the reverberant signal. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  the comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._combFilters = [];\n\t        /**\n\t\t\t *  the allpass filters on the left\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersL = [];\n\t        /**\n\t\t\t *  the allpass filters on the right\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFiltersR = [];\n\t        //make the allpass filters on the right\n\t        for (var l = 0; l < allpassFilterFrequencies.length; l++) {\n\t            var allpassL = this.context.createBiquadFilter();\n\t            allpassL.type = 'allpass';\n\t            allpassL.frequency.value = allpassFilterFrequencies[l];\n\t            this._allpassFiltersL.push(allpassL);\n\t        }\n\t        //make the allpass filters on the left\n\t        for (var r = 0; r < allpassFilterFrequencies.length; r++) {\n\t            var allpassR = this.context.createBiquadFilter();\n\t            allpassR.type = 'allpass';\n\t            allpassR.frequency.value = allpassFilterFrequencies[r];\n\t            this._allpassFiltersR.push(allpassR);\n\t        }\n\t        //make the comb filters\n\t        for (var c = 0; c < combFilterTunings.length; c++) {\n\t            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);\n\t            if (c < combFilterTunings.length / 2) {\n\t                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);\n\t            } else {\n\t                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);\n\t            }\n\t            this.roomSize.connect(lfpf.resonance);\n\t            this.dampening.connect(lfpf.dampening);\n\t            this._combFilters.push(lfpf);\n\t        }\n\t        //chain the allpass filters togetehr\n\t        this.connectSeries.apply(this, this._allpassFiltersL);\n\t        this.connectSeries.apply(this, this._allpassFiltersR);\n\t        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);\n\t        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);\n\t        this._readOnly([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Freeverb, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Freeverb.defaults = {\n\t        'roomSize': 0.7,\n\t        'dampening': 3000\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.Freeverb} this\n\t\t */\n\t    Tone.Freeverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var al = 0; al < this._allpassFiltersL.length; al++) {\n\t            this._allpassFiltersL[al].disconnect();\n\t            this._allpassFiltersL[al] = null;\n\t        }\n\t        this._allpassFiltersL = null;\n\t        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {\n\t            this._allpassFiltersR[ar].disconnect();\n\t            this._allpassFiltersR[ar] = null;\n\t        }\n\t        this._allpassFiltersR = null;\n\t        for (var cf = 0; cf < this._combFilters.length; cf++) {\n\t            this._combFilters[cf].dispose();\n\t            this._combFilters[cf] = null;\n\t        }\n\t        this._combFilters = null;\n\t        this._writable([\n\t            'roomSize',\n\t            'dampening'\n\t        ]);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this.dampening.dispose();\n\t        this.dampening = null;\n\t        return this;\n\t    };\n\t    return Tone.Freeverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  an array of the comb filter delay time values\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterDelayTimes = [\n\t        1687 / 25000,\n\t        1601 / 25000,\n\t        2053 / 25000,\n\t        2251 / 25000\n\t    ];\n\t    /**\n\t\t *  the resonances of each of the comb filters\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var combFilterResonances = [\n\t        0.773,\n\t        0.802,\n\t        0.753,\n\t        0.733\n\t    ];\n\t    /**\n\t\t *  the allpass filter frequencies\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var allpassFilterFreqs = [\n\t        347,\n\t        113,\n\t        37\n\t    ];\n\t    /**\n\t\t *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)\n\t\t *         tuned by John Chowning in 1970.\n\t\t *         It is made up of three allpass filters and four Tone.FeedbackCombFilter. \n\t\t *         \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.\n\t\t *  @example\n\t\t * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);\n\t\t * var delay = new Tone.FeedbackDelay(0.5); \n\t\t * //connecting the synth to reverb through delay\n\t\t * var synth = new Tone.DuoSynth().chain(delay, reverb);\n\t\t * synth.triggerAttackRelease(\"A4\",\"8n\");\n\t\t */\n\t    Tone.JCReverb = function () {\n\t        var options = this.optionsObject(arguments, ['roomSize'], Tone.JCReverb.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  room size control values between [0,1]\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  scale the room size\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);\n\t        /**\n\t\t\t *  a series of allpass filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._allpassFilters = [];\n\t        /**\n\t\t\t *  parallel feedback comb filters\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackCombFilters = [];\n\t        //make the allpass filters\n\t        for (var af = 0; af < allpassFilterFreqs.length; af++) {\n\t            var allpass = this.context.createBiquadFilter();\n\t            allpass.type = 'allpass';\n\t            allpass.frequency.value = allpassFilterFreqs[af];\n\t            this._allpassFilters.push(allpass);\n\t        }\n\t        //and the comb filters\n\t        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {\n\t            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);\n\t            this._scaleRoomSize.connect(fbcf.resonance);\n\t            fbcf.resonance.value = combFilterResonances[cf];\n\t            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);\n\t            if (cf < combFilterDelayTimes.length / 2) {\n\t                fbcf.connect(this.effectReturnL);\n\t            } else {\n\t                fbcf.connect(this.effectReturnR);\n\t            }\n\t            this._feedbackCombFilters.push(fbcf);\n\t        }\n\t        //chain the allpass filters together\n\t        this.roomSize.connect(this._scaleRoomSize);\n\t        this.connectSeries.apply(this, this._allpassFilters);\n\t        this.effectSendL.connect(this._allpassFilters[0]);\n\t        this.effectSendR.connect(this._allpassFilters[0]);\n\t        this._readOnly(['roomSize']);\n\t    };\n\t    Tone.extend(Tone.JCReverb, Tone.StereoEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.JCReverb.defaults = { 'roomSize': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.JCReverb} this\n\t\t */\n\t    Tone.JCReverb.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        for (var apf = 0; apf < this._allpassFilters.length; apf++) {\n\t            this._allpassFilters[apf].disconnect();\n\t            this._allpassFilters[apf] = null;\n\t        }\n\t        this._allpassFilters = null;\n\t        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {\n\t            this._feedbackCombFilters[fbcf].dispose();\n\t            this._feedbackCombFilters[fbcf] = null;\n\t        }\n\t        this._feedbackCombFilters = null;\n\t        this._writable(['roomSize']);\n\t        this.roomSize.dispose();\n\t        this.roomSize = null;\n\t        this._scaleRoomSize.dispose();\n\t        this._scaleRoomSize = null;\n\t        return this;\n\t    };\n\t    return Tone.JCReverb;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Mid/Side processing separates the the 'mid' signal \n\t\t *         (which comes out of both the left and the right channel) \n\t\t *         and the 'side' (which only comes out of the the side channels) \n\t\t *         and effects them separately before being recombined.\n\t\t *         Applies a Mid/Side seperation and recombination.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         This is a base-class for Mid/Side Effects. \n\t\t *\n\t\t *  @extends {Tone.Effect}\n\t\t *  @constructor\n\t\t */\n\t    Tone.MidSideEffect = function () {\n\t        Tone.Effect.apply(this, arguments);\n\t        /**\n\t\t\t *  The mid/side split\n\t\t\t *  @type  {Tone.MidSideSplit}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideSplit = new Tone.MidSideSplit();\n\t        /**\n\t\t\t *  The mid/side merge\n\t\t\t *  @type  {Tone.MidSideMerge}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midSideMerge = new Tone.MidSideMerge();\n\t        /**\n\t\t\t *  The mid send. Connect to mid processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midSend = this._midSideSplit.mid;\n\t        /**\n\t\t\t *  The side send. Connect to side processing\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideSend = this._midSideSplit.side;\n\t        /**\n\t\t\t *  The mid return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.midReturn = this._midSideMerge.mid;\n\t        /**\n\t\t\t *  The side return connection\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this.sideReturn = this._midSideMerge.side;\n\t        //the connections\n\t        this.effectSend.connect(this._midSideSplit);\n\t        this._midSideMerge.connect(this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.MidSideEffect, Tone.Effect);\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.MidSideEffect} this\n\t\t */\n\t    Tone.MidSideEffect.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._midSideSplit.dispose();\n\t        this._midSideSplit = null;\n\t        this._midSideMerge.dispose();\n\t        this._midSideMerge = null;\n\t        this.midSend = null;\n\t        this.sideSend = null;\n\t        this.midReturn = null;\n\t        this.sideReturn = null;\n\t        return this;\n\t    };\n\t    return Tone.MidSideEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase\n\t\t *         of different frequency components of an incoming signal. Read more on \n\t\t *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)). \n\t\t *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n\t\t *\n\t\t *\t@extends {Tone.StereoEffect}\n\t\t *\t@constructor\n\t\t *\t@param {Frequency|Object} [frequency] The speed of the phasing. \n\t\t *\t@param {number} [octaves] The octaves of the effect. \n\t\t *\t@param {Frequency} [baseFrequency] The base frequency of the filters. \n\t\t *\t@example\n\t\t * var phaser = new Tone.Phaser({\n\t\t * \t\"frequency\" : 15, \n\t\t * \t\"octaves\" : 5, \n\t\t * \t\"baseFrequency\" : 1000\n\t\t * }).toMaster();\n\t\t * var synth = new Tone.FMSynth().connect(phaser);\n\t\t * synth.triggerAttackRelease(\"E3\", \"2n\");\n\t\t */\n\t    Tone.Phaser = function () {\n\t        //set the defaults\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'octaves',\n\t            'baseFrequency'\n\t        ], Tone.Phaser.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the left side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO(options.frequency, 0, 1);\n\t        /**\n\t\t\t *  the lfo which controls the frequency on the right side\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO(options.frequency, 0, 1);\n\t        this._lfoR.phase = 180;\n\t        /**\n\t\t\t *  the base modulation frequency\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._baseFrequency = options.baseFrequency;\n\t        /**\n\t\t\t *  the octaves of the phasing\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  The quality factor of the filters\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);\n\t        /**\n\t\t\t *  the array of filters for the left side\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);\n\t        /**\n\t\t\t * the frequency of the effect\n\t\t\t * @type {Tone.Signal}\n\t\t\t */\n\t        this.frequency = this._lfoL.frequency;\n\t        this.frequency.value = options.frequency;\n\t        //connect them up\n\t        this.effectSendL.connect(this._filtersL[0]);\n\t        this.effectSendR.connect(this._filtersR[0]);\n\t        this._filtersL[options.stages - 1].connect(this.effectReturnL);\n\t        this._filtersR[options.stages - 1].connect(this.effectReturnR);\n\t        //control the frequency with one LFO\n\t        this._lfoL.frequency.connect(this._lfoR.frequency);\n\t        //set the options\n\t        this.baseFrequency = options.baseFrequency;\n\t        this.octaves = options.octaves;\n\t        //start the lfo\n\t        this._lfoL.start();\n\t        this._lfoR.start();\n\t        this._readOnly([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Phaser, Tone.StereoEffect);\n\t    /**\n\t\t *  defaults\n\t\t *  @static\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Phaser.defaults = {\n\t        'frequency': 0.5,\n\t        'octaves': 3,\n\t        'stages': 10,\n\t        'Q': 10,\n\t        'baseFrequency': 350\n\t    };\n\t    /**\n\t\t *  @param {number} stages\n\t\t *  @returns {Array} the number of filters all connected together\n\t\t *  @private\n\t\t */\n\t    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {\n\t        var filters = new Array(stages);\n\t        //make all the filters\n\t        for (var i = 0; i < stages; i++) {\n\t            var filter = this.context.createBiquadFilter();\n\t            filter.type = 'allpass';\n\t            Q.connect(filter.Q);\n\t            connectToFreq.connect(filter.frequency);\n\t            filters[i] = filter;\n\t        }\n\t        this.connectSeries.apply(this, filters);\n\t        return filters;\n\t    };\n\t    /**\n\t\t * The number of octaves the phase goes above\n\t\t * the baseFrequency\n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {Positive}\n\t\t * @name octaves\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octaves) {\n\t            this._octaves = octaves;\n\t            var max = this._baseFrequency * Math.pow(2, octaves);\n\t            this._lfoL.max = max;\n\t            this._lfoR.max = max;\n\t        }\n\t    });\n\t    /**\n\t\t * The the base frequency of the filters. \n\t\t * @memberOf Tone.Phaser#\n\t\t * @type {number}\n\t\t * @name baseFrequency\n\t\t */\n\t    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {\n\t        get: function () {\n\t            return this._baseFrequency;\n\t        },\n\t        set: function (freq) {\n\t            this._baseFrequency = freq;\n\t            this._lfoL.min = freq;\n\t            this._lfoR.min = freq;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Phaser} this\n\t\t */\n\t    Tone.Phaser.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'Q'\n\t        ]);\n\t        this.Q.dispose();\n\t        this.Q = null;\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        for (var i = 0; i < this._filtersL.length; i++) {\n\t            this._filtersL[i].disconnect();\n\t            this._filtersL[i] = null;\n\t        }\n\t        this._filtersL = null;\n\t        for (var j = 0; j < this._filtersR.length; j++) {\n\t            this._filtersR[j].disconnect();\n\t            this._filtersR[j] = null;\n\t        }\n\t        this._filtersR = null;\n\t        this.frequency = null;\n\t        return this;\n\t    };\n\t    return Tone.Phaser;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard\n\t\t *          first in one channel and next in the opposite channel. In a stereo\n\t\t *          system these are the right and left channels.\n\t\t *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays \n\t\t *          with independent delay values. Each delay is routed to one channel\n\t\t *          (left or right), and the channel triggered second will always \n\t\t *          trigger at the same interval after the first.\n\t\t *\n\t\t * \t@constructor\n\t\t * \t@extends {Tone.StereoXFeedbackEffect}\n\t\t *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.\n\t\t *  @param {NormalRange=} feedback The amount of the effected signal which \n\t\t *                                 is fed back through the delay.\n\t\t *  @example\n\t\t * var pingPong = new Tone.PingPongDelay(\"4n\", 0.2).toMaster();\n\t\t * var drum = new Tone.DrumSynth().connect(pingPong);\n\t\t * drum.triggerAttackRelease(\"C4\", \"32n\");\n\t\t */\n\t    Tone.PingPongDelay = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'delayTime',\n\t            'feedback'\n\t        ], Tone.PingPongDelay.defaults);\n\t        Tone.StereoXFeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  the delay node on the left side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay node on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the predelay on the right side\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);\n\t        /**\n\t\t\t *  the delay time signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);\n\t        //connect it up\n\t        this.effectSendL.chain(this._leftDelay, this.effectReturnL);\n\t        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);\n\t        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);\n\t        //rearranged the feedback to be after the rightPreDelay\n\t        this._feedbackLR.disconnect();\n\t        this._feedbackLR.connect(this._rightDelay);\n\t        this._readOnly(['delayTime']);\n\t    };\n\t    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PingPongDelay.defaults = {\n\t        'delayTime': 0.25,\n\t        'maxDelayTime': 1\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PingPongDelay} this\n\t\t */\n\t    Tone.PingPongDelay.prototype.dispose = function () {\n\t        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);\n\t        this._leftDelay.dispose();\n\t        this._leftDelay = null;\n\t        this._rightDelay.dispose();\n\t        this._rightDelay = null;\n\t        this._rightPreDelay.dispose();\n\t        this._rightPreDelay = null;\n\t        this._writable(['delayTime']);\n\t        this.delayTime.dispose();\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PingPongDelay;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal. \n\t\t *         The effect is achieved by speeding up or slowing down the delayTime\n\t\t *         of a DelayNode using a sawtooth wave. \n\t\t *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).\n\t\t *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).\n\t\t *         \n\t\t *  @extends {Tone.FeedbackEffect}\n\t\t *  @param {Interval=} pitch The interval to transpose the incoming signal by. \n\t\t */\n\t    Tone.PitchShift = function () {\n\t        var options = this.optionsObject(arguments, ['pitch'], Tone.PitchShift.defaults);\n\t        Tone.FeedbackEffect.call(this, options);\n\t        /**\n\t\t\t *  The pitch signal\n\t\t\t *  @type  {Tone.Signal}\n\t\t\t *  @private\n\t\t\t */\n\t        this._frequency = new Tone.Signal(0);\n\t        /**\n\t\t\t *  Uses two DelayNodes to cover up the jump in\n\t\t\t *  the sawtooth wave. \n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayA = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoA = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth'\n\t        }).connect(this._delayA.delayTime);\n\t        /**\n\t\t\t *  The second DelayNode\n\t\t\t *  @type  {DelayNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayB = new Tone.Delay(0, 1);\n\t        /**\n\t\t\t *  The first LFO.\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoB = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 0.1,\n\t            'type': 'sawtooth',\n\t            'phase': 180\n\t        }).connect(this._delayB.delayTime);\n\t        /**\n\t\t\t *  Crossfade quickly between the two delay lines\n\t\t\t *  to cover up the jump in the sawtooth wave\n\t\t\t *  @type  {Tone.CrossFade}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFade = new Tone.CrossFade();\n\t        /**\n\t\t\t *  LFO which alternates between the two\n\t\t\t *  delay lines to cover up the disparity in the\n\t\t\t *  sawtooth wave. \n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._crossFadeLFO = new Tone.LFO({\n\t            'min': 0,\n\t            'max': 1,\n\t            'type': 'triangle',\n\t            'phase': 90\n\t        }).connect(this._crossFade.fade);\n\t        /**\n\t\t\t *  The delay node\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackDelay = new Tone.Delay(options.delayTime);\n\t        /**\n\t\t\t *  The amount of delay on the input signal\n\t\t\t *  @type {Time}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.delayTime = this._feedbackDelay.delayTime;\n\t        this._readOnly('delayTime');\n\t        /**\n\t\t\t *  Hold the current pitch\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pitch = options.pitch;\n\t        /**\n\t\t\t *  Hold the current windowSize\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._windowSize = options.windowSize;\n\t        //connect the two delay lines up\n\t        this._delayA.connect(this._crossFade.a);\n\t        this._delayB.connect(this._crossFade.b);\n\t        //connect the frequency\n\t        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);\n\t        //route the input\n\t        this.effectSend.fan(this._delayA, this._delayB);\n\t        this._crossFade.chain(this._feedbackDelay, this.effectReturn);\n\t        //start the LFOs at the same time\n\t        var now = this.now();\n\t        this._lfoA.start(now);\n\t        this._lfoB.start(now);\n\t        this._crossFadeLFO.start(now);\n\t        //set the initial value\n\t        this.windowSize = this._windowSize;\n\t    };\n\t    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PitchShift.defaults = {\n\t        'pitch': 0,\n\t        'windowSize': 0.1,\n\t        'delayTime': 0,\n\t        'feedback': 0\n\t    };\n\t    /**\n\t\t * Repitch the incoming signal by some interval (measured\n\t\t * in semi-tones). \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Interval}\n\t\t * @name pitch\n\t\t * @example\n\t\t * pitchShift.pitch = -12; //down one octave\n\t\t * pitchShift.pitch = 7; //up a fifth\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {\n\t        get: function () {\n\t            return this._pitch;\n\t        },\n\t        set: function (interval) {\n\t            this._pitch = interval;\n\t            var factor = 0;\n\t            if (interval < 0) {\n\t                this._lfoA.min = 0;\n\t                this._lfoA.max = this._windowSize;\n\t                this._lfoB.min = 0;\n\t                this._lfoB.max = this._windowSize;\n\t                factor = this.intervalToFrequencyRatio(interval - 1) + 1;\n\t            } else {\n\t                this._lfoA.min = this._windowSize;\n\t                this._lfoA.max = 0;\n\t                this._lfoB.min = this._windowSize;\n\t                this._lfoB.max = 0;\n\t                factor = this.intervalToFrequencyRatio(interval) - 1;\n\t            }\n\t            this._frequency.value = factor * (1.2 / this._windowSize);\n\t        }\n\t    });\n\t    /**\n\t\t * The window size corresponds roughly to the sample length in a looping sampler. \n\t\t * Smaller values are desirable for a less noticeable delay time of the pitch shifted\n\t\t * signal, but larger values will result in smoother pitch shifting for larger intervals. \n\t\t * A nominal range of 0.03 to 0.1 is recommended. \n\t\t * @memberOf Tone.PitchShift#\n\t\t * @type {Time}\n\t\t * @name windowSize\n\t\t * @example\n\t\t * pitchShift.windowSize = 0.1;\n\t\t */\n\t    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {\n\t        get: function () {\n\t            return this._windowSize;\n\t        },\n\t        set: function (size) {\n\t            this._windowSize = this.toSeconds(size);\n\t            this.pitch = this._pitch;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.PitchShift}  this\n\t\t */\n\t    Tone.PitchShift.prototype.dispose = function () {\n\t        Tone.FeedbackEffect.prototype.dispose.call(this);\n\t        this._frequency.dispose();\n\t        this._frequency = null;\n\t        this._delayA.disconnect();\n\t        this._delayA = null;\n\t        this._delayB.disconnect();\n\t        this._delayB = null;\n\t        this._lfoA.dispose();\n\t        this._lfoA = null;\n\t        this._lfoB.dispose();\n\t        this._lfoB = null;\n\t        this._crossFade.dispose();\n\t        this._crossFade = null;\n\t        this._crossFadeLFO.dispose();\n\t        this._crossFadeLFO = null;\n\t        this._writable('delayTime');\n\t        this._feedbackDelay.dispose();\n\t        this._feedbackDelay = null;\n\t        this.delayTime = null;\n\t        return this;\n\t    };\n\t    return Tone.PitchShift;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Base class for stereo feedback effects where the effectReturn\n\t\t *         is fed back into the same channel. \n\t\t *\n\t\t *\t@constructor\n\t\t *\t@extends {Tone.FeedbackEffect}\n\t\t */\n\t    Tone.StereoFeedbackEffect = function () {\n\t        var options = this.optionsObject(arguments, ['feedback'], Tone.FeedbackEffect.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  controls the amount of feedback\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  the left side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackL = new Tone.Gain();\n\t        /**\n\t\t\t *  the right side feeback\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._feedbackR = new Tone.Gain();\n\t        //connect it up\n\t        this.effectReturnL.chain(this._feedbackL, this.effectSendL);\n\t        this.effectReturnR.chain(this._feedbackR, this.effectSendR);\n\t        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);\n\t        this._readOnly(['feedback']);\n\t    };\n\t    Tone.extend(Tone.StereoFeedbackEffect, Tone.FeedbackEffect);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.StereoFeedbackEffect} this\n\t\t */\n\t    Tone.StereoFeedbackEffect.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable(['feedback']);\n\t        this.feedback.dispose();\n\t        this.feedback = null;\n\t        this._feedbackL.dispose();\n\t        this._feedbackL = null;\n\t        this._feedbackR.dispose();\n\t        this._feedbackR = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoFeedbackEffect;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Applies a width factor to the mid/side seperation. \n\t\t *         0 is all mid and 1 is all side.\n\t\t *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n\t\t *         <br><br>\n\t\t *         <code>\n\t\t *         Mid *= 2*(1-width)<br>\n\t\t *         Side *= 2*width\n\t\t *         </code>\n\t\t *\n\t\t *  @extends {Tone.MidSideEffect}\n\t\t *  @constructor\n\t\t *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.\n\t\t */\n\t    Tone.StereoWidener = function () {\n\t        var options = this.optionsObject(arguments, ['width'], Tone.StereoWidener.defaults);\n\t        Tone.MidSideEffect.call(this, options);\n\t        /**\n\t\t\t *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  Mid multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._midMult = new Tone.Expr('$0 * ($1 * (1 - $2))');\n\t        /**\n\t\t\t *  Side multiplier\n\t\t\t *  @type {Tone.Expr}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sideMult = new Tone.Expr('$0 * ($1 * $2)');\n\t        /**\n\t\t\t *  constant output of 2\n\t\t\t *  @type {Tone}\n\t\t\t *  @private\n\t\t\t */\n\t        this._two = new Tone.Signal(2);\n\t        //the mid chain\n\t        this._two.connect(this._midMult, 0, 1);\n\t        this.width.connect(this._midMult, 0, 2);\n\t        //the side chain\n\t        this._two.connect(this._sideMult, 0, 1);\n\t        this.width.connect(this._sideMult, 0, 2);\n\t        //connect it to the effect send/return\n\t        this.midSend.chain(this._midMult, this.midReturn);\n\t        this.sideSend.chain(this._sideMult, this.sideReturn);\n\t        this._readOnly(['width']);\n\t    };\n\t    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);\n\t    /**\n\t\t *  the default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.StereoWidener.defaults = { 'width': 0.5 };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.StereoWidener} this\n\t\t */\n\t    Tone.StereoWidener.prototype.dispose = function () {\n\t        Tone.MidSideEffect.prototype.dispose.call(this);\n\t        this._writable(['width']);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._midMult.dispose();\n\t        this._midMult = null;\n\t        this._sideMult.dispose();\n\t        this._sideMult = null;\n\t        this._two.dispose();\n\t        this._two = null;\n\t        return this;\n\t    };\n\t    return Tone.StereoWidener;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.\n\t\t *         The type, frequency, and depth of the LFO is controllable.\n\t\t *\n\t\t *  @extends {Tone.StereoEffect}\n\t\t *  @constructor\n\t\t *  @param {Frequency} [frequency] The rate of the effect.\n\t\t *  @param {NormalRange} [depth] The depth of the effect.\n\t\t *  @example\n\t\t * //create a tremolo and start it's LFO\n\t\t * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();\n\t\t * //route an oscillator through the tremolo and start it\n\t\t * var oscillator = new Tone.Oscillator().connect(tremolo).start();\n\t\t */\n\t    Tone.Tremolo = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Tremolo.defaults);\n\t        Tone.StereoEffect.call(this, options);\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoL = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  The tremelo LFO in the left channel\n\t\t\t *  @type  {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfoR = new Tone.LFO({\n\t            'phase': options.spread,\n\t            'min': 1,\n\t            'max': 0\n\t        });\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeL = new Tone.Gain();\n\t        /**\n\t\t\t *  Where the gain is multiplied\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitudeR = new Tone.Gain();\n\t        /**\n\t\t\t *  The frequency of the tremolo.\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The depth of the effect. A depth of 0, has no effect\n\t\t\t *  on the amplitude, and a depth of 1 makes the amplitude\n\t\t\t *  modulate fully between 0 and 1.\n\t\t\t *  @type  {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);\n\t        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);\n\t        this._lfoL.connect(this._amplitudeL.gain);\n\t        this._lfoR.connect(this._amplitudeR.gain);\n\t        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);\n\t        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);\n\t        this.type = options.type;\n\t        this.spread = options.spread;\n\t    };\n\t    Tone.extend(Tone.Tremolo, Tone.StereoEffect);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Tremolo.defaults = {\n\t        'frequency': 10,\n\t        'type': 'sine',\n\t        'depth': 0.5,\n\t        'spread': 180\n\t    };\n\t    /**\n\t\t * Start the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo begins.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.start = function (time) {\n\t        this._lfoL.start(time);\n\t        this._lfoR.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Stop the tremolo.\n\t\t * @param {Time} [time=now] When the tremolo stops.\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.stop = function (time) {\n\t        this._lfoL.stop(time);\n\t        this._lfoR.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Sync the effect to the transport.\n\t\t * @param {Time} [delay=0] Delay time before starting the effect after the\n\t\t *                              Transport has started.\n\t\t * @returns {Tone.AutoFilter} this\n\t\t */\n\t    Tone.Tremolo.prototype.sync = function (delay) {\n\t        this._lfoL.sync(delay);\n\t        this._lfoR.sync(delay);\n\t        return this;\n\t    };\n\t    /**\n\t\t * Unsync the filter from the transport\n\t\t * @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.unsync = function () {\n\t        this._lfoL.unsync();\n\t        this._lfoR.unsync();\n\t        return this;\n\t    };\n\t    /**\n\t\t * The Tremolo's oscillator type.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfoL.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfoL.type = type;\n\t            this._lfoR.type = type;\n\t        }\n\t    });\n\t    /** \n\t\t * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n\t\t * When set to 180, LFO's will be panned hard left and right respectively.\n\t\t * @memberOf Tone.Tremolo#\n\t\t * @type {Degrees}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {\n\t        get: function () {\n\t            return this._lfoR.phase - this._lfoL.phase;    //180\n\t        },\n\t        set: function (spread) {\n\t            this._lfoL.phase = 90 - spread / 2;\n\t            this._lfoR.phase = spread / 2 + 90;\n\t        }\n\t    });\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Tremolo} this\n\t\t */\n\t    Tone.Tremolo.prototype.dispose = function () {\n\t        Tone.StereoEffect.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this._lfoL.dispose();\n\t        this._lfoL = null;\n\t        this._lfoR.dispose();\n\t        this._lfoR = null;\n\t        this._amplitudeL.dispose();\n\t        this._amplitudeL = null;\n\t        this._amplitudeR.dispose();\n\t        this._amplitudeR = null;\n\t        this.frequency = null;\n\t        this.depth = null;\n\t        return this;\n\t    };\n\t    return Tone.Tremolo;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO\n\t\t *         modulates the delayTime of the delay, causing the pitch to rise\n\t\t *         and fall. \n\t\t *  @extends {Tone.Effect}\n\t\t *  @param {Frequency} frequency The frequency of the vibrato.\n\t\t *  @param {NormalRange} depth The amount the pitch is modulated.\n\t\t */\n\t    Tone.Vibrato = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'depth'\n\t        ], Tone.Vibrato.defaults);\n\t        Tone.Effect.call(this, options);\n\t        /**\n\t\t\t *  The delay node used for the vibrato effect\n\t\t\t *  @type {Tone.Delay}\n\t\t\t *  @private\n\t\t\t */\n\t        this._delayNode = new Tone.Delay(0, options.maxDelay);\n\t        /**\n\t\t\t *  The LFO used to control the vibrato\n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfo = new Tone.LFO({\n\t            'type': options.type,\n\t            'min': 0,\n\t            'max': options.maxDelay,\n\t            'frequency': options.frequency,\n\t            'phase': -90    //offse the phase so the resting position is in the center\n\t        }).start().connect(this._delayNode.delayTime);\n\t        /**\n\t\t\t *  The frequency of the vibrato\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._lfo.frequency;\n\t        /**\n\t\t\t *  The depth of the vibrato. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.depth = this._lfo.amplitude;\n\t        this.depth.value = options.depth;\n\t        this._readOnly([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.effectSend.chain(this._delayNode, this.effectReturn);\n\t    };\n\t    Tone.extend(Tone.Vibrato, Tone.Effect);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Vibrato.defaults = {\n\t        'maxDelay': 0.005,\n\t        'frequency': 5,\n\t        'depth': 0.1,\n\t        'type': 'sine'\n\t    };\n\t    /**\n\t\t * Type of oscillator attached to the Vibrato.\n\t\t * @memberOf Tone.Vibrato#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.Vibrato.prototype, 'type', {\n\t        get: function () {\n\t            return this._lfo.type;\n\t        },\n\t        set: function (type) {\n\t            this._lfo.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Vibrato} this\n\t\t */\n\t    Tone.Vibrato.prototype.dispose = function () {\n\t        Tone.Effect.prototype.dispose.call(this);\n\t        this._delayNode.dispose();\n\t        this._delayNode = null;\n\t        this._lfo.dispose();\n\t        this._lfo = null;\n\t        this._writable([\n\t            'frequency',\n\t            'depth'\n\t        ]);\n\t        this.frequency = null;\n\t        this.depth = null;\n\t    };\n\t    return Tone.Vibrato;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable\n\t\t *          callback for a single or repeatable events along the timeline. \n\t\t *\n\t\t *  @extends {Tone}\n\t\t *  @param {function} callback The callback to invoke at the time. \n\t\t *  @param {*} value The value or values which should be passed to\n\t\t *                      the callback function on invocation.  \n\t\t *  @example\n\t\t * var chord = new Tone.Event(function(time, chord){\n\t\t * \t//the chord as well as the exact time of the event\n\t\t * \t//are passed in as arguments to the callback function\n\t\t * }, [\"D4\", \"E4\", \"F4\"]);\n\t\t * //start the chord at the beginning of the transport timeline\n\t\t * chord.start();\n\t\t * //loop it every measure for 8 measures\n\t\t * chord.loop = 8;\n\t\t * chord.loopEnd = \"1m\";\n\t\t */\n\t    Tone.Event = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'value'\n\t        ], Tone.Event.defaults);\n\t        /**\n\t\t\t *  Loop value\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  The callback to invoke. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  The value which is passed to the\n\t\t\t *  callback function.\n\t\t\t *  @type  {*}\n\t\t\t *  @private\n\t\t\t */\n\t        this.value = options.value;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  Tracks the scheduled events\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  The playback speed of the note. A speed of 1\n\t\t\t *  is no change. \n\t\t\t *  @private\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this._playbackRate = 1;\n\t        /**\n\t\t\t *  A delay time from when the event is scheduled to start\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  The probability that the callback will be invoked\n\t\t\t *  at the scheduled time. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @example\n\t\t\t * //the callback will be invoked 50% of the time\n\t\t\t * event.probability = 0.5;\n\t\t\t */\n\t        this.probability = options.probability;\n\t        /**\n\t\t\t *  If set to true, will apply small (+/-0.02 seconds) random variation\n\t\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t\t *  by that amount.\n\t\t\t *  @example\n\t\t\t * event.humanize = true;\n\t\t\t *  @type {Boolean|Time}\n\t\t\t */\n\t        this.humanize = options.humanize;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //set the initial values\n\t        this.playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Event.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'value': null,\n\t        'probability': 1,\n\t        'mute': false,\n\t        'humanize': false\n\t    };\n\t    /**\n\t\t *  Reschedule all of the events along the timeline\n\t\t *  with the updated values.\n\t\t *  @param {Time} after Only reschedules events after the given time.\n\t\t *  @return  {Tone.Event}  this\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._rescheduleEvents = function (after) {\n\t        //if no argument is given, schedules all of the events\n\t        after = this.defaultArg(after, -1);\n\t        this._state.forEachFrom(after, function (event) {\n\t            var duration;\n\t            if (event.state === Tone.State.Started) {\n\t                if (!this.isUndef(event.id)) {\n\t                    Tone.Transport.clear(event.id);\n\t                }\n\t                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);\n\t                if (this._loop) {\n\t                    duration = Infinity;\n\t                    if (this.isNumber(this._loop)) {\n\t                        duration = this._loop * this._getLoopDuration();\n\t                    }\n\t                    var nextEvent = this._state.getAfter(startTick);\n\t                    if (nextEvent !== null) {\n\t                        duration = Math.min(duration, nextEvent.time - startTick);\n\t                    }\n\t                    if (duration !== Infinity) {\n\t                        //schedule a stop since it's finite duration\n\t                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);\n\t                        duration = Tone.Time(duration, 'i');\n\t                    }\n\t                    var interval = Tone.Time(this._getLoopDuration(), 'i');\n\t                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.TransportTime(startTick, 'i'), duration);\n\t                } else {\n\t                    event.id = Tone.Transport.schedule(this._tick.bind(this), startTick + 'i');\n\t                }\n\t            }\n\t        }.bind(this));\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the note, either \"started\" or \"stopped\".\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'state', {\n\t        get: function () {\n\t            return this._state.getValueAtTime(Tone.Transport.ticks);\n\t        }\n\t    });\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Event#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the note at the given time. \n\t\t *  @param  {TimelinePosition}  time  When the note should start.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.start = function (time) {\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': time,\n\t                'id': undefined\n\t            });\n\t            this._rescheduleEvents(time);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the Event at the given time.\n\t\t *  @param  {TimelinePosition}  time  When the note should stop.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.stop = function (time) {\n\t        this.cancel(time);\n\t        time = this.toTicks(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            this._state.setStateAtTime(Tone.State.Stopped, time);\n\t            var previousEvent = this._state.getBefore(time);\n\t            var reschedulTime = time;\n\t            if (previousEvent !== null) {\n\t                reschedulTime = previousEvent.time;\n\t            }\n\t            this._rescheduleEvents(reschedulTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.cancel = function (time) {\n\t        time = this.defaultArg(time, -Infinity);\n\t        time = this.toTicks(time);\n\t        this._state.forEachFrom(time, function (event) {\n\t            Tone.Transport.clear(event.id);\n\t        });\n\t        this._state.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The callback function invoker. Also \n\t\t *  checks if the Event is done playing\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._tick = function (time) {\n\t        if (!this.mute && this._state.getValueAtTime(Tone.Transport.ticks) === Tone.State.Started) {\n\t            if (this.probability < 1 && Math.random() > this.probability) {\n\t                return;\n\t            }\n\t            if (this.humanize) {\n\t                var variation = 0.02;\n\t                if (!this.isBoolean(this.humanize)) {\n\t                    variation = this.toSeconds(this.humanize);\n\t                }\n\t                time += (Math.random() * 2 - 1) * variation;\n\t            }\n\t            this.callback(time, this.value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Get the duration of the loop.\n\t\t *  @return  {Ticks}\n\t\t *  @private\n\t\t */\n\t    Tone.Event.prototype._getLoopDuration = function () {\n\t        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);\n\t    };\n\t    /**\n\t\t *  If the note should loop or not\n\t\t *  between Tone.Event.loopStart and \n\t\t *  Tone.Event.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Event does after it starts.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the note. Defaults to 1.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t *  @example\n\t\t * note.loop = true;\n\t\t * //repeat the note twice as fast\n\t\t * note.playbackRate = 2;\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._rescheduleEvents();\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point is the time the event will loop\n\t\t *  if Tone.Event.loop is true.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The time when the loop should start. \n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._rescheduleEvents();\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The current progress of the loop interval.\n\t\t *  Returns 0 if the event is not started yet or\n\t\t *  it is not set to loop.\n\t\t *  @memberOf Tone.Event#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Event.prototype, 'progress', {\n\t        get: function () {\n\t            if (this._loop) {\n\t                var ticks = Tone.Transport.ticks;\n\t                var lastEvent = this._state.get(ticks);\n\t                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {\n\t                    var loopDuration = this._getLoopDuration();\n\t                    var progress = (ticks - lastEvent.time) % loopDuration;\n\t                    return progress / loopDuration;\n\t                } else {\n\t                    return 0;\n\t                }\n\t            } else {\n\t                return 0;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Event}  this\n\t\t */\n\t    Tone.Event.prototype.dispose = function () {\n\t        this.cancel();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this.value = null;\n\t    };\n\t    return Tone.Event;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Loop creates a looped callback at the \n\t\t *         specified interval. The callback can be \n\t\t *         started, stopped and scheduled along\n\t\t *         the Transport's timeline. \n\t\t *  @example\n\t\t * var loop = new Tone.Loop(function(time){\n\t\t * \t//triggered every eighth note. \n\t\t * \tconsole.log(time);\n\t\t * }, \"8n\").start(0);\n\t\t * Tone.Transport.start();\n\t\t *  @extends {Tone}\n\t\t *  @param {Function} callback The callback to invoke with the event.\n\t\t *  @param {Time} interval The time between successive callback calls. \n\t\t */\n\t    Tone.Loop = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'interval'\n\t        ], Tone.Loop.defaults);\n\t        /**\n\t\t\t *  The event which produces the callbacks\n\t\t\t */\n\t        this._event = new Tone.Event({\n\t            'callback': this._tick.bind(this),\n\t            'loop': true,\n\t            'loopEnd': options.interval,\n\t            'playbackRate': options.playbackRate,\n\t            'probability': options.probability\n\t        });\n\t        /**\n\t\t\t *  The callback to invoke with the next event in the pattern\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        //set the iterations\n\t        this.iterations = options.iterations;\n\t    };\n\t    Tone.extend(Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Loop.defaults = {\n\t        'interval': '4n',\n\t        'callback': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'iterations': Infinity,\n\t        'probability': true,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the loop at the specified time along the Transport's\n\t\t *  timeline.\n\t\t *  @param  {TimelinePosition=}  time  When to start the Loop.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.start = function (time) {\n\t        this._event.start(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the loop at the given time.\n\t\t *  @param  {TimelinePosition=}  time  When to stop the Arpeggio\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.stop = function (time) {\n\t        this._event.stop(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel all scheduled events greater than or equal to the given time\n\t\t *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.cancel = function (time) {\n\t        this._event.cancel(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Loop.prototype._tick = function (time) {\n\t        this.callback(time);\n\t    };\n\t    /**\n\t\t *  The state of the Loop, either started or stopped.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {String}\n\t\t *  @name state\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'state', {\n\t        get: function () {\n\t            return this._event.state;\n\t        }\n\t    });\n\t    /**\n\t\t *  The progress of the loop as a value between 0-1. 0, when\n\t\t *  the loop is stopped or done iterating. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name progress\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'progress', {\n\t        get: function () {\n\t            return this._event.progress;\n\t        }\n\t    });\n\t    /**\n\t\t *  The time between successive callbacks. \n\t\t *  @example\n\t\t * loop.interval = \"8n\"; //loop every 8n\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name interval\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'interval', {\n\t        get: function () {\n\t            return this._event.loopEnd;\n\t        },\n\t        set: function (interval) {\n\t            this._event.loopEnd = interval;\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the loop. The normal playback rate is 1 (no change). \n\t\t *  A `playbackRate` of 2 would be twice as fast. \n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Time}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._event.playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._event.playbackRate = rate;\n\t        }\n\t    });\n\t    /**\n\t\t *  Random variation +/-0.01s to the scheduled time. \n\t\t *  Or give it a time value which it will randomize by.\n\t\t *  @type {Boolean|Time}\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._event.humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._event.humanize = variation;\n\t        }\n\t    });\n\t    /**\n\t\t *  The probably of the callback being invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'probability', {\n\t        get: function () {\n\t            return this._event.probability;\n\t        },\n\t        set: function (prob) {\n\t            this._event.probability = prob;\n\t        }\n\t    });\n\t    /**\n\t\t *  Muting the Loop means that no callbacks are invoked.\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Boolean}\n\t\t *  @name mute\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'mute', {\n\t        get: function () {\n\t            return this._event.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._event.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of iterations of the loop. The default\n\t\t *  value is Infinity (loop forever).\n\t\t *  @memberOf Tone.Loop#\n\t\t *  @type {Positive}\n\t\t *  @name iterations\n\t\t */\n\t    Object.defineProperty(Tone.Loop.prototype, 'iterations', {\n\t        get: function () {\n\t            if (this._event.loop === true) {\n\t                return Infinity;\n\t            } else {\n\t                return this._event.loop;\n\t            }\n\t            return this._pattern.index;\n\t        },\n\t        set: function (iters) {\n\t            if (iters === Infinity) {\n\t                this._event.loop = true;\n\t            } else {\n\t                this._event.loop = iters;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Loop}  this\n\t\t */\n\t    Tone.Loop.prototype.dispose = function () {\n\t        this._event.dispose();\n\t        this._event = null;\n\t        this.callback = null;\n\t    };\n\t    return Tone.Loop;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.Part is a collection Tone.Events which can be\n\t\t *         started/stoped and looped as a single unit.\n\t\t *\n\t\t *  @extends {Tone.Event}\n\t\t *  @param {Function} callback The callback to invoke on each event\n\t\t *  @param {Array} events the array of events\n\t\t *  @example\n\t\t * var part = new Tone.Part(function(time, note){\n\t\t * \t//the notes given as the second element in the array\n\t\t * \t//will be passed in as the second argument\n\t\t * \tsynth.triggerAttackRelease(note, \"8n\", time);\n\t\t * }, [[0, \"C2\"], [\"0:2\", \"C3\"], [\"0:3:2\", \"G2\"]]);\n\t\t *  @example\n\t\t * //use an array of objects as long as the object has a \"time\" attribute\n\t\t * var part = new Tone.Part(function(time, value){\n\t\t * \t//the value is an object which contains both the note and the velocity\n\t\t * \tsynth.triggerAttackRelease(value.note, \"8n\", time, value.velocity);\n\t\t * }, [{\"time\" : 0, \"note\" : \"C3\", \"velocity\": 0.9}, \n\t\t * \t   {\"time\" : \"0:2\", \"note\" : \"C4\", \"velocity\": 0.5}\n\t\t * ]).start(0);\n\t\t */\n\t    Tone.Part = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events'\n\t        ], Tone.Part.defaults);\n\t        /**\n\t\t\t *  If the part is looping or not\n\t\t\t *  @type  {Boolean|Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = this.toTicks(options.loopStart);\n\t        /**\n\t\t\t *  When the note is scheduled to start.\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = this.toTicks(options.loopEnd);\n\t        /**\n\t\t\t *  The playback rate of the part\n\t\t\t *  @type  {Positive}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  private holder of probability value\n\t\t\t *  @type {NormalRange}\n\t\t\t *  @private\n\t\t\t */\n\t        this._probability = options.probability;\n\t        /**\n\t\t\t *  the amount of variation from the\n\t\t\t *  given time. \n\t\t\t *  @type {Boolean|Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._humanize = options.humanize;\n\t        /**\n\t\t\t *  The start offset\n\t\t\t *  @type {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startOffset = 0;\n\t        /**\n\t\t\t *  Keeps track of the current state\n\t\t\t *  @type {Tone.TimelineState}\n\t\t\t *  @private\n\t\t\t */\n\t        this._state = new Tone.TimelineState(Tone.State.Stopped);\n\t        /**\n\t\t\t *  An array of Objects. \n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._events = [];\n\t        /**\n\t\t\t *  The callback to invoke at all the scheduled events.\n\t\t\t *  @type {Function}\n\t\t\t */\n\t        this.callback = options.callback;\n\t        /**\n\t\t\t *  If mute is true, the callback won't be\n\t\t\t *  invoked.\n\t\t\t *  @type {Boolean}\n\t\t\t */\n\t        this.mute = options.mute;\n\t        //add the events\n\t        var events = this.defaultArg(options.events, []);\n\t        if (!this.isUndef(options.events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                if (Array.isArray(events[i])) {\n\t                    this.add(events[i][0], events[i][1]);\n\t                } else {\n\t                    this.add(events[i]);\n\t                }\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Part, Tone.Event);\n\t    /**\n\t\t *  The default values\n\t\t *  @type  {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.Part.defaults = {\n\t        'callback': Tone.noOp,\n\t        'loop': false,\n\t        'loopEnd': '1m',\n\t        'loopStart': 0,\n\t        'playbackRate': 1,\n\t        'probability': 1,\n\t        'humanize': false,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Start the part at the given time. \n\t\t *  @param  {TransportTime}  time    When to start the part.\n\t\t *  @param  {Time=}  offset  The offset from the start of the part\n\t\t *                           to begin playing at.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.start = function (time, offset) {\n\t        var ticks = this.toTicks(time);\n\t        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toTicks(offset);\n\t            this._state.add({\n\t                'state': Tone.State.Started,\n\t                'time': ticks,\n\t                'offset': offset\n\t            });\n\t            this._forEach(function (event) {\n\t                this._startNote(event, ticks, offset);\n\t            });\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the event in the given event at the correct time given\n\t\t *  the ticks and offset and looping.\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @param  {Ticks}  ticks\n\t\t *  @param  {Ticks}  offset\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._startNote = function (event, ticks, offset) {\n\t        ticks -= offset;\n\t        if (this._loop) {\n\t            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {\n\t                if (event.startOffset < offset) {\n\t                    //start it on the next loop\n\t                    ticks += this._getLoopDuration();\n\t                }\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {\n\t                event.loop = false;\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        } else {\n\t            if (event.startOffset >= offset) {\n\t                event.start(Tone.TransportTime(ticks, 'i'));\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The start from the scheduled start time\n\t\t *  @type {Ticks}\n\t\t *  @memberOf Tone.Part#\n\t\t *  @name startOffset\n\t\t *  @private\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'startOffset', {\n\t        get: function () {\n\t            return this._startOffset;\n\t        },\n\t        set: function (offset) {\n\t            this._startOffset = offset;\n\t            this._forEach(function (event) {\n\t                event.startOffset += this._startOffset;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Stop the part at the given time.\n\t\t *  @param  {TimelinePosition}  time  When to stop the part.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.stop = function (time) {\n\t        var ticks = this.toTicks(time);\n\t        this._state.cancel(ticks);\n\t        this._state.setStateAtTime(Tone.State.Stopped, ticks);\n\t        this._forEach(function (event) {\n\t            event.stop(time);\n\t        });\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get/Set an Event's value at the given time. \n\t\t *  If a value is passed in and no event exists at\n\t\t *  the given time, one will be created with that value. \n\t\t *  If two events are at the same time, the first one will\n\t\t *  be returned.\n\t\t *  @example\n\t\t * part.at(\"1m\"); //returns the part at the first measure\n\t\t *\n\t\t * part.at(\"2m\", \"C2\"); //set the value at \"2m\" to C2. \n\t\t * //if an event didn't exist at that time, it will be created.\n\t\t *  @param {TransportTime} time The time of the event to get or set.\n\t\t *  @param {*=} value If a value is passed in, the value of the\n\t\t *                    event at the given time will be set to it.\n\t\t *  @return {Tone.Event} the event at the time\n\t\t */\n\t    Tone.Part.prototype.at = function (time, value) {\n\t        time = Tone.TransportTime(time);\n\t        var tickTime = Tone.Time(1, 'i').toSeconds();\n\t        for (var i = 0; i < this._events.length; i++) {\n\t            var event = this._events[i];\n\t            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {\n\t                if (!this.isUndef(value)) {\n\t                    event.value = value;\n\t                }\n\t                return event;\n\t            }\n\t        }\n\t        //if there was no event at that time, create one\n\t        if (!this.isUndef(value)) {\n\t            this.add(time, value);\n\t            //return the new event\n\t            return this._events[this._events.length - 1];\n\t        } else {\n\t            return null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Add a an event to the part. \n\t\t *  @param {Time} time The time the note should start.\n\t\t *                            If an object is passed in, it should\n\t\t *                            have a 'time' attribute and the rest\n\t\t *                            of the object will be used as the 'value'.\n\t\t *  @param  {Tone.Event|*}  value \n\t\t *  @returns {Tone.Part} this\n\t\t *  @example\n\t\t * part.add(\"1m\", \"C#+11\");\n\t\t */\n\t    Tone.Part.prototype.add = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        var event;\n\t        if (value instanceof Tone.Event) {\n\t            event = value;\n\t            event.callback = this._tick.bind(this);\n\t        } else {\n\t            event = new Tone.Event({\n\t                'callback': this._tick.bind(this),\n\t                'value': value\n\t            });\n\t        }\n\t        //the start offset\n\t        event.startOffset = time;\n\t        //initialize the values\n\t        event.set({\n\t            'loopEnd': this.loopEnd,\n\t            'loopStart': this.loopStart,\n\t            'loop': this.loop,\n\t            'humanize': this.humanize,\n\t            'playbackRate': this.playbackRate,\n\t            'probability': this.probability\n\t        });\n\t        this._events.push(event);\n\t        //start the note if it should be played right now\n\t        this._restartEvent(event);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Restart the given event\n\t\t *  @param  {Tone.Event}  event \n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._restartEvent = function (event) {\n\t        this._state.forEach(function (stateEvent) {\n\t            if (stateEvent.state === Tone.State.Started) {\n\t                this._startNote(event, stateEvent.time, stateEvent.offset);\n\t            } else {\n\t                //stop the note\n\t                event.stop(Tone.TransportTime(stateEvent.time, 'i'));\n\t            }\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Remove an event from the part. Will recursively iterate\n\t\t *  into nested parts to find the event.\n\t\t *  @param {Time} time The time of the event\n\t\t *  @param {*} value Optionally select only a specific event value\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.remove = function (time, value) {\n\t        //extract the parameters\n\t        if (time.hasOwnProperty('time')) {\n\t            value = time;\n\t            time = value.time;\n\t        }\n\t        time = this.toTicks(time);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var event = this._events[i];\n\t            if (event instanceof Tone.Part) {\n\t                event.remove(time, value);\n\t            } else {\n\t                if (event.startOffset === time) {\n\t                    if (this.isUndef(value) || !this.isUndef(value) && event.value === value) {\n\t                        this._events.splice(i, 1);\n\t                        event.dispose();\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove all of the notes from the group. \n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.removeAll = function () {\n\t        this._forEach(function (event) {\n\t            event.dispose();\n\t        });\n\t        this._events = [];\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Cancel scheduled state change events: i.e. \"start\" and \"stop\".\n\t\t *  @param {TimelinePosition} after The time after which to cancel the scheduled events.\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.cancel = function (after) {\n\t        after = this.toTicks(after);\n\t        this._forEach(function (event) {\n\t            event.cancel(after);\n\t        });\n\t        this._state.cancel(after);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Iterate over all of the events\n\t\t *  @param {Function} callback\n\t\t *  @param {Object} ctx The context\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._forEach = function (callback, ctx) {\n\t        ctx = this.defaultArg(ctx, this);\n\t        for (var i = this._events.length - 1; i >= 0; i--) {\n\t            var e = this._events[i];\n\t            if (e instanceof Tone.Part) {\n\t                e._forEach(callback, ctx);\n\t            } else {\n\t                callback.call(ctx, e);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the attribute of all of the events\n\t\t *  @param  {String}  attr  the attribute to set\n\t\t *  @param  {*}  value      The value to set it to\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._setAll = function (attr, value) {\n\t        this._forEach(function (event) {\n\t            event[attr] = value;\n\t        });\n\t    };\n\t    /**\n\t\t *  Internal tick method\n\t\t *  @param  {Number}  time  The time of the event in seconds\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._tick = function (time, value) {\n\t        if (!this.mute) {\n\t            this.callback(time, value);\n\t        }\n\t    };\n\t    /**\n\t\t *  Determine if the event should be currently looping\n\t\t *  given the loop boundries of this Part.\n\t\t *  @param  {Tone.Event}  event  The event to test\n\t\t *  @private\n\t\t */\n\t    Tone.Part.prototype._testLoopBoundries = function (event) {\n\t        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {\n\t            event.cancel(0);\n\t        } else {\n\t            //reschedule it if it's stopped\n\t            if (event.state === Tone.State.Stopped) {\n\t                this._restartEvent(event);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  The probability of the notes being triggered.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {NormalRange}\n\t\t *  @name probability\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'probability', {\n\t        get: function () {\n\t            return this._probability;\n\t        },\n\t        set: function (prob) {\n\t            this._probability = prob;\n\t            this._setAll('probability', prob);\n\t        }\n\t    });\n\t    /**\n\t\t *  If set to true, will apply small random variation\n\t\t *  to the callback time. If the value is given as a time, it will randomize\n\t\t *  by that amount.\n\t\t *  @example\n\t\t * event.humanize = true;\n\t\t *  @type {Boolean|Time}\n\t\t *  @name humanize\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'humanize', {\n\t        get: function () {\n\t            return this._humanize;\n\t        },\n\t        set: function (variation) {\n\t            this._humanize = variation;\n\t            this._setAll('humanize', variation);\n\t        }\n\t    });\n\t    /**\n\t\t *  If the part should loop or not\n\t\t *  between Tone.Part.loopStart and \n\t\t *  Tone.Part.loopEnd. An integer\n\t\t *  value corresponds to the number of\n\t\t *  loops the Part does after it starts.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Boolean|Positive}\n\t\t *  @name loop\n\t\t *  @example\n\t\t * //loop the part 8 times\n\t\t * part.loop = 8;\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            this._forEach(function (event) {\n\t                event._loopStart = this._loopStart;\n\t                event._loopEnd = this._loopEnd;\n\t                event.loop = loop;\n\t                this._testLoopBoundries(event);\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopEnd point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopEnd, 'i').toNotation();\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = this.toTicks(loopEnd);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopEnd = loopEnd;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The loopStart point determines when it will \n\t\t *  loop if Tone.Part.loop is true.\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {TransportTime}\n\t\t *  @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'loopStart', {\n\t        get: function () {\n\t            return Tone.TransportTime(this._loopStart, 'i').toNotation();\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = this.toTicks(loopStart);\n\t            if (this._loop) {\n\t                this._forEach(function (event) {\n\t                    event.loopStart = this.loopStart;\n\t                    this._testLoopBoundries(event);\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe playback rate of the part\n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this._setAll('playbackRate', rate);\n\t        }\n\t    });\n\t    /**\n\t\t * \tThe number of scheduled notes in the part. \n\t\t *  @memberOf Tone.Part#\n\t\t *  @type {Positive}\n\t\t *  @name length\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Part.prototype, 'length', {\n\t        get: function () {\n\t            return this._events.length;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Part}  this\n\t\t */\n\t    Tone.Part.prototype.dispose = function () {\n\t        this.removeAll();\n\t        this._state.dispose();\n\t        this._state = null;\n\t        this.callback = null;\n\t        this._events = null;\n\t        return this;\n\t    };\n\t    return Tone.Part;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.Pattern arpeggiates between the given notes\n\t\t *         in a number of patterns. See Tone.CtrlPattern for\n\t\t *         a full list of patterns.\n\t\t *  @example\n\t\t * var pattern = new Tone.Pattern(function(time, note){\n\t\t *   //the order of the notes passed in depends on the pattern\n\t\t * }, [\"C2\", \"D4\", \"E5\", \"A6\"], \"upDown\");\n\t\t *  @extends {Tone.Loop}\n\t\t *  @param {Function} callback The callback to invoke with the\n\t\t *                             event.\n\t\t *  @param {Array} values The values to arpeggiate over.\n\t\t */\n\t    Tone.Pattern = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'values',\n\t            'pattern'\n\t        ], Tone.Pattern.defaults);\n\t        Tone.Loop.call(this, options);\n\t        /**\n\t\t\t *  The pattern manager\n\t\t\t *  @type {Tone.CtrlPattern}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pattern = new Tone.CtrlPattern({\n\t            'values': options.values,\n\t            'type': options.pattern,\n\t            'index': options.index\n\t        });\n\t    };\n\t    Tone.extend(Tone.Pattern, Tone.Loop);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Pattern.defaults = {\n\t        'pattern': Tone.CtrlPattern.Type.Up,\n\t        'values': []\n\t    };\n\t    /**\n\t\t *  Internal function called when the notes should be called\n\t\t *  @param  {Number}  time  The time the event occurs\n\t\t *  @private\n\t\t */\n\t    Tone.Pattern.prototype._tick = function (time) {\n\t        this.callback(time, this._pattern.value);\n\t        this._pattern.next();\n\t    };\n\t    /**\n\t\t *  The current index in the values array.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Positive}\n\t\t *  @name index\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'index', {\n\t        get: function () {\n\t            return this._pattern.index;\n\t        },\n\t        set: function (i) {\n\t            this._pattern.index = i;\n\t        }\n\t    });\n\t    /**\n\t\t *  The array of events.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {Array}\n\t\t *  @name values\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'values', {\n\t        get: function () {\n\t            return this._pattern.values;\n\t        },\n\t        set: function (vals) {\n\t            this._pattern.values = vals;\n\t        }\n\t    });\n\t    /**\n\t\t *  The current value of the pattern.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {*}\n\t\t *  @name value\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'value', {\n\t        get: function () {\n\t            return this._pattern.value;\n\t        }\n\t    });\n\t    /**\n\t\t *  The pattern type. See Tone.CtrlPattern for the full list of patterns.\n\t\t *  @memberOf Tone.Pattern#\n\t\t *  @type {String}\n\t\t *  @name pattern\n\t\t */\n\t    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {\n\t        get: function () {\n\t            return this._pattern.type;\n\t        },\n\t        set: function (pattern) {\n\t            this._pattern.type = pattern;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @return  {Tone.Pattern}  this\n\t\t */\n\t    Tone.Pattern.prototype.dispose = function () {\n\t        Tone.Loop.prototype.dispose.call(this);\n\t        this._pattern.dispose();\n\t        this._pattern = null;\n\t    };\n\t    return Tone.Pattern;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class A sequence is an alternate notation of a part. Instead\n\t\t *         of passing in an array of [time, event] pairs, pass\n\t\t *         in an array of events which will be spaced at the\n\t\t *         given subdivision. Sub-arrays will subdivide that beat\n\t\t *         by the number of items are in the array. \n\t\t *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)\n\t\t *  @param  {Function}  callback  The callback to invoke with every note\n\t\t *  @param  {Array}    events  The sequence\n\t\t *  @param  {Time} subdivision  The subdivision between which events are placed. \n\t\t *  @extends {Tone.Part}\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //straight quater notes\n\t\t * }, [\"C4\", \"E4\", \"G4\", \"A4\"], \"4n\");\n\t\t *  @example\n\t\t * var seq = new Tone.Sequence(function(time, note){\n\t\t * \tconsole.log(note);\n\t\t * //subdivisions are given as subarrays\n\t\t * }, [\"C4\", [\"E4\", \"D4\", \"E4\"], \"G4\", [\"A4\", \"G4\"]]);\n\t\t */\n\t    Tone.Sequence = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'callback',\n\t            'events',\n\t            'subdivision'\n\t        ], Tone.Sequence.defaults);\n\t        //remove the events\n\t        var events = options.events;\n\t        delete options.events;\n\t        Tone.Part.call(this, options);\n\t        /**\n\t\t\t *  The subdivison of each note\n\t\t\t *  @type  {Ticks}\n\t\t\t *  @private\n\t\t\t */\n\t        this._subdivision = this.toTicks(options.subdivision);\n\t        //if no time was passed in, the loop end is the end of the cycle\n\t        if (this.isUndef(options.loopEnd) && !this.isUndef(events)) {\n\t            this._loopEnd = events.length * this._subdivision;\n\t        }\n\t        //defaults to looping\n\t        this._loop = true;\n\t        //add all of the events\n\t        if (!this.isUndef(events)) {\n\t            for (var i = 0; i < events.length; i++) {\n\t                this.add(i, events[i]);\n\t            }\n\t        }\n\t    };\n\t    Tone.extend(Tone.Sequence, Tone.Part);\n\t    /**\n\t\t *  The default values.\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.Sequence.defaults = { 'subdivision': '4n' };\n\t    /**\n\t\t *  The subdivision of the sequence. This can only be \n\t\t *  set in the constructor. The subdivision is the \n\t\t *  interval between successive steps. \n\t\t *  @type {Time}\n\t\t *  @memberOf Tone.Sequence#\n\t\t *  @name subdivision\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {\n\t        get: function () {\n\t            return Tone.Time(this._subdivision, 'i').toNotation();\n\t        }\n\t    });\n\t    /**\n\t\t *  Get/Set an index of the sequence. If the index contains a subarray, \n\t\t *  a Tone.Sequence representing that sub-array will be returned. \n\t\t *  @example\n\t\t * var sequence = new Tone.Sequence(playNote, [\"E4\", \"C4\", \"F#4\", [\"A4\", \"Bb3\"]])\n\t\t * sequence.at(0)// => returns \"E4\"\n\t\t * //set a value\n\t\t * sequence.at(0, \"G3\");\n\t\t * //get a nested sequence\n\t\t * sequence.at(3).at(1)// => returns \"Bb3\"\n\t\t * @param {Positive} index The index to get or set\n\t\t * @param {*} value Optionally pass in the value to set at the given index.\n\t\t */\n\t    Tone.Sequence.prototype.at = function (index, value) {\n\t        //if the value is an array, \n\t        if (this.isArray(value)) {\n\t            //remove the current event at that index\n\t            this.remove(index);\n\t        }\n\t        //call the parent's method\n\t        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);\n\t    };\n\t    /**\n\t\t *  Add an event at an index, if there's already something\n\t\t *  at that index, overwrite it. If `value` is an array, \n\t\t *  it will be parsed as a subsequence.\n\t\t *  @param {Number} index The index to add the event to\n\t\t *  @param {*} value The value to add at that index\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.add = function (index, value) {\n\t        if (value === null) {\n\t            return this;\n\t        }\n\t        if (this.isArray(value)) {\n\t            //make a subsequence and add that to the sequence\n\t            var subSubdivision = Math.round(this._subdivision / value.length);\n\t            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Time(subSubdivision, 'i'));\n\t        }\n\t        Tone.Part.prototype.add.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Remove a value from the sequence by index\n\t\t *  @param {Number} index The index of the event to remove\n\t\t *  @returns {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.remove = function (index, value) {\n\t        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the time of the index given the Sequence's subdivision\n\t\t *  @param  {Number}  index \n\t\t *  @return  {Time}  The time of that index\n\t\t *  @private\n\t\t */\n\t    Tone.Sequence.prototype._indexTime = function (index) {\n\t        if (index instanceof Tone.TransportTime) {\n\t            return index;\n\t        } else {\n\t            return Tone.TransportTime(index * this._subdivision + this.startOffset, 'i');\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.Sequence} this\n\t\t */\n\t    Tone.Sequence.prototype.dispose = function () {\n\t        Tone.Part.prototype.dispose.call(this);\n\t        return this;\n\t    };\n\t    return Tone.Sequence;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,\n\t\t *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is \n\t\t *         a square and only odd-numbered harmonics are present. At all other widths \n\t\t *         even-numbered harmonics are present. Read more \n\t\t *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @param {Frequency} [frequency] The frequency of the oscillator\n\t\t *  @param {NormalRange} [width] The width of the pulse\n\t\t *  @example\n\t\t * var pulse = new Tone.PulseOscillator(\"E5\", 0.4).toMaster().start();\n\t\t */\n\t    Tone.PulseOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'width'\n\t        ], Tone.Oscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The width of the pulse. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);\n\t        /**\n\t\t\t *  gate the width amount\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._widthGate = new Tone.Gain();\n\t        /**\n\t\t\t *  the sawtooth oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sawtooth = new Tone.Oscillator({\n\t            frequency: options.frequency,\n\t            detune: options.detune,\n\t            type: 'sawtooth',\n\t            phase: options.phase\n\t        });\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._sawtooth.frequency;\n\t        /**\n\t\t\t *  The detune in cents. \n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._sawtooth.detune;\n\t        /**\n\t\t\t *  Threshold the signal to turn it into a square\n\t\t\t *  @type {Tone.WaveShaper}\n\t\t\t *  @private\n\t\t\t */\n\t        this._thresh = new Tone.WaveShaper(function (val) {\n\t            if (val < 0) {\n\t                return -1;\n\t            } else {\n\t                return 1;\n\t            }\n\t        });\n\t        //connections\n\t        this._sawtooth.chain(this._thresh, this.output);\n\t        this.width.chain(this._widthGate, this._thresh);\n\t        this._readOnly([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PulseOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  The default parameters.\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PulseOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'width': 0.2\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.start(time);\n\t        this._widthGate.gain.setValueAtTime(1, time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time \n\t\t *  @private\n\t\t */\n\t    Tone.PulseOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._sawtooth.stop(time);\n\t        //the width is still connected to the output. \n\t        //that needs to be stopped also\n\t        this._widthGate.gain.setValueAtTime(0, time);\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._sawtooth.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._sawtooth.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pulse\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pulse';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PulseOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up method.\n\t\t *  @return {Tone.PulseOscillator} this\n\t\t */\n\t    Tone.PulseOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._sawtooth.dispose();\n\t        this._sawtooth = null;\n\t        this._writable([\n\t            'width',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.width.dispose();\n\t        this.width = null;\n\t        this._widthGate.dispose();\n\t        this._widthGate = null;\n\t        this._thresh.dispose();\n\t        this._thresh = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.PulseOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator \n\t\t *         at the modulationFrequency. This has the effect of continuously\n\t\t *         changing the timbre of the oscillator by altering the harmonics \n\t\t *         generated.\n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse. \n\t\t *  @example\n\t\t *  var pwm = new Tone.PWMOscillator(\"Ab3\", 0.3).toMaster().start();\n\t\t */\n\t    Tone.PWMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'modulationFrequency'\n\t        ], Tone.PWMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  the pulse oscillator\n\t\t\t *  @type {Tone.PulseOscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);\n\t        //change the pulse oscillator type\n\t        this._pulse._sawtooth.type = 'sine';\n\t        /**\n\t\t\t *  the modulator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator({\n\t            'frequency': options.frequency,\n\t            'detune': options.detune,\n\t            'phase': options.phase\n\t        });\n\t        /**\n\t\t\t *  Scale the oscillator so it doesn't go silent \n\t\t\t *  at the extreme values.\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._scale = new Tone.Multiply(2);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._modulator.frequency;\n\t        /**\n\t\t\t *  The detune of the oscillator.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._modulator.detune;\n\t        /**\n\t\t\t *  The modulation rate of the oscillator. \n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.modulationFrequency = this._pulse.frequency;\n\t        //connections\n\t        this._modulator.chain(this._scale, this._pulse.width);\n\t        this._pulse.connect(this.output);\n\t        this._readOnly([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PWMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.PWMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationFrequency': 0.4\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._pulse.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.PWMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._pulse.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Always returns \"pwm\".\n\t\t * @readOnly\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return 'pwm';\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. Cannot set partials for this waveform type\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @private\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return [];\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.PWMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._modulator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.PWMOscillator} this\n\t\t */\n\t    Tone.PWMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._pulse.dispose();\n\t        this._pulse = null;\n\t        this._scale.dispose();\n\t        this._scale = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._writable([\n\t            'modulationFrequency',\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.modulationFrequency = null;\n\t        return this;\n\t    };\n\t    return Tone.PWMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.FMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this.detune.connect(this._modulator.detune);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationIndex': 2,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FMOscillator} this\n\t\t */\n\t    Tone.FMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'modulationIndex',\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        return this;\n\t    };\n\t    return Tone.FMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.AMOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.AMOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.AMOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'modulationType'\n\t        ], Tone.AMOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The carrier oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Oscillator(options.frequency, options.type);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this._carrier.frequency;\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this._carrier.detune;\n\t        this.detune.value = options.detune;\n\t        /**\n\t\t\t *  The modulating oscillator\n\t\t\t *  @type  {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t\t *  Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch the modulator an octave below carrier\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //connections\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.connect(this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this.phase = options.phase;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.AMOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'modulationType': 'square',\n\t        'harmonicity': 1\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.start(time);\n\t        this._carrier.start(time);\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.AMOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._modulator.stop(time);\n\t        this._carrier.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._carrier.type;\n\t        },\n\t        set: function (type) {\n\t            this._carrier.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {string}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            return this._modulator.type;\n\t        },\n\t        set: function (type) {\n\t            this._modulator.type = type;\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._carrier.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._carrier.phase = phase;\n\t            this._modulator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.AMOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._carrier.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._carrier.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.AMOscillator} this\n\t\t */\n\t    Tone.AMOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune',\n\t            'harmonicity'\n\t        ]);\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        return this;\n\t    };\n\t    return Tone.AMOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.FatOscillator \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The starting frequency of the oscillator. \n\t\t *  @param {String} type The type of the carrier oscillator.\n\t\t *  @param {String} modulationType The type of the modulator oscillator.\n\t\t *  @example\n\t\t * //a sine oscillator frequency-modulated by a square wave\n\t\t * var fmOsc = new Tone.FatOscillator(\"Ab3\", \"sine\", \"square\").toMaster().start();\n\t\t */\n\t    Tone.FatOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type',\n\t            'spread'\n\t        ], Tone.FatOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The oscillator's frequency\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control signal.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  The array of oscillators\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The total spread of the oscillators\n\t\t\t *  @type  {Cents}\n\t\t\t *  @private\n\t\t\t */\n\t        this._spread = options.spread;\n\t        /**\n\t\t\t *  The type of the oscillator\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The phase of the oscillators\n\t\t\t *  @type {Degrees}\n\t\t\t *  @private\n\t\t\t */\n\t        this._phase = options.phase;\n\t        /**\n\t\t\t *  The partials array\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._partials = this.defaultArg(options.partials, []);\n\t        //set the count initially\n\t        this.count = options.count;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FatOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.FatOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'phase': 0,\n\t        'spread': 20,\n\t        'count': 3,\n\t        'type': 'sawtooth'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param  {Time} [time=now]\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._start = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.start(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  stop the oscillator\n\t\t *  @param  {Time} time (optional) timing parameter\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._stop = function (time) {\n\t        time = this.toSeconds(time);\n\t        this._forEach(function (osc) {\n\t            osc.stop(time);\n\t        });\n\t    };\n\t    /**\n\t\t *  Iterate over all of the oscillators\n\t\t *  @param  {Function}  iterator  The iterator function\n\t\t *  @private\n\t\t */\n\t    Tone.FatOscillator.prototype._forEach = function (iterator) {\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            iterator.call(this, this._oscillators[i], i);\n\t        }\n\t    };\n\t    /**\n\t\t * The type of the carrier oscillator\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {string}\n\t\t * @name type\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            this._type = type;\n\t            this._forEach(function (osc) {\n\t                osc.type = type;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            return this._spread;\n\t        },\n\t        set: function (spread) {\n\t            this._spread = spread;\n\t            if (this._oscillators.length > 1) {\n\t                var start = -spread / 2;\n\t                var step = spread / (this._oscillators.length - 1);\n\t                this._forEach(function (osc, i) {\n\t                    osc.detune.value = start + step * i;\n\t                });\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {\n\t        get: function () {\n\t            return this._oscillators.length;\n\t        },\n\t        set: function (count) {\n\t            count = Math.max(count, 1);\n\t            if (this._oscillators.length !== count) {\n\t                // var partials = this.partials;\n\t                // var type = this.type;\n\t                //dispose the previous oscillators\n\t                this._forEach(function (osc) {\n\t                    osc.dispose();\n\t                });\n\t                this._oscillators = [];\n\t                for (var i = 0; i < count; i++) {\n\t                    var osc = new Tone.Oscillator();\n\t                    if (this.type === Tone.Oscillator.Type.Custom) {\n\t                        osc.partials = this._partials;\n\t                    } else {\n\t                        osc.type = this._type;\n\t                    }\n\t                    osc.phase = this._phase;\n\t                    osc.volume.value = -6 - count;\n\t                    this.frequency.connect(osc.frequency);\n\t                    this.detune.connect(osc.detune);\n\t                    osc.connect(this.output);\n\t                    this._oscillators[i] = osc;\n\t                }\n\t                //set the spread\n\t                this.spread = this._spread;\n\t                if (this.state === Tone.State.Started) {\n\t                    this._forEach(function (osc) {\n\t                        osc.start();\n\t                    });\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The phase of the oscillator in degrees.\n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Number}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._phase;\n\t        },\n\t        set: function (phase) {\n\t            this._phase = phase;\n\t            this._forEach(function (osc) {\n\t                osc.phase = phase;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the carrier waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * @memberOf Tone.FatOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._partials;\n\t        },\n\t        set: function (partials) {\n\t            this._partials = partials;\n\t            this._type = Tone.Oscillator.Type.Custom;\n\t            this._forEach(function (osc) {\n\t                osc.partials = partials;\n\t            });\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.FatOscillator} this\n\t\t */\n\t    Tone.FatOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this._forEach(function (osc) {\n\t            osc.dispose();\n\t        });\n\t        this._oscillators = null;\n\t        this._partials = null;\n\t        return this;\n\t    };\n\t    return Tone.FatOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,\n\t\t *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator\n\t\t *         into one class. The oscillator class can be changed by setting the `type`. \n\t\t *         `omniOsc.type = \"pwm\"` will set it to the Tone.PWMOscillator. Prefixing\n\t\t *         any of the basic types (\"sine\", \"square4\", etc.) with \"fm\", \"am\", or \"fat\"\n\t\t *         will use the FMOscillator, AMOscillator or FatOscillator respectively. \n\t\t *         For example: `omniOsc.type = \"fatsawtooth\"` will create set the oscillator\n\t\t *         to a FatOscillator of type \"sawtooth\". \n\t\t *\n\t\t *  @extends {Tone.Oscillator}\n\t\t *  @constructor\n\t\t *  @param {Frequency} frequency The initial frequency of the oscillator.\n\t\t *  @param {String} type The type of the oscillator.\n\t\t *  @example\n\t\t *  var omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\");\n\t\t */\n\t    Tone.OmniOscillator = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'frequency',\n\t            'type'\n\t        ], Tone.OmniOscillator.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune control\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  the type of the oscillator source\n\t\t\t *  @type {String}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sourceType = undefined;\n\t        /**\n\t\t\t *  the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillator = null;\n\t        //set the oscillator\n\t        this.type = options.type;\n\t        this._readOnly([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        //set the options\n\t        this.set(options);\n\t    };\n\t    Tone.extend(Tone.OmniOscillator, Tone.Oscillator);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t *  @const\n\t\t */\n\t    Tone.OmniOscillator.defaults = {\n\t        'frequency': 440,\n\t        'detune': 0,\n\t        'type': 'sine',\n\t        'phase': 0\n\t    };\n\t    /**\n\t\t *  @enum {String}\n\t\t *  @private\n\t\t */\n\t    var OmniOscType = {\n\t        Pulse: 'PulseOscillator',\n\t        PWM: 'PWMOscillator',\n\t        Osc: 'Oscillator',\n\t        FM: 'FMOscillator',\n\t        AM: 'AMOscillator',\n\t        Fat: 'FatOscillator'\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._start = function (time) {\n\t        this._oscillator.start(time);\n\t    };\n\t    /**\n\t\t *  start the oscillator\n\t\t *  @param {Time} [time=now] the time to start the oscillator\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._stop = function (time) {\n\t        this._oscillator.stop(time);\n\t    };\n\t    /**\n\t\t * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n\t\t * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n\t\t * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n\t\t * oscillator's class are accessible when the oscillator is set to that type, but throws an error \n\t\t * when it's not.\n\t\t * \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name type\n\t\t * @example\n\t\t * omniOsc.type = \"pwm\";\n\t\t * //modulationFrequency is parameter which is available\n\t\t * //only when the type is \"pwm\". \n\t\t * omniOsc.modulationFrequency.value = 0.5;\n\t\t * @example\n\t\t * //an square wave frequency modulated by a sawtooth\n\t\t * omniOsc.type = \"fmsquare\";\n\t\t * omniOsc.modulationType = \"sawtooth\";\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {\n\t        get: function () {\n\t            var prefix = '';\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                prefix = 'fm';\n\t            } else if (this._sourceType === OmniOscType.AM) {\n\t                prefix = 'am';\n\t            } else if (this._sourceType === OmniOscType.Fat) {\n\t                prefix = 'fat';\n\t            }\n\t            return prefix + this._oscillator.type;\n\t        },\n\t        set: function (type) {\n\t            if (type.substr(0, 2) === 'fm') {\n\t                this._createNewOscillator(OmniOscType.FM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 2) === 'am') {\n\t                this._createNewOscillator(OmniOscType.AM);\n\t                this._oscillator.type = type.substr(2);\n\t            } else if (type.substr(0, 3) === 'fat') {\n\t                this._createNewOscillator(OmniOscType.Fat);\n\t                this._oscillator.type = type.substr(3);\n\t            } else if (type === 'pwm') {\n\t                this._createNewOscillator(OmniOscType.PWM);\n\t            } else if (type === 'pulse') {\n\t                this._createNewOscillator(OmniOscType.Pulse);\n\t            } else {\n\t                this._createNewOscillator(OmniOscType.Osc);\n\t                this._oscillator.type = type;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The partials of the waveform. A partial represents \n\t\t * the amplitude at a harmonic. The first harmonic is the \n\t\t * fundamental frequency, the second is the octave and so on\n\t\t * following the harmonic series. \n\t\t * Setting this value will automatically set the type to \"custom\". \n\t\t * The value is an empty array when the type is not \"custom\". \n\t\t * This is not available on \"pwm\" and \"pulse\" oscillator types.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Array}\n\t\t * @name partials\n\t\t * @example\n\t\t * osc.partials = [1, 0.2, 0.01];\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {\n\t        get: function () {\n\t            return this._oscillator.partials;\n\t        },\n\t        set: function (partials) {\n\t            this._oscillator.partials = partials;\n\t        }\n\t    });\n\t    /**\n\t\t *  Set a member/attribute of the oscillator. \n\t\t *  @param {Object|String} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.set = function (params, value) {\n\t        //make sure the type is set first\n\t        if (params === 'type') {\n\t            this.type = value;\n\t        } else if (this.isObject(params) && params.hasOwnProperty('type')) {\n\t            this.type = params.type;\n\t        }\n\t        //then set the rest\n\t        Tone.prototype.set.apply(this, arguments);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  connect the oscillator to the frequency and detune signals\n\t\t *  @private\n\t\t */\n\t    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {\n\t        if (oscType !== this._sourceType) {\n\t            this._sourceType = oscType;\n\t            var OscillatorConstructor = Tone[oscType];\n\t            //short delay to avoid clicks on the change\n\t            var now = this.now() + this.blockTime;\n\t            if (this._oscillator !== null) {\n\t                var oldOsc = this._oscillator;\n\t                oldOsc.stop(now);\n\t                //dispose the old one\n\t                setTimeout(function () {\n\t                    oldOsc.dispose();\n\t                    oldOsc = null;\n\t                }, this.blockTime * 1000);\n\t            }\n\t            this._oscillator = new OscillatorConstructor();\n\t            this.frequency.connect(this._oscillator.frequency);\n\t            this.detune.connect(this._oscillator.detune);\n\t            this._oscillator.connect(this.output);\n\t            if (this.state === Tone.State.Started) {\n\t                this._oscillator.start(now);\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t * The phase of the oscillator in degrees. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Degrees}\n\t\t * @name phase\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {\n\t        get: function () {\n\t            return this._oscillator.phase;\n\t        },\n\t        set: function (phase) {\n\t            this._oscillator.phase = phase;\n\t        }\n\t    });\n\t    /**\n\t\t * The width of the oscillator (only if the oscillator is set to \"pulse\")\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {NormalRange}\n\t\t * @signal\n\t\t * @name width\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pulse\");\n\t\t * //can access the width attribute only if type === \"pulse\"\n\t\t * omniOsc.width.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Pulse) {\n\t                return this._oscillator.width;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The number of detuned oscillators\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Number}\n\t\t * @name count\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.count;\n\t            }\n\t        },\n\t        set: function (count) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.count = count;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The detune spread between the oscillators. If \"count\" is\n\t\t * set to 3 oscillators and the \"spread\" is set to 40,\n\t\t * the three oscillators would be detuned like this: [-20, 0, 20]\n\t\t * for a total detune spread of 40 cents. See Tone.FatOscillator\n\t\t * for more info.\n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Cents}\n\t\t * @name spread\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                return this._oscillator.spread;\n\t            }\n\t        },\n\t        set: function (spread) {\n\t            if (this._sourceType === OmniOscType.Fat) {\n\t                this._oscillator.spread = spread;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The type of the modulator oscillator. Only if the oscillator\n\t\t * is set to \"am\" or \"fm\" types. see. Tone.AMOscillator or Tone.FMOscillator\n\t\t * for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {String}\n\t\t * @name modulationType\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.modulationType;\n\t            }\n\t        },\n\t        set: function (mType) {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                this._oscillator.modulationType = mType;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the \n\t\t * ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t * modulating signal (ma) -- as in ma/mf. \n\t\t * See Tone.FMOscillator for more info. \n\t\t * @type {Positive}\n\t\t * @signal\n\t\t * @name modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM) {\n\t                return this._oscillator.modulationIndex;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators. \n\t\t *  A harmonicity of 1 gives both oscillators the same frequency. \n\t\t *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator\n\t\t *  for more info. \n\t\t *  @memberOf Tone.OmniOscillator#\n\t\t *  @signal\n\t\t *  @type {Positive}\n\t\t *  @name harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {\n\t                return this._oscillator.harmonicity;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The modulationFrequency Signal of the oscillator \n\t\t * (only if the oscillator type is set to pwm). See \n\t\t * Tone.PWMOscillator for more info. \n\t\t * @memberOf Tone.OmniOscillator#\n\t\t * @type {Frequency}\n\t\t * @signal\n\t\t * @name modulationFrequency\n\t\t * @example\n\t\t * var omniOsc = new Tone.OmniOscillator(440, \"pwm\");\n\t\t * //can access the modulationFrequency attribute only if type === \"pwm\"\n\t\t * omniOsc.modulationFrequency.value = 0.2; \n\t\t */\n\t    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {\n\t        get: function () {\n\t            if (this._sourceType === OmniOscType.PWM) {\n\t                return this._oscillator.modulationFrequency;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return {Tone.OmniOscillator} this\n\t\t */\n\t    Tone.OmniOscillator.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'detune'\n\t        ]);\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._oscillator.dispose();\n\t        this._oscillator = null;\n\t        this._sourceType = null;\n\t        return this;\n\t    };\n\t    return Tone.OmniOscillator;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Base-class for all instruments\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t */\n\t    Tone.Instrument = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        /**\n\t\t\t *  The output and volume triming node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t    };\n\t    Tone.extend(Tone.Instrument);\n\t    /**\n\t\t *  the default attributes\n\t\t *  @type {object}\n\t\t */\n\t    Tone.Instrument.defaults = {\n\t        /** the volume of the output in decibels */\n\t        'volume': 0\n\t    };\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {string|number} note the note to trigger\n\t\t *  @param {Time} [time=now] the time to trigger the ntoe\n\t\t *  @param {number} [velocity=1] the velocity to trigger the note\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttack = Tone.noOp;\n\t    /**\n\t\t *  @abstract\n\t\t *  @param {Time} [time=now] when to trigger the release\n\t\t */\n\t    Tone.Instrument.prototype.triggerRelease = Tone.noOp;\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release. This value must be greater than 0. \n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Instrument} this\n\t\t *  @example\n\t\t * //trigger \"C4\" for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(note, time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Instrument} this\n\t\t */\n\t    Tone.Instrument.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable(['volume']);\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    return Tone.Instrument;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  This is an abstract base class for other monophonic instruments to \n\t\t *          extend. IMPORTANT: It does not make any sound on its own and\n\t\t *          shouldn't be directly instantiated.\n\t\t *\n\t\t *  @constructor\n\t\t *  @abstract\n\t\t *  @extends {Tone.Instrument}\n\t\t */\n\t    Tone.Monophonic = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Monophonic.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The glide time between notes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.portamento = options.portamento;\n\t    };\n\t    Tone.extend(Tone.Monophonic, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Monophonic.defaults = { 'portamento': 0 };\n\t    /**\n\t\t *  Trigger the attack of the note optionally with a given velocity. \n\t\t *  \n\t\t *  \n\t\t *  @param  {Frequency} note     The note to trigger.\n\t\t *  @param  {Time} [time=now]     When the note should start.\n\t\t *  @param  {number} [velocity=1] velocity The velocity scaler \n\t\t *                                determines how \"loud\" the note \n\t\t *                                will be triggered.\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerAttack(\"C4\");\n\t\t *  @example\n\t\t * //trigger the note a half second from now at half velocity\n\t\t * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n\t\t */\n\t    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeAttack(time, velocity);\n\t        this.setNote(note, time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the envelope\n\t\t *  @param  {Time} [time=now] If no time is given, the release happens immediatly\n\t\t *  @returns {Tone.Monophonic} this\n\t\t *  @example\n\t\t * synth.triggerRelease();\n\t\t */\n\t    Tone.Monophonic.prototype.triggerRelease = function (time) {\n\t        if (this.isUndef(time)) {\n\t            time = this.now() + this.blockTime;\n\t        } else {\n\t            time = this.toSeconds(time);\n\t        }\n\t        this._triggerEnvelopeRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {\n\t    };\n\t    /**\n\t\t *  override this method with the actual method\n\t\t *  @abstract\n\t\t *  @private\n\t\t */\n\t    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {\n\t    };\n\t    /**\n\t\t *  Set the note at the given time. If no time is given, the note\n\t\t *  will set immediately. \n\t\t *  @param {Frequency} note The note to change to.\n\t\t *  @param  {Time} [time=now] The time when the note should be set. \n\t\t *  @returns {Tone.Monophonic} this\n\t\t * @example\n\t\t * //change to F#6 in one quarter note from now.\n\t\t * synth.setNote(\"F#6\", \"+4n\");\n\t\t * @example\n\t\t * //change to Bb4 right now\n\t\t * synth.setNote(\"Bb4\");\n\t\t */\n\t    Tone.Monophonic.prototype.setNote = function (note, time) {\n\t        time = this.toSeconds(time);\n\t        if (this.portamento > 0) {\n\t            var currentNote = this.frequency.value;\n\t            this.frequency.setValueAtTime(currentNote, time);\n\t            var portTime = this.toSeconds(this.portamento);\n\t            this.frequency.exponentialRampToValueAtTime(note, time + portTime);\n\t        } else {\n\t            this.frequency.setValueAtTime(note, time);\n\t        }\n\t        return this;\n\t    };\n\t    return Tone.Monophonic;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator\n\t\t *          routed through a Tone.AmplitudeEnvelope. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.Synth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.Synth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.Synth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.Synth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Synth.defaults = {\n\t        'oscillator': { 'type': 'triangle' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.3,\n\t            'release': 1\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.Synth} this\n\t\t *  @private\n\t\t */\n\t    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Synth} this\n\t\t */\n\t    Tone.Synth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.Synth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  AMSynth uses the output of one Tone.Synth to modulate the\n\t\t *          amplitude of another Tone.Synth. The harmonicity (the ratio between\n\t\t *          the two signals) affects the timbre of the output signal greatly.\n\t\t *          Read more about Amplitude Modulation Synthesis on \n\t\t *          [SoundOnSound](http://www.soundonsound.com/sos/mar00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                            see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.AMSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"4n\");\n\t\t */\n\t    Tone.AMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.AMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth();\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice. \n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth();\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  convert the -1,1 output to 0,1\n\t\t\t *  @type {Tone.AudioToGain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationScale = new Tone.AudioToGain();\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain();\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n\t        this._carrier.chain(this._modulationNode, this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.AMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.AMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t *  trigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the port glide\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @private\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.AMSynth} this\n\t\t */\n\t    Tone.AMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationScale.dispose();\n\t        this._modulationScale = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.AMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.\n\t\t *          The amplitude of the Tone.Oscillator and the cutoff frequency of the \n\t\t *          Tone.Filter are controlled by Tone.Envelopes. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240\">\n\t\t *          \n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MonoSynth({\n\t\t * \t\"oscillator\" : {\n\t\t * \t\t\"type\" : \"square\"\n\t\t *  },\n\t\t *  \"envelope\" : {\n\t\t *  \t\"attack\" : 0.1\n\t\t *  }\n\t\t * }).toMaster();\n\t\t * synth.triggerAttackRelease(\"C4\", \"8n\");\n\t\t */\n\t    Tone.MonoSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.MonoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = this.oscillator.frequency;\n\t        /**\n\t\t\t *  The detune control.\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = this.oscillator.detune;\n\t        /**\n\t\t\t *  The filter.\n\t\t\t *  @type {Tone.Filter}\n\t\t\t */\n\t        this.filter = new Tone.Filter(options.filter);\n\t        /**\n\t\t\t *  The filter envelope.\n\t\t\t *  @type {Tone.FrequencyEnvelope}\n\t\t\t */\n\t        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the oscillators to the output\n\t        this.oscillator.chain(this.filter, this.envelope, this.output);\n\t        //start the oscillators\n\t        this.oscillator.start();\n\t        //connect the filter envelope\n\t        this.filterEnvelope.connect(this.filter.frequency);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MonoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MonoSynth.defaults = {\n\t        'frequency': 'C4',\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'square' },\n\t        'filter': {\n\t            'Q': 6,\n\t            'type': 'lowpass',\n\t            'rolloff': -24\n\t        },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0.9,\n\t            'release': 1\n\t        },\n\t        'filterEnvelope': {\n\t            'attack': 0.06,\n\t            'decay': 0.2,\n\t            'sustain': 0.5,\n\t            'release': 2,\n\t            'baseFrequency': 200,\n\t            'octaves': 7,\n\t            'exponent': 2\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelope\n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelope\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        this.filterEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.MonoSynth} this\n\t\t */\n\t    Tone.MonoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'frequency',\n\t            'detune',\n\t            'filter',\n\t            'filterEnvelope',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this.filterEnvelope.dispose();\n\t        this.filterEnvelope = null;\n\t        this.filter.dispose();\n\t        this.filter = null;\n\t        this.frequency = null;\n\t        this.detune = null;\n\t        return this;\n\t    };\n\t    return Tone.MonoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.DuoSynth is a monophonic synth composed of two \n\t\t *          MonoSynths run in parallel with control over the \n\t\t *          frequency ratio between the two voices and vibrato effect.\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var duoSynth = new Tone.DuoSynth().toMaster();\n\t\t * duoSynth.triggerAttackRelease(\"C4\", \"2n\");\n\t\t */\n\t    Tone.DuoSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.DuoSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  the first voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice0 = new Tone.MonoSynth(options.voice0);\n\t        this.voice0.volume.value = -10;\n\t        /**\n\t\t\t *  the second voice\n\t\t\t *  @type {Tone.MonoSynth}\n\t\t\t */\n\t        this.voice1 = new Tone.MonoSynth(options.voice1);\n\t        this.voice1.volume.value = -10;\n\t        /**\n\t\t\t *  The vibrato LFO. \n\t\t\t *  @type {Tone.LFO}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);\n\t        this._vibrato.start();\n\t        /**\n\t\t\t * the vibrato frequency\n\t\t\t * @type {Frequency}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoRate = this._vibrato.frequency;\n\t        /**\n\t\t\t *  the vibrato gain\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);\n\t        /**\n\t\t\t * The amount of vibrato\n\t\t\t * @type {Positive}\n\t\t\t * @signal\n\t\t\t */\n\t        this.vibratoAmount = this._vibratoGain.gain;\n\t        /**\n\t\t\t *  the frequency control\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * duoSynth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        //control the two voices frequency\n\t        this.frequency.connect(this.voice0.frequency);\n\t        this.frequency.chain(this.harmonicity, this.voice1.frequency);\n\t        this._vibrato.connect(this._vibratoGain);\n\t        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);\n\t        this.voice0.connect(this.output);\n\t        this.voice1.connect(this.output);\n\t        this._readOnly([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.DuoSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.DuoSynth.defaults = {\n\t        'vibratoAmount': 0.5,\n\t        'vibratoRate': 5,\n\t        'harmonicity': 1.5,\n\t        'voice0': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        },\n\t        'voice1': {\n\t            'volume': -10,\n\t            'portamento': 0,\n\t            'oscillator': { 'type': 'sine' },\n\t            'filterEnvelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            },\n\t            'envelope': {\n\t                'attack': 0.01,\n\t                'decay': 0,\n\t                'sustain': 1,\n\t                'release': 0.5\n\t            }\n\t        }\n\t    };\n\t    /**\n\t\t *  start the attack portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.voice0.envelope.triggerAttack(time, velocity);\n\t        this.voice1.envelope.triggerAttack(time, velocity);\n\t        this.voice0.filterEnvelope.triggerAttack(time);\n\t        this.voice1.filterEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  start the release portion of the envelopes\n\t\t *  \n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        this.voice0.triggerRelease(time);\n\t        this.voice1.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.DuoSynth} this\n\t\t */\n\t    Tone.DuoSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'voice0',\n\t            'voice1',\n\t            'frequency',\n\t            'vibratoAmount',\n\t            'vibratoRate'\n\t        ]);\n\t        this.voice0.dispose();\n\t        this.voice0 = null;\n\t        this.voice1.dispose();\n\t        this.voice1 = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._vibratoGain.dispose();\n\t        this._vibratoGain = null;\n\t        this._vibrato = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this.vibratoAmount.dispose();\n\t        this.vibratoAmount = null;\n\t        this.vibratoRate = null;\n\t        return this;\n\t    };\n\t    return Tone.DuoSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates\n\t\t *          the frequency of a second Tone.Synth. A lot of spectral content \n\t\t *          can be explored using the modulationIndex parameter. Read more about\n\t\t *          frequency modulation synthesis on [SoundOnSound](http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm).\n\t\t *          <img src=\"https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Monophonic}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var fmSynth = new Tone.FMSynth().toMaster();\n\t\t * fmSynth.triggerAttackRelease(\"C5\", \"4n\");\n\t\t */\n\t    Tone.FMSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.FMSynth.defaults);\n\t        Tone.Monophonic.call(this, options);\n\t        /**\n\t\t\t *  The carrier voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._carrier = new Tone.Synth(options.carrier);\n\t        this._carrier.volume.value = -10;\n\t        /**\n\t\t\t *  The carrier's oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.oscillator = this._carrier.oscillator;\n\t        /**\n\t\t\t *  The carrier's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.envelope = this._carrier.envelope.set(options.envelope);\n\t        /**\n\t\t\t *  The modulator voice.\n\t\t\t *  @type {Tone.Synth}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulator = new Tone.Synth(options.modulator);\n\t        this._modulator.volume.value = -10;\n\t        /**\n\t\t\t *  The modulator's oscillator which is applied\n\t\t\t *  to the amplitude of the oscillator\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulation = this._modulator.oscillator.set(options.modulation);\n\t        /**\n\t\t\t *  The modulator's envelope\n\t\t\t *  @type {Tone.Oscillator}\n\t\t\t */\n\t        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);\n\t        /**\n\t\t\t *  The frequency control.\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        /**\n\t\t\t *  Harmonicity is the ratio between the two voices. A harmonicity of\n\t\t\t *  1 is no change. Harmonicity = 2 means a change of an octave. \n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t *  @example\n\t\t\t * //pitch voice1 an octave below voice0\n\t\t\t * synth.harmonicity.value = 0.5;\n\t\t\t */\n\t        this.harmonicity = new Tone.Multiply(options.harmonicity);\n\t        this.harmonicity.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  The modulation index which essentially the depth or amount of the modulation. It is the \n\t\t\t *  ratio of the frequency of the modulating signal (mf) to the amplitude of the \n\t\t\t *  modulating signal (ma) -- as in ma/mf. \n\t\t\t *\t@type {Positive}\n\t\t\t *\t@signal\n\t\t\t */\n\t        this.modulationIndex = new Tone.Multiply(options.modulationIndex);\n\t        this.modulationIndex.units = Tone.Type.Positive;\n\t        /**\n\t\t\t *  the node where the modulation happens\n\t\t\t *  @type {GainNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._modulationNode = new Tone.Gain(0);\n\t        //control the two voices frequency\n\t        this.frequency.connect(this._carrier.frequency);\n\t        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n\t        this.frequency.chain(this.modulationIndex, this._modulationNode);\n\t        this.detune.fan(this._carrier.detune, this._modulator.detune);\n\t        this._modulator.connect(this._modulationNode.gain);\n\t        this._modulationNode.connect(this._carrier.frequency);\n\t        this._carrier.connect(this.output);\n\t        this._readOnly([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.FMSynth, Tone.Monophonic);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.FMSynth.defaults = {\n\t        'harmonicity': 3,\n\t        'modulationIndex': 10,\n\t        'detune': 0,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.01,\n\t            'decay': 0.01,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        },\n\t        'modulation': { 'type': 'square' },\n\t        'modulationEnvelope': {\n\t            'attack': 0.5,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.5\n\t        }\n\t    };\n\t    /**\n\t\t * \ttrigger the attack portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will occur\n\t\t *  @param {number} [velocity=1] the velocity of the note\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {\n\t        time = this.toSeconds(time);\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        this.modulationEnvelope.triggerAttack(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  trigger the release portion of the note\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.FMSynth} this\n\t\t *  @private\n\t\t */\n\t    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.modulationEnvelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.FMSynth} this\n\t\t */\n\t    Tone.FMSynth.prototype.dispose = function () {\n\t        Tone.Monophonic.prototype.dispose.call(this);\n\t        this._writable([\n\t            'frequency',\n\t            'harmonicity',\n\t            'modulationIndex',\n\t            'oscillator',\n\t            'envelope',\n\t            'modulation',\n\t            'modulationEnvelope',\n\t            'detune'\n\t        ]);\n\t        this._carrier.dispose();\n\t        this._carrier = null;\n\t        this._modulator.dispose();\n\t        this._modulator = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.modulationIndex.dispose();\n\t        this.modulationIndex = null;\n\t        this.harmonicity.dispose();\n\t        this.harmonicity = null;\n\t        this._modulationNode.dispose();\n\t        this._modulationNode = null;\n\t        this.oscillator = null;\n\t        this.envelope = null;\n\t        this.modulationEnvelope = null;\n\t        this.modulation = null;\n\t        return this;\n\t    };\n\t    return Tone.FMSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator\n\t\t *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n\t\t *          is routed through a Tone.AmplitudeEnvelope to the output. The drum\n\t\t *          quality of the sound comes from the frequency envelope applied\n\t\t *          during during Tone.MembraneSynth.triggerAttack(note). The frequency\n\t\t *          envelope starts at <code>note * .octaves</code> and ramps to \n\t\t *          <code>note</code> over the duration of <code>.pitchDecay</code>. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t *  @example\n\t\t * var synth = new Tone.MembraneSynth().toMaster();\n\t\t * synth.triggerAttackRelease(\"C2\", \"8n\");\n\t\t */\n\t    Tone.MembraneSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MembraneSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The oscillator.\n\t\t\t *  @type {Tone.OmniOscillator}\n\t\t\t */\n\t        this.oscillator = new Tone.OmniOscillator(options.oscillator).start();\n\t        /**\n\t\t\t *  The amplitude envelope.\n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        /**\n\t\t\t *  The number of octaves the pitch envelope ramps.\n\t\t\t *  @type {Positive}\n\t\t\t */\n\t        this.octaves = options.octaves;\n\t        /**\n\t\t\t *  The amount of time the frequency envelope takes. \n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.pitchDecay = options.pitchDecay;\n\t        this.oscillator.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.MembraneSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MembraneSynth.defaults = {\n\t        'pitchDecay': 0.05,\n\t        'octaves': 10,\n\t        'oscillator': { 'type': 'sine' },\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0.4,\n\t            'sustain': 0.01,\n\t            'release': 1.4,\n\t            'attackCurve': 'exponential'\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the note at the given time with the given velocity. \n\t\t *  \n\t\t *  @param  {Frequency} note     the note\n\t\t *  @param  {Time} [time=now]     the time, if not given is now\n\t\t *  @param  {number} [velocity=1] velocity defaults to 1\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t *  @example\n\t\t *  kick.triggerAttack(60);\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        note = this.toFrequency(note);\n\t        var maxNote = note * this.octaves;\n\t        this.oscillator.frequency.setValueAtTime(maxNote, time);\n\t        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of the note.\n\t\t *  \n\t\t *  @param  {Time} [time=now] the time the note will release\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.MembraneSynth} this\n\t\t */\n\t    Tone.MembraneSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'oscillator',\n\t            'envelope'\n\t        ]);\n\t        this.oscillator.dispose();\n\t        this.oscillator = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.MembraneSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  Inharmonic ratio of frequencies based on the Roland TR-808\n\t\t *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model\n\t\t *  @private\n\t\t *  @static\n\t\t *  @type {Array}\n\t\t */\n\t    var inharmRatios = [\n\t        1,\n\t        1.483,\n\t        1.932,\n\t        2.546,\n\t        2.63,\n\t        3.897\n\t    ];\n\t    /**\n\t\t *  @class  A highly inharmonic and spectrally complex source with a highpass filter\n\t\t *          and amplitude envelope which is good for making metalophone sounds. Based\n\t\t *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).\n\t\t *          Inspiration from [Sound on Sound](http://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] The options availble for the synth\n\t\t *                             see defaults below\n\t\t */\n\t    Tone.MetalSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.MetalSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The frequency of the cymbal\n\t\t\t *  @type  {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);\n\t        /**\n\t\t\t *  The array of FMOscillators\n\t\t\t *  @type  {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._oscillators = [];\n\t        /**\n\t\t\t *  The frequency multipliers\n\t\t\t *  @type {Array}\n\t\t\t *  @private\n\t\t\t */\n\t        this._freqMultipliers = [];\n\t        /**\n\t\t\t *  The amplitude for the body\n\t\t\t *  @type {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._amplitue = new Tone.Gain(0).connect(this.output);\n\t        /**\n\t\t\t *  highpass the output\n\t\t\t *  @type {Tone.Filter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._highpass = new Tone.Filter({\n\t            'type': 'highpass',\n\t            'Q': -3.0102999566398125\n\t        }).connect(this._amplitue);\n\t        /**\n\t\t\t *  The number of octaves the highpass\n\t\t\t *  filter frequency ramps\n\t\t\t *  @type {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._octaves = options.octaves;\n\t        /**\n\t\t\t *  Scale the body envelope\n\t\t\t *  for the bandpass\n\t\t\t *  @type {Tone.Scale}\n\t\t\t *  @private\n\t\t\t */\n\t        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);\n\t        /**\n\t\t\t *  The envelope which is connected both to the \n\t\t\t *  amplitude and highpass filter's cutoff frequency\n\t\t\t *  @type  {Tone.Envelope}\n\t\t\t */\n\t        this.envelope = new Tone.Envelope({\n\t            'attack': options.envelope.attack,\n\t            'attackCurve': 'linear',\n\t            'decay': options.envelope.decay,\n\t            'sustain': 0,\n\t            'release': options.envelope.release\n\t        }).chain(this._filterFreqScaler, this._highpass.frequency);\n\t        this.envelope.connect(this._amplitue.gain);\n\t        for (var i = 0; i < inharmRatios.length; i++) {\n\t            var osc = new Tone.FMOscillator({\n\t                'type': 'square',\n\t                'modulationType': 'square',\n\t                'harmonicity': options.harmonicity,\n\t                'modulationIndex': options.modulationIndex\n\t            });\n\t            osc.connect(this._highpass).start(0);\n\t            this._oscillators[i] = osc;\n\t            var mult = new Tone.Multiply(inharmRatios[i]);\n\t            this._freqMultipliers[i] = mult;\n\t            this.frequency.chain(mult, osc.frequency);\n\t        }\n\t        //set the octaves\n\t        this.octaves = options.octaves;\n\t    };\n\t    Tone.extend(Tone.MetalSynth, Tone.Instrument);\n\t    /**\n\t\t *  default values\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.MetalSynth.defaults = {\n\t        'frequency': 200,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 1.4,\n\t            'release': 0.2\n\t        },\n\t        'harmonicity': 5.1,\n\t        'modulationIndex': 32,\n\t        'resonance': 4000,\n\t        'octaves': 1.5\n\t    };\n\t    /**\n\t\t *  Trigger the attack.\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {\n\t        time = this.toSeconds(time);\n\t        vel = this.defaultArg(vel, 1);\n\t        this.envelope.triggerAttack(time, vel);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the envelope.\n\t\t *  @param  {Time}  time      When the release should be triggered.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release of the envelope after the given \n\t\t *  duration. \n\t\t *  @param  {Time}  duration  The duration before triggering the release\n\t\t *  @param  {Time}  time      When the attack should be triggered.\n\t\t *  @param  {NormalRange=1}  velocity  The velocity that the envelope should be triggered at.\n\t\t *  @return  {Tone.MetalSynth}  this\n\t\t */\n\t    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The modulationIndex of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.modulationIndex\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  modulationIndex\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {\n\t        get: function () {\n\t            return this._oscillators[0].modulationIndex.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].modulationIndex.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The harmonicity of the oscillators which make up the source.\n\t\t *  see Tone.FMOscillator.harmonicity\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Positive}\n\t\t *  @name  harmonicity\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {\n\t        get: function () {\n\t            return this._oscillators[0].harmonicity.value;\n\t        },\n\t        set: function (val) {\n\t            for (var i = 0; i < this._oscillators.length; i++) {\n\t                this._oscillators[i].harmonicity.value = val;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The frequency of the highpass filter attached to the envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Frequency}\n\t\t *  @name  resonance\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {\n\t        get: function () {\n\t            return this._filterFreqScaler.min;\n\t        },\n\t        set: function (val) {\n\t            this._filterFreqScaler.min = val;\n\t            this.octaves = this._octaves;\n\t        }\n\t    });\n\t    /**\n\t\t *  The number of octaves above the \"resonance\" frequency\n\t\t *  that the filter ramps during the attack/decay envelope\n\t\t *  @memberOf Tone.MetalSynth#\n\t\t *  @type {Number}\n\t\t *  @name  octaves\n\t\t */\n\t    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {\n\t        get: function () {\n\t            return this._octaves;\n\t        },\n\t        set: function (octs) {\n\t            this._octaves = octs;\n\t            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up\n\t\t *  @returns {Tone.MetalSynth} this\n\t\t */\n\t    Tone.MetalSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this._oscillators.length; i++) {\n\t            this._oscillators[i].dispose();\n\t            this._freqMultipliers[i].dispose();\n\t        }\n\t        this._oscillators = null;\n\t        this._freqMultipliers = null;\n\t        this.frequency.dispose();\n\t        this.frequency = null;\n\t        this._filterFreqScaler.dispose();\n\t        this._filterFreqScaler = null;\n\t        this._amplitue.dispose();\n\t        this._amplitue = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        this._highpass.dispose();\n\t        this._highpass = null;\n\t    };\n\t    return Tone.MetalSynth;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  BufferSource polyfill\n\t\t */\n\t    if (window.AudioBufferSourceNode && !AudioBufferSourceNode.prototype.start) {\n\t        AudioBufferSourceNode.prototype.start = AudioBufferSourceNode.prototype.noteGrainOn;\n\t        AudioBufferSourceNode.prototype.stop = AudioBufferSourceNode.prototype.noteOff;\n\t    }\n\t    /**\n\t\t *  @class Wrapper around the native BufferSourceNode.\n\t\t *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play\n\t\t *  @param  {Function}  onended  The callback to invoke when the \n\t\t *                               buffer is done playing.\n\t\t */\n\t    Tone.BufferSource = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'buffer',\n\t            'onended'\n\t        ], Tone.BufferSource.defaults);\n\t        /**\n\t\t\t *  The callback to invoke after the \n\t\t\t *  buffer source is done playing. \n\t\t\t *  @type  {Function}\n\t\t\t */\n\t        this.onended = options.onended;\n\t        /**\n\t\t\t *  The time that the buffer was started.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._startTime = -1;\n\t        /**\n\t\t\t *  The time that the buffer is scheduled to stop.\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stopTime = -1;\n\t        /**\n\t\t\t *  The gain node which envelopes the BufferSource\n\t\t\t *  @type  {Tone.Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gainNode = this.output = new Tone.Gain();\n\t        /**\n\t\t\t *  The buffer source\n\t\t\t *  @type  {AudioBufferSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._source = this.context.createBufferSource();\n\t        this._source.connect(this._gainNode);\n\t        /**\n\t\t\t *  The playbackRate of the buffer\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);\n\t        /**\n\t\t\t *  The fadeIn time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fadeOut time of the amplitude envelope.\n\t\t\t *  @type {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The value that the buffer ramps to\n\t\t\t *  @type {Gain}\n\t\t\t *  @private\n\t\t\t */\n\t        this._gain = 1;\n\t        /**\n\t\t\t * The onended timeout\n\t\t\t * @type {Number}\n\t\t\t * @private\n\t\t\t */\n\t        this._onendedTimeout = -1;\n\t        //set the buffer initially\n\t        if (!this.isUndef(options.buffer)) {\n\t            this.buffer = options.buffer;\n\t        }\n\t        this.loop = options.loop;\n\t    };\n\t    Tone.extend(Tone.BufferSource);\n\t    /**\n\t\t *  The defaults\n\t\t *  @const\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.BufferSource.defaults = {\n\t        'onended': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, either \"started\" or \"stopped\".\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.BufferSource#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'state', {\n\t        get: function () {\n\t            var now = this.now();\n\t            if (this._startTime !== -1 && now >= this._startTime && now < this._stopTime) {\n\t                return Tone.State.Started;\n\t            } else {\n\t                return Tone.State.Stopped;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  Start the buffer\n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.\n\t\t *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {\n\t        if (this._startTime !== -1) {\n\t            throw new Error('Tone.BufferSource: can only be started once.');\n\t        }\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this.loop) {\n\t                offset = this.defaultArg(offset, this.loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //the values in seconds\n\t            time = this.toSeconds(time);\n\t            this._source.start(time, offset);\n\t            gain = this.defaultArg(gain, 1);\n\t            this._gain = gain;\n\t            //the fadeIn time\n\t            if (this.isUndef(fadeInTime)) {\n\t                fadeInTime = this.toSeconds(this.fadeIn);\n\t            } else {\n\t                fadeInTime = this.toSeconds(fadeInTime);\n\t            }\n\t            if (fadeInTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(gain, time);\n\t            }\n\t            this._startTime = time + fadeInTime;\n\t            if (!this.isUndef(duration)) {\n\t                duration = this.defaultArg(duration, this.buffer.duration - offset);\n\t                duration = this.toSeconds(duration);\n\t                this.stop(time + duration + fadeInTime, fadeInTime);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the buffer. Optionally add a ramp time to fade the \n\t\t *  buffer out. \n\t\t *  @param  {Time=}  time         The time the buffer should stop.\n\t\t *  @param  {Time=}  fadeOutTime  How long the gain should fade out for\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {\n\t        if (this.buffer) {\n\t            time = this.toSeconds(time);\n\t            //the fadeOut time\n\t            if (this.isUndef(fadeOutTime)) {\n\t                fadeOutTime = this.toSeconds(this.fadeOut);\n\t            } else {\n\t                fadeOutTime = this.toSeconds(fadeOutTime);\n\t            }\n\t            this._stopTime = time + fadeOutTime;\n\t            //cancel the end curve\n\t            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n\t            //set a new one\n\t            if (fadeOutTime > 0) {\n\t                this._gainNode.gain.setValueAtTime(this._gain, time);\n\t                this._gainNode.gain.linearRampToValueAtTime(0, time + fadeOutTime);\n\t                time += fadeOutTime;\n\t            } else {\n\t                this._gainNode.gain.setValueAtTime(0, time);\n\t            }\n\t            // fix for safari bug and old FF\n\t            if (!this.isNumber(this._source.playbackState) || this._source.playbackState === 2) {\n\t                this._source.stop(time);\n\t            }\n\t            clearTimeout(this._onendedTimeout);\n\t            this._onendedTimeout = setTimeout(this._onended.bind(this), (this._stopTime - this.now()) * 1000);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Internal callback when the buffer is ended. \n\t\t *  Invokes `onended` and disposes the node.\n\t\t *  @private\n\t\t */\n\t    Tone.BufferSource.prototype._onended = function () {\n\t        this.onended(this);\n\t        this.dispose();\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._source.loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._source.loopStart = this.toSeconds(loopStart);\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._source.loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._source.loopEnd = this.toSeconds(loopEnd);\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {AudioBuffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {\n\t        get: function () {\n\t            if (this._source) {\n\t                return this._source.buffer;\n\t            } else {\n\t                return null;\n\t            }\n\t        },\n\t        set: function (buffer) {\n\t            if (buffer instanceof Tone.Buffer) {\n\t                this._source.buffer = buffer.get();\n\t            } else {\n\t                this._source.buffer = buffer;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.BufferSource#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {\n\t        get: function () {\n\t            return this._source.loop;\n\t        },\n\t        set: function (loop) {\n\t            this._source.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.BufferSource}  this\n\t\t */\n\t    Tone.BufferSource.prototype.dispose = function () {\n\t        this.onended = null;\n\t        if (this._source) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        if (this._gainNode) {\n\t            this._gainNode.dispose();\n\t            this._gainNode = null;\n\t        }\n\t        this._startTime = -1;\n\t        this.playbackRate = null;\n\t        this.output = null;\n\t        clearTimeout(this._onendedTimeout);\n\t        return this;\n\t    };\n\t    return Tone.BufferSource;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.\n\t\t *          Tone.Noise supports the noise types: \"pink\", \"white\", and \"brown\". Read more about\n\t\t *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Source}\n\t\t *  @param {string} type the noise type (white|pink|brown)\n\t\t *  @example\n\t\t * //initialize the noise and start\n\t\t * var noise = new Tone.Noise(\"pink\").start();\n\t\t * \n\t\t * //make an autofilter to shape the noise\n\t\t * var autoFilter = new Tone.AutoFilter({\n\t\t * \t\"frequency\" : \"8m\", \n\t\t * \t\"min\" : 800, \n\t\t * \t\"max\" : 15000\n\t\t * }).connect(Tone.Master);\n\t\t * \n\t\t * //connect the noise\n\t\t * noise.connect(autoFilter);\n\t\t * //start the autofilter LFO\n\t\t * autoFilter.start()\n\t\t */\n\t    Tone.Noise = function () {\n\t        var options = this.optionsObject(arguments, ['type'], Tone.Noise.defaults);\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {AudioBuffer}\n\t\t\t */\n\t        this._type = options.type;\n\t        /**\n\t\t\t *  The playback rate of the noise. Affects\n\t\t\t *  the \"frequency\" of the noise.\n\t\t\t *  @type {Positive}\n\t\t\t *  @signal\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t    };\n\t    Tone.extend(Tone.Noise, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Noise.defaults = {\n\t        'type': 'white',\n\t        'playbackRate': 1\n\t    };\n\t    /**\n\t\t * The type of the noise. Can be \"white\", \"brown\", or \"pink\". \n\t\t * @memberOf Tone.Noise#\n\t\t * @type {string}\n\t\t * @name type\n\t\t * @example\n\t\t * noise.type = \"white\";\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'type', {\n\t        get: function () {\n\t            return this._type;\n\t        },\n\t        set: function (type) {\n\t            if (this._type !== type) {\n\t                if (type in _noiseBuffers) {\n\t                    this._type = type;\n\t                    //if it's playing, stop and restart it\n\t                    if (this.state === Tone.State.Started) {\n\t                        var now = this.now() + this.blockTime;\n\t                        this._stop(now);\n\t                        this._start(now);\n\t                    }\n\t                } else {\n\t                    throw new TypeError('Tone.Noise: invalid type: ' + type);\n\t                }\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  The playback rate of the noise. Affects\n\t\t *  the \"frequency\" of the noise.\n\t\t *  @type {Positive}\n\t\t *  @signal\n\t\t */\n\t    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t *  internal start method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._start = function (time) {\n\t        var buffer = _noiseBuffers[this._type];\n\t        this._source = new Tone.BufferSource(buffer).connect(this.output);\n\t        this._source.loop = true;\n\t        this._source.playbackRate.value = this._playbackRate;\n\t        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));\n\t    };\n\t    /**\n\t\t *  internal stop method\n\t\t *\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.Noise.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Noise} this\n\t\t */\n\t    Tone.Noise.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    // THE BUFFERS\n\t    ///////////////////////////////////////////////////////////////////////////\n\t    //Noise buffer stats\n\t    var bufferLength = 44100 * 5;\n\t    var channels = 2;\n\t    /**\n\t\t *\tthe noise arrays. only generated once on init\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Array}\n\t\t *  borrowed heavily from https://github.com/zacharydenton/noise.js \n\t\t *  (c) 2013 Zach Denton (MIT)\n\t\t */\n\t    var _noiseArrays = {\n\t        'pink': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var b0, b1, b2, b3, b4, b5, b6;\n\t                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    b0 = 0.99886 * b0 + white * 0.0555179;\n\t                    b1 = 0.99332 * b1 + white * 0.0750759;\n\t                    b2 = 0.969 * b2 + white * 0.153852;\n\t                    b3 = 0.8665 * b3 + white * 0.3104856;\n\t                    b4 = 0.55 * b4 + white * 0.5329522;\n\t                    b5 = -0.7616 * b5 - white * 0.016898;\n\t                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t                    channel[i] *= 0.11;\n\t                    // (roughly) compensate for gain\n\t                    b6 = white * 0.115926;\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'brown': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                var lastOut = 0;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    var white = Math.random() * 2 - 1;\n\t                    channel[i] = (lastOut + 0.02 * white) / 1.02;\n\t                    lastOut = channel[i];\n\t                    channel[i] *= 3.5;    // (roughly) compensate for gain\n\t                }\n\t            }\n\t            return buffer;\n\t        }(),\n\t        'white': function () {\n\t            var buffer = [];\n\t            for (var channelNum = 0; channelNum < channels; channelNum++) {\n\t                var channel = new Float32Array(bufferLength);\n\t                buffer[channelNum] = channel;\n\t                for (var i = 0; i < bufferLength; i++) {\n\t                    channel[i] = Math.random() * 2 - 1;\n\t                }\n\t            }\n\t            return buffer;\n\t        }()\n\t    };\n\t    /**\n\t\t *\tstatic noise buffers\n\t\t *  @static\n\t\t *  @private\n\t\t *  @type {Tone.Buffer}\n\t\t */\n\t    var _noiseBuffers = {};\n\t    //create the Tone.Buffers\n\t    function createBuffers() {\n\t        for (var type in _noiseArrays) {\n\t            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);\n\t        }\n\t    }\n\t    createBuffers();\n\t    Tone.Context.on('init', createBuffers);\n\t    return Tone.Noise;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter), \n\t\t *          and two envelopes (Tone.Envelop). One envelope controls the amplitude\n\t\t *          of the noise and the other is controls the cutoff frequency of the filter. \n\t\t *          <img src=\"https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242\">\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] the options available for the synth \n\t\t *                          see defaults below\n\t\t * @example\n\t\t * var noiseSynth = new Tone.NoiseSynth().toMaster();\n\t\t * noiseSynth.triggerAttackRelease(\"8n\");\n\t\t */\n\t    Tone.NoiseSynth = function (options) {\n\t        //get the defaults\n\t        options = this.defaultArg(options, Tone.NoiseSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The noise source.\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @example\n\t\t\t * noiseSynth.set(\"noise.type\", \"brown\");\n\t\t\t */\n\t        this.noise = new Tone.Noise();\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        //connect the noise to the output\n\t        this.noise.chain(this.envelope, this.output);\n\t        //start the noise\n\t        this.noise.start();\n\t        this._readOnly([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.NoiseSynth, Tone.Instrument);\n\t    /**\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.NoiseSynth.defaults = {\n\t        'noise': { 'type': 'white' },\n\t        'envelope': {\n\t            'attack': 0.005,\n\t            'decay': 0.1,\n\t            'sustain': 0\n\t        }\n\t    };\n\t    /**\n\t\t *  Start the attack portion of the envelopes. Unlike other \n\t\t *  instruments, Tone.NoiseSynth doesn't have a note. \n\t\t *  @param {Time} [time=now] the time the attack should start\n\t\t *  @param {number} [velocity=1] the velocity of the note (0-1)\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t *  @example\n\t\t * noiseSynth.triggerAttack();\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {\n\t        //the envelopes\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the envelopes.\n\t\t *  @param {Time} [time=now] the time the release should start\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerRelease = function (time) {\n\t        this.envelope.triggerRelease(time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release. \n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     the time of the attack\n\t\t *  @param  {number} [velocity=1] the velocity\n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        duration = this.toSeconds(duration);\n\t        this.triggerAttack(time, velocity);\n\t        this.triggerRelease(time + duration);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.NoiseSynth} this\n\t\t */\n\t    Tone.NoiseSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'noise',\n\t            'envelope'\n\t        ]);\n\t        this.noise.dispose();\n\t        this.noise = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.NoiseSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Karplus-String string synthesis. Often out of tune. \n\t\t *         Will change when the AudioWorkerNode is available across\n\t\t *         browsers. \n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {Object} [options] see the defaults\n\t\t *  @example\n\t\t * var plucky = new Tone.PluckSynth().toMaster();\n\t\t * plucky.triggerAttack(\"C4\");\n\t\t */\n\t    Tone.PluckSynth = function (options) {\n\t        options = this.defaultArg(options, Tone.PluckSynth.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  @type {Tone.Noise}\n\t\t\t *  @private\n\t\t\t */\n\t        this._noise = new Tone.Noise('pink');\n\t        /**\n\t\t\t *  The amount of noise at the attack. \n\t\t\t *  Nominal range of [0.1, 20]\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this.attackNoise = options.attackNoise;\n\t        /**\n\t\t\t *  the LFCF\n\t\t\t *  @type {Tone.LowpassCombFilter}\n\t\t\t *  @private\n\t\t\t */\n\t        this._lfcf = new Tone.LowpassCombFilter({\n\t            'resonance': options.resonance,\n\t            'dampening': options.dampening\n\t        });\n\t        /**\n\t\t\t *  The resonance control. \n\t\t\t *  @type {NormalRange}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.resonance = this._lfcf.resonance;\n\t        /**\n\t\t\t *  The dampening control. i.e. the lowpass filter frequency of the comb filter\n\t\t\t *  @type {Frequency}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.dampening = this._lfcf.dampening;\n\t        //connections\n\t        this._noise.connect(this._lfcf);\n\t        this._lfcf.connect(this.output);\n\t        this._readOnly([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t    };\n\t    Tone.extend(Tone.PluckSynth, Tone.Instrument);\n\t    /**\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PluckSynth.defaults = {\n\t        'attackNoise': 1,\n\t        'dampening': 4000,\n\t        'resonance': 0.9\n\t    };\n\t    /**\n\t\t *  Trigger the note. \n\t\t *  @param {Frequency} note The note to trigger.\n\t\t *  @param {Time} [time=now] When the note should be triggered.\n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {\n\t        note = this.toFrequency(note);\n\t        time = this.toSeconds(time);\n\t        var delayAmount = 1 / note;\n\t        this._lfcf.delayTime.setValueAtTime(delayAmount, time);\n\t        this._noise.start(time);\n\t        this._noise.stop(time + delayAmount * this.attackNoise);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up. \n\t\t *  @returns {Tone.PluckSynth} this\n\t\t */\n\t    Tone.PluckSynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._noise.dispose();\n\t        this._lfcf.dispose();\n\t        this._noise = null;\n\t        this._lfcf = null;\n\t        this._writable([\n\t            'resonance',\n\t            'dampening'\n\t        ]);\n\t        this.dampening = null;\n\t        this.resonance = null;\n\t        return this;\n\t    };\n\t    return Tone.PluckSynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.PolySynth handles voice creation and allocation for any\n\t\t *          instruments passed in as the second paramter. PolySynth is \n\t\t *          not a synthesizer by itself, it merely manages voices of \n\t\t *          one of the other types of synths, allowing any of the \n\t\t *          monophonic synthesizers to be polyphonic. \n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {number|Object} [polyphony=4] The number of voices to create\n\t\t *  @param {function} [voice=Tone.Synth] The constructor of the voices\n\t\t *                                            uses Tone.Synth by default. \n\t\t *  @example\n\t\t * //a polysynth composed of 6 Voices of Synth\n\t\t * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();\n\t\t * //set the attributes using the set interface\n\t\t * synth.set(\"detune\", -1200);\n\t\t * //play a chord\n\t\t * synth.triggerAttackRelease([\"C4\", \"E4\", \"A4\"], \"4n\");\n\t\t */\n\t    Tone.PolySynth = function () {\n\t        Tone.Instrument.call(this);\n\t        var options = this.optionsObject(arguments, [\n\t            'polyphony',\n\t            'voice'\n\t        ], Tone.PolySynth.defaults);\n\t        options = this.defaultArg(options, Tone.Instrument.defaults);\n\t        //max polyphony\n\t        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);\n\t        /**\n\t\t\t *  the array of voices\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this.voices = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The queue of voices with data about last trigger\n\t\t\t *  and the triggered note\n\t\t\t *  @private\n\t\t\t *  @type {Array}\n\t\t\t */\n\t        this._triggers = new Array(options.polyphony);\n\t        /**\n\t\t\t *  The detune in cents\n\t\t\t *  @type {Cents}\n\t\t\t *  @signal\n\t\t\t */\n\t        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);\n\t        this._readOnly('detune');\n\t        //create the voices\n\t        for (var i = 0; i < options.polyphony; i++) {\n\t            var v = new options.voice(arguments[2], arguments[3]);\n\t            this.voices[i] = v;\n\t            v.connect(this.output);\n\t            if (v.hasOwnProperty('detune')) {\n\t                this.detune.connect(v.detune);\n\t            }\n\t            this._triggers[i] = {\n\t                release: -1,\n\t                note: null,\n\t                voice: v\n\t            };\n\t        }\n\t        //set the volume initially\n\t        this.volume.value = options.volume;\n\t    };\n\t    Tone.extend(Tone.PolySynth, Tone.Instrument);\n\t    /**\n\t\t *  the defaults\n\t\t *  @const\n\t\t *  @static\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.PolySynth.defaults = {\n\t        'polyphony': 4,\n\t        'volume': 0,\n\t        'detune': 0,\n\t        'voice': Tone.Synth\n\t    };\n\t    /**\n\t\t *  Trigger the attack portion of the note\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  The start time of the note.\n\t\t *  @param {number} [velocity=1] The velocity of the note.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord immediately with a velocity of 0.2\n\t\t * poly.triggerAttack([\"Ab3\", \"C4\", \"F5\"], undefined, 0.2);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            var val = notes[i];\n\t            //trigger the oldest voice\n\t            var oldest = this._triggers[0];\n\t            var oldestIndex = 0;\n\t            for (var j = 1; j < this._triggers.length; j++) {\n\t                if (this._triggers[j].release < oldest.release) {\n\t                    oldest = this._triggers[j];\n\t                    oldestIndex = j;\n\t                }\n\t            }\n\t            oldest.release = Infinity;\n\t            oldest.note = JSON.stringify(val);\n\t            oldest.voice.triggerAttack(val, time, velocity);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and release after the specified duration\n\t\t *  \n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} duration the duration of the note\n\t\t *  @param  {Time} [time=now]     if no time is given, defaults to now\n\t\t *  @param  {number} [velocity=1] the velocity of the attack (0-1)\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * //trigger a chord for a duration of a half note \n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"2n\");\n\t\t *  @example\n\t\t * //can pass in an array of durations as well\n\t\t * poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], [\"2n\", \"4n\", \"4n\"]);\n\t\t */\n\t    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        this.triggerAttack(notes, time, velocity);\n\t        if (this.isArray(duration) && this.isArray(notes)) {\n\t            for (var i = 0; i < notes.length; i++) {\n\t                var d = duration[Math.min(i, duration.length - 1)];\n\t                this.triggerRelease(notes[i], time + this.toSeconds(d));\n\t            }\n\t        } else {\n\t            this.triggerRelease(notes, time + this.toSeconds(duration));\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the release of the note. Unlike monophonic instruments, \n\t\t *  a note (or array of notes) needs to be passed in as the first argument.\n\t\t *  @param  {Frequency|Array} notes The notes to play. Accepts a single\n\t\t *                                  Frequency or an array of frequencies.\n\t\t *  @param  {Time} [time=now]  When the release will be triggered. \n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.triggerRelease([\"Ab3\", \"C4\", \"F5\"], \"+2n\");\n\t\t */\n\t    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {\n\t        if (!Array.isArray(notes)) {\n\t            notes = [notes];\n\t        }\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < notes.length; i++) {\n\t            //get the voice\n\t            var stringified = JSON.stringify(notes[i]);\n\t            for (var v = 0; v < this._triggers.length; v++) {\n\t                var desc = this._triggers[v];\n\t                if (desc.note === stringified && desc.release > time) {\n\t                    desc.voice.triggerRelease(time);\n\t                    desc.release = time;\n\t                }\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set a member/attribute of the voices. \n\t\t *  @param {Object|string} params\n\t\t *  @param {number=} value\n\t\t *  @param {Time=} rampTime\n\t\t *  @returns {Tone.PolySynth} this\n\t\t *  @example\n\t\t * poly.set({\n\t\t * \t\"filter\" : {\n\t\t * \t\t\"type\" : \"highpass\"\n\t\t * \t},\n\t\t * \t\"envelope\" : {\n\t\t * \t\t\"attack\" : 0.25\n\t\t * \t}\n\t\t * });\n\t\t */\n\t    Tone.PolySynth.prototype.set = function (params, value, rampTime) {\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].set(params, value, rampTime);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Get the synth's attributes. Given no arguments get\n\t\t *  will return all available object properties and their corresponding\n\t\t *  values. Pass in a single attribute to retrieve or an array\n\t\t *  of attributes. The attribute strings can also include a \".\"\n\t\t *  to access deeper properties.\n\t\t *  @param {Array=} params the parameters to get, otherwise will return \n\t\t *  \t\t\t\t\t   all available.\n\t\t */\n\t    Tone.PolySynth.prototype.get = function (params) {\n\t        return this.voices[0].get(params);\n\t    };\n\t    /**\n\t\t *  Trigger the release portion of all the currently active voices.\n\t\t *  @param {Time} [time=now] When the notes should be released.\n\t\t *  @return {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.releaseAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var i = 0; i < this._triggers.length; i++) {\n\t            var desc = this._triggers[i];\n\t            if (desc.release > time) {\n\t                desc.release = time;\n\t                desc.voice.triggerRelease(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.PolySynth} this\n\t\t */\n\t    Tone.PolySynth.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        for (var i = 0; i < this.voices.length; i++) {\n\t            this.voices[i].dispose();\n\t            this.voices[i] = null;\n\t        }\n\t        this._writable('detune');\n\t        this.detune.dispose();\n\t        this.detune = null;\n\t        this.voices = null;\n\t        this._triggers = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  The maximum number of notes that can be allocated \n\t\t *  to a polysynth. \n\t\t *  @type  {Number}\n\t\t *  @static\n\t\t */\n\t    Tone.PolySynth.MAX_POLYPHONY = 20;\n\t    return Tone.PolySynth;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.Player is an audio file player with start, loop, and stop functions.\n\t\t *  \n\t\t *  @constructor\n\t\t *  @extends {Tone.Source} \n\t\t *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from\n\t\t *                                  which to load the AudioBuffer\n\t\t *  @param {function=} onload The function to invoke when the buffer is loaded. \n\t\t *                            Recommended to use Tone.Buffer.on('load') instead.\n\t\t *  @example\n\t\t * var player = new Tone.Player(\"./path/to/sample.mp3\").toMaster();\n\t\t * //play as soon as the buffer is loaded\n\t\t * player.autostart = true;\n\t\t */\n\t    Tone.Player = function (url) {\n\t        var options;\n\t        if (url instanceof Tone.Buffer) {\n\t            url = url.get();\n\t            options = Tone.Player.defaults;\n\t        } else {\n\t            options = this.optionsObject(arguments, [\n\t                'url',\n\t                'onload'\n\t            ], Tone.Player.defaults);\n\t        }\n\t        Tone.Source.call(this, options);\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {AudioBufferSourceNode}\n\t\t\t */\n\t        this._source = null;\n\t        /**\n\t\t\t *  If the file should play as soon\n\t\t\t *  as the buffer is loaded. \n\t\t\t *  @type {boolean}\n\t\t\t *  @example\n\t\t\t * //will play as soon as it's loaded\n\t\t\t * var player = new Tone.Player({\n\t\t\t * \t\"url\" : \"./path/to/sample.mp3\",\n\t\t\t * \t\"autostart\" : true,\n\t\t\t * }).toMaster();\n\t\t\t */\n\t        this.autostart = options.autostart;\n\t        /**\n\t\t\t *  the buffer\n\t\t\t *  @private\n\t\t\t *  @type {Tone.Buffer}\n\t\t\t */\n\t        this._buffer = new Tone.Buffer({\n\t            'url': options.url,\n\t            'onload': this._onload.bind(this, options.onload),\n\t            'reverse': options.reverse\n\t        });\n\t        if (url instanceof AudioBuffer) {\n\t            this._buffer.set(url);\n\t        }\n\t        /**\n\t\t\t *  if the buffer should loop once it's over\n\t\t\t *  @type {boolean}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loop = options.loop;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will start at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = options.loopStart;\n\t        /**\n\t\t\t *  if 'loop' is true, the loop will end at this position\n\t\t\t *  @type {Time}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = options.loopEnd;\n\t        /**\n\t\t\t *  the playback rate\n\t\t\t *  @private\n\t\t\t *  @type {number}\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  Enabling retrigger will allow a player to be restarted\n\t\t\t *  before the the previous 'start' is done playing. Otherwise, \n\t\t\t *  successive calls to Tone.Player.start will only start\n\t\t\t *  the sample if it had played all the way through. \n\t\t\t *  @type {boolean}\n\t\t\t */\n\t        this.retrigger = options.retrigger;\n\t    };\n\t    Tone.extend(Tone.Player, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.Player.defaults = {\n\t        'onload': Tone.noOp,\n\t        'playbackRate': 1,\n\t        'loop': false,\n\t        'autostart': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'retrigger': false,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Load the audio file as an audio buffer.\n\t\t *  Decodes the audio asynchronously and invokes\n\t\t *  the callback once the audio buffer loads. \n\t\t *  Note: this does not need to be called if a url\n\t\t *  was passed in to the constructor. Only use this\n\t\t *  if you want to manually load a new url. \n\t\t * @param {string} url The url of the buffer to load.\n\t\t *                     Filetype support depends on the\n\t\t *                     browser.\n\t\t *  @param  {function=} callback The function to invoke once\n\t\t *                               the sample is loaded.\n\t\t *  @returns {Promise}\n\t\t */\n\t    Tone.Player.prototype.load = function (url, callback) {\n\t        return this._buffer.load(url, this._onload.bind(this, callback));\n\t    };\n\t    /**\n\t\t * Internal callback when the buffer is loaded.\n\t\t * @private\n\t\t */\n\t    Tone.Player.prototype._onload = function (callback) {\n\t        callback = this.defaultArg(callback, Tone.noOp);\n\t        callback(this);\n\t        if (this.autostart) {\n\t            this.start();\n\t        }\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.Player} this\n\t\t *  @memberOf Tone.Player#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @private\n\t\t */\n\t    Tone.Player.prototype._start = function (startTime, offset, duration) {\n\t        if (this._buffer.loaded) {\n\t            //if it's a loop the default offset is the loopstart point\n\t            if (this._loop) {\n\t                offset = this.defaultArg(offset, this._loopStart);\n\t            } else {\n\t                //otherwise the default offset is 0\n\t                offset = this.defaultArg(offset, 0);\n\t            }\n\t            offset = this.toSeconds(offset);\n\t            //make sure it has a positive duration\n\t            duration = this.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));\n\t            duration = this.toSeconds(duration);\n\t            //the values in seconds\n\t            startTime = this.toSeconds(startTime);\n\t            //make the source\n\t            this._source = this.context.createBufferSource();\n\t            this._source.buffer = this._buffer.get();\n\t            //set the looping properties\n\t            if (this._loop) {\n\t                this._source.loop = this._loop;\n\t                this._source.loopStart = this.toSeconds(this._loopStart);\n\t                this._source.loopEnd = this.toSeconds(this._loopEnd);\n\t            } else if (!this._synced) {\n\t                //if it's not looping, set the state change at the end of the sample\n\t                this._state.setStateAtTime(Tone.State.Stopped, startTime + duration);\n\t            }\n\t            //and other properties\n\t            this._source.playbackRate.value = this._playbackRate;\n\t            this._source.connect(this.output);\n\t            //start it\n\t            if (this._loop) {\n\t                //modify the offset if it's greater than the loop time\n\t                var loopEnd = this._source.loopEnd || this._buffer.duration;\n\t                var loopStart = this._source.loopStart;\n\t                var loopDuration = loopEnd - loopStart;\n\t                if (offset > loopEnd) {\n\t                    //move the offset back\n\t                    while (offset > loopEnd) {\n\t                        offset -= loopDuration;\n\t                    }\n\t                }\n\t                this._source.start(startTime, offset);\n\t            } else {\n\t                this._source.start(startTime, offset, duration);\n\t            }\n\t        } else {\n\t            throw Error('Tone.Player: tried to start Player before the buffer was loaded');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop playback.\n\t\t *  @private\n\t\t *  @param  {Time} [time=now]\n\t\t *  @returns {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype._stop = function (time) {\n\t        if (this._source) {\n\t            this._source.stop(this.toSeconds(time));\n\t            this._source = null;\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Seek to a specific time in the player's buffer. If the \n\t\t *  source is no longer playing at that time, it will stop.\n\t\t *  If you seek to a time that \n\t\t *  @param {Time} offset The time to seek to.\n\t\t *  @param {Time=} time The time for the seek event to occur.\n\t\t *  @return {Tone.Player} this\n\t\t *  @example\n\t\t * source.start(0.2);\n\t\t * source.stop(0.4);\n\t\t */\n\t    Tone.Player.prototype.seek = function (offset, time) {\n\t        time = this.toSeconds(time);\n\t        if (this._state.getValueAtTime(time) === Tone.State.Started) {\n\t            offset = this.toSeconds(offset);\n\t            // if it's currently playing, stop it\n\t            this._stop(time);\n\t            //restart it at the given time\n\t            this._start(time, offset);\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Set the loop start and end. Will only loop if loop is \n\t\t *  set to true. \n\t\t *  @param {Time} loopStart The loop end time\n\t\t *  @param {Time} loopEnd The loop end time\n\t\t *  @returns {Tone.Player} this\n\t\t *  @example\n\t\t * //loop 0.1 seconds of the file. \n\t\t * player.setLoopPoints(0.2, 0.3);\n\t\t * player.loop = true;\n\t\t */\n\t    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {\n\t        this.loopStart = loopStart;\n\t        this.loopEnd = loopEnd;\n\t        return this;\n\t    };\n\t    /**\n\t\t * If loop is true, the loop will start at this position. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (loopStart) {\n\t            this._loopStart = loopStart;\n\t            if (this._source) {\n\t                this._source.loopStart = this.toSeconds(loopStart);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * If loop is true, the loop will end at this position.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (loopEnd) {\n\t            this._loopEnd = loopEnd;\n\t            if (this._source) {\n\t                this._source.loopEnd = this.toSeconds(loopEnd);\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The audio buffer belonging to the player. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'buffer', {\n\t        get: function () {\n\t            return this._buffer;\n\t        },\n\t        set: function (buffer) {\n\t            this._buffer.set(buffer);\n\t        }\n\t    });\n\t    /**\n\t\t * If the buffer should loop once it's over. \n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'loop', {\n\t        get: function () {\n\t            return this._loop;\n\t        },\n\t        set: function (loop) {\n\t            this._loop = loop;\n\t            if (this._source) {\n\t                this._source.loop = loop;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The playback speed. 1 is normal speed. This is not a signal because\n\t\t * Safari and iOS currently don't support playbackRate as a signal.\n\t\t * @memberOf Tone.Player#\n\t\t * @type {number}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            if (this._source) {\n\t                this._source.playbackRate.value = rate;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Player#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Player.prototype, 'reverse', {\n\t        get: function () {\n\t            return this._buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this._buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t *  Dispose and disconnect.\n\t\t *  @return {Tone.Player} this\n\t\t */\n\t    Tone.Player.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        if (this._source !== null) {\n\t            this._source.disconnect();\n\t            this._source = null;\n\t        }\n\t        this._buffer.dispose();\n\t        this._buffer = null;\n\t        return this;\n\t    };\n\t    return Tone.Player;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Sampler wraps Tone.Player in an AmplitudeEnvelope.\n\t\t *\n\t\t *  @constructor\n\t\t *  @extends {Tone.Instrument}\n\t\t *  @param {String} url the url of the audio file\n\t\t *  @param {Function=} onload The callback to invoke when the sample is loaded.\n\t\t *  @example\n\t\t * var sampler = new Sampler(\"./audio/casio/A1.mp3\", function(){\n\t\t * \t//repitch the sample down a half step\n\t\t * \tsampler.triggerAttack(-1);\n\t\t * }).toMaster();\n\t\t */\n\t    Tone.Sampler = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.Sampler.defaults);\n\t        Tone.Instrument.call(this, options);\n\t        /**\n\t\t\t *  The sample player.\n\t\t\t *  @type {Tone.Player}\n\t\t\t */\n\t        this.player = new Tone.Player(options.url, options.onload);\n\t        this.player.retrigger = true;\n\t        /**\n\t\t\t *  The amplitude envelope. \n\t\t\t *  @type {Tone.AmplitudeEnvelope}\n\t\t\t */\n\t        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);\n\t        this.player.chain(this.envelope, this.output);\n\t        this._readOnly([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.loop = options.loop;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.Sampler, Tone.Instrument);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t */\n\t    Tone.Sampler.defaults = {\n\t        'onload': Tone.noOp,\n\t        'loop': false,\n\t        'reverse': false,\n\t        'envelope': {\n\t            'attack': 0.001,\n\t            'decay': 0,\n\t            'sustain': 1,\n\t            'release': 0.1\n\t        }\n\t    };\n\t    /**\n\t\t *  Trigger the start of the sample. \n\t\t *  @param {Interval} [pitch=0] The amount the sample should\n\t\t *                              be repitched. \n\t\t *  @param {Time} [time=now] The time when the sample should start\n\t\t *  @param {NormalRange} [velocity=1] The velocity of the note\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerAttack(0, \"+0.1\", 0.5);\n\t\t */\n\t    Tone.Sampler.prototype.triggerAttack = function (pitch, time, velocity) {\n\t        time = this.toSeconds(time);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        this.player.playbackRate = this.intervalToFrequencyRatio(pitch);\n\t        this.player.start(time);\n\t        this.envelope.triggerAttack(time, velocity);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start the release portion of the sample. Will stop the sample once the \n\t\t *  envelope has fully released. \n\t\t *  \n\t\t *  @param {Time} [time=now] The time when the note should release\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * sampler.triggerRelease();\n\t\t */\n\t    Tone.Sampler.prototype.triggerRelease = function (time) {\n\t        time = this.toSeconds(time);\n\t        this.envelope.triggerRelease(time);\n\t        this.player.stop(this.toSeconds(this.envelope.release) + time);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Trigger the attack and then the release after the duration. \n\t\t *  @param  {Interval} interval     The interval in half-steps that the\n\t\t *                                  sample should be pitch shifted.\n\t\t *  @param  {Time} duration How long the note should be held for before\n\t\t *                          triggering the release.\n\t\t *  @param {Time} [time=now]  When the note should be triggered.\n\t\t *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.\n\t\t *  @returns {Tone.Sampler} this\n\t\t *  @example\n\t\t * //trigger the unpitched note for the duration of an 8th note\n\t\t * synth.triggerAttackRelease(0, \"8n\");\n\t\t *  @memberOf Tone.Sampler#\n\t\t *  @name triggerAttackRelease\n\t\t *  @method triggerAttackRelease\n\t\t */\n\t    /**\n\t\t * If the output sample should loop or not.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {number|string}\n\t\t * @name loop\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'loop', {\n\t        get: function () {\n\t            return this.player.loop;\n\t        },\n\t        set: function (loop) {\n\t            this.player.loop = loop;\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.player.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.player.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The buffer to play.\n\t\t * @memberOf Tone.Sampler#\n\t\t * @type {Tone.Buffer}\n\t\t * @name buffer\n\t\t */\n\t    Object.defineProperty(Tone.Sampler.prototype, 'buffer', {\n\t        get: function () {\n\t            return this.player.buffer;\n\t        },\n\t        set: function (buff) {\n\t            this.player.buffer = buff;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @returns {Tone.Sampler} this\n\t\t */\n\t    Tone.Sampler.prototype.dispose = function () {\n\t        Tone.Instrument.prototype.dispose.call(this);\n\t        this._writable([\n\t            'player',\n\t            'envelope'\n\t        ]);\n\t        this.player.dispose();\n\t        this.player = null;\n\t        this.envelope.dispose();\n\t        this.envelope = null;\n\t        return this;\n\t    };\n\t    return Tone.Sampler;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. \n\t\t *         See also Tone.AudioToGain. \n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @example\n\t\t * var g2a = new Tone.GainToAudio();\n\t\t */\n\t    Tone.GainToAudio = function () {\n\t        /**\n\t\t\t *  @type {WaveShaperNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {\n\t            return Math.abs(x) * 2 - 1;\n\t        });\n\t    };\n\t    Tone.extend(Tone.GainToAudio, Tone.SignalBase);\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.GainToAudio} this\n\t\t */\n\t    Tone.GainToAudio.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._norm.dispose();\n\t        this._norm = null;\n\t        return this;\n\t    };\n\t    return Tone.GainToAudio;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]\n\t\t *\n\t\t *  @extends {Tone.SignalBase}\n\t\t *  @constructor\n\t\t *  @param {number} inputMin the min input value\n\t\t *  @param {number} inputMax the max input value\n\t\t *  @example\n\t\t * var norm = new Tone.Normalize(2, 4);\n\t\t * var sig = new Tone.Signal(3).connect(norm);\n\t\t * //output of norm is 0.5. \n\t\t */\n\t    Tone.Normalize = function (inputMin, inputMax) {\n\t        /**\n\t\t\t *  the min input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMin = this.defaultArg(inputMin, 0);\n\t        /**\n\t\t\t *  the max input value\n\t\t\t *  @type {number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._inputMax = this.defaultArg(inputMax, 1);\n\t        /**\n\t\t\t *  subtract the min from the input\n\t\t\t *  @type {Tone.Add}\n\t\t\t *  @private\n\t\t\t */\n\t        this._sub = this.input = new Tone.Add(0);\n\t        /**\n\t\t\t *  divide by the difference between the input and output\n\t\t\t *  @type {Tone.Multiply}\n\t\t\t *  @private\n\t\t\t */\n\t        this._div = this.output = new Tone.Multiply(1);\n\t        this._sub.connect(this._div);\n\t        this._setRange();\n\t    };\n\t    Tone.extend(Tone.Normalize, Tone.SignalBase);\n\t    /**\n\t\t * The minimum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name min\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'min', {\n\t        get: function () {\n\t            return this._inputMin;\n\t        },\n\t        set: function (min) {\n\t            this._inputMin = min;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t * The maximum value the input signal will reach.\n\t\t * @memberOf Tone.Normalize#\n\t\t * @type {number}\n\t\t * @name max\n\t\t */\n\t    Object.defineProperty(Tone.Normalize.prototype, 'max', {\n\t        get: function () {\n\t            return this._inputMax;\n\t        },\n\t        set: function (max) {\n\t            this._inputMax = max;\n\t            this._setRange();\n\t        }\n\t    });\n\t    /**\n\t\t *  set the values\n\t\t *  @private\n\t\t */\n\t    Tone.Normalize.prototype._setRange = function () {\n\t        this._sub.value = -this._inputMin;\n\t        this._div.value = 1 / (this._inputMax - this._inputMin);\n\t    };\n\t    /**\n\t\t *  clean up\n\t\t *  @returns {Tone.Normalize} this\n\t\t */\n\t    Tone.Normalize.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._sub.dispose();\n\t        this._sub = null;\n\t        this._div.dispose();\n\t        this._div = null;\n\t        return this;\n\t    };\n\t    return Tone.Normalize;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t *  @class Tone.MultiPlayer is well suited for one-shots, multi-sampled instruments\n\t\t *         or any time you need to play a bunch of audio buffers. \n\t\t *  @param  {Object|Array|Tone.Buffers}  buffers  The buffers which are available\n\t\t *                                                to the MultiPlayer\n\t\t *  @param {Function} onload The callback to invoke when all of the buffers are loaded.\n\t\t *  @extends {Tone}\n\t\t *  @example\n\t\t * var multiPlayer = new MultiPlayer({\n\t\t * \t\"kick\" : \"path/to/kick.mp3\",\n\t\t * \t\"snare\" : \"path/to/snare.mp3\",\n\t\t * }, function(){\n\t\t * \tmultiPlayer.start(\"kick\");\n\t\t * });\n\t\t *  @example\n\t\t * //can also store the values in an array\n\t\t * var multiPlayer = new MultiPlayer([\"path/to/kick.mp3\", \"path/to/snare.mp3\"], \n\t\t * function(){\n\t\t * \t//if an array is passed in, the samples are referenced to by index\n\t\t * \tmultiPlayer.start(1);\n\t\t * });\n\t\t */\n\t    Tone.MultiPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'urls',\n\t            'onload'\n\t        ], Tone.MultiPlayer.defaults);\n\t        if (options.urls instanceof Tone.Buffers) {\n\t            /**\n\t\t\t\t *  All the buffers belonging to the player.\n\t\t\t\t *  @type  {Tone.Buffers}\n\t\t\t\t */\n\t            this.buffers = options.urls;\n\t        } else {\n\t            this.buffers = new Tone.Buffers(options.urls, options.onload);\n\t        }\n\t        /**\n\t\t\t *  Keeps track of the currently playing sources.\n\t\t\t *  @type  {Object}\n\t\t\t *  @private\n\t\t\t */\n\t        this._activeSources = {};\n\t        /**\n\t\t\t *  The fade in envelope which is applied\n\t\t\t *  to the beginning of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeIn = options.fadeIn;\n\t        /**\n\t\t\t *  The fade out envelope which is applied\n\t\t\t *  to the end of the BufferSource\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.fadeOut = options.fadeOut;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * source.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        //make the output explicitly stereo\n\t        this._volume.output.output.channelCount = 2;\n\t        this._volume.output.output.channelCountMode = 'explicit';\n\t        //mute initially\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.MultiPlayer, Tone.Source);\n\t    /**\n\t\t *  The defaults\n\t\t *  @type  {Object}\n\t\t */\n\t    Tone.MultiPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'fadeIn': 0,\n\t        'fadeOut': 0\n\t    };\n\t    /**\n\t\t * Make the source from the buffername\n\t\t * @param  {String} bufferName\n\t\t * @return {Tone.BufferSource}\n\t\t * @private\n\t\t */\n\t    Tone.MultiPlayer.prototype._makeSource = function (bufferName) {\n\t        var buffer;\n\t        if (this.isString(bufferName) || this.isNumber(bufferName)) {\n\t            buffer = this.buffers.get(bufferName).get();\n\t        } else if (bufferName instanceof Tone.Buffer) {\n\t            buffer = bufferName.get();\n\t        } else if (bufferName instanceof AudioBuffer) {\n\t            buffer = bufferName;\n\t        }\n\t        var source = new Tone.BufferSource(buffer).connect(this.output);\n\t        if (!this._activeSources.hasOwnProperty(bufferName)) {\n\t            this._activeSources[bufferName] = [];\n\t        }\n\t        this._activeSources[bufferName].push(source);\n\t        return source;\n\t    };\n\t    /**\n\t\t *  Start a buffer by name. The `start` method allows a number of options\n\t\t *  to be passed in such as offset, interval, and gain. This is good for multi-sampled \n\t\t *  instruments and sound sprites where samples are repitched played back at different velocities.\n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  duration   How long to play the buffer for.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.start = function (bufferName, time, offset, duration, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.start(time, offset, duration, this.defaultArg(gain, 1), this.fadeIn);\n\t        if (duration) {\n\t            source.stop(time + this.toSeconds(duration), this.fadeOut);\n\t        }\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Start a looping buffer by name. Similar to `start`, but the buffer\n\t\t *  is looped instead of played straight through. Can still be stopped with `stop`. \n\t\t *  @param  {String}  bufferName    The name of the buffer to start.\n\t\t *  @param  {Time}  time      When to start the buffer.\n\t\t *  @param  {Time}  [offset=0]    The offset into the buffer to play from.\n\t\t *  @param  {Time=}  loopStart   The start of the loop.\n\t\t *  @param  {Time=}  loopEnd\tThe end of the loop.\n\t\t *  @param  {Interval}  [pitch=0]  The interval to repitch the buffer.\n\t\t *  @param  {Gain}  [gain=1]      The gain to play the sample at.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.startLoop = function (bufferName, time, offset, loopStart, loopEnd, pitch, gain) {\n\t        time = this.toSeconds(time);\n\t        var source = this._makeSource(bufferName);\n\t        source.loop = true;\n\t        source.loopStart = this.toSeconds(this.defaultArg(loopStart, 0));\n\t        source.loopEnd = this.toSeconds(this.defaultArg(loopEnd, 0));\n\t        source.start(time, offset, undefined, this.defaultArg(gain, 1), this.fadeIn);\n\t        pitch = this.defaultArg(pitch, 0);\n\t        source.playbackRate.value = this.intervalToFrequencyRatio(pitch);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop the first played instance of the buffer name.\n\t\t *  @param  {String}  bufferName  The buffer to stop.\n\t\t *  @param  {Time=}  time    When to stop the buffer\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stop = function (bufferName, time) {\n\t        if (this._activeSources[bufferName] && this._activeSources[bufferName].length) {\n\t            time = this.toSeconds(time);\n\t            this._activeSources[bufferName].shift().stop(time, this.fadeOut);\n\t        } else {\n\t            throw new Error('Tone.MultiPlayer: cannot stop a buffer that hasn\\'t been started or is already stopped');\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Stop all currently playing buffers at the given time.\n\t\t *  @param  {Time=}  time  When to stop the buffers.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.stopAll = function (time) {\n\t        time = this.toSeconds(time);\n\t        for (var bufferName in this._activeSources) {\n\t            var sources = this._activeSources[bufferName];\n\t            for (var i = 0; i < sources.length; i++) {\n\t                sources[i].stop(time);\n\t            }\n\t        }\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Add another buffer to the available buffers.\n\t\t *  @param {String} name The name to that the buffer is refered\n\t\t *                       to in start/stop methods. \n\t\t *  @param {String|Tone.Buffer} url The url of the buffer to load\n\t\t *                                  or the buffer.\n\t\t *  @param {Function} callback The function to invoke after the buffer is loaded.\n\t\t */\n\t    Tone.MultiPlayer.prototype.add = function (name, url, callback) {\n\t        this.buffers.add(name, url, callback);\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source. \"started\"\n\t\t *  if there are any buffers playing. \"stopped\" otherwise.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.MultiPlayer#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'state', {\n\t        get: function () {\n\t            return this._activeSources.length > 0 ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.MultiPlayer#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * source.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.MultiPlayer.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t *  Clean up.\n\t\t *  @return  {Tone.MultiPlayer}  this\n\t\t */\n\t    Tone.MultiPlayer.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this._writable('volume');\n\t        this.volume = null;\n\t        for (var bufferName in this._activeSources) {\n\t            this._activeSources[bufferName].forEach(function (source) {\n\t                source.dispose();\n\t            });\n\t        }\n\t        this.buffers.dispose();\n\t        this.buffers = null;\n\t        this._activeSources = null;\n\t        return this;\n\t    };\n\t    return Tone.MultiPlayer;\n\t});\n\tModule(function (Tone) {\n\t    /**\n\t\t * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n\t\t *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the \n\t\t *        amount of time each small chunk of audio is played for and the overlap is the \n\t\t *        amount of crossfading transition time between successive grains.\n\t\t * @extends {Tone}\n\t\t * @param {String|Tone.Buffer} url\tThe url to load, or the Tone.Buffer to play.\n\t\t * @param {Function=} callback The callback to invoke after the url is loaded.\n\t\t */\n\t    Tone.GrainPlayer = function () {\n\t        var options = this.optionsObject(arguments, [\n\t            'url',\n\t            'onload'\n\t        ], Tone.GrainPlayer.defaults);\n\t        Tone.Source.call(this);\n\t        /**\n\t\t\t *  The audio buffer belonging to the player.\n\t\t\t *  @type  {Tone.Buffer}\n\t\t\t */\n\t        this.buffer = new Tone.Buffer(options.url, options.onload);\n\t        /**\n\t\t\t *  Plays the buffer with a small envelope\n\t\t\t *  @type  {Tone.MultiPlayer}\n\t\t\t *  @private\n\t\t\t */\n\t        this._player = new Tone.MultiPlayer().connect(this.output);\n\t        /**\n\t\t\t *  Create a repeating tick to schedule\n\t\t\t *  the grains.\n\t\t\t *  @type  {Tone.Clock}\n\t\t\t *  @private\n\t\t\t */\n\t        this._clock = new Tone.Clock(this._tick.bind(this), 1);\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopStart = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._loopEnd = 0;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._playbackRate = options.playbackRate;\n\t        /**\n\t\t\t *  @type  {Number}\n\t\t\t *  @private\n\t\t\t */\n\t        this._grainSize = options.grainSize;\n\t        /**\n\t\t\t *  @private\n\t\t\t *  @type {Number}\n\t\t\t */\n\t        this._overlap = options.overlap;\n\t        /**\n\t\t\t *  Adjust the pitch independently of the playbackRate.\n\t\t\t *  @type  {Cents}\n\t\t\t */\n\t        this.detune = options.detune;\n\t        /**\n\t\t\t *  The amount of time randomly added\n\t\t\t *  or subtracted from the grain's offset\n\t\t\t *  @type  {Time}\n\t\t\t */\n\t        this.drift = options.drift;\n\t        //setup\n\t        this.overlap = options.overlap;\n\t        this.loop = options.loop;\n\t        this.playbackRate = options.playbackRate;\n\t        this.grainSize = options.grainSize;\n\t        this.loopStart = options.loopStart;\n\t        this.loopEnd = options.loopEnd;\n\t        this.reverse = options.reverse;\n\t    };\n\t    Tone.extend(Tone.GrainPlayer, Tone.Source);\n\t    /**\n\t\t *  the default parameters\n\t\t *  @static\n\t\t *  @const\n\t\t *  @type {Object}\n\t\t */\n\t    Tone.GrainPlayer.defaults = {\n\t        'onload': Tone.noOp,\n\t        'overlap': 0.1,\n\t        'grainSize': 0.2,\n\t        'drift': 0,\n\t        'playbackRate': 1,\n\t        'detune': 0,\n\t        'loop': false,\n\t        'loopStart': 0,\n\t        'loopEnd': 0,\n\t        'reverse': false\n\t    };\n\t    /**\n\t\t *  Play the buffer at the given startTime. Optionally add an offset\n\t\t *  and/or duration which will play the buffer from a position\n\t\t *  within the buffer for the given duration. \n\t\t *  \n\t\t *  @param  {Time} [startTime=now] When the player should start.\n\t\t *  @param  {Time} [offset=0] The offset from the beginning of the sample\n\t\t *                                 to start at. \n\t\t *  @param  {Time=} duration How long the sample should play. If no duration\n\t\t *                                is given, it will default to the full length \n\t\t *                                of the sample (minus any offset)\n\t\t *  @returns {Tone.GrainPlayer} this\n\t\t *  @memberOf Tone.GrainPlayer#\n\t\t *  @method start\n\t\t *  @name start\n\t\t */\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @param {Time} offset\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {\n\t        offset = this.defaultArg(offset, 0);\n\t        offset = this.toSeconds(offset);\n\t        time = this.toSeconds(time);\n\t        this._offset = offset;\n\t        this._clock.start(time);\n\t        //unmute the player\n\t        this._player.volume.setValueAtTime(0, time);\n\t        if (duration) {\n\t            this._stop(time + this.toSeconds(duration));\n\t        }\n\t    };\n\t    /**\n\t\t *  Internal start method\n\t\t *  @param {Time} time\n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._stop = function (time) {\n\t        this._clock.stop(time);\n\t        //mute the player\n\t        this._player.volume.cancelScheduledValues(time);\n\t        this._player.volume.setValueAtTime(-Infinity, time);\n\t    };\n\t    /**\n\t\t *  Invoked on each clock tick. scheduled a new\n\t\t *  grain at this time.\n\t\t *  @param  {Time}  time \n\t\t *  @private\n\t\t */\n\t    Tone.GrainPlayer.prototype._tick = function (time) {\n\t        var bufferDuration = this.buffer.duration;\n\t        if (this.loop && this._loopEnd > 0) {\n\t            bufferDuration = this._loopEnd;\n\t        }\n\t        var drift = (Math.random() * 2 - 1) * this.drift;\n\t        var offset = this._offset - this._overlap + drift;\n\t        var detune = this.detune / 100;\n\t        //keep the offset within the limits of the buffer\n\t        offset = Math.max(offset, 0);\n\t        offset = Math.min(offset, bufferDuration);\n\t        var originalFadeIn = this._player.fadeIn;\n\t        if (this.loop && this._offset > bufferDuration) {\n\t            //play the end\n\t            var endSegmentDuration = this._offset - bufferDuration;\n\t            this._player.start(this.buffer, time, offset, endSegmentDuration + this._overlap, detune);\n\t            //and play the beginning \n\t            offset = this._offset % bufferDuration;\n\t            this._offset = this._loopStart;\n\t            this._player.fadeIn = 0;\n\t            this._player.start(this.buffer, time + endSegmentDuration, this._offset, offset + this._overlap, detune);\n\t        } else if (this._offset > bufferDuration) {\n\t            //set the state to stopped. \n\t            this.stop(time);\n\t        } else {\n\t            if (offset === 0) {\n\t                this._player.fadeIn = 0;\n\t            }\n\t            this._player.start(this.buffer, time, offset, this.grainSize + this._overlap, detune);\n\t        }\n\t        this._player.fadeIn = originalFadeIn;\n\t        //increment the offset\n\t        var duration = this._clock._nextTick - time;\n\t        this._offset += duration * this._playbackRate;\n\t    };\n\t    /**\n\t\t *  Jump to a specific time and play it.\n\t\t *  @param  {Time}  offset  The offset to jump to.\n\t\t *  @param {Time=} time When to make the jump.\n\t\t *  @return  {[type]}  [description]\n\t\t */\n\t    Tone.GrainPlayer.prototype.scrub = function (offset, time) {\n\t        this._offset = this.toSeconds(offset);\n\t        this._tick(this.toSeconds(time));\n\t        return this;\n\t    };\n\t    /**\n\t\t * The playback rate of the sample\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Positive}\n\t\t * @name playbackRate\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {\n\t        get: function () {\n\t            return this._playbackRate;\n\t        },\n\t        set: function (rate) {\n\t            this._playbackRate = rate;\n\t            this.grainSize = this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * The loop start time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopStart\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {\n\t        get: function () {\n\t            return this._loopStart;\n\t        },\n\t        set: function (time) {\n\t            this._loopStart = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The loop end time. \n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name loopEnd\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {\n\t        get: function () {\n\t            return this._loopEnd;\n\t        },\n\t        set: function (time) {\n\t            this._loopEnd = this.toSeconds(time);\n\t        }\n\t    });\n\t    /**\n\t\t * The direction the buffer should play in\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {boolean}\n\t\t * @name reverse\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {\n\t        get: function () {\n\t            return this.buffer.reverse;\n\t        },\n\t        set: function (rev) {\n\t            this.buffer.reverse = rev;\n\t        }\n\t    });\n\t    /**\n\t\t * The size of each chunk of audio that the \n\t\t * buffer is chopped into and played back at.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name grainSize\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {\n\t        get: function () {\n\t            return this._grainSize;\n\t        },\n\t        set: function (size) {\n\t            this._grainSize = this.toSeconds(size);\n\t            this._clock.frequency.value = this._playbackRate / this._grainSize;\n\t        }\n\t    });\n\t    /**\n\t\t * This is the duration of the cross-fade between \n\t\t * sucessive grains.\n\t\t * @memberOf Tone.GrainPlayer#\n\t\t * @type {Time}\n\t\t * @name overlap\n\t\t */\n\t    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {\n\t        get: function () {\n\t            return this._overlap;\n\t        },\n\t        set: function (time) {\n\t            time = this.toSeconds(time);\n\t            this._overlap = time;\n\t            if (this._overlap < 0) {\n\t                this._player.fadeIn = 0.01;\n\t                this._player.fadeOut = 0.01;\n\t            } else {\n\t                this._player.fadeIn = time;\n\t                this._player.fadeOut = time;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up\n\t\t * @return {Tone.GrainPlayer} this\n\t\t */\n\t    Tone.GrainPlayer.prototype.dispose = function () {\n\t        Tone.Source.prototype.dispose.call(this);\n\t        this.buffer.dispose();\n\t        this.buffer = null;\n\t        this._player.dispose();\n\t        this._player = null;\n\t        this._clock.dispose();\n\t        this._clock = null;\n\t        return this;\n\t    };\n\t    return Tone.GrainPlayer;\n\t});\n\tModule(function (Tone) {\n\t    \n\t    /**\n\t\t *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up\n\t\t *          and external microphone or audio input. Check \n\t\t *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)\n\t\t *          to see which browsers are supported. Access to an external input\n\t\t *          is limited to secure (HTTPS) connections.\n\t\t *         \n\t\t *  @constructor\n\t\t *  @extends {Tone}\n\t\t *  @param {Decibels=} volume The level of the input\n\t\t *  @example\n\t\t * //list the inputs and open the third one\n\t\t * var motu = new Tone.UserMedia();\n\t\t * \n\t\t * //opening the input asks the user to activate their mic\n\t\t * motu.open().then(function(){\n\t\t * \t//opening is activates the microphone\n\t\t * \t//starting lets audio through\n\t\t * \tmotu.start(10);\n\t\t * });\n\t\t */\n\t    Tone.UserMedia = function () {\n\t        var options = this.optionsObject(arguments, ['volume'], Tone.UserMedia.defaults);\n\t        /**\n\t\t\t *  The MediaStreamNode \n\t\t\t *  @type {MediaStreamAudioSourceNode}\n\t\t\t *  @private\n\t\t\t */\n\t        this._mediaStream = null;\n\t        /**\n\t\t\t *  The media stream created by getUserMedia.\n\t\t\t *  @type {LocalMediaStream}\n\t\t\t *  @private\n\t\t\t */\n\t        this._stream = null;\n\t        /**\n\t\t\t *  The open device\n\t\t\t *  @type  {MediaDeviceInfo}\n\t\t\t *  @private\n\t\t\t */\n\t        this._device = null;\n\t        /**\n\t\t\t *  The output volume node\n\t\t\t *  @type  {Tone.Volume}\n\t\t\t *  @private\n\t\t\t */\n\t        this._volume = this.output = new Tone.Volume(options.volume);\n\t        /**\n\t\t\t * The volume of the output in decibels.\n\t\t\t * @type {Decibels}\n\t\t\t * @signal\n\t\t\t * @example\n\t\t\t * input.volume.value = -6;\n\t\t\t */\n\t        this.volume = this._volume.volume;\n\t        this._readOnly('volume');\n\t        this.mute = options.mute;\n\t    };\n\t    Tone.extend(Tone.UserMedia);\n\t    /**\n\t\t * the default parameters\n\t\t * @type {Object}\n\t\t */\n\t    Tone.UserMedia.defaults = {\n\t        'volume': 0,\n\t        'mute': false\n\t    };\n\t    /**\n\t\t *  Open the media stream. If a string is passed in, it is assumed\n\t\t *  to be the label or id of the stream, if a number is passed in,\n\t\t *  it is the input number of the stream.\n\t\t *  @param  {String|Number} [labelOrId=\"default\"] The label or id of the audio input media device. \n\t\t *                                                With no argument, the default stream is opened.\n\t\t *  @return {Promise} The promise is resolved when the stream is open.\n\t\t */\n\t    Tone.UserMedia.prototype.open = function (labelOrId) {\n\t        labelOrId = this.defaultArg(labelOrId, 'default');\n\t        return this.enumerateDevices().then(function (devices) {\n\t            var device;\n\t            if (this.isNumber(labelOrId)) {\n\t                device = devices[labelOrId];\n\t            } else {\n\t                device = devices.find(function (device) {\n\t                    return device.label === labelOrId || device.deviceId === labelOrId;\n\t                });\n\t                if (!device) {\n\t                    //otherwise just take the first one\n\t                    device = devices[0];\n\t                }\n\t            }\n\t            //didn't find a matching device\n\t            if (!device) {\n\t                throw new Error('Tone.UserMedia: no matching audio inputs.');\n\t            }\n\t            this._device = device;\n\t            //do getUserMedia\n\t            var constraints = {\n\t                audio: {\n\t                    'deviceId': device.deviceId,\n\t                    'echoCancellation': false,\n\t                    'sampleRate': this.context.sampleRate\n\t                }\n\t            };\n\t            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n\t                //start a new source only if the previous one is closed\n\t                if (!this._stream) {\n\t                    this._stream = stream;\n\t                    //Wrap a MediaStreamSourceNode around the live input stream.\n\t                    this._mediaStream = this.context.createMediaStreamSource(stream);\n\t                    //Connect the MediaStreamSourceNode to a gate gain node\n\t                    this._mediaStream.connect(this.output);\n\t                }\n\t                return this;\n\t            }.bind(this));\n\t        }.bind(this));\n\t    };\n\t    /**\n\t\t *  Close the media stream\n\t\t *  @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.close = function () {\n\t        if (this._stream) {\n\t            this._stream.getAudioTracks().forEach(function (track) {\n\t                track.stop();\n\t            });\n\t            this._stream = null;\n\t            //remove the old media stream\n\t            this._mediaStream.disconnect();\n\t            this._mediaStream = null;\n\t        }\n\t        this._device = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  Returns a promise which resolves with the list of audio input devices available.\n\t\t *  @return {Promise} The promise that is resolved with the devices\n\t\t *  @example\n\t\t * extInput.enumerateDevices().then(function(devices){\n\t\t * \tconsole.log(devices)\n\t\t * })\n\t\t */\n\t    Tone.UserMedia.prototype.enumerateDevices = function () {\n\t        return navigator.mediaDevices.enumerateDevices().then(function (devices) {\n\t            return devices.filter(function (device) {\n\t                return device.kind === 'audioinput';\n\t            });\n\t        });\n\t    };\n\t    /**\n\t\t *  Returns the playback state of the source, \"started\" when the microphone is open\n\t\t *  and \"stopped\" when the mic is closed.\n\t\t *  @type {Tone.State}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name state\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'state', {\n\t        get: function () {\n\t            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns an identifier for the represented device that is \n\t\t * \tpersisted across sessions. It is un-guessable by other applications and \n\t\t * \tunique to the origin of the calling application. It is reset when the \n\t\t * \tuser clears cookies (for Private Browsing, a different identifier is \n\t\t * \tused that is not persisted across sessions). Returns undefined when the \n\t\t * \tdevice is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name deviceId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.deviceId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a group identifier. Two devices have the \n\t\t * \tsame group identifier if they belong to the same physical device.\n\t\t * \tReturns undefined when the device is not open.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.groupId;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * \tReturns a label describing this device (for example \"Built-in Microphone\"). \n\t\t * \tReturns undefined when the device is not open or label is not available\n\t\t * \tbecause of permissions.\n\t\t *  @type {String}\n\t\t *  @readOnly\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name groupId\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'label', {\n\t        get: function () {\n\t            if (this._device) {\n\t                return this._device.label;\n\t            }\n\t        }\n\t    });\n\t    /**\n\t\t * Mute the output. \n\t\t * @memberOf Tone.UserMedia#\n\t\t * @type {boolean}\n\t\t * @name mute\n\t\t * @example\n\t\t * //mute the output\n\t\t * userMedia.mute = true;\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {\n\t        get: function () {\n\t            return this._volume.mute;\n\t        },\n\t        set: function (mute) {\n\t            this._volume.mute = mute;\n\t        }\n\t    });\n\t    /**\n\t\t * Clean up.\n\t\t * @return {Tone.UserMedia} this\n\t\t */\n\t    Tone.UserMedia.prototype.dispose = function () {\n\t        Tone.prototype.dispose.call(this);\n\t        this.close();\n\t        this._writable('volume');\n\t        this._volume.dispose();\n\t        this._volume = null;\n\t        this.volume = null;\n\t        return this;\n\t    };\n\t    /**\n\t\t *  If getUserMedia is supported by the browser.\n\t\t *  @type  {Boolean}\n\t\t *  @memberOf Tone.UserMedia#\n\t\t *  @name supported\n\t\t *  @static\n\t\t *  @readOnly\n\t\t */\n\t    Object.defineProperty(Tone.UserMedia, 'supported', {\n\t        get: function () {\n\t            return !Tone.prototype.isUndef(navigator.mediaDevices) && Tone.prototype.isFunction(navigator.mediaDevices.getUserMedia);\n\t        }\n\t    });\n\t    return Tone.UserMedia;\n\t});\n\t\n\treturn Tone;\n}));","module.exports={\n  \"version\": \"0.0.1\",\n  \"backgroundColor\": 16777215,\n  \"attenuation\": 0.999,\n  \"camera\": {\n    \"fov\": 60,\n    \"near\": 1,\n    \"far\": 1000,\n    \"position\": {\n      \"x\": 0.5530312975540033,\n      \"y\": 0.48524403572738883,\n      \"z\": 31.423164395207767\n    }\n  },\n  \"controls\": {\n    \"enableZoom\": true,\n    \"enableRotate\": true,\n    \"enablePan\": true,\n    \"enableDamping\": true,\n    \"dampingFactor\": 0.5,\n    \"rotateSpeed\": 0.5,\n    \"target\": {\n      \"x\": 0.07717754602894467,\n      \"y\": -14.659580632140548,\n      \"z\": 1.1318653029928603\n    },\n    \"maxPolarAngle\": 3.141592653589793,\n    \"minPolarAngle\": 0\n  },\n  \"light\": {\n    \"position\": {\n      \"x\": 0,\n      \"y\": 50,\n      \"z\": 0\n    }\n  },\n  \"colors\": [\n    2390944,\n    7389619,\n    11721663,\n    15990717,\n    16717396\n  ]\n}","// CannonWrapper.js\n\nvar glslify = require('glslify')\n\nvar FloatType = THREE.FloatType\nvar Quaternion = CANNON.Quaternion\nvar Vec3 = CANNON.Vec3\nvar mat4 = new THREE.Matrix4()\nvar ONES = new THREE.Vector3(1,1,1)\nvar quat = new THREE.Quaternion()\nvar pos = new THREE.Vector3()\n\n\nclass CannonWrapper {\n\n  constructor( options ) {\n\n    Object.assign( this, {\n\n      gravity: new Vec3(0, -100, 0),\n\n      fixedTimeStep: 1 / 60,\n\n      maxSubSteps: 10,\n\n      iterations: 10,\n\n      world: undefined,\n\n      lastTime: 0,\n\n      springs: [],\n\n      onUpdate: time => {\n        // ...\n      },\n\n      updateBodies: (bodies, time) => {\n\n        bodies.forEach( b => {\n\n          if(b.mesh){\n            b.mesh.position.copy( b.position )\n            b.mesh.quaternion.copy( b.quaternion )\n          }\n\n        });\n\n      }\n\n    }, options || {} )\n\n    if(!this.world) {\n\n      this.setupWorld()\n\n    }\n\n    // console.log( this.gravity );\n\n  }\n\n\n  setupWorld() {\n\n    this.world = this.world || new CANNON.World();\n\n    this.world.gravity = this.gravity\n\n    this.world.solver.iterations = this.iterations\n\n  }\n\n  update ( time ) {\n\n    if(this.lastTime){\n\n      this.world.step( this.fixedTimeStep, time - this.lastTime, this.maxSubSteps )\n    }\n\n    this.lastTime = time;\n\n    this.onUpdate( time )\n\n    this.updateBodies( this.world.bodies, time )\n\n    // update springs\n    this.springs.forEach( ( spring ) => {\n      spring.applyForce();\n    });\n\n\n  }\n\n  addBody( shape, options ){\n\n    var body = new CANNON.Body( Object.assign({\n      mass: 1\n    }, options || {}) );\n\n    body.addShape( shape );\n\n    this.world.add( body );\n\n    return body;\n  }\n\n  removeBody( body ){\n\n    this.world.removeBody( body );\n\n  }\n\n\n  addConstraint( c ){\n\n    this.world.addConstraint( c );\n\n    return c;\n  }\n\n  removeConstraint( c ){\n\n    this.world.removeConstraint( c );\n\n  }\n\n\n\n  addPointConstraint( bodyA, localPivotA, bodyB, localPivotB ){\n\n\n    let c = new CANNON.PointToPointConstraint( bodyA, localPivotA, bodyB, localPivotB );\n\n    return this.addConstraint( c );\n  }\n\n\n  // addConeConstraint( bodyA, pivotA, options ) {\n\n  //   let c = new CANNON.ConeTwistConstraint( bodyA, bodyB );\n\n  //   Object.assign( c, {\n  //     pivotA: Vec3.ZERO,\n  //     pivotB: Vec3.ZERO,\n  //     axisA: Vec3.UNIT_Z,\n  //     axisB: Vec3.UNIT_Z,\n  //     maxForce: Infinity,\n  //     collideConnected: false\n  //   }, options || {} )\n\n  //   return this.addConstraint( c );\n  // }\n\n\n  addLockConstraint( bodyA, bodyB, options ){\n\n    var c = new CANNON.LockConstraint ( bodyA, bodyB );\n\n    Object.assign( c, {\n      maxForce: Infinity,\n      collideConnected: false\n    }, options || {} )\n\n    return this.addConstraint( c );\n  }\n\n\n\n  addSphere( radius, options ){\n\n    return this.addBody( new CANNON.Sphere( radius ), options );\n\n  }\n\n  addBox( halfExtents, options ){\n\n    return this.addBody( new CANNON.Box( halfExtents ), options );\n\n  }\n\n  addPlane( options ){\n\n    return this.addBody( new CANNON.Plane(), options );\n\n  }\n\n  addBoxMesh( m, options ) {\n\n    if(!m.geometry.boundingBox){\n      m.geometry.computeBoundingBox();\n    }\n\n    var extents = m.geometry.boundingBox.getSize()\n\n    extents.multiply( m.scale ).multiplyScalar( 0.5 )\n\n    let body = this.addBox( new Vec3().copy(extents), Object.assign({\n      position: new Vec3().copy(m.position),\n      quaternion: new Quaternion().copy( m.quaternion ),\n      mass: extents.x * extents.y * extents.z * 2.0\n    }, options ) );\n\n    body.mesh = m\n\n    return body\n\n  }\n\n  addSpring( bodyA, bodyB, options ) {\n\n    /*\n    localAnchorA: new CANNON.Vec3(0,0,0),\n    localAnchorB: new CANNON.Vec3(0,0,0),\n    restLength : 0,\n    stiffness : 50,\n    damping : 1,\n     */\n\n    var spring = new CANNON.Spring( bodyA, bodyB, options )\n\n    this.springs.push(spring);\n\n    return spring;\n  }\n\n  getBodyCount() {\n    return this.world.bodies.length\n  }\n\n}\n\nmodule.exports = CannonWrapper","\nvar CustomMaterial = function (parameters) {\n\n  parameters = parameters || {}\n\n  THREE.MeshStandardMaterial.call( this );\n\n  this.type = 'CustomMaterial';\n\n  // add standard THREE uniforms\n  parameters.uniforms = Object.assign(\n    {\n      // color: {type: 'c', value: new THREE.Color()}\n    },\n    THREE.ShaderLib.standard.uniforms,\n    parameters.uniforms || {} );\n\n\n  // set the shaders\n  Object.assign(this, {\n\n    vertexShader: THREE.ShaderLib['physical']['vertexShader'],\n\n    fragmentShader: THREE.ShaderLib['physical']['fragmentShader'],\n\n  },  parameters);\n\n  //\n  this.setValues(parameters);\n\n}\n\n\nCustomMaterial.prototype = Object.create( THREE.MeshStandardMaterial.prototype );\nCustomMaterial.prototype.constructor = CustomMaterial;\nCustomMaterial.prototype.isMeshStandardMaterial = true;\n\nmodule.exports = CustomMaterial","\n\nvar quat = new THREE.Quaternion()\nvar scl = new THREE.Vector3(1,1,1)\n\nclass Joint {\n\n  constructor( options ) {\n\n    Object.assign( this, {\n\n      transform: new THREE.Matrix4(),\n\n      offset: new THREE.Matrix4(),\n\n      bodyMatrix: new THREE.Matrix4(),\n\n      localMatrix: new THREE.Matrix4(),\n\n      matrixWorld: new THREE.Matrix4(),\n\n      body: null,\n\n      debugMesh: null\n\n    }, options || {} )\n\n    this.setup( this.transform )\n\n  }\n\n\n  setup( transform ){\n\n    this.composeBodyMatrix()\n\n    var invParent = new THREE.Matrix4().getInverse( this.bodyMatrix )\n\n    this.localMatrix.copy( invParent ).multiply( transform )\n\n    this.offset.getInverse( transform )\n\n  }\n\n  update(){\n\n    this.updateMatrixWorld()\n\n    if(this.debugMesh) {\n\n      this.matrixWorld.decompose(\n        this.debugMesh.position,\n        this.debugMesh.quaternion,\n        this.debugMesh.scale)\n\n    }\n\n    this.transform.copy( this.matrixWorld ).multiply( this.offset )\n\n  }\n\n  composeBodyMatrix() {\n\n    this.bodyMatrix.compose(\n      this.body.position,\n      quat.copy(this.body.quaternion),\n      scl)\n\n  }\n\n  updateMatrixWorld () {\n    this.composeBodyMatrix()\n    this.matrixWorld.copy( this.bodyMatrix ).multiply( this.localMatrix );\n  }\n\n}\n\n\nmodule.exports = Joint\n","import Joint from './Joint.js'\n\n\nclass JointsToTexture {\n\n  constructor ( options ) {\n\n    Object.assign(this, {\n\n      joints: [],\n\n      height: 0,\n\n      texture: {value: undefined},\n\n      textureDim: {value: new THREE.Vector2()},\n\n      onNewDataTexture: tex => {\n        // callback when the texture size changes\n      }\n\n    }, options || {} )\n\n  }\n\n  update () {\n\n    // if there's nothing to do don't do it\n    if(!this.joints.length) return;\n\n\n    // check to see if we need to resize\n    if (this.height < this.joints.length && this.texture.value) {\n\n      // dispose of the texture and we'll make a new one on the following step\n      this.texture.value.dispose()\n      this.texture.value = undefined\n\n    }\n\n    // create a new data texture if needed\n    if( this.height < this.joints.length ) {\n\n      // create the joint texture and assign height\n      let w = 4; // 4 pixels needed for 1 matrix\n      let h = THREE.Math.nextPowerOfTwo( this.joints.length )\n      this.height = h\n\n      this.jointData = new Float32Array(w * 4 * h)\n\n      this.texture.value = new THREE.DataTexture( this.jointData, w, h, THREE.RGBAFormat, THREE.FloatType );\n\n      Object.assign( this.texture.value, {\n        minFilter: THREE.NearestFilter,\n        magFilter: THREE.NearestFilter\n      })\n\n      this.textureDim.value.set( w, h )\n\n      this.onNewDataTexture( this.texture.value )\n\n    }\n\n\n    // iterate through the bodies and add the data to our texture\n    this.joints.forEach( ( j, i ) => {\n      j.update()\n      j.transform.toArray( this.jointData, i * 16);\n    });\n\n    // send it to the gpu\n    this.texture.value.needsUpdate = true;\n  }\n\n  getJointCount(){\n    return this.joints.length\n  }\n\n  addJoint( body, transform, debugMesh ) {\n\n    var j = new Joint({\n      transform: transform,\n      body: body,\n      debugMesh: debugMesh } )\n\n    this.joints.push( j )\n\n    return j\n  }\n\n}\n\n\nmodule.exports = JointsToTexture","// LaserUtils.js\n\nvar createElementFromString = strHTML => {\n  return document.createRange().createContextualFragment(strHTML)\n}\n\nvar appendTo = (parent, strHTML) => {\n  parent.appendChild( createElementFromString( strHTML ) )\n}\n\n\nmodule.exports.createElementFromString = createElementFromString\n\nmodule.exports.appendTo = appendTo;\n\nmodule.exports.smoothStep = ( x ) => {\n  if ( x <= 0 ) return 0;\n  if ( x >= 1 ) return 1;\n  return x * x * ( 3 - 2 * x );\n}\n\nmodule.exports.smootherStep = ( x ) => {\n  if ( x <= 0 ) return 0;\n  if ( x >= 1 ) return 1;\n  return x * x * x * ( x * ( x * 6 - 15 ) + 10 );\n}\n\nmodule.exports.randomElement = obj => {\n\n  if (Array.isArray(obj)) {\n\n    return obj[Math.floor(Math.random() * obj.length)];\n\n  } else if (obj instanceof Object) {\n\n    return obj[randElement(Object.keys[obj])];\n\n  }\n\n  return obj;\n};\n\n\n/**\n * convenience function for making a DataTexture\n * @param  {Array} data\n * @param  {Number} w       1 pixel of rgba is 4 data values\n * @param  {Number} h       height\n * @param  {Object} options data texture options\n * @return {THREE.DataTexture}\n */\n module.exports.makeDataTexture = ( data, w, h, options ) => {\n\n  options = Object.assign({\n    format: THREE.RGBAFormat,\n    type: THREE.FloatType,\n    mapping: THREE.UVMapping,\n    wrapS: THREE.ClampToEdgeWrapping,\n    wrapT: THREE.ClampToEdgeWrapping,\n    minFilter: THREE.NearestFilter,\n    magFilter: THREE.NearestFilter,\n    anisotropy: 1\n  }, options || {} );\n\n  var dt = new THREE.DataTexture(\n    data,\n    w,\n    h,\n    options.format,\n    options.type,\n    options.mapping,\n    options.wrapS,\n    options.wrapT,\n    options.magFilter,\n    options.minFilter,\n    options.anisotropy );\n\n  dt.needsUpdate = true;\n\n  return dt;\n}\n\n\n// makePaletteTexture.js\n// makes a palette texture from patterns matching this sites urls:\n// https://coolors.co/ff6978-fffcf9-e5f4e3-5da9e9-495867\nmodule.exports.makePaletteTexture = function( url, rotate) {\n\n  let s = url.split('/').pop().split('-').map(str => {\n    return parseInt(\"0x\" + str)\n  })\n\n  // convert the hex data to 0-255\n  var colorData = s.map( hex => {\n    return new THREE.Color( hex ).toArray().map( v => {\n      return parseInt( Math.min(255,v * 255) )\n    })\n  })\n\n  // flatten the array\n  colorData = [].concat.apply([], colorData);\n\n  // create the texture\n  var dataTexture;\n\n  if(rotate){\n\n    dataTexture = new THREE.DataTexture(\n      new Uint8Array( colorData ),\n      colorData.length / 3,\n      1,\n      THREE.RGBFormat );\n\n  } else {\n\n    dataTexture = new THREE.DataTexture(\n      new Uint8Array( colorData ),\n      1,\n      colorData.length / 3,\n      THREE.RGBFormat );\n  }\n\n  dataTexture.needsUpdate = true\n\n  return dataTexture\n}\n","// PostProcess.js\n\nvar glslify = require('glslify');\n\n\n\nvar fullScreenMat = new THREE.MeshBasicMaterial({\n  color: 'red',\n  side: 2\n})\n\nvar PostProcess = function (options){\n\n  this.usePO2 = true;\n\n  this.width = window.innerWidth;\n\n  this.height = window.innerHeight;\n\n\n  this.renderTargetOptions = {\n    // minFilter: THREE.LinearFilter,\n    minFilter: THREE.LinearMipMapLinearFilter,\n    // magFilter: THREE.LinearFilter,\n    format: THREE.RGBAFormat,\n    wrapS: THREE.RepeatWrapping,\n    wrapT: THREE.RepeatWrapping,\n  }\n\n\n  this.uResolution = {\n    type: 'v2',\n    value: new THREE.Vector2(this.width, this.height)\n  }\n\n  this.uOpacity = {\n    type: 'f',\n    value: 1\n  };\n\n  this.fullScreenFragmentShader = glslify(`\n    #pragma glslify: fxaa = require(glsl-fxaa)\n    uniform sampler2D tDiffuse;\n    uniform vec2 resolution;\n    uniform float opacity;\n    varying vec2 vUv;\n    void main() {\n      vec4 c = fxaa(tDiffuse, vUv * resolution, resolution);\n      gl_FragColor = c;//vec4(c.xyz, opacity);\n    }\n    `);\n\n  this.fullScreenVertexShader = glslify(`\n    varying vec2 vUv;\n    void main() {\n      vUv = uv;\n      gl_Position = vec4( position, 1.0 );\n    }`);\n\n\n  // override defaults\n  Object.assign(this, options);\n\n\n  // resize to nearest power of two\n  if(this.usePO2) {\n    this.width = THREE.Math.nearestPowerOfTwo (this.width);\n    this.height = THREE.Math.nearestPowerOfTwo (this.height);\n  }\n\n\n  this.fullScreenMaterial = new THREE.ShaderMaterial({\n\n      transparent: true,\n\n      blending: 0,\n\n      depthTest: false,\n\n      depthWrite: false,\n\n      side: 0,\n\n      uniforms: {\n        'resolution': this.uResolution,\n        'opacity': this.uOpacity,\n        'tDiffuse': {\n          type: 't',\n          value: null\n        },\n      },\n\n      vertexShader: this.fullScreenVertexShader,\n\n      fragmentShader: this.fullScreenFragmentShader\n  })\n\n\n  // make the rendertargets\n  this.readBuffer = new THREE.WebGLRenderTarget(\n    this.width,\n    this.height,\n    this.renderTargetOptions)\n\n  this.writeBuffer = this.readBuffer.clone();\n\n\n  this.quad = new THREE.Mesh( new THREE.PlaneBufferGeometry(2, 2), fullScreenMat );\n  this.quad.frustumCulled = false;\n  this.quad.scale.set(this.width, this.height, 1)\n\n  this.quadScene = new THREE.Scene();\n  this.quadScene.add( this.quad );\n\n\n  // passes\n  this.passes = []\n\n  // this.addPass({\n  //   fragmentShader: glslify('./PostMaterials/TestPass.frag')\n  // })\n\n\n}\n\n\n\nPostProcess.prototype.addPass = function( pass ) {\n\n  // var uniforms =\n\n  pass.uniforms = Object.assign({}, pass.uniforms || {}, {\n\n    tDiffuse: {  type: 't',  value: this.readBuffer },\n\n    resolution: this.uResolution\n  })\n\n  pass = Object.assign({\n\n    vertexShader: this.fullScreenVertexShader,\n\n    fragmentShader: this.fullScreenFragmentShader,\n\n  }, pass)\n\n\n  var mat = new THREE.ShaderMaterial( pass );\n\n  this.passes.push(mat);\n\n  return mat;\n}\n\n\nPostProcess.prototype.pingPong = function(){\n\n  // swap the render targets\n  var swapper = this.writeBuffer;\n  this.writeBuffer = this.readBuffer;\n  this.readBuffer = swapper;\n\n}\n\n\nPostProcess.prototype.doPasses = function(renderer, scene, camera){\n\n  renderer.render(scene, camera, this.writeBuffer, true );\n\n  this.pingPong();\n\n  this.passes.forEach( (mat, i) => {\n\n    mat.uniforms['tDiffuse'].value = this.readBuffer.texture;\n\n    this.quadScene.overrideMaterial = mat;\n\n    renderer.render(this.quadScene, camera, this.writeBuffer, true );\n\n    this.pingPong();\n\n  });\n}\n\n\nPostProcess.prototype.render = function(renderer, scene, camera, renderTarget){\n\n  this.doPasses(renderer, scene, camera);\n\n  this.fullScreenMaterial.uniforms['tDiffuse'].value = this.readBuffer.texture;\n  this.quadScene.overrideMaterial = this.fullScreenMaterial;\n  renderer.render(this.quadScene, camera, renderTarget, true );\n\n}\n\n\nPostProcess.prototype.setSize = function(w, h) {\n\n  if(this.usePO2) {\n\n    w = THREE.Math.nearestPowerOfTwo(w);\n    h = THREE.Math.nearestPowerOfTwo(h);\n\n  }\n\n  this.readBuffer.setSize(w, h);\n  this.writeBuffer.setSize(w, h);\n\n  this.uResolution.value.set(w, h);\n\n  this.passes.forEach( (pass, i) => {\n\n    if(pass['resolution']) {\n      pass['resolution'].value.set(w, h);\n    }\n\n  });\n\n}\n\n\nmodule.exports = PostProcess;","// SimpleSettings.js\nimport saveAs from 'save-as'\n\nvar iterateKeys = (obj, callback) => {\n  Object.keys(obj).forEach( callback );\n}\n\nvar recurrsiveSetConfig = (newSettings, config) => {\n\n  iterateKeys(newSettings, el => {\n\n    if( config[el] === undefined )  return\n\n    // THREE converts Color to hex value in toJSON so we need to test fo it\n    if( config[el].isColor ) {\n\n      config[el].setHex(newSettings[el])\n\n    } else if( typeof newSettings[el] !== 'object') {\n\n      config[el] = newSettings[el]\n\n    } else {\n\n      recurrsiveSetConfig( newSettings[el], config[el] )\n\n    }\n\n  })\n\n}\n\n\n\nfunction SimpleSettings( loadingManager ) {\n\n  var jsonLoader = new THREE.FileLoader( loadingManager );\n  jsonLoader.setResponseType( 'json' );\n\n\n  var save = (config, suggestedName) => {\n\n    let blob = new Blob( [JSON.stringify(config, null, 2 )], { type : 'application/json' } )\n\n    saveAs( blob, suggestedName || 'config.json' )\n\n  }\n\n  var setConfig = (settings, config) => {\n\n    recurrsiveSetConfig( settings, config );\n\n  }\n\n  var load = (jsonurl, config) => {\n\n    jsonLoader.load( jsonurl, result => {\n\n      setConfig( result, config )\n\n    } )\n\n  }\n\n\n  return {\n    save: save,\n    load: load,\n    jsonLoader: jsonLoader,\n    setConfig: setConfig\n  }\n\n}\n\nmodule.exports = SimpleSettings\n","\nvar glslify = require('glslify')\n\nimport isMobile from 'ismobilejs'\n\nconst MOBILE = isMobile.any;\n\nimport ThreeView from './ThreeView.js'\n\nimport CustomMaterial from './CustomMaterial.js'\n\nimport TouchEvents from './touchEvents.js'\n\nimport SimpleSettings from './SimpleSettings.js'\n\nimport CannonWrapper from './CannonWrapper.js'\n\nimport SkinManager from './SkinManager.js'\n\nimport PostProcess from './PostProcess.js'\n\nimport posEase from 'eases/circ-in-out'\n\nimport soundEase from 'eases/cubic-in-out'\n\nimport Tone from 'tone'\n\nimport StartAudioContext from 'startaudiocontext'\n\nStartAudioContext(Tone.context, \"#container\", () => {\n  console.log( 'started audio context' );\n})\n\n\nimport {\n  appendTo,\n  randomElement,\n  smoothStep,\n  makeDataTexture,\n  makePaletteTexture\n} from './LaserUtils.js'\n\n\n\n// this needs dome work...\nvar getUpVec = v => {\n\n  var upVec = new Vec3();\n  v.cross( Vec3.UNIT_X, upVec )\n  return upVec;\n\n}\n\n\n\nvar elapsedTime = 0\nvar frame = 0\n\nvar abs = Math.abs;\nvar max = Math.max;\nvar min = Math.min;\nvar sin = Math.sin;\nvar cos = Math.cos;\nvar pow = Math.pow;\nvar PI = Math.PI;\nvar TWO_PI = Math.PI * 2;\nvar HALF_PI = Math.PI * 0.5;\nvar random = Math.random;\nvar randf = THREE.Math.randFloat;\nvar randi = THREE.Math.randInt;\nvar lerp = THREE.Math.lerp;\nvar mapLinear = THREE.Math.mapLinear;\nvar clamp = THREE.Math.clamp;\nvar Vec3 = CANNON.Vec3\n\nvar loadingManager = new THREE.LoadingManager;\nvar textureLoader = new THREE.TextureLoader(loadingManager);\nvar jsonLoader = new THREE.FileLoader(loadingManager);\njsonLoader.setResponseType('json');\n\nvar colUrl = randomElement([\n  'https://coolors.co/app/05668d-427aa1-ebf2fa-679436-a5be00', // <- nice\n  'https://coolors.co/2b2d42-8d99ae-edf2f4-ef233c-d90429',\n  'https://coolors.co/1a535c-4ecdc4-f7fff7-ff6b6b-ffe66d',\n  'https://coolors.co/247ba0-70c1b3-b2dbbf-f3ffbd-ff1654',\n  'https://coolors.co/app/25ced1-ffffff-fceade-e43f6f-ff8a5b'\n])\n\n// console.log( 'colUrl: ' + colUrl );\n\nvar config = {\n  version: '0.0.1',\n  backgroundColor: 0xFFFFFF,\n  attenuation: 0.999,\n  camera: {\n    fov: 60,\n    near: 1,\n    far: 1000,\n    position: new THREE.Vector3(0, 40, 40)\n  },\n  controls: {\n    enableZoom: true,\n    enableRotate: true,\n    enablePan: true,\n    enableDamping: true,\n    dampingFactor: 0.5,\n    rotateSpeed: 0.5,\n    target: new THREE.Vector3(0, 0, 0),\n    maxPolarAngle: PI,\n    minPolarAngle: 0\n  },\n  light: {\n    position: new THREE.Vector3(0,50,0),\n    // distance: 32\n  },\n  colors: colUrl.split('/').pop().split('-').map( str => {\n    return new THREE.Color().setStyle('#' + str)\n  })\n}\n\n\n// load settings\nvar settings = new SimpleSettings( loadingManager );\nsettings.setConfig( require('../config.json'), config )\n// settings.load('config.json', config)\n\n\n// POST\nvar post = new PostProcess()\n\n\n\n\n// TONE\nvar limiter = new Tone.Limiter(-3).toMaster();\nvar volume = new Tone.Volume( 5 ).connect(limiter)\nvar dist = new Tone.Distortion(0.2).connect(volume)\n\nvar rollVolume = new Tone.Volume( -50 ).connect(volume)\nvar pingPong = new Tone.PingPongDelay(\"8n\", 0.2).connect(rollVolume)\nvar panner = new Tone.Panner(1).connect(rollVolume).connect(pingPong)\n\nvar rollSynth = new Tone.NoiseSynth({\n    noise  : {\n      type  : 'pink'\n    },\n    envelope: {\n      attack: 0.125,\n      decay: 0.1,\n      sustain: 0.01\n    }\n  })\n  .connect(panner)\n\nvar phaser = new Tone.Phaser({\n  \"frequency\" : 15,\n  \"octaves\" : 5,\n  \"baseFrequency\" : 1000\n}).connect(volume)\n\nvar bassSynth = new Tone.MembraneSynth({\n  pitchDecay:0.05,\n  octaves:2,\n  oscillator:{\n    type:\"sine\",\n  },\n  envelope:{\n    attack:0.01,\n    decay:0.9,\n    sustain:0.1,\n    release:2.4,\n    attackCurve:\"exponential\",\n  }\n})\n.connect( volume )\n.set('volume', -10)\n\n\n\nvar lowSynth = new Tone.PolySynth({\n  pitchDecay:0.05,\n  // octaves:2,\n  oscillator:{\n    type:\"sine\",\n  },\n  envelope:{\n    attack:0.01,\n    decay:0.9,\n    sustain:0.1,\n    release:2.4,\n    attackCurve:\"exponential\",\n  }\n})\n.chain( pingPong, volume )\n.set('volume', -10)\n\n\nif(MOBILE) {\n  console.log( 'MOBILE' );\n}\n\n\n// OUR SKETCH\nvar Sketch = () => {\n\n  var clock = new THREE.Clock()\n\n  // scene\n  var scene = new THREE.Scene()\n  // scene.fog = new THREE.Fog( config.backgroundColor, config.camera.near, config.camera.far * 0.5 );\n\n  // camera\n  var camera = new THREE.PerspectiveCamera(\n    config.camera.fov,\n    window.innerWidth / window.innerHeight, //aspect\n    config.camera.near,\n    config.camera.far);\n  camera.position.copy( config.camera.position )\n  config.camera.position = camera.position\n\n  // view - convenience object to setup the renderer\n  var view = new ThreeView({\n    container: 'container'\n  })\n\n  var renderer = view.renderer\n  renderer.setClearColor(new THREE.Color(config.backgroundColor), 1.0);\n  renderer.autoClear = true;\n\n  renderer.shadowMap.enabled = true;\n  renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n\n\n  // orbit controls\n  var controls = new THREE.OrbitControls( camera, renderer.domElement );\n  Object.assign(controls, config.controls || {})\n\n\n  var hemi_light = new THREE.HemisphereLight( 0xeeeeff, 0xaaaaab, 0.75 );\n  scene.add( hemi_light );\n\n  // var light = new THREE.SpotLight(0xFFFFFF)\n  // light.castShadow = true;\n  // light.shadow.mapSize.width = 1024\n  // light.shadow.mapSize.height = 1024\n  // light.position.set(0, 100, 80)\n\n\n  var light = new THREE.DirectionalLight(0xFFFFFF)\n\n  light.castShadow = true;\n  light.shadow.bias = 0.0001\n  light.shadow.mapSize.width = 1024\n  light.shadow.mapSize.height = 1024\n  light.shadow.camera.near = 10\n  light.shadow.camera.far = 300\n  light.shadow.camera.left = -20\n  light.shadow.camera.right = 20\n  light.shadow.camera.bottom = -20\n  light.shadow.camera.top = 20\n\n  light.position.set(0, 100, 80)\n\n  scene.add( light )\n  scene.add( light.target )\n\n\n  var cw = new CannonWrapper({\n    gravity: new CANNON.Vec3(0, -25, 0),\n  });\n\n\n  let sphereBody = cw.addSphere(4, {\n    mass: 0\n  })\n\n\n\n  var skinMan = new SkinManager(cw, {\n    debug: false\n  })\n  skinMan.frustumCulled = false\n  scene.add( skinMan.group )\n\n  let vel = new Vec3()\n  var q = new THREE.Quaternion()\n  var qlerp = new THREE.Quaternion()\n  cw.onUpdate = () => {\n\n    cw.world.bodies.forEach( ( b, i ) => {\n\n\n      vel.copy(b.position)\n      vel.scale( mapLinear(sin( elapsedTime * 2.0 + i ), -1, 1, -1, 0.7 ), vel );\n\n      vel.z -= sin(elapsedTime + i) * 0.01;\n\n      b.applyImpulse( vel, b.position )\n\n      if(b.hardPosition) {\n        b.position.copy( b.hardPosition )\n        b.velocity.set(0,0,0)\n        b.angularVelocity.scale( 0.9, b.angularVelocity)\n\n        qlerp.copy(b.quaternion)\n        qlerp.slerp( q, 0.025 );\n        b.quaternion.copy(qlerp);\n\n        b.mesh.material.emissiveIntensity = Math.max(b.mesh.material.emissiveIntensity - .01, 0)\n      }\n\n    });\n  }\n\n  var skins = []\n\n  var bumpNotes = [\n  // 'e2', 'f2', 'g2', 'a2', 'b2',\n  'e3', 'f3', 'g3', 'a3', 'b3',\n  'e4', 'f4', 'g4', 'a4', 'b4']\n\n  jsonLoader.load('assets/songWorm.json', json => {\n\n    var count = MOBILE ? 7 : 10;\n\n    var p = new THREE.Vector3(0, -17, 0)\n\n    for(let i=0; i<count; i++) {\n\n      p.x = sin( i * TWO_PI / count) * 10;\n      p.z = cos( i * TWO_PI / count) * 10;\n\n\n      var offsetMat = new THREE.Matrix4().makeTranslation( p.x, p.y, p.z )\n      let s = skinMan.buildSkin( json, {\n        constraintUp: Vec3.UNIT_Z,\n        offset: offsetMat,\n        // fragmentShader: glslify('./NoodleShader.frag')\n        fragmentShader: THREE.ShaderLib['standard'].fragmentShader\n      })\n\n      // s.material.wireframe = true\n\n      skins.push( s )\n\n\n      s.customDepthMaterial = new THREE.ShaderMaterial({\n        side: 1,\n        uniforms: {\n          jointTexture: s.material.uniforms.jointTexture,\n          jointTextureDim: s.material.uniforms.jointTextureDim,\n          jointOffset: s.material.uniforms.jointOffset,\n        },\n        fragmentShader: '#define DEPTH_PACKING ' + 3201 + ' \\n' + THREE.ShaderLib['depth']['fragmentShader'],\n        vertexShader: glslify('./SkinDepth.vert')//\n      });\n      s.castShadow = true;\n      s.receiveShadow = false;\n      s.frustumCulled = false;\n\n\n      [\n        'bulletRigidBodyShape1',\n        'bulletRigidBodyShape28'\n      ].forEach( bName => {\n\n        let b = s.bodyMap[ bName ]\n        b.addEventListener(\"collide\", ({body}) => {\n\n          if(body.hardPosition) {\n\n            body.mesh.material.emissiveIntensity = 1.5\n\n            lowSynth.triggerAttackRelease( body.note, '8n' )\n            bassSynth.triggerAttackRelease( body.note, '16n' )\n\n          }\n        })\n      });\n    }\n\n\n  })\n\n\n  // create some static bodies\n  let tileSize = 7;\n  var button = new THREE.Mesh(\n    new THREE.BoxGeometry(1,1,1),\n    new THREE.MeshNormalMaterial() )\n  button.scale.set(tileSize * 0.9,1,tileSize * 0.9);\n\n  button.castShadow = true;\n  button.receiveShadow = true;\n\n  let dim = 5;\n  for(var x=0, y=0; x<dim; x++) {\n    for(y=0; y<dim; y++) {\n\n      let b = button.clone()\n\n      b.position.x = (x + 0.5 - dim * 0.5) * tileSize\n      b.position.y = -20\n      b.position.z = (y + 0.5 - dim * 0.5) * tileSize\n\n      b.material = new THREE.MeshStandardMaterial({\n        emissiveIntensity: 0,\n        emissive: new THREE.Color().setRGB(\n          mapLinear(x, 0, dim-1, 0,1),\n          mapLinear(y, 0, dim-1, 0,1),\n          1)\n      })\n\n      scene.add(b)\n\n      b.body = cw.addBoxMesh(b, {mass: 10})\n\n      b.body.hardPosition = b.position;\n\n      b.body.note = randomElement(bumpNotes)\n\n\n    }\n  }\n\n\n\n\n  // update function called once per rAf loop\n  var update = () => {\n\n    frame++\n\n    elapsedTime = clock.getElapsedTime()\n\n    controls.update();\n\n    cw.update( elapsedTime )\n\n    skinMan.update()\n\n  }\n\n\n\n  // draw function called once per rAf loop\n  var draw = () => {\n\n    renderer.render( scene, camera, null, true )\n\n    // post.render(renderer, scene, camera, null, false )\n\n  }\n\n\n\n  // events\n  view.onResize = (e, w, h) => {\n\n    camera.aspect = view.aspect\n\n    camera.updateProjectionMatrix();\n\n    post.setSize(w, h);\n\n  }\n\n\n  var onScroll = e => {\n    // console.log( e.type );\n  }\n\n  var trackedTouches = null\n  var touches = new TouchEvents({\n\n    element: view.container,\n\n    onTouchStart: e => {\n      // console.log( e.type, e );\n      trackedTouches = e.touches\n    },\n\n    onTouchMove: e => {\n\n      if(!trackedTouches) return\n\n      onScroll( {\n        type: e.type,\n        deltaX: (trackedTouches[0].pageX - e.touches[0].pageX),\n        deltaY: (trackedTouches[0].pageY - e.touches[0].pageY)\n      })\n\n      trackedTouches = e.touches\n    },\n\n    onTouchEnd: e => {\n      // console.log( e.type, e );\n    }\n\n  })\n\n\n  window.addEventListener('wheel', onScroll )\n\n  // keyboard inputs\n  window.addEventListener('keypress', e => {\n\n    switch( e.key ) {\n\n      case 's':\n\n        settings.save(config)\n\n        break;\n\n      case 'c':\n\n        // print the camera target and position\n        console.log( 'camera: ', config.camera.position.toArray().map( u => {\n          return +u.toFixed(3);\n        } ) );\n\n        console.log( 'target: ', config.cameraSettings.target.toArray().map( u => {\n          return +u.toFixed(3);\n        } ) );\n\n      default:\n        return\n    }\n\n  })\n\n\n  // rAf loop\n  function animate() {\n    requestAnimationFrame( animate )\n    update()\n    draw()\n  }\n\n  animate()\n\n}\n\n\nmodule.exports = Sketch\n\n","\nvar glslify = require('glslify')\n\nimport CustomMaterial from './CustomMaterial.js'\n\nimport skinDataToGeometry from './skinDataToGeometry.js'\n\nimport JointsToTexture from './JointsToTexture.js'\n\nvar Vec3 = CANNON.Vec3\nvar pos = new Vec3()\nvar quat = new THREE.Quaternion()\nvar scl = new Vec3()\nvar mat4 = new THREE.Matrix4()\n\nvar unitBox = new THREE.Mesh(\n  new THREE.BoxGeometry(1,1,1),\n  new THREE.MeshBasicMaterial({\n    color: 'magenta',\n    wireframe: true\n  }))\n\nvar unitSphere = new THREE.Mesh( new THREE.SphereGeometry(1), unitBox.material )\n\nvar debugJointMesh = new THREE.Mesh(\n  new THREE.BoxGeometry(0.05,0.05,0.05),\n  new THREE.MeshBasicMaterial({\n    color: 'red',\n    wireframe: false\n  }) )\n\nvar cw = undefined\n\n\n// this needs dome work...\nvar getUpVec = (v0, v1) => {\n\n  var upVec = new Vec3();\n  v0.cross( v1 || Vec3.UNIT_X, upVec )\n  // upVec.normalize()\n  return upVec;\n\n}\n\n\nvar j2t = new JointsToTexture()\nvar bodyMap = {}\n\nclass SkinManager {\n\n  constructor(cannonWrapper, options) {\n\n    Object.assign( this, {\n\n      skins: [],\n\n      bodies: [],\n\n      cw: cannonWrapper,\n\n      group: new THREE.Object3D(),\n\n      debug: false,\n\n      fragmentShader: this.getFragmentShader(), //\n\n      // smoothing: 0.5\n\n    }, options || {} )\n\n    cw = this.cw\n\n  }\n\n\n  update() {\n\n    j2t.update()\n\n  }\n\n\n  buildSkin( json, options ) {\n\n    var jointIndexOffset = j2t.getJointCount()\n\n    options = Object.assign( {\n      fragmentShader: THREE.ShaderLib['normal'].fragmentShader,\n      constraintUp: Vec3.UNIT_Y,\n      // offset: new THREE.Matrix4()\n      debug: this.debug\n    }, options || {} )\n\n    // make our geometry forst thing, before we do anything else. don't fuck around\n    let g = skinDataToGeometry( json, 0 )\n\n    // move on to the details\n    bodyMap = {}\n\n    var debug = this.debug\n\n    // ADD THE RIGID BODIES\n    this.addBodies( json, options.offset, this.debug )\n\n    // ADD THE JOINTS\n    this.addJointsFromJson(json, debug)\n\n    // ADD THE CONSTRAINTS\n    this.addConstraintsFromJson( json, options.constraintUp )\n\n    // make the skin\n    let mat = new CustomMaterial({\n      wireframe: this.debug,\n      uniforms: {\n        jointTexture: j2t.texture,\n        jointTextureDim: j2t.textureDim,\n        jointOffset: {value: jointIndexOffset }\n      },\n      vertexShader: this.getVertexShader(),\n      fragmentShader: options.fragmentShader\n    })\n\n    let m = new THREE.Mesh( g, mat )\n    m.frustumCulled = false\n    this.group.add( m )\n    this.skins.push( m )\n\n    m.bodyMap = bodyMap\n\n\n    // repostion\n    if( options.offset ) {\n\n      let p = new THREE.Vector3();\n      let q = new THREE.Quaternion();\n      let s = new THREE.Vector3();\n\n      options.offset.decompose(p, q, s);\n\n      for(let i in bodyMap) {\n\n        let body = bodyMap[i]\n\n        body.quaternion.mult(q, body.quaternion);\n        body.position.x += p.x * s.x;\n        body.position.y += p.y * s.y;\n        body.position.z += p.z * s.z;\n\n      }\n\n    }\n\n    return m\n\n  }\n\n\n  addBodies( json, offset, debug ) {\n\n    var bodies = (json['rigidBodies'] || json['bodies'])\n\n    for(let i in bodies ) {\n\n      let bodyInfo = bodies[i]\n\n      // create the rigid body\n      var body = this.createRigidBody( bodyInfo, debug )\n\n      bodyMap[i] = body\n\n    }\n\n  }\n\n\n  createRigidBody ( bodyInfo, debug ) {\n\n    switch (bodyInfo.type) {\n\n      case \"sphere\":\n        return this.createSphereRigidBody(bodyInfo, debug)\n\n      case \"box\":\n      default:\n        return this.createBoxRigidBody(bodyInfo, debug)\n    }\n\n  }\n\n  createSphereRigidBody ( bodyInfo, debug ) {\n\n    // get our transforms\n    var transform = new THREE.Matrix4().fromArray( bodyInfo['transform'] )\n    transform.decompose( pos, quat, scl )\n\n    let radius = bodyInfo['radius']\n\n    let body = cw.addSphere( radius || 1.0, {\n      mass: bodyInfo['mass'],\n      position: pos,\n      quaternion: new CANNON.Quaternion().copy( quat ),\n    })\n\n    if(debug) {\n      body.mesh = unitSphere.clone()\n      body.mesh.scale.multiplyScalar( radius )\n      this.group.add( body.mesh )\n    }\n\n    return body\n  }\n\n  createBoxRigidBody ( bodyInfo, debug ) {\n\n    // box extents\n    var extents = new THREE.Vector3().fromArray( bodyInfo['extents'] )\n    var halfExtents = new Vec3().copy( extents )\n    halfExtents.scale( 0.5, halfExtents )\n\n    // get our transforms\n    var transform = new THREE.Matrix4().fromArray( bodyInfo['transform'] )\n    transform.decompose( pos, quat, scl )\n\n    let body = cw.addBox( halfExtents, {\n      mass: bodyInfo['mass'] || 0,\n      position: pos,\n      quaternion: new CANNON.Quaternion().copy( quat ),\n      // transform: transform\n    })\n\n\n    if(debug) {\n      body.mesh = unitBox.clone()\n      body.mesh.scale.copy( extents )\n      this.group.add( body.mesh )\n    }\n\n    return body\n  }\n\n\n  addConstraintsFromJson(json, upVec) {\n\n    for(let i in json['constraints'] ) {\n\n      let c = json['constraints'][i]\n\n      let a = bodyMap[ c['rigidBodyA'] ];\n      let b = bodyMap[ c['rigidBodyB'] ];\n      let pos = new Vec3(c['translate'][0], c['translate'][1], c['translate'][2] )\n\n      let angle = c['angle'] || 1\n      let twistAngle = c['twistAngle'] || 0.33\n\n      var localA = new Vec3();\n      var localB = new Vec3();\n\n      a.pointToLocalFrame(pos, localA);\n      b.pointToLocalFrame(pos, localB);\n\n      var axisA = localA.clone();\n      axisA.normalize()\n\n      var axisB = localB.clone();\n      axisB.normalize();\n      axisB.negate(axisB);\n\n      var upA = getUpVec( axisA, upVec );\n      var upB = getUpVec( axisB, upVec );\n\n      let constraint = new CANNON.ConeTwistConstraint ( a, b, {\n          collideConnected: false,\n          maxForce: Infinity,\n          pivotA: localA,\n          pivotB: localB,\n          axisA: axisA,\n          axisB: axisB,\n          upA: upA,\n          upB: upB,\n          angle: angle,\n          twistAngle: twistAngle,\n        } );\n\n      cw.addConstraint( constraint )\n\n    }\n\n  }\n\n\n  addJointsFromJson(json, debug){\n\n    // make the joints and\n    var newJoints = json.joints.map( ( j ) => {\n\n      let transform = new THREE.Matrix4().fromArray(j.transform)\n      let joint = j2t.addJoint( bodyMap[ j['rigidBody'] ], transform )\n\n      return joint\n\n    });\n\n    // for debugging it helps to have little meshes at the joints\n    if(debug) {\n      newJoints.forEach( ( j ) => {\n        j.debugMesh = debugJointMesh.clone()\n        this.group.add( j.debugMesh )\n      });\n    }\n\n  }\n\n\n  getVertexShader() {\n    return glslify( './SkinPhysical.vert' )\n  }\n\n  getFragmentShader() {\n    return `\n    uniform vec3 diffuse;\n    uniform float opacity;\n\n    varying vec4 mvPosition;\n    varying vec3 vNormal;\n    varying vec2 vUv;\n\n    vec3 getColor( float u ) {\n\n      float su = fract(u * 5.0);\n\n      float c = cos(su * 6.28) * 3.0;\n\n      return vec3(c);\n    }\n\n    void main() {\n\n      float fr = dot(normalize(mvPosition.xyz), -vNormal);\n\n      // float uVal = fract(vUv.x * 6.0);\n\n      float u = smoothstep(0.0,1.0,vUv.x);\n\n      gl_FragColor = vec4( getColor( u ) * fr * fr, 1.0 );\n\n    }\n    `\n  }\n\n}\n\n\nmodule.exports = SkinManager\n","\n// ThreeView\n\nvar ThreeView = function(options, rendererOptions) {\n\n  //\n  rendererOptions = Object.assign( {\n    antialias: true,\n    autoClearColor: false\n  }, rendererOptions || {} )\n\n  // create the porperties in this object\n  Object.assign( this, {\n\n    width: window.innerWidth,\n\n    height: window.innerHeight,\n\n    aspect: window.innerWidth / window.innerHeight,\n\n    // renderer: new THREE.WebGLRenderer(),\n    renderer: (options && options.renderer) ? options.renderer : new THREE.WebGLRenderer(rendererOptions),\n\n    setSize: (w, h) => {\n\n      this.width = w || window.innerWidth\n\n      this.height = h || window.innerHeight\n\n      this.aspect = this.width / this.height\n\n      if (this.renderer) {\n\n        this.renderer.setSize(this.width, this.height)\n\n      }\n    },\n\n    onResize: event => {\n      //...\n    }\n\n  }, options || {} )\n\n\n  // append the renderer to our container\n  if(this.container) {\n\n    if(typeof this.container === 'string') {\n      this.container = document.getElementById( this.container )\n    }\n\n    this.container.appendChild( this.renderer.domElement )\n\n  }\n\n\n  // window events\n  var resizeTimeout = null\n  var resizeTimeStep = 50\n  window.addEventListener('resize', event => {\n\n    if ( !resizeTimeout ) {\n\n      resizeTimeout = setTimeout( () => {\n\n      resizeTimeout = null;\n\n      this.setSize()\n\n      this.onResize( event, this.width, this.height );\n\n      }, resizeTimeStep);\n    }\n  })\n\n\n\n  // setup\n  this.setSize()\n\n}\n\nmodule.exports = ThreeView","// index.js\n\nimport Sketch from './Sketch.js'\n\n\n\nvar hideLoadingDiv = () => {\n  document.getElementById('loading_message').style.display = 'none'\n}\n\n\nwindow.onload = (e) => {\n\n  Sketch()\n\n  hideLoadingDiv()\n\n\n};\n","// skinDataToGeometry.js\n\nmodule.exports = (json, skinIndexOffset) => {\n\n\n\n  var faces = json['meshData']['faces']\n  var v = json['meshData']['position'];\n  var n = json['meshData']['normal'];\n  var uv = json['meshData']['uv'][Object.keys(json['meshData']['uv'])[0]];\n  var sw = json['skinWeights'] || json['skinAndBones']['skinWeights'];\n  // var sw = json['skinAndBones']['skinWeights'];\n  var si = json['skinIndices'] || json['skinAndBones']['skinIndices'];\n  // var si = json['skinAndBones']['skinIndices'];\n\n  var sio = (skinIndexOffset || 0)\n\n  var positions = [];\n  var normals = [];\n  var uvs = [];\n\n  var jointWeights = [];\n  var jointIndices = [];\n\n  var addPos = p => {\n    positions.push(p[0], p[1], p[2])\n  }\n\n  var addNorm = n => {\n    normals.push(n[0], n[1], n[2])\n  }\n\n  var addUV = uv => {\n    uvs.push(uv[0], uv[1])\n  }\n\n  var addJointWeights = jw => {\n    jointWeights.push( jw[0], jw[1], jw[2] )\n  }\n\n  var addJointIndices = ji => {\n    jointIndices.push( ji[0] + sio, ji[1] + sio, ji[2] + sio )\n  }\n\n  // interate through the faces\n  var v0, v1, v2, i, j;\n  faces.forEach( function( f ){\n\n    // iterate through the face triangles\n    for(i=1, j=2; j<f[0].length; i++, j++) {\n\n      // positions\n      addPos( v[ f[0][0] ] );\n      addPos( v[ f[0][i] ] );\n      addPos( v[ f[0][j] ] );\n\n      // normals\n      addNorm( n[ f[1][0] ] );\n      addNorm( n[ f[1][i] ] );\n      addNorm( n[ f[1][j] ] );\n\n      // uvs\n      addUV( uv[ f[2][0] ] );\n      addUV( uv[ f[2][i] ] );\n      addUV( uv[ f[2][j] ] );\n\n      // joint weights\n      addJointWeights( sw[ f[0][0] ] );\n      addJointWeights( sw[ f[0][i] ] );\n      addJointWeights( sw[ f[0][j] ] );\n\n      // joint indices\n      addJointIndices( si[ f[0][0] ] );\n      addJointIndices( si[ f[0][i] ] );\n      addJointIndices( si[ f[0][j] ] );\n\n    }\n\n  });\n\n  // create the Buffer mesh\n  var geometry = new THREE.BufferGeometry();\n\n  geometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array(positions), 3 ) );\n  geometry.addAttribute( 'orig_position', new THREE.BufferAttribute( new Float32Array(positions), 3 ) );\n  geometry.addAttribute( 'orgPos', new THREE.BufferAttribute( new Float32Array(positions), 3 ) );\n  geometry.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array(normals), 3 ) );\n  geometry.addAttribute( 'jointWeights', new THREE.BufferAttribute( new Float32Array(jointWeights), 3 ) );\n  geometry.addAttribute( 'jointIndices', new THREE.BufferAttribute( new Float32Array(jointIndices), 3 ) );\n  geometry.addAttribute( 'uv', new THREE.BufferAttribute( new Float32Array(uvs), 2 ) );\n\n  return geometry;\n}","// touchEvents.js\n\nvar ongoingTouches = [];\n\nmodule.exports = function(options) {\n\n  var touchStartCallback = e => {\n    this.onTouchStart( e )\n  }\n  var touchMoveCallback = e => {\n    this.onTouchMove( e )\n  }\n  var touchEndCallback = e => {\n    this.onTouchEnd( e )\n  }\n\n  Object.assign( this, {\n\n    element: null,\n\n    onToushStart: e => {},\n\n    onTouchMove: e => {},\n\n    onTouchEnd: e => {},\n\n    addListeners: ( el ) =>{\n\n      if(this.element !== el) {\n        this.removeListeners()\n      }\n\n      this.element = el;\n\n      el.addEventListener( 'touchstart', touchStartCallback, false );\n      el.addEventListener( 'touchend', touchEndCallback, false );\n      el.addEventListener( 'touchmove', touchMoveCallback, false );\n    },\n\n    removeListeners: () => {\n\n      if(this.element) {\n\n        this.element.removeEventListener( 'touchstart', touchStartCallback, false );\n        this.element.removeEventListener( 'touchend', touchEndCallback, false );\n        this.element.removeEventListener( 'touchmove', touchMoveCallback, false );\n\n      }\n\n      this.element = null\n    }\n\n  }, options || {} )\n\n\n  // setup\n  if(this.element) {\n\n    this.addListeners( this.element )\n\n  }\n\n}\n"]}