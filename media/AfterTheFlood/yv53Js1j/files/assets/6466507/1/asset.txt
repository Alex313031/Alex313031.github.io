146282^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
vec3 dLightDirW;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform vec3 light2_color;
uniform vec3 light2_position;
uniform float light2_radius;
uniform vec3 light2_direction;
uniform float light2_innerConeAngle;
uniform float light2_outerConeAngle;
uniform vec3 light3_color;
uniform vec3 light3_position;
uniform float light3_radius;
uniform vec3 light3_direction;
uniform float light3_innerConeAngle;
uniform float light3_outerConeAngle;
uniform mat4 light3_shadowMatrix;
uniform vec4 light3_shadowParams;
uniform sampler2D light3_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform lowp samplerCube texture_prefilteredCubeMap4;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dAlpha = texture (texture_opacityMap, vUv0).x;
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  vec3 fixedReflDir_4;
  vec3 vec_5;
  vec_5 = tmpvar_1;
  float tmpvar_6;
  tmpvar_6 = max (max (abs(tmpvar_1.x), abs(tmpvar_1.y)), abs(tmpvar_1.z));
  float tmpvar_7;
  tmpvar_7 = abs(tmpvar_1.x);
  if ((tmpvar_7 != tmpvar_6)) {
    vec_5.x = (tmpvar_1.x * 0.75);
  };
  float tmpvar_8;
  tmpvar_8 = abs(tmpvar_1.y);
  if ((tmpvar_8 != tmpvar_6)) {
    vec_5.y = (tmpvar_1.y * 0.75);
  };
  float tmpvar_9;
  tmpvar_9 = abs(tmpvar_1.z);
  if ((tmpvar_9 != tmpvar_6)) {
    vec_5.z = (tmpvar_1.z * 0.75);
  };
  fixedReflDir_4.yz = vec_5.yz;
  fixedReflDir_4.x = -(vec_5.x);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_prefilteredCubeMap4, fixedReflDir_4);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((8.0 * tmpvar_10.w) * tmpvar_10.xyz);
  dDiffuseLight = ((tmpvar_11 * tmpvar_11) * skyboxIntensity);
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(dLightDirW);
  lowp float tmpvar_13;
  tmpvar_13 = max (((light0_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light0_radius), 0.0);
  dAtten = tmpvar_13;
  if ((tmpvar_13 > 1e-05)) {
    float tmpvar_14;
    tmpvar_14 = clamp (((
      dot (tmpvar_12, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_13 * (tmpvar_14 * (tmpvar_14 * 
      (3.0 - (2.0 * tmpvar_14))
    )));
    dAtten = (dAtten * max (dot (tmpvar_1, 
      -(tmpvar_12)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_15;
  tmpvar_15 = normalize(dLightDirW);
  lowp float tmpvar_16;
  tmpvar_16 = max (((light1_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light1_radius), 0.0);
  dAtten = tmpvar_16;
  if ((tmpvar_16 > 1e-05)) {
    float tmpvar_17;
    tmpvar_17 = clamp (((
      dot (tmpvar_15, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_16 * (tmpvar_17 * (tmpvar_17 * 
      (3.0 - (2.0 * tmpvar_17))
    )));
    dAtten = (dAtten * max (dot (tmpvar_1, 
      -(tmpvar_15)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
  };
  dLightDirW = (vPositionW - light2_position);
  vec3 tmpvar_18;
  tmpvar_18 = normalize(dLightDirW);
  float falloff_19;
  float tmpvar_20;
  tmpvar_20 = dot (dLightDirW, dLightDirW);
  float tmpvar_21;
  tmpvar_21 = (1.0/(light2_radius));
  falloff_19 = ((1.0/((tmpvar_20 + 1.0))) * 16.0);
  float x_22;
  x_22 = (tmpvar_20 * (tmpvar_21 * tmpvar_21));
  float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (x_22 * x_22)), 0.0, 1.0);
  falloff_19 = (falloff_19 * (tmpvar_23 * tmpvar_23));
  dAtten = falloff_19;
  if ((falloff_19 > 1e-05)) {
    float tmpvar_24;
    tmpvar_24 = clamp (((
      dot (tmpvar_18, light2_direction)
     - light2_outerConeAngle) / (light2_innerConeAngle - light2_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_19 * (tmpvar_24 * (tmpvar_24 * 
      (3.0 - (2.0 * tmpvar_24))
    )));
    dAtten = (dAtten * max (dot (tmpvar_1, 
      -(tmpvar_18)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light2_color));
  };
  dLightDirW = (vPositionW - light3_position);
  vec3 tmpvar_25;
  tmpvar_25 = normalize(dLightDirW);
  lowp float tmpvar_26;
  tmpvar_26 = max (((light3_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light3_radius), 0.0);
  dAtten = tmpvar_26;
  if ((tmpvar_26 > 1e-05)) {
    float tmpvar_27;
    tmpvar_27 = clamp (((
      dot (tmpvar_25, light3_direction)
     - light3_outerConeAngle) / (light3_innerConeAngle - light3_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_26 * (tmpvar_27 * (tmpvar_27 * 
      (3.0 - (2.0 * tmpvar_27))
    )));
    dAtten = (dAtten * max (dot (tmpvar_1, 
      -(tmpvar_25)
    ), 0.0));
    vec4 projPos_28;
    vec4 tmpvar_29;
    tmpvar_29.w = 1.0;
    tmpvar_29.xyz = vPositionW;
    vec4 tmpvar_30;
    tmpvar_30 = (light3_shadowMatrix * tmpvar_29);
    projPos_28.zw = tmpvar_30.zw;
    projPos_28.xy = (tmpvar_30.xy / tmpvar_30.w);
    float Z_31;
    Z_31 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light3_shadowParams.w) + light3_shadowParams.z);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture (light3_shadowMap, projPos_28.xy);
    lowp vec3 tmpvar_33;
    tmpvar_33.z = 0.0;
    tmpvar_33.x = ((tmpvar_32.y * 0.003921569) + tmpvar_32.x);
    tmpvar_33.y = ((tmpvar_32.w * 0.003921569) + tmpvar_32.z);
    float tmpvar_34;
    tmpvar_34 = (light3_shadowParams.y * Z_31);
    lowp float tmpvar_35;
    tmpvar_35 = max ((tmpvar_33.y - (tmpvar_33.x * tmpvar_33.x)), (tmpvar_34 * tmpvar_34));
    lowp float tmpvar_36;
    tmpvar_36 = (Z_31 - tmpvar_33.x);
    lowp float tmpvar_37;
    tmpvar_37 = clamp (((
      (tmpvar_35 / (tmpvar_35 + (tmpvar_36 * tmpvar_36)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_38;
    if ((Z_31 <= tmpvar_33.x)) {
      tmpvar_38 = 1.0;
    } else {
      tmpvar_38 = tmpvar_37;
    };
    dAtten = (dAtten * tmpvar_38);
    dDiffuseLight = (dDiffuseLight + (dAtten * light3_color));
  };
  lowp vec3 tmpvar_39;
  tmpvar_39 = (rgba_2.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_39;
  lowp vec3 tmpvar_40;
  lowp vec4 rgba_41;
  lowp vec4 tmpvar_42;
  tmpvar_42 = texture (texture_emissiveMap, vUv0);
  rgba_41.w = tmpvar_42.w;
  rgba_41.xyz = pow (tmpvar_42.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_40 = (rgba_41.xyz * material_emissiveIntensity);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_40);
  vec3 tmpvar_43;
  tmpvar_43 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_43, tmpvar_43))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^10549359^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv1;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv1 = vertex_texCoord1;
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv1;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularity;
lowp float dGlossiness;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform sampler2D texture_lightMap;
void main ()
{
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUV0_1).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUV0_1);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), rgba_4.xyz, material_metalness);
  dAlbedo = (rgba_4.xyz * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_aoMap, vUv1);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((8.0 * tmpvar_11.w) * tmpvar_11.xyz);
  dDiffuseLight = (tmpvar_12 * tmpvar_12);
  lowp vec4 cube_0_14;
  lowp vec4 cube_1_15;
  lowp vec4 cubes_16[6];
  lowp vec3 fixedReflDir_17;
  lowp int index2_18;
  lowp int index1_19;
  lowp float tmpvar_20;
  tmpvar_20 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_19 = int(tmpvar_20);
  index2_18 = int(min ((tmpvar_20 + 1.0), 7.0));
  lowp vec3 vec_21;
  vec_21 = tmpvar_3;
  lowp float tmpvar_22;
  tmpvar_22 = (1.0 - (exp2(tmpvar_20) / 128.0));
  lowp float tmpvar_23;
  tmpvar_23 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_24;
  tmpvar_24 = abs(tmpvar_3.x);
  if ((tmpvar_24 != tmpvar_23)) {
    vec_21.x = (tmpvar_3.x * tmpvar_22);
  };
  lowp float tmpvar_25;
  tmpvar_25 = abs(tmpvar_3.y);
  if ((tmpvar_25 != tmpvar_23)) {
    vec_21.y = (tmpvar_3.y * tmpvar_22);
  };
  lowp float tmpvar_26;
  tmpvar_26 = abs(tmpvar_3.z);
  if ((tmpvar_26 != tmpvar_23)) {
    vec_21.z = (tmpvar_3.z * tmpvar_22);
  };
  fixedReflDir_17.yz = vec_21.yz;
  fixedReflDir_17.x = -(vec_21.x);
  cubes_16[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_17);
  cubes_16[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_17);
  cubes_16[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_17);
  cubes_16[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_17);
  cubes_16[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_17);
  cubes_16[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_17);
  for (highp int i_13 = 0; i_13 < 6; i_13++) {
    if ((i_13 == index1_19)) {
      cube_0_14 = cubes_16[i_13];
    };
    if ((i_13 == index2_18)) {
      cube_1_15 = cubes_16[i_13];
    };
  };
  lowp vec4 tmpvar_27;
  tmpvar_27 = mix (cube_0_14, cube_1_15, fract(tmpvar_20));
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((8.0 * tmpvar_27.w) * tmpvar_27.xyz);
  lowp vec4 tmpvar_29;
  tmpvar_29.xyz = (tmpvar_28 * tmpvar_28);
  tmpvar_29.w = material_reflectivity;
  dReflection = (tmpvar_29 * tmpvar_10.z);
  lowp vec3 tmpvar_30;
  tmpvar_30 = mix ((dAlbedo * dDiffuseLight), (dReflection.xyz * dReflection.w), dSpecularity);
  pc_fragColor.xyz = tmpvar_30;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_31;
  tmpvar_31 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_31, tmpvar_31))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^56633908^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
vec3 dLightDirW;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform lowp samplerCube texture_prefilteredCubeMap4;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dAlpha = texture (texture_opacityMap, vUv0).x;
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  vec3 fixedReflDir_4;
  vec3 vec_5;
  vec_5 = tmpvar_1;
  float tmpvar_6;
  tmpvar_6 = max (max (abs(tmpvar_1.x), abs(tmpvar_1.y)), abs(tmpvar_1.z));
  float tmpvar_7;
  tmpvar_7 = abs(tmpvar_1.x);
  if ((tmpvar_7 != tmpvar_6)) {
    vec_5.x = (tmpvar_1.x * 0.75);
  };
  float tmpvar_8;
  tmpvar_8 = abs(tmpvar_1.y);
  if ((tmpvar_8 != tmpvar_6)) {
    vec_5.y = (tmpvar_1.y * 0.75);
  };
  float tmpvar_9;
  tmpvar_9 = abs(tmpvar_1.z);
  if ((tmpvar_9 != tmpvar_6)) {
    vec_5.z = (tmpvar_1.z * 0.75);
  };
  fixedReflDir_4.yz = vec_5.yz;
  fixedReflDir_4.x = -(vec_5.x);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_prefilteredCubeMap4, fixedReflDir_4);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((8.0 * tmpvar_10.w) * tmpvar_10.xyz);
  dDiffuseLight = ((tmpvar_11 * tmpvar_11) * skyboxIntensity);
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(dLightDirW);
  float falloff_13;
  float tmpvar_14;
  tmpvar_14 = dot (dLightDirW, dLightDirW);
  float tmpvar_15;
  tmpvar_15 = (1.0/(light0_radius));
  falloff_13 = ((1.0/((tmpvar_14 + 1.0))) * 16.0);
  float x_16;
  x_16 = (tmpvar_14 * (tmpvar_15 * tmpvar_15));
  float tmpvar_17;
  tmpvar_17 = clamp ((1.0 - (x_16 * x_16)), 0.0, 1.0);
  falloff_13 = (falloff_13 * (tmpvar_17 * tmpvar_17));
  dAtten = falloff_13;
  if ((falloff_13 > 1e-05)) {
    float tmpvar_18;
    tmpvar_18 = clamp (((
      dot (tmpvar_12, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_13 * (tmpvar_18 * (tmpvar_18 * 
      (3.0 - (2.0 * tmpvar_18))
    )));
    dAtten = (dAtten * max (dot (tmpvar_1, 
      -(tmpvar_12)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_19;
  tmpvar_19 = normalize(dLightDirW);
  lowp float tmpvar_20;
  tmpvar_20 = max (((light1_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light1_radius), 0.0);
  dAtten = tmpvar_20;
  if ((tmpvar_20 > 1e-05)) {
    float tmpvar_21;
    tmpvar_21 = clamp (((
      dot (tmpvar_19, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_20 * (tmpvar_21 * (tmpvar_21 * 
      (3.0 - (2.0 * tmpvar_21))
    )));
    dAtten = (dAtten * max (dot (tmpvar_1, 
      -(tmpvar_19)
    ), 0.0));
    vec4 projPos_22;
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = vPositionW;
    vec4 tmpvar_24;
    tmpvar_24 = (light1_shadowMatrix * tmpvar_23);
    projPos_22.zw = tmpvar_24.zw;
    projPos_22.xy = (tmpvar_24.xy / tmpvar_24.w);
    float Z_25;
    Z_25 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture (light1_shadowMap, projPos_22.xy);
    lowp vec3 tmpvar_27;
    tmpvar_27.z = 0.0;
    tmpvar_27.x = ((tmpvar_26.y * 0.003921569) + tmpvar_26.x);
    tmpvar_27.y = ((tmpvar_26.w * 0.003921569) + tmpvar_26.z);
    float tmpvar_28;
    tmpvar_28 = (light1_shadowParams.y * Z_25);
    lowp float tmpvar_29;
    tmpvar_29 = max ((tmpvar_27.y - (tmpvar_27.x * tmpvar_27.x)), (tmpvar_28 * tmpvar_28));
    lowp float tmpvar_30;
    tmpvar_30 = (Z_25 - tmpvar_27.x);
    lowp float tmpvar_31;
    tmpvar_31 = clamp (((
      (tmpvar_29 / (tmpvar_29 + (tmpvar_30 * tmpvar_30)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_32;
    if ((Z_25 <= tmpvar_27.x)) {
      tmpvar_32 = 1.0;
    } else {
      tmpvar_32 = tmpvar_31;
    };
    dAtten = (dAtten * tmpvar_32);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_33;
  tmpvar_33 = (rgba_2.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_33;
  lowp vec3 tmpvar_34;
  lowp vec4 rgba_35;
  lowp vec4 tmpvar_36;
  tmpvar_36 = texture (texture_emissiveMap, vUv0);
  rgba_35.w = tmpvar_36.w;
  rgba_35.xyz = pow (tmpvar_36.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_34 = (rgba_35.xyz * material_emissiveIntensity);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_34);
  vec3 tmpvar_37;
  tmpvar_37 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_37, tmpvar_37))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^113224461^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform float wirePixelScale;
uniform float WIRERADIUS;
out float wireFade;
void main ()
{
  vec4 posW_1;
  vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = vertex_position;
  vec4 tmpvar_3;
  tmpvar_3 = (matrix_model * tmpvar_2);
  posW_1.w = tmpvar_3.w;
  vec4 tmpvar_4;
  tmpvar_4.x = matrix_viewProjection[0].w;
  tmpvar_4.y = matrix_viewProjection[1].w;
  tmpvar_4.z = matrix_viewProjection[2].w;
  tmpvar_4.w = matrix_viewProjection[3].w;
  float tmpvar_5;
  tmpvar_5 = max (WIRERADIUS, (dot (tmpvar_4, tmpvar_3) * wirePixelScale));
  mat3 tmpvar_6;
  tmpvar_6[uint(0)] = matrix_model[uint(0)].xyz;
  tmpvar_6[1u] = matrix_model[1u].xyz;
  tmpvar_6[2u] = matrix_model[2u].xyz;
  posW_1.xyz = (tmpvar_3.xyz + ((tmpvar_5 - WIRERADIUS) * normalize(
    (tmpvar_6 * vertex_normal)
  )));
  wireFade = (WIRERADIUS / tmpvar_5);
  gl_Position = (matrix_viewProjection * posW_1);
  vPositionW = posW_1.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
vec3 dSpecularity;
float dGlossiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform vec3 material_diffuse;
in float wireFade;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_4;
  float tmpvar_5;
  tmpvar_5 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  fresnel_4 = (tmpvar_5 * (tmpvar_6 * tmpvar_6));
  fresnel_4 = (fresnel_4 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_4));
  vec3 fixedReflDir_7;
  vec3 vec_8;
  vec_8 = tmpvar_2;
  float tmpvar_9;
  tmpvar_9 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_10;
  tmpvar_10 = abs(tmpvar_2.x);
  if ((tmpvar_10 != tmpvar_9)) {
    vec_8.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_11;
  tmpvar_11 = abs(tmpvar_2.y);
  if ((tmpvar_11 != tmpvar_9)) {
    vec_8.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.z);
  if ((tmpvar_12 != tmpvar_9)) {
    vec_8.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_7.yz = vec_8.yz;
  fixedReflDir_7.x = -(vec_8.x);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (texture_prefilteredCubeMap4, fixedReflDir_7);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((8.0 * tmpvar_13.w) * tmpvar_13.xyz);
  dDiffuseLight = ((tmpvar_14 * tmpvar_14) * skyboxIntensity);
  lowp vec4 cube_0_16;
  lowp vec4 cube_1_17;
  lowp vec4 cubes_18[6];
  vec3 fixedReflDir_19;
  highp int index2_20;
  highp int index1_21;
  float tmpvar_22;
  tmpvar_22 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_21 = int(tmpvar_22);
  index2_20 = int(min ((tmpvar_22 + 1.0), 7.0));
  vec3 vec_23;
  vec_23 = tmpvar_3;
  float tmpvar_24;
  tmpvar_24 = (1.0 - (exp2(tmpvar_22) / 128.0));
  float tmpvar_25;
  tmpvar_25 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_26;
  tmpvar_26 = abs(tmpvar_3.x);
  if ((tmpvar_26 != tmpvar_25)) {
    vec_23.x = (tmpvar_3.x * tmpvar_24);
  };
  float tmpvar_27;
  tmpvar_27 = abs(tmpvar_3.y);
  if ((tmpvar_27 != tmpvar_25)) {
    vec_23.y = (tmpvar_3.y * tmpvar_24);
  };
  float tmpvar_28;
  tmpvar_28 = abs(tmpvar_3.z);
  if ((tmpvar_28 != tmpvar_25)) {
    vec_23.z = (tmpvar_3.z * tmpvar_24);
  };
  fixedReflDir_19.yz = vec_23.yz;
  fixedReflDir_19.x = -(vec_23.x);
  cubes_18[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_19);
  cubes_18[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_19);
  cubes_18[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_19);
  cubes_18[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_19);
  cubes_18[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_19);
  cubes_18[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_19);
  for (highp int i_15 = 0; i_15 < 6; i_15++) {
    if ((i_15 == index1_21)) {
      cube_0_16 = cubes_18[i_15];
    };
    if ((i_15 == index2_20)) {
      cube_1_17 = cubes_18[i_15];
    };
  };
  lowp vec4 tmpvar_29;
  tmpvar_29 = mix (cube_0_16, cube_1_17, fract(tmpvar_22));
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((8.0 * tmpvar_29.w) * tmpvar_29.xyz);
  lowp vec4 tmpvar_31;
  tmpvar_31.xyz = ((tmpvar_30 * tmpvar_30) * skyboxIntensity);
  tmpvar_31.w = material_reflectivity;
  lowp vec3 tmpvar_32;
  tmpvar_32 = mix ((material_diffuse * dDiffuseLight), (tmpvar_31.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_32;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_33;
  tmpvar_33 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_33, tmpvar_33))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = wireFade;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,^SH^151901460^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform vec3 material_diffuse;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec3 tmpvar_4;
  tmpvar_4 = mix (vec3(0.04, 0.04, 0.04), material_diffuse, material_metalness);
  dAlbedo = (material_diffuse * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_5;
  lowp float tmpvar_6;
  tmpvar_6 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  lowp float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  fresnel_5 = (tmpvar_6 * (tmpvar_7 * tmpvar_7));
  fresnel_5 = (fresnel_5 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_4 + ((1.0 - tmpvar_4) * fresnel_5));
  vec3 fixedReflDir_8;
  vec3 vec_9;
  vec_9 = tmpvar_2;
  float tmpvar_10;
  tmpvar_10 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_11;
  tmpvar_11 = abs(tmpvar_2.x);
  if ((tmpvar_11 != tmpvar_10)) {
    vec_9.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.y);
  if ((tmpvar_12 != tmpvar_10)) {
    vec_9.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.z);
  if ((tmpvar_13 != tmpvar_10)) {
    vec_9.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_8.yz = vec_9.yz;
  fixedReflDir_8.x = -(vec_9.x);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (texture_prefilteredCubeMap4, fixedReflDir_8);
  lowp vec3 tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((8.0 * tmpvar_14.w) * tmpvar_14.xyz);
  tmpvar_15 = (tmpvar_16 * tmpvar_16);
  dDiffuseLight = tmpvar_15;
  lowp vec4 cube_0_18;
  lowp vec4 cube_1_19;
  lowp vec4 cubes_20[6];
  lowp vec3 fixedReflDir_21;
  lowp int index2_22;
  lowp int index1_23;
  lowp float tmpvar_24;
  tmpvar_24 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_23 = int(tmpvar_24);
  index2_22 = int(min ((tmpvar_24 + 1.0), 7.0));
  lowp vec3 vec_25;
  vec_25 = tmpvar_3;
  lowp float tmpvar_26;
  tmpvar_26 = (1.0 - (exp2(tmpvar_24) / 128.0));
  lowp float tmpvar_27;
  tmpvar_27 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_28;
  tmpvar_28 = abs(tmpvar_3.x);
  if ((tmpvar_28 != tmpvar_27)) {
    vec_25.x = (tmpvar_3.x * tmpvar_26);
  };
  lowp float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.y);
  if ((tmpvar_29 != tmpvar_27)) {
    vec_25.y = (tmpvar_3.y * tmpvar_26);
  };
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.z);
  if ((tmpvar_30 != tmpvar_27)) {
    vec_25.z = (tmpvar_3.z * tmpvar_26);
  };
  fixedReflDir_21.yz = vec_25.yz;
  fixedReflDir_21.x = -(vec_25.x);
  cubes_20[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_21);
  cubes_20[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_21);
  cubes_20[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_21);
  cubes_20[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_21);
  cubes_20[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_21);
  cubes_20[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_21);
  for (highp int i_17 = 0; i_17 < 6; i_17++) {
    if ((i_17 == index1_23)) {
      cube_0_18 = cubes_20[i_17];
    };
    if ((i_17 == index2_22)) {
      cube_1_19 = cubes_20[i_17];
    };
  };
  lowp vec4 tmpvar_31;
  tmpvar_31 = mix (cube_0_18, cube_1_19, fract(tmpvar_24));
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((8.0 * tmpvar_31.w) * tmpvar_31.xyz);
  lowp vec4 tmpvar_33;
  tmpvar_33.xyz = (tmpvar_32 * tmpvar_32);
  tmpvar_33.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_34;
  tmpvar_34 = normalize(dLightDirW);
  float falloff_35;
  float tmpvar_36;
  tmpvar_36 = dot (dLightDirW, dLightDirW);
  float tmpvar_37;
  tmpvar_37 = (1.0/(light0_radius));
  falloff_35 = ((1.0/((tmpvar_36 + 1.0))) * 16.0);
  float x_38;
  x_38 = (tmpvar_36 * (tmpvar_37 * tmpvar_37));
  float tmpvar_39;
  tmpvar_39 = clamp ((1.0 - (x_38 * x_38)), 0.0, 1.0);
  falloff_35 = (falloff_35 * (tmpvar_39 * tmpvar_39));
  dAtten = falloff_35;
  if ((falloff_35 > 1e-05)) {
    float tmpvar_40;
    tmpvar_40 = clamp (((
      dot (tmpvar_34, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_35 * (tmpvar_40 * (tmpvar_40 * 
      (3.0 - (2.0 * tmpvar_40))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_34)
    ), 0.0));
    vec4 projPos_41;
    vec4 tmpvar_42;
    tmpvar_42.w = 1.0;
    tmpvar_42.xyz = vPositionW;
    vec4 tmpvar_43;
    tmpvar_43 = (light0_shadowMatrix * tmpvar_42);
    projPos_41.zw = tmpvar_43.zw;
    projPos_41.xy = (tmpvar_43.xy / tmpvar_43.w);
    float Z_44;
    Z_44 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_45;
    tmpvar_45 = texture (light0_shadowMap, projPos_41.xy);
    lowp vec3 tmpvar_46;
    tmpvar_46.z = 0.0;
    tmpvar_46.x = ((tmpvar_45.y * 0.003921569) + tmpvar_45.x);
    tmpvar_46.y = ((tmpvar_45.w * 0.003921569) + tmpvar_45.z);
    float tmpvar_47;
    tmpvar_47 = (light0_shadowParams.y * Z_44);
    lowp float tmpvar_48;
    tmpvar_48 = max ((tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x)), (tmpvar_47 * tmpvar_47));
    lowp float tmpvar_49;
    tmpvar_49 = (Z_44 - tmpvar_46.x);
    lowp float tmpvar_50;
    tmpvar_50 = clamp (((
      (tmpvar_48 / (tmpvar_48 + (tmpvar_49 * tmpvar_49)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_51;
    if ((Z_44 <= tmpvar_46.x)) {
      tmpvar_51 = 1.0;
    } else {
      tmpvar_51 = tmpvar_50;
    };
    dAtten = (dAtten * tmpvar_51);
    dDiffuseLight = (tmpvar_15 + (dAtten * light0_color));
    lowp float tmpvar_52;
    tmpvar_52 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_34) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_52)
     * 
      (tmpvar_52 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_53;
  tmpvar_53 = normalize(dLightDirW);
  float falloff_54;
  float tmpvar_55;
  tmpvar_55 = dot (dLightDirW, dLightDirW);
  float tmpvar_56;
  tmpvar_56 = (1.0/(light1_radius));
  falloff_54 = ((1.0/((tmpvar_55 + 1.0))) * 16.0);
  float x_57;
  x_57 = (tmpvar_55 * (tmpvar_56 * tmpvar_56));
  float tmpvar_58;
  tmpvar_58 = clamp ((1.0 - (x_57 * x_57)), 0.0, 1.0);
  falloff_54 = (falloff_54 * (tmpvar_58 * tmpvar_58));
  dAtten = falloff_54;
  if ((falloff_54 > 1e-05)) {
    float tmpvar_59;
    tmpvar_59 = clamp (((
      dot (tmpvar_53, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_54 * (tmpvar_59 * (tmpvar_59 * 
      (3.0 - (2.0 * tmpvar_59))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_53)
    ), 0.0));
    vec4 projPos_60;
    vec4 tmpvar_61;
    tmpvar_61.w = 1.0;
    tmpvar_61.xyz = vPositionW;
    vec4 tmpvar_62;
    tmpvar_62 = (light1_shadowMatrix * tmpvar_61);
    projPos_60.zw = tmpvar_62.zw;
    projPos_60.xy = (tmpvar_62.xy / tmpvar_62.w);
    float Z_63;
    Z_63 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_64;
    tmpvar_64 = texture (light1_shadowMap, projPos_60.xy);
    lowp vec3 tmpvar_65;
    tmpvar_65.z = 0.0;
    tmpvar_65.x = ((tmpvar_64.y * 0.003921569) + tmpvar_64.x);
    tmpvar_65.y = ((tmpvar_64.w * 0.003921569) + tmpvar_64.z);
    float tmpvar_66;
    tmpvar_66 = (light1_shadowParams.y * Z_63);
    lowp float tmpvar_67;
    tmpvar_67 = max ((tmpvar_65.y - (tmpvar_65.x * tmpvar_65.x)), (tmpvar_66 * tmpvar_66));
    lowp float tmpvar_68;
    tmpvar_68 = (Z_63 - tmpvar_65.x);
    lowp float tmpvar_69;
    tmpvar_69 = clamp (((
      (tmpvar_67 / (tmpvar_67 + (tmpvar_68 * tmpvar_68)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_70;
    if ((Z_63 <= tmpvar_65.x)) {
      tmpvar_70 = 1.0;
    } else {
      tmpvar_70 = tmpvar_69;
    };
    dAtten = (dAtten * tmpvar_70);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_71;
    tmpvar_71 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_53) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_71)
     * 
      (tmpvar_71 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_72;
  tmpvar_72 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_33.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_72;
  lowp vec3 tmpvar_73;
  lowp vec4 rgba_74;
  lowp vec4 tmpvar_75;
  tmpvar_75 = texture (texture_emissiveMap, vUv0);
  rgba_74.w = tmpvar_75.w;
  rgba_74.xyz = pow (tmpvar_75.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_73 = (rgba_74.xyz * material_emissiveIntensity);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_73);
  vec3 tmpvar_76;
  tmpvar_76 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_76, tmpvar_76))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^222195556^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_3, material_bumpiness)));
  lowp vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (texture_specularMap, vUv0);
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_8;
  lowp float tmpvar_9;
  tmpvar_9 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  fresnel_8 = (tmpvar_9 * (tmpvar_10 * tmpvar_10));
  fresnel_8 = (fresnel_8 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_7.xxx + ((1.0 - tmpvar_7.xxx) * fresnel_8));
  lowp vec3 fixedReflDir_11;
  lowp vec3 vec_12;
  vec_12 = dNormalW;
  lowp float tmpvar_13;
  tmpvar_13 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.x);
  if ((tmpvar_14 != tmpvar_13)) {
    vec_12.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.y);
  if ((tmpvar_15 != tmpvar_13)) {
    vec_12.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_16;
  tmpvar_16 = abs(dNormalW.z);
  if ((tmpvar_16 != tmpvar_13)) {
    vec_12.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_11.yz = vec_12.yz;
  fixedReflDir_11.x = -(vec_12.x);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (texture_prefilteredCubeMap4, fixedReflDir_11);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_17.w) * tmpvar_17.xyz);
  dDiffuseLight = ((tmpvar_18 * tmpvar_18) * skyboxIntensity);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_4;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_4.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_4.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_4.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_4.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = ((tmpvar_34 * tmpvar_34) * skyboxIntensity);
  tmpvar_35.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_36)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_43;
    tmpvar_43 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_44;
    tmpvar_44 = max ((tmpvar_43 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_43 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_44)
     * 
      (tmpvar_44 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_45;
  tmpvar_45 = normalize(dLightDirW);
  lowp float tmpvar_46;
  tmpvar_46 = max (((light1_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light1_radius), 0.0);
  dAtten = tmpvar_46;
  if ((tmpvar_46 > 1e-05)) {
    float tmpvar_47;
    tmpvar_47 = clamp (((
      dot (tmpvar_45, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_46 * (tmpvar_47 * (tmpvar_47 * 
      (3.0 - (2.0 * tmpvar_47))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_45)
    ), 0.0));
    vec4 projPos_48;
    vec4 tmpvar_49;
    tmpvar_49.w = 1.0;
    tmpvar_49.xyz = vPositionW;
    vec4 tmpvar_50;
    tmpvar_50 = (light1_shadowMatrix * tmpvar_49);
    projPos_48.zw = tmpvar_50.zw;
    projPos_48.xy = (tmpvar_50.xy / tmpvar_50.w);
    float Z_51;
    Z_51 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_52;
    tmpvar_52 = texture (light1_shadowMap, projPos_48.xy);
    lowp vec3 tmpvar_53;
    tmpvar_53.z = 0.0;
    tmpvar_53.x = ((tmpvar_52.y * 0.003921569) + tmpvar_52.x);
    tmpvar_53.y = ((tmpvar_52.w * 0.003921569) + tmpvar_52.z);
    float tmpvar_54;
    tmpvar_54 = (light1_shadowParams.y * Z_51);
    lowp float tmpvar_55;
    tmpvar_55 = max ((tmpvar_53.y - (tmpvar_53.x * tmpvar_53.x)), (tmpvar_54 * tmpvar_54));
    lowp float tmpvar_56;
    tmpvar_56 = (Z_51 - tmpvar_53.x);
    lowp float tmpvar_57;
    tmpvar_57 = clamp (((
      (tmpvar_55 / (tmpvar_55 + (tmpvar_56 * tmpvar_56)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_58;
    if ((Z_51 <= tmpvar_53.x)) {
      tmpvar_58 = 1.0;
    } else {
      tmpvar_58 = tmpvar_57;
    };
    dAtten = (dAtten * tmpvar_58);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_59;
    tmpvar_59 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_60;
    tmpvar_60 = max ((tmpvar_59 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_59 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_45) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_60)
     * 
      (tmpvar_60 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_61;
  tmpvar_61 = mix ((rgba_5.xyz * dDiffuseLight), (dSpecularLight + (tmpvar_35.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_61;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_62;
  tmpvar_62 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_62, tmpvar_62))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^259465080^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat4 matrix_invModel;
uniform vec3 view_position;
out vec3 vPositionL;
out vec3 vPosCam;
void main ()
{
  vPositionL = vertex_position;
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = view_position;
  vPosCam = (matrix_invModel * tmpvar_1).xyz;
  vec4 tmpvar_2;
  tmpvar_2.w = 1.0;
  tmpvar_2.xyz = vertex_position;
  vec4 tmpvar_3;
  tmpvar_3 = (matrix_model * tmpvar_2);
  gl_Position = (matrix_viewProjection * tmpvar_3);
  vPositionW = tmpvar_3.xyz;
  vNormalW = vertex_normal;
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
uniform sampler2D texture_mounting;
uniform sampler2D texture_lamp;
uniform mat4 matrix_model;
uniform vec3 view_position;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vPositionL;
in vec3 vPosCam;
in vec2 vUv0;
uniform sampler2D skyTex1;
uniform sampler2D skyTex2;
uniform lowp samplerCube skyboxHigh;
uniform float skyBlend;
uniform vec3 fog_color;
uniform float fog_density;
void main ()
{
  highp int id_1;
  bool isInside_2;
  float d_3;
  vec3 reflDir_4;
  lowp vec4 color_5;
  vec3 pos_6;
  pos_6 = vPositionL;
  vec3 tmpvar_7;
  tmpvar_7 = normalize((vPositionL - vPosCam));
  color_5 = vec4(0.0, 0.0, 0.0, 0.0);
  mat3 tmpvar_8;
  tmpvar_8[uint(0)] = matrix_model[uint(0)].xyz;
  tmpvar_8[1u] = matrix_model[1u].xyz;
  tmpvar_8[2u] = matrix_model[2u].xyz;
  vec3 N_9;
  N_9 = -(vNormalW);
  vec3 tmpvar_10;
  tmpvar_10 = (tmpvar_8 * (tmpvar_7 - (2.0 * 
    (dot (N_9, tmpvar_7) * N_9)
  )));
  reflDir_4 = tmpvar_10;
  vec3 viewDir_11;
  viewDir_11 = (tmpvar_10 * vec3(-1.0, 1.0, 1.0));
  lowp vec3 tex1_12;
  if ((viewDir_11.y >= 0.0)) {
    float morphMoveLength_13;
    float tmpvar_14;
    tmpvar_14 = clamp (viewDir_11.y, 0.0, 1.0);
    morphMoveLength_13 = (mix (2.0, 0.9, tmpvar_14) * 0.0046875);
    vec3 tmpvar_15;
    tmpvar_15 = (viewDir_11 + ((
      (vec3(1.0, 0.0, 1.0) * -(skyBlend))
     * morphMoveLength_13) * tmpvar_14));
    vec2 tmpvar_16;
    tmpvar_16 = (tmpvar_15.xz / dot (vec3(1.0, 1.0, 1.0), abs(tmpvar_15)));
    vec2 tmpvar_17;
    tmpvar_17.x = (tmpvar_16.x - tmpvar_16.y);
    tmpvar_17.y = (tmpvar_16.x + tmpvar_16.y);
    vec3 tmpvar_18;
    tmpvar_18 = (viewDir_11 + ((
      (vec3(1.0, 0.0, 1.0) * (1.0 - skyBlend))
     * morphMoveLength_13) * tmpvar_14));
    vec2 tmpvar_19;
    tmpvar_19 = (tmpvar_18.xz / dot (vec3(1.0, 1.0, 1.0), abs(tmpvar_18)));
    vec2 tmpvar_20;
    tmpvar_20.x = (tmpvar_19.x - tmpvar_19.y);
    tmpvar_20.y = (tmpvar_19.x + tmpvar_19.y);
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture (skyTex1, ((tmpvar_17 * 0.5) + vec2(0.5, 0.5)));
    lowp vec3 tmpvar_22;
    tmpvar_22 = ((8.0 * tmpvar_21.w) * tmpvar_21.xyz);
    lowp vec4 tmpvar_23;
    tmpvar_23 = texture (skyTex2, ((tmpvar_20 * 0.5) + vec2(0.5, 0.5)));
    lowp vec3 tmpvar_24;
    tmpvar_24 = ((8.0 * tmpvar_23.w) * tmpvar_23.xyz);
    tex1_12 = (mix ((tmpvar_22 * tmpvar_22), (tmpvar_24 * tmpvar_24), skyBlend) / 3.0);
  } else {
    lowp vec4 tmpvar_25;
    tmpvar_25 = texture (skyboxHigh, (viewDir_11 * vec3(-1.0, 1.0, 1.0)));
    lowp vec3 tmpvar_26;
    tmpvar_26 = ((8.0 * tmpvar_25.w) * tmpvar_25.xyz);
    tex1_12 = (tmpvar_26 * tmpvar_26);
  };
  color_5.xyz = tex1_12;
  float tmpvar_27;
  tmpvar_27 = (1.0 - clamp (dot (tmpvar_7, 
    -(vNormalW)
  ), 0.0, 1.0));
  float tmpvar_28;
  tmpvar_28 = (tmpvar_27 * tmpvar_27);
  color_5.w = clamp ((0.32 + (
    (0.68 * tmpvar_27)
   * 
    (tmpvar_28 * tmpvar_28)
  )), 0.0, 1.0);
  vec3 tmpvar_29;
  tmpvar_29 = abs(vNormalW);
  vec2 tmpvar_30;
  if ((tmpvar_29.x > tmpvar_29.z)) {
    tmpvar_30 = (vUv0 * vec2(0.5, 0.5));
  } else {
    tmpvar_30 = ((vUv0 * vec2(1.0, 0.5)) + vec2(0.0, 0.5));
  };
  lowp float tmpvar_31;
  tmpvar_31 = clamp ((texture (texture_mounting, tmpvar_30).y * 4.0), 0.0, 1.0);
  lowp vec4 tmpvar_32;
  tmpvar_32.xyz = vec3(0.0, 0.0, 0.0);
  tmpvar_32.w = tmpvar_31;
  color_5 = mix (tmpvar_32, color_5, clamp ((color_5.w + 
    (1.0 - tmpvar_31)
  ), 0.0, 1.0));
  vec2 tmpvar_33;
  vec3 tmpvar_34;
  tmpvar_34 = (1.0/(tmpvar_7));
  vec3 tmpvar_35;
  tmpvar_35 = (tmpvar_34 * (vec3(-0.45, -0.45, -0.45) - vPositionL));
  vec3 tmpvar_36;
  tmpvar_36 = (tmpvar_34 * (vec3(0.45, 0.45, 0.45) - vPositionL));
  vec3 tmpvar_37;
  tmpvar_37 = min (tmpvar_36, tmpvar_35);
  vec3 tmpvar_38;
  tmpvar_38 = max (tmpvar_36, tmpvar_35);
  vec2 tmpvar_39;
  tmpvar_39 = max (tmpvar_37.xx, tmpvar_37.yz);
  float tmpvar_40;
  tmpvar_40 = max (tmpvar_39.x, tmpvar_39.y);
  vec2 tmpvar_41;
  tmpvar_41 = min (tmpvar_38.xx, tmpvar_38.yz);
  float tmpvar_42;
  tmpvar_42 = min (tmpvar_41.x, tmpvar_41.y);
  if ((tmpvar_40 > tmpvar_42)) {
    tmpvar_33 = vec2(-1.0, -1.0);
  } else {
    vec2 tmpvar_43;
    tmpvar_43.x = tmpvar_40;
    tmpvar_43.y = tmpvar_42;
    tmpvar_33 = tmpvar_43;
  };
  d_3 = tmpvar_33.x;
  isInside_2 = (tmpvar_33.x >= 0.0);
  pos_6 = (vPositionL + (tmpvar_33.x * tmpvar_7));
  vec3 boxSphN_44;
  boxSphN_44 = (pos_6 / vec3(0.9, 0.9, 0.9));
  bool tmpvar_45;
  tmpvar_45 = bool(1);
  vec3 tmpvar_46;
  vec3 tmpvar_47;
  tmpvar_47 = abs(boxSphN_44);
  if (((tmpvar_47.x > tmpvar_47.y) && (tmpvar_47.x > tmpvar_47.z))) {
    vec3 tmpvar_48;
    if ((boxSphN_44.x > 0.0)) {
      tmpvar_48 = vec3(1.0, 0.0, 0.0);
    } else {
      tmpvar_48 = vec3(-1.0, 0.0, 0.0);
    };
    tmpvar_46 = tmpvar_48;
    tmpvar_45 = bool(0);
  } else {
    if (((tmpvar_47.y > tmpvar_47.x) && (tmpvar_47.y > tmpvar_47.z))) {
      vec3 tmpvar_49;
      if ((boxSphN_44.y > 0.0)) {
        tmpvar_49 = vec3(0.0, 1.0, 0.0);
      } else {
        tmpvar_49 = vec3(0.0, -1.0, 0.0);
      };
      tmpvar_46 = tmpvar_49;
      tmpvar_45 = bool(0);
    };
  };
  if (tmpvar_45) {
    vec3 tmpvar_50;
    if ((boxSphN_44.z > 0.0)) {
      tmpvar_50 = vec3(0.0, 0.0, 1.0);
    } else {
      tmpvar_50 = vec3(0.0, 0.0, -1.0);
    };
    tmpvar_46 = tmpvar_50;
    tmpvar_45 = bool(0);
  };
  mat3 tmpvar_51;
  tmpvar_51[uint(0)] = matrix_model[uint(0)].xyz;
  tmpvar_51[1u] = matrix_model[1u].xyz;
  tmpvar_51[2u] = matrix_model[2u].xyz;
  vec3 N_52;
  N_52 = -(tmpvar_46);
  reflDir_4 = (tmpvar_51 * (tmpvar_7 - (2.0 * 
    (dot (N_52, tmpvar_7) * N_52)
  )));
  vec3 viewDir_53;
  viewDir_53 = (reflDir_4 * vec3(-1.0, 1.0, 1.0));
  lowp vec3 tex1_54;
  if ((viewDir_53.y >= 0.0)) {
    float morphMoveLength_55;
    float tmpvar_56;
    tmpvar_56 = clamp (viewDir_53.y, 0.0, 1.0);
    morphMoveLength_55 = (mix (2.0, 0.9, tmpvar_56) * 0.0046875);
    vec3 tmpvar_57;
    tmpvar_57 = (viewDir_53 + ((
      (vec3(1.0, 0.0, 1.0) * -(skyBlend))
     * morphMoveLength_55) * tmpvar_56));
    vec2 tmpvar_58;
    tmpvar_58 = (tmpvar_57.xz / dot (vec3(1.0, 1.0, 1.0), abs(tmpvar_57)));
    vec2 tmpvar_59;
    tmpvar_59.x = (tmpvar_58.x - tmpvar_58.y);
    tmpvar_59.y = (tmpvar_58.x + tmpvar_58.y);
    vec3 tmpvar_60;
    tmpvar_60 = (viewDir_53 + ((
      (vec3(1.0, 0.0, 1.0) * (1.0 - skyBlend))
     * morphMoveLength_55) * tmpvar_56));
    vec2 tmpvar_61;
    tmpvar_61 = (tmpvar_60.xz / dot (vec3(1.0, 1.0, 1.0), abs(tmpvar_60)));
    vec2 tmpvar_62;
    tmpvar_62.x = (tmpvar_61.x - tmpvar_61.y);
    tmpvar_62.y = (tmpvar_61.x + tmpvar_61.y);
    lowp vec4 tmpvar_63;
    tmpvar_63 = texture (skyTex1, ((tmpvar_59 * 0.5) + vec2(0.5, 0.5)));
    lowp vec3 tmpvar_64;
    tmpvar_64 = ((8.0 * tmpvar_63.w) * tmpvar_63.xyz);
    lowp vec4 tmpvar_65;
    tmpvar_65 = texture (skyTex2, ((tmpvar_62 * 0.5) + vec2(0.5, 0.5)));
    lowp vec3 tmpvar_66;
    tmpvar_66 = ((8.0 * tmpvar_65.w) * tmpvar_65.xyz);
    tex1_54 = (mix ((tmpvar_64 * tmpvar_64), (tmpvar_66 * tmpvar_66), skyBlend) / 3.0);
  } else {
    lowp vec4 tmpvar_67;
    tmpvar_67 = texture (skyboxHigh, (viewDir_53 * vec3(-1.0, 1.0, 1.0)));
    lowp vec3 tmpvar_68;
    tmpvar_68 = ((8.0 * tmpvar_67.w) * tmpvar_67.xyz);
    tex1_54 = (tmpvar_68 * tmpvar_68);
  };
  color_5.xyz = mix (tex1_54, color_5.xyz, color_5.w);
  float tmpvar_69;
  tmpvar_69 = (1.0 - clamp (dot (tmpvar_7, 
    -(tmpvar_46)
  ), 0.0, 1.0));
  float tmpvar_70;
  tmpvar_70 = (tmpvar_69 * tmpvar_69);
  color_5.w = clamp ((color_5.w + (0.32 + 
    ((0.68 * tmpvar_69) * (tmpvar_70 * tmpvar_70))
  )), 0.0, 1.0);
  pos_6 = (vPositionL - (vNormalW * 0.001));
  id_1 = 0;
  d_3 = 99999.0;
  vec4 tmpvar_71;
  tmpvar_71.xyz = vec3(0.0, 1.0, 0.0);
  tmpvar_71.w = (0.5 - (ceil(
    ((pos_6.y + 0.5) * 8.5)
  ) / 8.5));
  float tmpvar_72;
  tmpvar_72 = -(((tmpvar_71.w + pos_6.y) / tmpvar_7.y));
  if ((tmpvar_72 < 99999.0)) {
    d_3 = tmpvar_72;
    id_1 = 2;
  };
  if ((tmpvar_7.z < 0.0)) {
    vec4 tmpvar_73;
    tmpvar_73.xyz = vec3(0.0, 0.0, 1.0);
    tmpvar_73.w = (0.5 - (floor(
      ((pos_6.z + 0.5) * 4.0)
    ) / 4.0));
    float tmpvar_74;
    tmpvar_74 = -(((tmpvar_73.w + pos_6.z) / tmpvar_7.z));
    if ((tmpvar_74 < d_3)) {
      d_3 = tmpvar_74;
      id_1 = 3;
    };
  } else {
    if ((tmpvar_7.z > 0.0)) {
      vec4 tmpvar_75;
      tmpvar_75.xyz = vec3(0.0, 0.0, 1.0);
      tmpvar_75.w = (0.5 - (ceil(
        ((pos_6.z + 0.5) * 4.0)
      ) / 4.0));
      float tmpvar_76;
      tmpvar_76 = -(((tmpvar_75.w + pos_6.z) / tmpvar_7.z));
      if ((tmpvar_76 < d_3)) {
        d_3 = tmpvar_76;
        id_1 = 3;
      };
    };
  };
  if ((tmpvar_7.x < 0.0)) {
    vec4 tmpvar_77;
    tmpvar_77.xyz = vec3(1.0, 0.0, 0.0);
    tmpvar_77.w = (0.5 - (floor(
      ((pos_6.x + 0.5) * 4.0)
    ) / 4.0));
    float tmpvar_78;
    tmpvar_78 = -(((tmpvar_77.w + pos_6.x) / tmpvar_7.x));
    if ((tmpvar_78 < d_3)) {
      d_3 = tmpvar_78;
      id_1 = 4;
    };
  } else {
    if ((tmpvar_7.x > 0.0)) {
      vec4 tmpvar_79;
      tmpvar_79.xyz = vec3(1.0, 0.0, 0.0);
      tmpvar_79.w = (0.5 - (ceil(
        ((pos_6.x + 0.5) * 4.0)
      ) / 4.0));
      float tmpvar_80;
      tmpvar_80 = -(((tmpvar_79.w + pos_6.x) / tmpvar_7.x));
      if ((tmpvar_80 < d_3)) {
        d_3 = tmpvar_80;
        id_1 = 4;
      };
    };
  };
  pos_6 = (pos_6 + (d_3 * tmpvar_7));
  vec2 tmpvar_81;
  if ((id_1 < 3)) {
    tmpvar_81 = ((pos_6.xz + vec2(0.5, 0.5)) * vec2(4.0, 4.0));
  } else {
    vec2 tmpvar_82;
    if ((id_1 < 4)) {
      tmpvar_82 = ((pos_6.xy + vec2(0.5, 0.5)) * vec2(4.0, 8.5));
    } else {
      tmpvar_82 = ((pos_6.zy + vec2(0.5, 0.5)) * vec2(4.0, 8.5));
    };
    tmpvar_81 = tmpvar_82;
  };
  vec2 tmpvar_83;
  tmpvar_83 = (1.0 - abs((
    (fract(tmpvar_81) * 2.0)
   - 1.0)));
  float tmpvar_84;
  tmpvar_84 = pow ((tmpvar_83.x * tmpvar_83.y), 0.25);
  bool tmpvar_85;
  tmpvar_85 = ((!(isInside_2) && (id_1 == 2)) && (pos_6.y < 0.5));
  if (isInside_2) {
    pos_6 = (pos_6 + vec3(0.5, 0.5, 0.5));
    vec3 tmpvar_86;
    tmpvar_86.x = matrix_model[3].x;
    tmpvar_86.y = matrix_model[3].y;
    tmpvar_86.z = matrix_model[3].z;
    vec3 p3_87;
    p3_87 = (floor((
      ((pos_6 * vec3(4.0, 8.5, 4.0)) + 0.05)
     + tmpvar_86)) * 1234.0);
    vec3 tmpvar_88;
    tmpvar_88 = fract((p3_87 * 0.1031));
    p3_87 = (tmpvar_88 + dot (tmpvar_88, (tmpvar_88.yzx + 19.19)));
    float tmpvar_89;
    tmpvar_89 = pow (fract((
      (p3_87.x + p3_87.y)
     * p3_87.z)), 8.0);
    lowp vec4 tmpvar_90;
    tmpvar_90 = texture (texture_lamp, (pos_6.xz * vec2(4.0, 4.0)));
    float tmpvar_91;
    if ((tmpvar_89 < 0.2)) {
      tmpvar_91 = 0.0;
    } else {
      tmpvar_91 = 1.0;
    };
    color_5.xyz = mix (((
      (vec3(0.0634, 0.1113, 0.2264) * tmpvar_84)
     + 
      (((tmpvar_89 * vec3(2.0921, 1.0082, 0.0402)) * (tmpvar_84 * tmpvar_84)) * (tmpvar_84 * tmpvar_84))
    ) + (
      (tmpvar_90.xyz * tmpvar_91)
     * 8.0)), color_5.xyz, color_5.w);
    color_5.w = 1.0;
  };
  if (tmpvar_85) {
    lowp float tmpvar_92;
    tmpvar_92 = clamp (4.0, 0.0, 1.0);
    lowp vec4 tmpvar_93;
    tmpvar_93.xyz = vec3(0.0, 0.0, 0.0);
    tmpvar_93.w = tmpvar_92;
    color_5 = mix (tmpvar_93, color_5, clamp ((color_5.w + 
      (1.0 - tmpvar_92)
    ), 0.0, 1.0));
  };
  vec2 tmpvar_94;
  vec3 tmpvar_95;
  tmpvar_95 = (1.0/(tmpvar_7));
  vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_95 * (vec3(-0.501, -0.501, -0.501) - pos_6));
  vec3 tmpvar_97;
  tmpvar_97 = (tmpvar_95 * (vec3(0.501, 0.501, 0.501) - pos_6));
  vec3 tmpvar_98;
  tmpvar_98 = min (tmpvar_97, tmpvar_96);
  vec3 tmpvar_99;
  tmpvar_99 = max (tmpvar_97, tmpvar_96);
  vec2 tmpvar_100;
  tmpvar_100 = max (tmpvar_98.xx, tmpvar_98.yz);
  float tmpvar_101;
  tmpvar_101 = max (tmpvar_100.x, tmpvar_100.y);
  vec2 tmpvar_102;
  tmpvar_102 = min (tmpvar_99.xx, tmpvar_99.yz);
  float tmpvar_103;
  tmpvar_103 = min (tmpvar_102.x, tmpvar_102.y);
  if ((tmpvar_101 > tmpvar_103)) {
    tmpvar_94 = vec2(-1.0, -1.0);
  } else {
    vec2 tmpvar_104;
    tmpvar_104.x = tmpvar_101;
    tmpvar_104.y = tmpvar_103;
    tmpvar_94 = tmpvar_104;
  };
  pos_6 = (pos_6 + (tmpvar_94.y * tmpvar_7));
  bool tmpvar_105;
  tmpvar_105 = bool(1);
  vec3 tmpvar_106;
  vec3 tmpvar_107;
  tmpvar_107 = abs(pos_6);
  if (((tmpvar_107.x > tmpvar_107.y) && (tmpvar_107.x > tmpvar_107.z))) {
    vec3 tmpvar_108;
    if ((pos_6.x > 0.0)) {
      tmpvar_108 = vec3(1.0, 0.0, 0.0);
    } else {
      tmpvar_108 = vec3(-1.0, 0.0, 0.0);
    };
    tmpvar_106 = tmpvar_108;
    tmpvar_105 = bool(0);
  } else {
    if (((tmpvar_107.y > tmpvar_107.x) && (tmpvar_107.y > tmpvar_107.z))) {
      vec3 tmpvar_109;
      if ((pos_6.y > 0.0)) {
        tmpvar_109 = vec3(0.0, 1.0, 0.0);
      } else {
        tmpvar_109 = vec3(0.0, -1.0, 0.0);
      };
      tmpvar_106 = tmpvar_109;
      tmpvar_105 = bool(0);
    };
  };
  if (tmpvar_105) {
    vec3 tmpvar_110;
    if ((pos_6.z > 0.0)) {
      tmpvar_110 = vec3(0.0, 0.0, 1.0);
    } else {
      tmpvar_110 = vec3(0.0, 0.0, -1.0);
    };
    tmpvar_106 = tmpvar_110;
    tmpvar_105 = bool(0);
  };
  mat3 tmpvar_111;
  tmpvar_111[uint(0)] = matrix_model[uint(0)].xyz;
  tmpvar_111[1u] = matrix_model[1u].xyz;
  tmpvar_111[2u] = matrix_model[2u].xyz;
  vec3 N_112;
  N_112 = -(tmpvar_106);
  reflDir_4 = (tmpvar_111 * (tmpvar_7 - (2.0 * 
    (dot (N_112, tmpvar_7) * N_112)
  )));
  vec3 viewDir_113;
  viewDir_113 = (reflDir_4 * vec3(-1.0, 1.0, 1.0));
  lowp vec3 tex1_114;
  if ((viewDir_113.y >= 0.0)) {
    float morphMoveLength_115;
    float tmpvar_116;
    tmpvar_116 = clamp (viewDir_113.y, 0.0, 1.0);
    morphMoveLength_115 = (mix (2.0, 0.9, tmpvar_116) * 0.0046875);
    vec3 tmpvar_117;
    tmpvar_117 = (viewDir_113 + ((
      (vec3(1.0, 0.0, 1.0) * -(skyBlend))
     * morphMoveLength_115) * tmpvar_116));
    vec2 tmpvar_118;
    tmpvar_118 = (tmpvar_117.xz / dot (vec3(1.0, 1.0, 1.0), abs(tmpvar_117)));
    vec2 tmpvar_119;
    tmpvar_119.x = (tmpvar_118.x - tmpvar_118.y);
    tmpvar_119.y = (tmpvar_118.x + tmpvar_118.y);
    vec3 tmpvar_120;
    tmpvar_120 = (viewDir_113 + ((
      (vec3(1.0, 0.0, 1.0) * (1.0 - skyBlend))
     * morphMoveLength_115) * tmpvar_116));
    vec2 tmpvar_121;
    tmpvar_121 = (tmpvar_120.xz / dot (vec3(1.0, 1.0, 1.0), abs(tmpvar_120)));
    vec2 tmpvar_122;
    tmpvar_122.x = (tmpvar_121.x - tmpvar_121.y);
    tmpvar_122.y = (tmpvar_121.x + tmpvar_121.y);
    lowp vec4 tmpvar_123;
    tmpvar_123 = texture (skyTex1, ((tmpvar_119 * 0.5) + vec2(0.5, 0.5)));
    lowp vec3 tmpvar_124;
    tmpvar_124 = ((8.0 * tmpvar_123.w) * tmpvar_123.xyz);
    lowp vec4 tmpvar_125;
    tmpvar_125 = texture (skyTex2, ((tmpvar_122 * 0.5) + vec2(0.5, 0.5)));
    lowp vec3 tmpvar_126;
    tmpvar_126 = ((8.0 * tmpvar_125.w) * tmpvar_125.xyz);
    tex1_114 = (mix ((tmpvar_124 * tmpvar_124), (tmpvar_126 * tmpvar_126), skyBlend) / 3.0);
  } else {
    lowp vec4 tmpvar_127;
    tmpvar_127 = texture (skyboxHigh, (viewDir_113 * vec3(-1.0, 1.0, 1.0)));
    lowp vec3 tmpvar_128;
    tmpvar_128 = ((8.0 * tmpvar_127.w) * tmpvar_127.xyz);
    tex1_114 = (tmpvar_128 * tmpvar_128);
  };
  float tmpvar_129;
  tmpvar_129 = (1.0 - clamp (dot (tmpvar_7, tmpvar_106), 0.0, 1.0));
  float tmpvar_130;
  tmpvar_130 = (tmpvar_129 * tmpvar_129);
  lowp vec4 tmpvar_131;
  tmpvar_131.xyz = tex1_114;
  tmpvar_131.w = (0.32 + ((0.68 * tmpvar_129) * (tmpvar_130 * tmpvar_130)));
  lowp vec4 tmpvar_132;
  tmpvar_132 = mix (tmpvar_131, color_5, color_5.w);
  color_5.w = tmpvar_132.w;
  vec3 tmpvar_133;
  tmpvar_133 = (vPositionW - view_position);
  color_5.xyz = mix (fog_color, tmpvar_132.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_133, tmpvar_133))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor = color_5;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^286547344^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_diffuse;
uniform sampler2D texture_opacityMap;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform float alpha_ref;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_2;
  tmpvar_2 = normalize((view_position - vPositionW));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(vNormalW);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (tmpvar_3, tmpvar_2) * tmpvar_3)
  ) - tmpvar_2));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = (rgba_5.xyz * material_diffuse);
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * clamp (vVertexColor.x, 0.0, 1.0)) + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_3, tmpvar_2), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_3;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_3.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_3.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_3.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_3.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_3.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_3.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * skyboxIntensity);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_4;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_4.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_4.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_4.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_4.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = ((tmpvar_33 * tmpvar_33) * skyboxIntensity);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_35)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_42;
    tmpvar_42 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_42)
     * 
      (tmpvar_42 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_43;
  tmpvar_43 = normalize(dLightDirW);
  float falloff_44;
  float tmpvar_45;
  tmpvar_45 = dot (dLightDirW, dLightDirW);
  float tmpvar_46;
  tmpvar_46 = (1.0/(light1_radius));
  falloff_44 = ((1.0/((tmpvar_45 + 1.0))) * 16.0);
  float x_47;
  x_47 = (tmpvar_45 * (tmpvar_46 * tmpvar_46));
  float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (x_47 * x_47)), 0.0, 1.0);
  falloff_44 = (falloff_44 * (tmpvar_48 * tmpvar_48));
  dAtten = falloff_44;
  if ((falloff_44 > 1e-05)) {
    float tmpvar_49;
    tmpvar_49 = clamp (((
      dot (tmpvar_43, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_44 * (tmpvar_49 * (tmpvar_49 * 
      (3.0 - (2.0 * tmpvar_49))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_43)
    ), 0.0));
    vec4 projPos_50;
    vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = vPositionW;
    vec4 tmpvar_52;
    tmpvar_52 = (light1_shadowMatrix * tmpvar_51);
    projPos_50.zw = tmpvar_52.zw;
    projPos_50.xy = (tmpvar_52.xy / tmpvar_52.w);
    float Z_53;
    Z_53 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_54;
    tmpvar_54 = texture (light1_shadowMap, projPos_50.xy);
    lowp vec3 tmpvar_55;
    tmpvar_55.z = 0.0;
    tmpvar_55.x = ((tmpvar_54.y * 0.003921569) + tmpvar_54.x);
    tmpvar_55.y = ((tmpvar_54.w * 0.003921569) + tmpvar_54.z);
    float tmpvar_56;
    tmpvar_56 = (light1_shadowParams.y * Z_53);
    lowp float tmpvar_57;
    tmpvar_57 = max ((tmpvar_55.y - (tmpvar_55.x * tmpvar_55.x)), (tmpvar_56 * tmpvar_56));
    lowp float tmpvar_58;
    tmpvar_58 = (Z_53 - tmpvar_55.x);
    lowp float tmpvar_59;
    tmpvar_59 = clamp (((
      (tmpvar_57 / (tmpvar_57 + (tmpvar_58 * tmpvar_58)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_60;
    if ((Z_53 <= tmpvar_55.x)) {
      tmpvar_60 = 1.0;
    } else {
      tmpvar_60 = tmpvar_59;
    };
    dAtten = (dAtten * tmpvar_60);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_61;
    tmpvar_61 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_43) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_61)
     * 
      (tmpvar_61 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_62;
  tmpvar_62 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_62;
  lowp vec3 tmpvar_63;
  float translucency_64;
  translucency_64 = (clamp (dot (tmpvar_43, 
    -(vNormalW)
  ), 0.0, 1.0) * clamp (dot (
    normalize((view_position - vPositionW))
  , tmpvar_43), 0.0, 1.0));
  translucency_64 = (translucency_64 * ((1.0/(
    (dot (dLightDirW, dLightDirW) + 1.0)
  )) * 4.0));
  float tmpvar_65;
  tmpvar_65 = clamp ((translucency_64 + 0.0025), 0.0, 1.0);
  translucency_64 = tmpvar_65;
  lowp vec4 rgba_66;
  lowp vec4 tmpvar_67;
  tmpvar_67 = texture (texture_emissiveMap, vUv0);
  rgba_66.w = tmpvar_67.w;
  rgba_66.xyz = pow (tmpvar_67.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_63 = (((rgba_66.xyz * material_emissiveIntensity) * (200.0 * tmpvar_65)) * vVertexColor.w);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_63);
  vec3 tmpvar_68;
  tmpvar_68 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_68, tmpvar_68))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^332084986^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUV0_1).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUV0_1);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = (rgba_4.xyz * material_diffuse);
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), dAlbedo, material_metalness);
  dAlbedo = (dAlbedo * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  lowp vec3 fixedReflDir_10;
  lowp vec3 vec_11;
  vec_11 = dNormalW;
  lowp float tmpvar_12;
  tmpvar_12 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_13;
  tmpvar_13 = abs(dNormalW.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  dDiffuseLight = tmpvar_17;
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_3;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_36)
    ), 0.0));
    vec4 projPos_43;
    vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vPositionW;
    vec4 tmpvar_45;
    tmpvar_45 = (light0_shadowMatrix * tmpvar_44);
    projPos_43.zw = tmpvar_45.zw;
    projPos_43.xy = (tmpvar_45.xy / tmpvar_45.w);
    float Z_46;
    Z_46 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_47;
    tmpvar_47 = texture (light0_shadowMap, projPos_43.xy);
    lowp vec3 tmpvar_48;
    tmpvar_48.z = 0.0;
    tmpvar_48.x = ((tmpvar_47.y * 0.003921569) + tmpvar_47.x);
    tmpvar_48.y = ((tmpvar_47.w * 0.003921569) + tmpvar_47.z);
    float tmpvar_49;
    tmpvar_49 = (light0_shadowParams.y * Z_46);
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x)), (tmpvar_49 * tmpvar_49));
    lowp float tmpvar_51;
    tmpvar_51 = (Z_46 - tmpvar_48.x);
    lowp float tmpvar_52;
    tmpvar_52 = clamp (((
      (tmpvar_50 / (tmpvar_50 + (tmpvar_51 * tmpvar_51)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_53;
    if ((Z_46 <= tmpvar_48.x)) {
      tmpvar_53 = 1.0;
    } else {
      tmpvar_53 = tmpvar_52;
    };
    dAtten = (dAtten * tmpvar_53);
    dDiffuseLight = (tmpvar_17 + (dAtten * light0_color));
    lowp float tmpvar_54;
    tmpvar_54 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_54)
     * 
      (tmpvar_54 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_55;
  tmpvar_55 = normalize(dLightDirW);
  float falloff_56;
  float tmpvar_57;
  tmpvar_57 = dot (dLightDirW, dLightDirW);
  float tmpvar_58;
  tmpvar_58 = (1.0/(light1_radius));
  falloff_56 = ((1.0/((tmpvar_57 + 1.0))) * 16.0);
  float x_59;
  x_59 = (tmpvar_57 * (tmpvar_58 * tmpvar_58));
  float tmpvar_60;
  tmpvar_60 = clamp ((1.0 - (x_59 * x_59)), 0.0, 1.0);
  falloff_56 = (falloff_56 * (tmpvar_60 * tmpvar_60));
  dAtten = falloff_56;
  if ((falloff_56 > 1e-05)) {
    float tmpvar_61;
    tmpvar_61 = clamp (((
      dot (tmpvar_55, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_56 * (tmpvar_61 * (tmpvar_61 * 
      (3.0 - (2.0 * tmpvar_61))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_55)
    ), 0.0));
    vec4 projPos_62;
    vec4 tmpvar_63;
    tmpvar_63.w = 1.0;
    tmpvar_63.xyz = vPositionW;
    vec4 tmpvar_64;
    tmpvar_64 = (light1_shadowMatrix * tmpvar_63);
    projPos_62.zw = tmpvar_64.zw;
    projPos_62.xy = (tmpvar_64.xy / tmpvar_64.w);
    float Z_65;
    Z_65 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_66;
    tmpvar_66 = texture (light1_shadowMap, projPos_62.xy);
    lowp vec3 tmpvar_67;
    tmpvar_67.z = 0.0;
    tmpvar_67.x = ((tmpvar_66.y * 0.003921569) + tmpvar_66.x);
    tmpvar_67.y = ((tmpvar_66.w * 0.003921569) + tmpvar_66.z);
    float tmpvar_68;
    tmpvar_68 = (light1_shadowParams.y * Z_65);
    lowp float tmpvar_69;
    tmpvar_69 = max ((tmpvar_67.y - (tmpvar_67.x * tmpvar_67.x)), (tmpvar_68 * tmpvar_68));
    lowp float tmpvar_70;
    tmpvar_70 = (Z_65 - tmpvar_67.x);
    lowp float tmpvar_71;
    tmpvar_71 = clamp (((
      (tmpvar_69 / (tmpvar_69 + (tmpvar_70 * tmpvar_70)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_72;
    if ((Z_65 <= tmpvar_67.x)) {
      tmpvar_72 = 1.0;
    } else {
      tmpvar_72 = tmpvar_71;
    };
    dAtten = (dAtten * tmpvar_72);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_73;
    tmpvar_73 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_55) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_73)
     * 
      (tmpvar_73 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_74;
  tmpvar_74 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_35.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_74;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_75;
  tmpvar_75 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_75, tmpvar_75))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^434864676^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
vec3 dAlbedo;
lowp vec3 dSpecularity;
lowp float dGlossiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform vec3 material_diffuse;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec3 tmpvar_4;
  tmpvar_4 = mix (vec3(0.04, 0.04, 0.04), material_diffuse, material_metalness);
  dAlbedo = (material_diffuse * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_5;
  lowp float tmpvar_6;
  tmpvar_6 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  lowp float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  fresnel_5 = (tmpvar_6 * (tmpvar_7 * tmpvar_7));
  fresnel_5 = (fresnel_5 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_4 + ((1.0 - tmpvar_4) * fresnel_5));
  vec3 fixedReflDir_8;
  vec3 vec_9;
  vec_9 = tmpvar_2;
  float tmpvar_10;
  tmpvar_10 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_11;
  tmpvar_11 = abs(tmpvar_2.x);
  if ((tmpvar_11 != tmpvar_10)) {
    vec_9.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.y);
  if ((tmpvar_12 != tmpvar_10)) {
    vec_9.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.z);
  if ((tmpvar_13 != tmpvar_10)) {
    vec_9.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_8.yz = vec_9.yz;
  fixedReflDir_8.x = -(vec_9.x);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (texture_prefilteredCubeMap4, fixedReflDir_8);
  lowp vec3 tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((8.0 * tmpvar_14.w) * tmpvar_14.xyz);
  tmpvar_15 = (tmpvar_16 * tmpvar_16);
  lowp vec4 cube_0_18;
  lowp vec4 cube_1_19;
  lowp vec4 cubes_20[6];
  lowp vec3 fixedReflDir_21;
  lowp int index2_22;
  lowp int index1_23;
  lowp float tmpvar_24;
  tmpvar_24 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_23 = int(tmpvar_24);
  index2_22 = int(min ((tmpvar_24 + 1.0), 7.0));
  lowp vec3 vec_25;
  vec_25 = tmpvar_3;
  lowp float tmpvar_26;
  tmpvar_26 = (1.0 - (exp2(tmpvar_24) / 128.0));
  lowp float tmpvar_27;
  tmpvar_27 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_28;
  tmpvar_28 = abs(tmpvar_3.x);
  if ((tmpvar_28 != tmpvar_27)) {
    vec_25.x = (tmpvar_3.x * tmpvar_26);
  };
  lowp float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.y);
  if ((tmpvar_29 != tmpvar_27)) {
    vec_25.y = (tmpvar_3.y * tmpvar_26);
  };
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.z);
  if ((tmpvar_30 != tmpvar_27)) {
    vec_25.z = (tmpvar_3.z * tmpvar_26);
  };
  fixedReflDir_21.yz = vec_25.yz;
  fixedReflDir_21.x = -(vec_25.x);
  cubes_20[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_21);
  cubes_20[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_21);
  cubes_20[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_21);
  cubes_20[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_21);
  cubes_20[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_21);
  cubes_20[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_21);
  for (highp int i_17 = 0; i_17 < 6; i_17++) {
    if ((i_17 == index1_23)) {
      cube_0_18 = cubes_20[i_17];
    };
    if ((i_17 == index2_22)) {
      cube_1_19 = cubes_20[i_17];
    };
  };
  lowp vec4 tmpvar_31;
  tmpvar_31 = mix (cube_0_18, cube_1_19, fract(tmpvar_24));
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((8.0 * tmpvar_31.w) * tmpvar_31.xyz);
  lowp vec4 tmpvar_33;
  tmpvar_33.xyz = (tmpvar_32 * tmpvar_32);
  tmpvar_33.w = material_reflectivity;
  lowp vec3 tmpvar_34;
  tmpvar_34 = mix ((dAlbedo * tmpvar_15), (tmpvar_33.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_34;
  lowp vec3 tmpvar_35;
  lowp vec4 rgba_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture (texture_emissiveMap, vUv0);
  rgba_36.w = tmpvar_37.w;
  rgba_36.xyz = pow (tmpvar_37.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_35 = (rgba_36.xyz * material_emissiveIntensity);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_35);
  vec3 tmpvar_38;
  tmpvar_38 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_38, tmpvar_38))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^453959816^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform float material_opacity;
uniform vec3 material_emissive;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float alpha_ref;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dAlpha = (texture (texture_opacityMap, vUv0).w * material_opacity);
  if ((dAlpha < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  vec3 fixedReflDir_4;
  vec3 vec_5;
  vec_5 = tmpvar_1;
  float tmpvar_6;
  tmpvar_6 = max (max (abs(tmpvar_1.x), abs(tmpvar_1.y)), abs(tmpvar_1.z));
  float tmpvar_7;
  tmpvar_7 = abs(tmpvar_1.x);
  if ((tmpvar_7 != tmpvar_6)) {
    vec_5.x = (tmpvar_1.x * 0.75);
  };
  float tmpvar_8;
  tmpvar_8 = abs(tmpvar_1.y);
  if ((tmpvar_8 != tmpvar_6)) {
    vec_5.y = (tmpvar_1.y * 0.75);
  };
  float tmpvar_9;
  tmpvar_9 = abs(tmpvar_1.z);
  if ((tmpvar_9 != tmpvar_6)) {
    vec_5.z = (tmpvar_1.z * 0.75);
  };
  fixedReflDir_4.yz = vec_5.yz;
  fixedReflDir_4.x = -(vec_5.x);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_prefilteredCubeMap4, fixedReflDir_4);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((8.0 * tmpvar_10.w) * tmpvar_10.xyz);
  dDiffuseLight = ((tmpvar_11 * tmpvar_11) * skyboxIntensity);
  lowp vec3 tmpvar_12;
  tmpvar_12 = (rgba_2.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_12;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_13;
  tmpvar_13 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_13, tmpvar_13))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^471181528^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
uniform float mirrorTransition;
uniform vec3 view_position;
uniform float mirrorDepthOffset;
uniform float mirrorDensity;
uniform lowp samplerCube waterSkyTexture;
void main ()
{
  float specVal_2;
  bool specEffect_3;
  float density_4;
  lowp vec4 refl_5;
  vec3 viewDir_6;
  viewDir_6 = normalize((vPositionW - view_position));
  refl_5 = vec4(0.0, 0.0, 0.0, 0.0);
  float tmpvar_7;
  vec3 tmpvar_8;
  tmpvar_8 = (view_position - vPositionW);
  tmpvar_7 = sqrt(dot (tmpvar_8, tmpvar_8));
  specEffect_3 = bool(1);
  if ((mirrorDensity < 0.0)) {
    density_4 = -(mirrorDensity);
    specEffect_3 = bool(0);
  } else {
    density_4 = mirrorDensity;
  };
  float tmpvar_9;
  if (specEffect_3) {
    tmpvar_9 = mix (0.5, 0.3, clamp ((
      (tmpvar_7 - 3.0)
     / 3.0), 0.0, 1.0));
  } else {
    tmpvar_9 = 0.3;
  };
  specVal_2 = mix (tmpvar_9, 1.0, mirrorTransition);
  for (highp int i_1 = 0; i_1 < 1; i_1++) {
    vec3 N_10;
    N_10 = -(viewDir_6);
    lowp vec4 tmpvar_11;
    tmpvar_11 = texture (waterSkyTexture, ((vNormalW - (2.0 * 
      (dot (N_10, vNormalW) * N_10)
    )) * vec3(-1.0, 1.0, 1.0)));
    lowp vec3 tmpvar_12;
    tmpvar_12 = ((8.0 * tmpvar_11.w) * tmpvar_11.xyz);
    refl_5.xyz = (refl_5.xyz + ((tmpvar_12 * tmpvar_12) * 3.0));
    float tmpvar_13;
    tmpvar_13 = (1.0 - max (dot (vNormalW, 
      -(viewDir_6)
    ), 0.0));
    float tmpvar_14;
    tmpvar_14 = (tmpvar_13 * tmpvar_13);
    refl_5.w = (refl_5.w + (specVal_2 + (
      (1.0 - specVal_2)
     * 
      (tmpvar_13 * (tmpvar_14 * tmpvar_14))
    )));
  };
  refl_5.xyz = mix ((refl_5.xyz * 0.9), refl_5.xyz, mirrorTransition);
  lowp vec4 tmpvar_15;
  tmpvar_15 = refl_5;
  if ((mirrorDepthOffset > 0.5)) {
    refl_5.xyz = (refl_5.xyz * 0.2);
    refl_5.w = (tmpvar_15.w + 0.5);
  };
  refl_5.w = (refl_5.w * density_4);
  refl_5.w = clamp (refl_5.w, 0.0, 1.0);
  pc_fragColor = refl_5;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^544811399^VS^#version 300 es
out vec3 vPositionW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec2 vUv0;
uniform vec3 view_position;
uniform vec3 light_globalAmbient;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform vec3 material_diffuse;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
void main ()
{
  dAlpha = texture (texture_opacityMap, vUv0).y;
  pc_fragColor.xyz = (material_diffuse * light_globalAmbient);
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_1;
  tmpvar_1 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_1, tmpvar_1))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,^SH^625880530^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
vec3 dSpecularity;
float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_emissiveMap;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_6;
  float tmpvar_7;
  tmpvar_7 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  fresnel_6 = (tmpvar_7 * (tmpvar_8 * tmpvar_8));
  fresnel_6 = (fresnel_6 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_6));
  vec3 fixedReflDir_9;
  vec3 vec_10;
  vec_10 = tmpvar_2;
  float tmpvar_11;
  tmpvar_11 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.x);
  if ((tmpvar_12 != tmpvar_11)) {
    vec_10.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.y);
  if ((tmpvar_13 != tmpvar_11)) {
    vec_10.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.z);
  if ((tmpvar_14 != tmpvar_11)) {
    vec_10.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_9.yz = vec_10.yz;
  fixedReflDir_9.x = -(vec_10.x);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_prefilteredCubeMap4, fixedReflDir_9);
  lowp vec3 tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  tmpvar_16 = (tmpvar_17 * tmpvar_17);
  dDiffuseLight = tmpvar_16;
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_3;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_3.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_3.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_3.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = (tmpvar_33 * tmpvar_33);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_35)
    ), 0.0));
    dDiffuseLight = (tmpvar_16 + (dAtten * light0_color));
    float tmpvar_42;
    tmpvar_42 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_42)
     * 
      (tmpvar_42 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_43;
  tmpvar_43 = normalize(dLightDirW);
  float falloff_44;
  float tmpvar_45;
  tmpvar_45 = dot (dLightDirW, dLightDirW);
  float tmpvar_46;
  tmpvar_46 = (1.0/(light1_radius));
  falloff_44 = ((1.0/((tmpvar_45 + 1.0))) * 16.0);
  float x_47;
  x_47 = (tmpvar_45 * (tmpvar_46 * tmpvar_46));
  float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (x_47 * x_47)), 0.0, 1.0);
  falloff_44 = (falloff_44 * (tmpvar_48 * tmpvar_48));
  dAtten = falloff_44;
  if ((falloff_44 > 1e-05)) {
    float tmpvar_49;
    tmpvar_49 = clamp (((
      dot (tmpvar_43, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_44 * (tmpvar_49 * (tmpvar_49 * 
      (3.0 - (2.0 * tmpvar_49))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_43)
    ), 0.0));
    vec4 projPos_50;
    vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = vPositionW;
    vec4 tmpvar_52;
    tmpvar_52 = (light1_shadowMatrix * tmpvar_51);
    projPos_50.zw = tmpvar_52.zw;
    projPos_50.xy = (tmpvar_52.xy / tmpvar_52.w);
    float Z_53;
    Z_53 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_54;
    tmpvar_54 = texture (light1_shadowMap, projPos_50.xy);
    lowp vec3 tmpvar_55;
    tmpvar_55.z = 0.0;
    tmpvar_55.x = ((tmpvar_54.y * 0.003921569) + tmpvar_54.x);
    tmpvar_55.y = ((tmpvar_54.w * 0.003921569) + tmpvar_54.z);
    float tmpvar_56;
    tmpvar_56 = (light1_shadowParams.y * Z_53);
    lowp float tmpvar_57;
    tmpvar_57 = max ((tmpvar_55.y - (tmpvar_55.x * tmpvar_55.x)), (tmpvar_56 * tmpvar_56));
    lowp float tmpvar_58;
    tmpvar_58 = (Z_53 - tmpvar_55.x);
    lowp float tmpvar_59;
    tmpvar_59 = clamp (((
      (tmpvar_57 / (tmpvar_57 + (tmpvar_58 * tmpvar_58)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_60;
    if ((Z_53 <= tmpvar_55.x)) {
      tmpvar_60 = 1.0;
    } else {
      tmpvar_60 = tmpvar_59;
    };
    dAtten = (dAtten * tmpvar_60);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_61;
    tmpvar_61 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_43) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_61)
     * 
      (tmpvar_61 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_62;
  tmpvar_62 = mix ((rgba_4.xyz * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_62;
  lowp vec3 tmpvar_63;
  lowp vec4 rgba_64;
  lowp vec4 tmpvar_65;
  tmpvar_65 = texture (texture_emissiveMap, vUv0);
  rgba_64.w = tmpvar_65.w;
  rgba_64.xyz = pow (tmpvar_65.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_63 = (rgba_64.yyy * material_emissive);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_63);
  vec3 tmpvar_66;
  tmpvar_66 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_66, tmpvar_66))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^651798656^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_diffuse;
uniform sampler2D texture_opacityMap;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform float alpha_ref;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_2;
  tmpvar_2 = normalize((view_position - vPositionW));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(vNormalW);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (tmpvar_3, tmpvar_2) * tmpvar_3)
  ) - tmpvar_2));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = (rgba_5.xyz * material_diffuse);
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * clamp (vVertexColor.x, 0.0, 1.0)) + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_3, tmpvar_2), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_3;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_3.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_3.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_3.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_3.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_3.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_3.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * skyboxIntensity);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_4;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_4.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_4.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_4.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_4.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = ((tmpvar_33 * tmpvar_33) * skyboxIntensity);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_35)
    ), 0.0));
    vec4 projPos_42;
    vec4 tmpvar_43;
    tmpvar_43.w = 1.0;
    tmpvar_43.xyz = vPositionW;
    vec4 tmpvar_44;
    tmpvar_44 = (light0_shadowMatrix * tmpvar_43);
    projPos_42.zw = tmpvar_44.zw;
    projPos_42.xy = (tmpvar_44.xy / tmpvar_44.w);
    float Z_45;
    Z_45 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture (light0_shadowMap, projPos_42.xy);
    lowp vec3 tmpvar_47;
    tmpvar_47.z = 0.0;
    tmpvar_47.x = ((tmpvar_46.y * 0.003921569) + tmpvar_46.x);
    tmpvar_47.y = ((tmpvar_46.w * 0.003921569) + tmpvar_46.z);
    float tmpvar_48;
    tmpvar_48 = (light0_shadowParams.y * Z_45);
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x)), (tmpvar_48 * tmpvar_48));
    lowp float tmpvar_50;
    tmpvar_50 = (Z_45 - tmpvar_47.x);
    lowp float tmpvar_51;
    tmpvar_51 = clamp (((
      (tmpvar_49 / (tmpvar_49 + (tmpvar_50 * tmpvar_50)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_52;
    if ((Z_45 <= tmpvar_47.x)) {
      tmpvar_52 = 1.0;
    } else {
      tmpvar_52 = tmpvar_51;
    };
    dAtten = (dAtten * tmpvar_52);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_53;
    tmpvar_53 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_53)
     * 
      (tmpvar_53 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  lowp vec3 tmpvar_54;
  tmpvar_54 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_54;
  lowp vec3 tmpvar_55;
  float translucency_56;
  translucency_56 = (clamp (dot (tmpvar_35, 
    -(vNormalW)
  ), 0.0, 1.0) * clamp (dot (
    normalize((view_position - vPositionW))
  , tmpvar_35), 0.0, 1.0));
  translucency_56 = (translucency_56 * ((1.0/(
    (dot (dLightDirW, dLightDirW) + 1.0)
  )) * 4.0));
  float tmpvar_57;
  tmpvar_57 = clamp ((translucency_56 + 0.0025), 0.0, 1.0);
  translucency_56 = tmpvar_57;
  lowp vec4 rgba_58;
  lowp vec4 tmpvar_59;
  tmpvar_59 = texture (texture_emissiveMap, vUv0);
  rgba_58.w = tmpvar_59.w;
  rgba_58.xyz = pow (tmpvar_59.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_55 = (((rgba_58.xyz * material_emissiveIntensity) * (200.0 * tmpvar_57)) * vVertexColor.w);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_55);
  vec3 tmpvar_60;
  tmpvar_60 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_60, tmpvar_60))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^655976143^VS^#version 300 es
out vec3 vPositionW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform sampler2D texture_lightMap;
uniform float alpha_ref;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv1);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv1);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (texture_lightMap, vUv0);
  lowp vec3 tmpvar_5;
  tmpvar_5 = ((8.0 * tmpvar_4.w) * tmpvar_4.xyz);
  lowp vec3 tmpvar_6;
  tmpvar_6 = (rgba_2.xyz * (tmpvar_5 * tmpvar_5));
  pc_fragColor.xyz = tmpvar_6;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_7;
  tmpvar_7 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_7, tmpvar_7))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^657356971^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform sampler2D texture_lightMap;
void main ()
{
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_3, material_bumpiness)));
  lowp vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dSpecularity = (texture (texture_specularMap, vUv0).xyz * material_specular);
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_aoMap, vUv1);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((8.0 * tmpvar_11.w) * tmpvar_11.xyz);
  dDiffuseLight = (tmpvar_12 * tmpvar_12);
  lowp vec4 cube_0_14;
  lowp vec4 cube_1_15;
  lowp vec4 cubes_16[6];
  lowp vec3 fixedReflDir_17;
  lowp int index2_18;
  lowp int index1_19;
  lowp float tmpvar_20;
  tmpvar_20 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_19 = int(tmpvar_20);
  index2_18 = int(min ((tmpvar_20 + 1.0), 7.0));
  lowp vec3 vec_21;
  vec_21 = tmpvar_4;
  lowp float tmpvar_22;
  tmpvar_22 = (1.0 - (exp2(tmpvar_20) / 128.0));
  lowp float tmpvar_23;
  tmpvar_23 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  lowp float tmpvar_24;
  tmpvar_24 = abs(tmpvar_4.x);
  if ((tmpvar_24 != tmpvar_23)) {
    vec_21.x = (tmpvar_4.x * tmpvar_22);
  };
  lowp float tmpvar_25;
  tmpvar_25 = abs(tmpvar_4.y);
  if ((tmpvar_25 != tmpvar_23)) {
    vec_21.y = (tmpvar_4.y * tmpvar_22);
  };
  lowp float tmpvar_26;
  tmpvar_26 = abs(tmpvar_4.z);
  if ((tmpvar_26 != tmpvar_23)) {
    vec_21.z = (tmpvar_4.z * tmpvar_22);
  };
  fixedReflDir_17.yz = vec_21.yz;
  fixedReflDir_17.x = -(vec_21.x);
  cubes_16[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_17);
  cubes_16[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_17);
  cubes_16[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_17);
  cubes_16[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_17);
  cubes_16[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_17);
  cubes_16[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_17);
  for (highp int i_13 = 0; i_13 < 6; i_13++) {
    if ((i_13 == index1_19)) {
      cube_0_14 = cubes_16[i_13];
    };
    if ((i_13 == index2_18)) {
      cube_1_15 = cubes_16[i_13];
    };
  };
  lowp vec4 tmpvar_27;
  tmpvar_27 = mix (cube_0_14, cube_1_15, fract(tmpvar_20));
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((8.0 * tmpvar_27.w) * tmpvar_27.xyz);
  lowp vec4 tmpvar_29;
  tmpvar_29.xyz = (tmpvar_28 * tmpvar_28);
  tmpvar_29.w = material_reflectivity;
  dReflection = tmpvar_29;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_30;
  tmpvar_30 = normalize(dLightDirW);
  float falloff_31;
  float tmpvar_32;
  tmpvar_32 = dot (dLightDirW, dLightDirW);
  float tmpvar_33;
  tmpvar_33 = (1.0/(light0_radius));
  falloff_31 = ((1.0/((tmpvar_32 + 1.0))) * 16.0);
  float x_34;
  x_34 = (tmpvar_32 * (tmpvar_33 * tmpvar_33));
  float tmpvar_35;
  tmpvar_35 = clamp ((1.0 - (x_34 * x_34)), 0.0, 1.0);
  falloff_31 = (falloff_31 * (tmpvar_35 * tmpvar_35));
  dAtten = falloff_31;
  if ((falloff_31 > 1e-05)) {
    float tmpvar_36;
    tmpvar_36 = clamp (((
      dot (tmpvar_30, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_31 * (tmpvar_36 * (tmpvar_36 * 
      (3.0 - (2.0 * tmpvar_36))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_30)
    ), 0.0));
    vec4 projPos_37;
    vec4 tmpvar_38;
    tmpvar_38.w = 1.0;
    tmpvar_38.xyz = vPositionW;
    vec4 tmpvar_39;
    tmpvar_39 = (light0_shadowMatrix * tmpvar_38);
    projPos_37.zw = tmpvar_39.zw;
    projPos_37.xy = (tmpvar_39.xy / tmpvar_39.w);
    float Z_40;
    Z_40 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture (light0_shadowMap, projPos_37.xy);
    lowp vec3 tmpvar_42;
    tmpvar_42.z = 0.0;
    tmpvar_42.x = ((tmpvar_41.y * 0.003921569) + tmpvar_41.x);
    tmpvar_42.y = ((tmpvar_41.w * 0.003921569) + tmpvar_41.z);
    float tmpvar_43;
    tmpvar_43 = (light0_shadowParams.y * Z_40);
    lowp float tmpvar_44;
    tmpvar_44 = max ((tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x)), (tmpvar_43 * tmpvar_43));
    lowp float tmpvar_45;
    tmpvar_45 = (Z_40 - tmpvar_42.x);
    lowp float tmpvar_46;
    tmpvar_46 = clamp (((
      (tmpvar_44 / (tmpvar_44 + (tmpvar_45 * tmpvar_45)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_47;
    if ((Z_40 <= tmpvar_42.x)) {
      tmpvar_47 = 1.0;
    } else {
      tmpvar_47 = tmpvar_46;
    };
    dAtten = (dAtten * tmpvar_47);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_48;
    tmpvar_48 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_48 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_48 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_30) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_49)
     * 
      (tmpvar_49 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_50;
  tmpvar_50 = normalize(dLightDirW);
  float falloff_51;
  float tmpvar_52;
  tmpvar_52 = dot (dLightDirW, dLightDirW);
  float tmpvar_53;
  tmpvar_53 = (1.0/(light1_radius));
  falloff_51 = ((1.0/((tmpvar_52 + 1.0))) * 16.0);
  float x_54;
  x_54 = (tmpvar_52 * (tmpvar_53 * tmpvar_53));
  float tmpvar_55;
  tmpvar_55 = clamp ((1.0 - (x_54 * x_54)), 0.0, 1.0);
  falloff_51 = (falloff_51 * (tmpvar_55 * tmpvar_55));
  dAtten = falloff_51;
  if ((falloff_51 > 1e-05)) {
    float tmpvar_56;
    tmpvar_56 = clamp (((
      dot (tmpvar_50, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_51 * (tmpvar_56 * (tmpvar_56 * 
      (3.0 - (2.0 * tmpvar_56))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_50)
    ), 0.0));
    vec4 projPos_57;
    vec4 tmpvar_58;
    tmpvar_58.w = 1.0;
    tmpvar_58.xyz = vPositionW;
    vec4 tmpvar_59;
    tmpvar_59 = (light1_shadowMatrix * tmpvar_58);
    projPos_57.zw = tmpvar_59.zw;
    projPos_57.xy = (tmpvar_59.xy / tmpvar_59.w);
    float Z_60;
    Z_60 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_61;
    tmpvar_61 = texture (light1_shadowMap, projPos_57.xy);
    lowp vec3 tmpvar_62;
    tmpvar_62.z = 0.0;
    tmpvar_62.x = ((tmpvar_61.y * 0.003921569) + tmpvar_61.x);
    tmpvar_62.y = ((tmpvar_61.w * 0.003921569) + tmpvar_61.z);
    float tmpvar_63;
    tmpvar_63 = (light1_shadowParams.y * Z_60);
    lowp float tmpvar_64;
    tmpvar_64 = max ((tmpvar_62.y - (tmpvar_62.x * tmpvar_62.x)), (tmpvar_63 * tmpvar_63));
    lowp float tmpvar_65;
    tmpvar_65 = (Z_60 - tmpvar_62.x);
    lowp float tmpvar_66;
    tmpvar_66 = clamp (((
      (tmpvar_64 / (tmpvar_64 + (tmpvar_65 * tmpvar_65)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_67;
    if ((Z_60 <= tmpvar_62.x)) {
      tmpvar_67 = 1.0;
    } else {
      tmpvar_67 = tmpvar_66;
    };
    dAtten = (dAtten * tmpvar_67);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_68;
    tmpvar_68 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_69;
    tmpvar_69 = max ((tmpvar_68 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_68 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_50) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_69)
     * 
      (tmpvar_69 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dSpecularLight = (dSpecularLight * tmpvar_10.z);
  dReflection = (tmpvar_29 * tmpvar_10.z);
  lowp vec3 tmpvar_70;
  tmpvar_70 = mix ((rgba_5.xyz * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_70;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_71;
  tmpvar_71 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_71, tmpvar_71))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^760368045^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
vec3 dLightDirW;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform lowp samplerCube texture_prefilteredCubeMap4;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  mat3 tmpvar_1;
  tmpvar_1[uint(0)] = normalize(vTangentW);
  tmpvar_1[1u] = normalize(vBinormalW);
  tmpvar_1[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_1 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 fixedReflDir_4;
  lowp vec3 vec_5;
  vec_5 = dNormalW;
  lowp float tmpvar_6;
  tmpvar_6 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_7;
  tmpvar_7 = abs(dNormalW.x);
  if ((tmpvar_7 != tmpvar_6)) {
    vec_5.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_8;
  tmpvar_8 = abs(dNormalW.y);
  if ((tmpvar_8 != tmpvar_6)) {
    vec_5.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_9;
  tmpvar_9 = abs(dNormalW.z);
  if ((tmpvar_9 != tmpvar_6)) {
    vec_5.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_4.yz = vec_5.yz;
  fixedReflDir_4.x = -(vec_5.x);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_prefilteredCubeMap4, fixedReflDir_4);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((8.0 * tmpvar_10.w) * tmpvar_10.xyz);
  dDiffuseLight = ((tmpvar_11 * tmpvar_11) * skyboxIntensity);
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(dLightDirW);
  float falloff_13;
  float tmpvar_14;
  tmpvar_14 = dot (dLightDirW, dLightDirW);
  float tmpvar_15;
  tmpvar_15 = (1.0/(light0_radius));
  falloff_13 = ((1.0/((tmpvar_14 + 1.0))) * 16.0);
  float x_16;
  x_16 = (tmpvar_14 * (tmpvar_15 * tmpvar_15));
  float tmpvar_17;
  tmpvar_17 = clamp ((1.0 - (x_16 * x_16)), 0.0, 1.0);
  falloff_13 = (falloff_13 * (tmpvar_17 * tmpvar_17));
  dAtten = falloff_13;
  if ((falloff_13 > 1e-05)) {
    float tmpvar_18;
    tmpvar_18 = clamp (((
      dot (tmpvar_12, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_13 * (tmpvar_18 * (tmpvar_18 * 
      (3.0 - (2.0 * tmpvar_18))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_12)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_19;
  tmpvar_19 = normalize(dLightDirW);
  lowp float tmpvar_20;
  tmpvar_20 = max (((light1_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light1_radius), 0.0);
  dAtten = tmpvar_20;
  if ((tmpvar_20 > 1e-05)) {
    float tmpvar_21;
    tmpvar_21 = clamp (((
      dot (tmpvar_19, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_20 * (tmpvar_21 * (tmpvar_21 * 
      (3.0 - (2.0 * tmpvar_21))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_19)
    ), 0.0));
    vec4 projPos_22;
    vec4 tmpvar_23;
    tmpvar_23.w = 1.0;
    tmpvar_23.xyz = vPositionW;
    vec4 tmpvar_24;
    tmpvar_24 = (light1_shadowMatrix * tmpvar_23);
    projPos_22.zw = tmpvar_24.zw;
    projPos_22.xy = (tmpvar_24.xy / tmpvar_24.w);
    float Z_25;
    Z_25 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_26;
    tmpvar_26 = texture (light1_shadowMap, projPos_22.xy);
    lowp vec3 tmpvar_27;
    tmpvar_27.z = 0.0;
    tmpvar_27.x = ((tmpvar_26.y * 0.003921569) + tmpvar_26.x);
    tmpvar_27.y = ((tmpvar_26.w * 0.003921569) + tmpvar_26.z);
    float tmpvar_28;
    tmpvar_28 = (light1_shadowParams.y * Z_25);
    lowp float tmpvar_29;
    tmpvar_29 = max ((tmpvar_27.y - (tmpvar_27.x * tmpvar_27.x)), (tmpvar_28 * tmpvar_28));
    lowp float tmpvar_30;
    tmpvar_30 = (Z_25 - tmpvar_27.x);
    lowp float tmpvar_31;
    tmpvar_31 = clamp (((
      (tmpvar_29 / (tmpvar_29 + (tmpvar_30 * tmpvar_30)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_32;
    if ((Z_25 <= tmpvar_27.x)) {
      tmpvar_32 = 1.0;
    } else {
      tmpvar_32 = tmpvar_31;
    };
    dAtten = (dAtten * tmpvar_32);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_33;
  tmpvar_33 = (rgba_2.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_33;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_34;
  tmpvar_34 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_34, tmpvar_34))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^783957238^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
uniform float globalTime;
uniform float camera_near;
uniform float camera_far;
uniform vec3 view_position;
uniform sampler2D waterReflTex;
uniform sampler2D waterReflTexBlur;
uniform sampler2D waterNormalTex;
uniform sampler2D waterNormalTex2;
uniform sampler2D uScreenDepth;
uniform vec4 uScreenSize;
uniform mat4 matrix_viewProjection;
uniform float uvOffsetAmount;
float flatten;
void main ()
{
  vec2 nvec_2;
  vec2 dy_3;
  vec2 dx_4;
  vec2 SSAA_5[1];
  lowp float light_6;
  lowp float spec_7;
  lowp vec3 refl_8;
  vec2 origUv_9;
  vec3 viewDir_10;
  viewDir_10 = normalize((vPositionW - view_position));
  vec2 tmpvar_11;
  tmpvar_11 = ((0.4 * vPositionW.xz) + (globalTime * uvOffsetAmount));
  origUv_9 = tmpvar_11;
  refl_8 = vec3(0.0, 0.0, 0.0);
  spec_7 = 0.0;
  light_6 = 0.0;
  SSAA_5[0] = vec2(0.0, 0.0);
  dx_4 = dFdx(tmpvar_11);
  vec2 tmpvar_12;
  tmpvar_12 = dFdy(tmpvar_11);
  dy_3 = tmpvar_12;
  flatten = dot (abs(tmpvar_12), vec2(1.0, 1.0));
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = vPositionW;
  vec2 d_14;
  d_14 = (matrix_viewProjection * tmpvar_13).zw;
  float tmpvar_15;
  tmpvar_15 = (camera_far - camera_near);
  float tmpvar_16;
  tmpvar_16 = (camera_far + camera_near);
  float tmpvar_17;
  tmpvar_17 = (2.0 * camera_near);
  highp vec2 P_18;
  P_18 = (gl_FragCoord.xy * uScreenSize.zw);
  lowp float tmpvar_19;
  tmpvar_19 = clamp (pow ((
    abs(((tmpvar_17 / (tmpvar_16 - 
      ((((d_14.x / d_14.y) * 0.5) + 0.5) * tmpvar_15)
    )) - (tmpvar_17 / (tmpvar_16 - 
      (texture (uScreenDepth, P_18).x * tmpvar_15)
    ))))
   * 200.0), 0.5), 0.0, 1.0);
  nvec_2 = normalize((vPositionW.xz - view_position.xz));
  for (highp int i_1 = 0; i_1 < 1; i_1++) {
    lowp vec2 dudv_20;
    lowp vec3 normal2_21;
    lowp vec3 normal_22;
    vec2 tmpvar_23;
    tmpvar_23 = ((origUv_9 + (SSAA_5[i_1].x * dx_4)) + (SSAA_5[i_1].y * dy_3));
    normal_22 = (((texture (waterNormalTex, tmpvar_23).xzy * 2.0) - 1.0) + ((texture (waterNormalTex, 
      (tmpvar_23 * 0.5)
    ).xzy * 2.0) - 1.0));
    normal_22 = (normal_22 + ((texture (waterNormalTex, 
      (tmpvar_23 * 0.25)
    ).xzy * 2.0) - 1.0));
    normal2_21 = (((texture (waterNormalTex, tmpvar_23.yx).xzy * 2.0) - 1.0) + ((texture (waterNormalTex, 
      (tmpvar_23.yx * 0.5)
    ).xzy * 2.0) - 1.0));
    normal2_21 = (normal2_21 + ((texture (waterNormalTex, 
      (tmpvar_23.yx * 0.25)
    ).xzy * 2.0) - 1.0));
    normal_22 = (normalize(mix (normal_22, normal2_21, 
      abs(nvec_2.x)
    )) + ((
      ((texture (waterNormalTex2, (tmpvar_23 * 0.025)).xyz * 2.0) - 1.0)
     + 
      ((texture (waterNormalTex2, ((tmpvar_23 * 0.025) + 0.5)).xyz * 2.0) - 1.0)
    ) * 0.25));
    lowp vec3 tmpvar_24;
    tmpvar_24 = normalize(normal_22);
    normal_22 = tmpvar_24;
    lowp float tmpvar_25;
    tmpvar_25 = (1.0 - max (dot (tmpvar_24, 
      -(viewDir_10)
    ), 0.0));
    lowp float tmpvar_26;
    tmpvar_26 = (tmpvar_25 * tmpvar_25);
    spec_7 = (spec_7 + (0.04 + (
      (0.96 * tmpvar_25)
     * 
      (tmpvar_26 * tmpvar_26)
    )));
    dudv_20.x = (tmpvar_24.x * 0.25);
    dudv_20.y = (tmpvar_24.z * 2.0);
    dudv_20 = (dudv_20 / ((flatten * 3.0) + 1.0));
    highp vec2 P_27;
    highp vec2 tmpvar_28;
    tmpvar_28 = (gl_FragCoord.xy * uScreenSize.zw);
    P_27 = (tmpvar_28 + dudv_20);
    highp vec2 P_29;
    P_29 = (tmpvar_28 + dudv_20);
    refl_8 = (refl_8 + mix (texture (waterReflTex, P_27).xyz, texture (waterReflTexBlur, P_29).xyz, clamp (flatten, 0.0, 1.0)));
    light_6 = (light_6 + clamp ((
      dot (vec3(0.0, 0.1961161, 0.9805807), tmpvar_24)
     * 4.0), 0.0, 1.0));
  };
  lowp vec4 tmpvar_30;
  tmpvar_30.xyz = mix ((vec3(0.02422294, 0.03702851, 0.06381487) * light_6), refl_8, spec_7);
  tmpvar_30.w = tmpvar_19;
  pc_fragColor = tmpvar_30;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,^SH^941467317^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform lowp samplerCube texture_prefilteredCubeMap4;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  mat3 tmpvar_1;
  tmpvar_1[uint(0)] = normalize(vTangentW);
  tmpvar_1[1u] = normalize(vBinormalW);
  tmpvar_1[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_1 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 fixedReflDir_4;
  lowp vec3 vec_5;
  vec_5 = dNormalW;
  lowp float tmpvar_6;
  tmpvar_6 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_7;
  tmpvar_7 = abs(dNormalW.x);
  if ((tmpvar_7 != tmpvar_6)) {
    vec_5.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_8;
  tmpvar_8 = abs(dNormalW.y);
  if ((tmpvar_8 != tmpvar_6)) {
    vec_5.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_9;
  tmpvar_9 = abs(dNormalW.z);
  if ((tmpvar_9 != tmpvar_6)) {
    vec_5.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_4.yz = vec_5.yz;
  fixedReflDir_4.x = -(vec_5.x);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_prefilteredCubeMap4, fixedReflDir_4);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((8.0 * tmpvar_10.w) * tmpvar_10.xyz);
  dDiffuseLight = ((tmpvar_11 * tmpvar_11) * skyboxIntensity);
  lowp vec3 tmpvar_12;
  tmpvar_12 = (rgba_2.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_12;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_13;
  tmpvar_13 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_13, tmpvar_13))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^1193098614^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=3) in vec2 vertex_texCoord1;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  highp vec4 tmpvar_2;
  tmpvar_2.zw = vec2(0.5, 1.0);
  tmpvar_2.xy = ((vertex_texCoord1 * 2.0) - 1.0);
  gl_Position = tmpvar_2;
  vPositionW = (matrix_model * tmpvar_1).xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vNormalW;
lowp vec3 dDiffuseLight;
uniform float skyboxIntensity;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform vec3 material_ambient;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  vec3 fixedReflDir_2;
  vec3 vec_3;
  vec_3 = tmpvar_1;
  float tmpvar_4;
  tmpvar_4 = max (max (abs(tmpvar_1.x), abs(tmpvar_1.y)), abs(tmpvar_1.z));
  float tmpvar_5;
  tmpvar_5 = abs(tmpvar_1.x);
  if ((tmpvar_5 != tmpvar_4)) {
    vec_3.x = (tmpvar_1.x * 0.75);
  };
  float tmpvar_6;
  tmpvar_6 = abs(tmpvar_1.y);
  if ((tmpvar_6 != tmpvar_4)) {
    vec_3.y = (tmpvar_1.y * 0.75);
  };
  float tmpvar_7;
  tmpvar_7 = abs(tmpvar_1.z);
  if ((tmpvar_7 != tmpvar_4)) {
    vec_3.z = (tmpvar_1.z * 0.75);
  };
  fixedReflDir_2.yz = vec_3.yz;
  fixedReflDir_2.x = -(vec_3.x);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (texture_prefilteredCubeMap4, fixedReflDir_2);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((8.0 * tmpvar_8.w) * tmpvar_8.xyz);
  dDiffuseLight = ((tmpvar_9 * tmpvar_9) * skyboxIntensity);
  dDiffuseLight = (dDiffuseLight * material_ambient);
  pc_fragColor.xyz = dDiffuseLight;
  pc_fragColor.xyz = pow (pc_fragColor.xyz, vec3(0.5, 0.5, 0.5));
  pc_fragColor.xyz = (pc_fragColor.xyz / 8.0);
  pc_fragColor.w = clamp (max (max (pc_fragColor.x, pc_fragColor.y), max (pc_fragColor.z, 0.003921569)), 0.0, 1.0);
  pc_fragColor.w = (ceil((pc_fragColor.w * 255.0)) / 255.0);
  pc_fragColor.xyz = (pc_fragColor.xyz / pc_fragColor.w);
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord1,TEXCOORD1,^SH^1200898558^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dAlpha = texture (texture_opacityMap, vUv0).z;
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_6;
  float tmpvar_7;
  tmpvar_7 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  fresnel_6 = (tmpvar_7 * (tmpvar_8 * tmpvar_8));
  fresnel_6 = (fresnel_6 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_6));
  vec3 fixedReflDir_9;
  vec3 vec_10;
  vec_10 = tmpvar_2;
  float tmpvar_11;
  tmpvar_11 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.x);
  if ((tmpvar_12 != tmpvar_11)) {
    vec_10.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.y);
  if ((tmpvar_13 != tmpvar_11)) {
    vec_10.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.z);
  if ((tmpvar_14 != tmpvar_11)) {
    vec_10.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_9.yz = vec_10.yz;
  fixedReflDir_9.x = -(vec_10.x);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_prefilteredCubeMap4, fixedReflDir_9);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  dDiffuseLight = ((tmpvar_16 * tmpvar_16) * skyboxIntensity);
  lowp vec4 cube_0_18;
  lowp vec4 cube_1_19;
  lowp vec4 cubes_20[6];
  vec3 fixedReflDir_21;
  highp int index2_22;
  highp int index1_23;
  float tmpvar_24;
  tmpvar_24 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_23 = int(tmpvar_24);
  index2_22 = int(min ((tmpvar_24 + 1.0), 7.0));
  vec3 vec_25;
  vec_25 = tmpvar_3;
  float tmpvar_26;
  tmpvar_26 = (1.0 - (exp2(tmpvar_24) / 128.0));
  float tmpvar_27;
  tmpvar_27 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_28;
  tmpvar_28 = abs(tmpvar_3.x);
  if ((tmpvar_28 != tmpvar_27)) {
    vec_25.x = (tmpvar_3.x * tmpvar_26);
  };
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.y);
  if ((tmpvar_29 != tmpvar_27)) {
    vec_25.y = (tmpvar_3.y * tmpvar_26);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.z);
  if ((tmpvar_30 != tmpvar_27)) {
    vec_25.z = (tmpvar_3.z * tmpvar_26);
  };
  fixedReflDir_21.yz = vec_25.yz;
  fixedReflDir_21.x = -(vec_25.x);
  cubes_20[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_21);
  cubes_20[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_21);
  cubes_20[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_21);
  cubes_20[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_21);
  cubes_20[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_21);
  cubes_20[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_21);
  for (highp int i_17 = 0; i_17 < 6; i_17++) {
    if ((i_17 == index1_23)) {
      cube_0_18 = cubes_20[i_17];
    };
    if ((i_17 == index2_22)) {
      cube_1_19 = cubes_20[i_17];
    };
  };
  lowp vec4 tmpvar_31;
  tmpvar_31 = mix (cube_0_18, cube_1_19, fract(tmpvar_24));
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((8.0 * tmpvar_31.w) * tmpvar_31.xyz);
  lowp vec4 tmpvar_33;
  tmpvar_33.xyz = ((tmpvar_32 * tmpvar_32) * skyboxIntensity);
  tmpvar_33.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_34;
  tmpvar_34 = normalize(dLightDirW);
  float falloff_35;
  float tmpvar_36;
  tmpvar_36 = dot (dLightDirW, dLightDirW);
  float tmpvar_37;
  tmpvar_37 = (1.0/(light0_radius));
  falloff_35 = ((1.0/((tmpvar_36 + 1.0))) * 16.0);
  float x_38;
  x_38 = (tmpvar_36 * (tmpvar_37 * tmpvar_37));
  float tmpvar_39;
  tmpvar_39 = clamp ((1.0 - (x_38 * x_38)), 0.0, 1.0);
  falloff_35 = (falloff_35 * (tmpvar_39 * tmpvar_39));
  dAtten = falloff_35;
  if ((falloff_35 > 1e-05)) {
    float tmpvar_40;
    tmpvar_40 = clamp (((
      dot (tmpvar_34, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_35 * (tmpvar_40 * (tmpvar_40 * 
      (3.0 - (2.0 * tmpvar_40))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_34)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_41;
    tmpvar_41 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_34) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_41)
     * 
      (tmpvar_41 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_42;
  tmpvar_42 = normalize(dLightDirW);
  lowp float tmpvar_43;
  tmpvar_43 = max (((light1_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light1_radius), 0.0);
  dAtten = tmpvar_43;
  if ((tmpvar_43 > 1e-05)) {
    float tmpvar_44;
    tmpvar_44 = clamp (((
      dot (tmpvar_42, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_43 * (tmpvar_44 * (tmpvar_44 * 
      (3.0 - (2.0 * tmpvar_44))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_42)
    ), 0.0));
    vec4 projPos_45;
    vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vPositionW;
    vec4 tmpvar_47;
    tmpvar_47 = (light1_shadowMatrix * tmpvar_46);
    projPos_45.zw = tmpvar_47.zw;
    projPos_45.xy = (tmpvar_47.xy / tmpvar_47.w);
    float Z_48;
    Z_48 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_49;
    tmpvar_49 = texture (light1_shadowMap, projPos_45.xy);
    lowp vec3 tmpvar_50;
    tmpvar_50.z = 0.0;
    tmpvar_50.x = ((tmpvar_49.y * 0.003921569) + tmpvar_49.x);
    tmpvar_50.y = ((tmpvar_49.w * 0.003921569) + tmpvar_49.z);
    float tmpvar_51;
    tmpvar_51 = (light1_shadowParams.y * Z_48);
    lowp float tmpvar_52;
    tmpvar_52 = max ((tmpvar_50.y - (tmpvar_50.x * tmpvar_50.x)), (tmpvar_51 * tmpvar_51));
    lowp float tmpvar_53;
    tmpvar_53 = (Z_48 - tmpvar_50.x);
    lowp float tmpvar_54;
    tmpvar_54 = clamp (((
      (tmpvar_52 / (tmpvar_52 + (tmpvar_53 * tmpvar_53)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_55;
    if ((Z_48 <= tmpvar_50.x)) {
      tmpvar_55 = 1.0;
    } else {
      tmpvar_55 = tmpvar_54;
    };
    dAtten = (dAtten * tmpvar_55);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_56;
    tmpvar_56 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_42) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_56)
     * 
      (tmpvar_56 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_57;
  tmpvar_57 = mix ((rgba_4.xyz * dDiffuseLight), (dSpecularLight + (tmpvar_33.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_57;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_58;
  tmpvar_58 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_58, tmpvar_58))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1212545291^VS^#version 300 es
out vec3 vPositionW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec2 vUv0;
uniform vec3 view_position;
uniform vec3 light_globalAmbient;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform vec3 material_diffuse;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform float alpha_ref;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.y;
  if ((tmpvar_1.y < alpha_ref)) {
    discard;
  };
  pc_fragColor.xyz = (material_diffuse * light_globalAmbient);
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_2;
  tmpvar_2 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_2, tmpvar_2))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,^SH^1275729395^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vec3 tmpvar_40;
  tmpvar_40 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_40;
  vec3 tmpvar_41;
  tmpvar_41 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_41;
  vBinormalW = (((tmpvar_40.yzx * tmpvar_41.zxy) - (tmpvar_40.zxy * tmpvar_41.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform float isLeaves;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  dSpecularity = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_3, material_bumpiness)));
  lowp vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = rgba_5.xyz;
  if ((isLeaves > 0.5)) {
    dAlbedo = (rgba_5.xyz * vec3((vVertexColor.w * 2.0)));
  } else {
    dAlbedo = (dAlbedo * vec3(clamp ((
      (vVertexColor.w * vVertexColor.w)
     * 
      (vVertexColor.w * 5.0)
    ), 0.0, 1.0)));
  };
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  lowp vec3 fixedReflDir_10;
  lowp vec3 vec_11;
  vec_11 = dNormalW;
  lowp float tmpvar_12;
  tmpvar_12 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_13;
  tmpvar_13 = abs(dNormalW.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  float tmpvar_18;
  tmpvar_18 = clamp (vVertexColor.w, 0.0, 1.0);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * tmpvar_18);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_4;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_4.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_4.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_4.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_4.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dReflection = tmpvar_35;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_36)
    ), 0.0));
    vec4 projPos_43;
    vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vPositionW;
    vec4 tmpvar_45;
    tmpvar_45 = (light0_shadowMatrix * tmpvar_44);
    projPos_43.zw = tmpvar_45.zw;
    projPos_43.xy = (tmpvar_45.xy / tmpvar_45.w);
    float Z_46;
    Z_46 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_47;
    tmpvar_47 = texture (light0_shadowMap, projPos_43.xy);
    lowp vec3 tmpvar_48;
    tmpvar_48.z = 0.0;
    tmpvar_48.x = ((tmpvar_47.y * 0.003921569) + tmpvar_47.x);
    tmpvar_48.y = ((tmpvar_47.w * 0.003921569) + tmpvar_47.z);
    float tmpvar_49;
    tmpvar_49 = (light0_shadowParams.y * Z_46);
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x)), (tmpvar_49 * tmpvar_49));
    lowp float tmpvar_51;
    tmpvar_51 = (Z_46 - tmpvar_48.x);
    lowp float tmpvar_52;
    tmpvar_52 = clamp (((
      (tmpvar_50 / (tmpvar_50 + (tmpvar_51 * tmpvar_51)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_53;
    if ((Z_46 <= tmpvar_48.x)) {
      tmpvar_53 = 1.0;
    } else {
      tmpvar_53 = tmpvar_52;
    };
    dAtten = (dAtten * tmpvar_53);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_54;
    tmpvar_54 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_55;
    tmpvar_55 = max ((tmpvar_54 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_54 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_55)
     * 
      (tmpvar_55 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_56;
  tmpvar_56 = normalize(dLightDirW);
  float falloff_57;
  float tmpvar_58;
  tmpvar_58 = dot (dLightDirW, dLightDirW);
  float tmpvar_59;
  tmpvar_59 = (1.0/(light1_radius));
  falloff_57 = ((1.0/((tmpvar_58 + 1.0))) * 16.0);
  float x_60;
  x_60 = (tmpvar_58 * (tmpvar_59 * tmpvar_59));
  float tmpvar_61;
  tmpvar_61 = clamp ((1.0 - (x_60 * x_60)), 0.0, 1.0);
  falloff_57 = (falloff_57 * (tmpvar_61 * tmpvar_61));
  dAtten = falloff_57;
  if ((falloff_57 > 1e-05)) {
    float tmpvar_62;
    tmpvar_62 = clamp (((
      dot (tmpvar_56, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_57 * (tmpvar_62 * (tmpvar_62 * 
      (3.0 - (2.0 * tmpvar_62))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_56)
    ), 0.0));
    vec4 projPos_63;
    vec4 tmpvar_64;
    tmpvar_64.w = 1.0;
    tmpvar_64.xyz = vPositionW;
    vec4 tmpvar_65;
    tmpvar_65 = (light1_shadowMatrix * tmpvar_64);
    projPos_63.zw = tmpvar_65.zw;
    projPos_63.xy = (tmpvar_65.xy / tmpvar_65.w);
    float Z_66;
    Z_66 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_67;
    tmpvar_67 = texture (light1_shadowMap, projPos_63.xy);
    lowp vec3 tmpvar_68;
    tmpvar_68.z = 0.0;
    tmpvar_68.x = ((tmpvar_67.y * 0.003921569) + tmpvar_67.x);
    tmpvar_68.y = ((tmpvar_67.w * 0.003921569) + tmpvar_67.z);
    float tmpvar_69;
    tmpvar_69 = (light1_shadowParams.y * Z_66);
    lowp float tmpvar_70;
    tmpvar_70 = max ((tmpvar_68.y - (tmpvar_68.x * tmpvar_68.x)), (tmpvar_69 * tmpvar_69));
    lowp float tmpvar_71;
    tmpvar_71 = (Z_66 - tmpvar_68.x);
    lowp float tmpvar_72;
    tmpvar_72 = clamp (((
      (tmpvar_70 / (tmpvar_70 + (tmpvar_71 * tmpvar_71)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_73;
    if ((Z_66 <= tmpvar_68.x)) {
      tmpvar_73 = 1.0;
    } else {
      tmpvar_73 = tmpvar_72;
    };
    dAtten = (dAtten * tmpvar_73);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_74;
    tmpvar_74 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_75;
    tmpvar_75 = max ((tmpvar_74 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_74 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_56) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_75)
     * 
      (tmpvar_75 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dSpecularLight = (dSpecularLight * tmpvar_18);
  dReflection = (tmpvar_35 * tmpvar_18);
  lowp vec3 tmpvar_76;
  tmpvar_76 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_76;
  pc_fragColor.xyz = (pc_fragColor.xyz + (pow (
    clamp (vVertexColor.xyz, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))
  , vec3(2.2, 2.2, 2.2)) * material_emissive));
  vec3 tmpvar_77;
  tmpvar_77 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_77, tmpvar_77))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^1304158187^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform float isLeaves;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform float alpha_ref;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dSpecularity = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_2;
  tmpvar_2 = normalize((view_position - vPositionW));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(vNormalW);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (tmpvar_3, tmpvar_2) * tmpvar_3)
  ) - tmpvar_2));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = rgba_5.xyz;
  if ((isLeaves > 0.5)) {
    dAlbedo = (rgba_5.xyz * vec3((vVertexColor.w * 2.0)));
  } else {
    dAlbedo = (dAlbedo * vec3(clamp ((
      (vVertexColor.w * vVertexColor.w)
     * 
      (vVertexColor.w * 5.0)
    ), 0.0, 1.0)));
  };
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * clamp (vVertexColor.x, 0.0, 1.0)) + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_3, tmpvar_2), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_3;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_3.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_3.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_3.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_3.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_3.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_3.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * skyboxIntensity);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_4;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_4.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_4.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_4.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_4.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = ((tmpvar_33 * tmpvar_33) * skyboxIntensity);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_35)
    ), 0.0));
    vec4 projPos_42;
    vec4 tmpvar_43;
    tmpvar_43.w = 1.0;
    tmpvar_43.xyz = vPositionW;
    vec4 tmpvar_44;
    tmpvar_44 = (light0_shadowMatrix * tmpvar_43);
    projPos_42.zw = tmpvar_44.zw;
    projPos_42.xy = (tmpvar_44.xy / tmpvar_44.w);
    float Z_45;
    Z_45 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture (light0_shadowMap, projPos_42.xy);
    lowp vec3 tmpvar_47;
    tmpvar_47.z = 0.0;
    tmpvar_47.x = ((tmpvar_46.y * 0.003921569) + tmpvar_46.x);
    tmpvar_47.y = ((tmpvar_46.w * 0.003921569) + tmpvar_46.z);
    float tmpvar_48;
    tmpvar_48 = (light0_shadowParams.y * Z_45);
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x)), (tmpvar_48 * tmpvar_48));
    lowp float tmpvar_50;
    tmpvar_50 = (Z_45 - tmpvar_47.x);
    lowp float tmpvar_51;
    tmpvar_51 = clamp (((
      (tmpvar_49 / (tmpvar_49 + (tmpvar_50 * tmpvar_50)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_52;
    if ((Z_45 <= tmpvar_47.x)) {
      tmpvar_52 = 1.0;
    } else {
      tmpvar_52 = tmpvar_51;
    };
    dAtten = (dAtten * tmpvar_52);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_53;
    tmpvar_53 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_53)
     * 
      (tmpvar_53 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  lowp vec3 tmpvar_54;
  tmpvar_54 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_54;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_55;
  tmpvar_55 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_55, tmpvar_55))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^1330990936^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), rgba_4.xyz, material_metalness);
  dAlbedo = (rgba_4.xyz * (1.0 - material_metalness));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_2.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (texture_aoMap, vUv0);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * tmpvar_18.x);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  vec3 fixedReflDir_23;
  highp int index2_24;
  highp int index1_25;
  float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  vec3 vec_27;
  vec_27 = tmpvar_3;
  float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dReflection = tmpvar_35;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_36)
    ), 0.0));
    vec4 projPos_43;
    vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vPositionW;
    vec4 tmpvar_45;
    tmpvar_45 = (light0_shadowMatrix * tmpvar_44);
    projPos_43.zw = tmpvar_45.zw;
    projPos_43.xy = (tmpvar_45.xy / tmpvar_45.w);
    float Z_46;
    Z_46 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_47;
    tmpvar_47 = texture (light0_shadowMap, projPos_43.xy);
    lowp vec3 tmpvar_48;
    tmpvar_48.z = 0.0;
    tmpvar_48.x = ((tmpvar_47.y * 0.003921569) + tmpvar_47.x);
    tmpvar_48.y = ((tmpvar_47.w * 0.003921569) + tmpvar_47.z);
    float tmpvar_49;
    tmpvar_49 = (light0_shadowParams.y * Z_46);
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x)), (tmpvar_49 * tmpvar_49));
    lowp float tmpvar_51;
    tmpvar_51 = (Z_46 - tmpvar_48.x);
    lowp float tmpvar_52;
    tmpvar_52 = clamp (((
      (tmpvar_50 / (tmpvar_50 + (tmpvar_51 * tmpvar_51)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_53;
    if ((Z_46 <= tmpvar_48.x)) {
      tmpvar_53 = 1.0;
    } else {
      tmpvar_53 = tmpvar_52;
    };
    dAtten = (dAtten * tmpvar_53);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_54;
    tmpvar_54 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_54)
     * 
      (tmpvar_54 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dSpecularLight = (dSpecularLight * tmpvar_18.x);
  dReflection = (tmpvar_35 * tmpvar_18.x);
  lowp vec3 tmpvar_55;
  tmpvar_55 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_55;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_56;
  tmpvar_56 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_56, tmpvar_56))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1342601787^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv1;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv1 = vertex_texCoord1;
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv1;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularity;
lowp float dGlossiness;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform sampler2D texture_lightMap;
uniform sampler2D topMap;
uniform vec3 leavesPos;
void main ()
{
  vec2 offsets_1[8];
  lowp vec3 shadow_2;
  float height_3;
  vec2 topUv_4;
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_5;
  tmpvar_5 = normalize((view_position - vPositionW));
  mat3 tmpvar_6;
  tmpvar_6[uint(0)] = normalize(vTangentW);
  tmpvar_6[1u] = normalize(vBinormalW);
  tmpvar_6[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_6 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUV0_1).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_5) * dNormalW)
  ) - tmpvar_5));
  lowp vec4 rgba_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (texture_diffuseMap, vUV0_1);
  rgba_8.w = tmpvar_9.w;
  rgba_8.xyz = pow (tmpvar_9.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_10;
  tmpvar_10 = mix (vec3(0.04, 0.04, 0.04), rgba_8.xyz, material_metalness);
  dAlbedo = (rgba_8.xyz * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_11;
  lowp float tmpvar_12;
  tmpvar_12 = (1.0 - max (dot (dNormalW, tmpvar_5), 0.0));
  lowp float tmpvar_13;
  tmpvar_13 = (tmpvar_12 * tmpvar_12);
  fresnel_11 = (tmpvar_12 * (tmpvar_13 * tmpvar_13));
  fresnel_11 = (fresnel_11 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_10 + ((1.0 - tmpvar_10) * fresnel_11));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (texture_aoMap, vUv1);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  dDiffuseLight = (tmpvar_16 * tmpvar_16);
  lowp vec4 cube_0_18;
  lowp vec4 cube_1_19;
  lowp vec4 cubes_20[6];
  lowp vec3 fixedReflDir_21;
  lowp int index2_22;
  lowp int index1_23;
  lowp float tmpvar_24;
  tmpvar_24 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_23 = int(tmpvar_24);
  index2_22 = int(min ((tmpvar_24 + 1.0), 7.0));
  lowp vec3 vec_25;
  vec_25 = tmpvar_7;
  lowp float tmpvar_26;
  tmpvar_26 = (1.0 - (exp2(tmpvar_24) / 128.0));
  lowp float tmpvar_27;
  tmpvar_27 = max (max (abs(tmpvar_7.x), abs(tmpvar_7.y)), abs(tmpvar_7.z));
  lowp float tmpvar_28;
  tmpvar_28 = abs(tmpvar_7.x);
  if ((tmpvar_28 != tmpvar_27)) {
    vec_25.x = (tmpvar_7.x * tmpvar_26);
  };
  lowp float tmpvar_29;
  tmpvar_29 = abs(tmpvar_7.y);
  if ((tmpvar_29 != tmpvar_27)) {
    vec_25.y = (tmpvar_7.y * tmpvar_26);
  };
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_7.z);
  if ((tmpvar_30 != tmpvar_27)) {
    vec_25.z = (tmpvar_7.z * tmpvar_26);
  };
  fixedReflDir_21.yz = vec_25.yz;
  fixedReflDir_21.x = -(vec_25.x);
  cubes_20[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_21);
  cubes_20[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_21);
  cubes_20[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_21);
  cubes_20[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_21);
  cubes_20[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_21);
  cubes_20[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_21);
  for (highp int i_17 = 0; i_17 < 6; i_17++) {
    if ((i_17 == index1_23)) {
      cube_0_18 = cubes_20[i_17];
    };
    if ((i_17 == index2_22)) {
      cube_1_19 = cubes_20[i_17];
    };
  };
  lowp vec4 tmpvar_31;
  tmpvar_31 = mix (cube_0_18, cube_1_19, fract(tmpvar_24));
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((8.0 * tmpvar_31.w) * tmpvar_31.xyz);
  lowp vec4 tmpvar_33;
  tmpvar_33.xyz = (tmpvar_32 * tmpvar_32);
  tmpvar_33.w = material_reflectivity;
  dReflection = (tmpvar_33 * tmpvar_14.z);
  vec3 tmpvar_34;
  tmpvar_34 = (vPositionW - leavesPos);
  vec2 tmpvar_35;
  tmpvar_35 = (((tmpvar_34.xz / vec2(16.0, -16.0)) * 0.5) + 0.5);
  topUv_4 = tmpvar_35;
  height_3 = 0.0;
  if ((((
    (tmpvar_34.x > -1.1)
   && 
    (tmpvar_34.x < 1.1)
  ) && (tmpvar_34.z > -1.1)) && (tmpvar_34.z < 1.1))) {
    height_3 = 1.0;
  };
  height_3 = ((height_3 / 4.0) + 0.01);
  shadow_2 = vec3(0.0, 0.0, 0.0);
  offsets_1[0] = vec2(-0.003196313, -0.00186043);
  offsets_1[1] = vec2(-0.002162161, -0.006022575);
  offsets_1[2] = vec2(-0.00398718, 0.002402105);
  offsets_1[3] = vec2(0.003552565, 0.00177002);
  offsets_1[4] = vec2(-0.0001136277, 0.005086533);
  offsets_1[5] = vec2(0.002264441, -0.003647392);
  offsets_1[6] = vec2(0.006564216, -0.002330364);
  offsets_1[7] = vec2(0.005495788, 0.005262966);
  if ((vNormalW.y > 0.0)) {
    for (highp int i_36 = 0; i_36 < 8; i_36++) {
      lowp vec4 tmpvar_37;
      tmpvar_37 = texture (topMap, (topUv_4 + offsets_1[i_36]));
      lowp float tmpvar_38;
      tmpvar_38 = tmpvar_37.w;
      lowp vec3 tmpvar_39;
      if ((height_3 < tmpvar_37.w)) {
        lowp vec3 tmpvar_40;
        tmpvar_40.xz = vec2(0.125, 1.0);
        tmpvar_40.y = tmpvar_38;
        tmpvar_39 = tmpvar_40;
      } else {
        tmpvar_39 = vec3(0.0, 0.0, 0.0);
      };
      shadow_2 = (shadow_2 + tmpvar_39);
    };
    shadow_2.x = (1.0 - (shadow_2.x * 0.3));
    shadow_2.y = (shadow_2.y / shadow_2.z);
    dDiffuseLight = (dDiffuseLight * mix (shadow_2.x, 1.0, clamp (shadow_2.y, 0.0, 1.0)));
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture (topMap, tmpvar_35);
    dDiffuseLight = (dDiffuseLight * mix (1.0, (1.0 - 
      clamp (((tmpvar_41.x - tmpvar_41.y) * 4.0), 0.0, 1.0)
    ), clamp (vNormalW.y, 0.0, 1.0)));
  };
  lowp vec3 tmpvar_42;
  tmpvar_42 = mix ((dAlbedo * dDiffuseLight), (dReflection.xyz * dReflection.w), dSpecularity);
  pc_fragColor.xyz = tmpvar_42;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_43;
  tmpvar_43 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_43, tmpvar_43))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^1392892802^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform float material_opacity;
uniform vec3 material_emissive;
uniform sampler2D texture_lightMap;
uniform float alpha_ref;
void main ()
{
  dAlpha = (texture (texture_opacityMap, vUv0).w * material_opacity);
  if ((dAlpha < alpha_ref)) {
    discard;
  };
  lowp vec4 rgba_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (texture_diffuseMap, vUv0);
  rgba_1.w = tmpvar_2.w;
  rgba_1.xyz = pow (tmpvar_2.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_4;
  tmpvar_4 = ((8.0 * tmpvar_3.w) * tmpvar_3.xyz);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (rgba_1.xyz * (tmpvar_4 * tmpvar_4));
  pc_fragColor.xyz = tmpvar_5;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_6;
  tmpvar_6 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_6, tmpvar_6))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^1452171368^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), rgba_4.xyz, material_metalness);
  dAlbedo = (rgba_4.xyz * (1.0 - material_metalness));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_2.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (texture_aoMap, vUv0);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * tmpvar_18.x);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  vec3 fixedReflDir_23;
  highp int index2_24;
  highp int index1_25;
  float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  vec3 vec_27;
  vec_27 = tmpvar_3;
  float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dReflection = tmpvar_35;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_36)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_43;
    tmpvar_43 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_43)
     * 
      (tmpvar_43 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_44;
  tmpvar_44 = normalize(dLightDirW);
  float falloff_45;
  float tmpvar_46;
  tmpvar_46 = dot (dLightDirW, dLightDirW);
  float tmpvar_47;
  tmpvar_47 = (1.0/(light1_radius));
  falloff_45 = ((1.0/((tmpvar_46 + 1.0))) * 16.0);
  float x_48;
  x_48 = (tmpvar_46 * (tmpvar_47 * tmpvar_47));
  float tmpvar_49;
  tmpvar_49 = clamp ((1.0 - (x_48 * x_48)), 0.0, 1.0);
  falloff_45 = (falloff_45 * (tmpvar_49 * tmpvar_49));
  dAtten = falloff_45;
  if ((falloff_45 > 1e-05)) {
    float tmpvar_50;
    tmpvar_50 = clamp (((
      dot (tmpvar_44, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_45 * (tmpvar_50 * (tmpvar_50 * 
      (3.0 - (2.0 * tmpvar_50))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_44)
    ), 0.0));
    vec4 projPos_51;
    vec4 tmpvar_52;
    tmpvar_52.w = 1.0;
    tmpvar_52.xyz = vPositionW;
    vec4 tmpvar_53;
    tmpvar_53 = (light1_shadowMatrix * tmpvar_52);
    projPos_51.zw = tmpvar_53.zw;
    projPos_51.xy = (tmpvar_53.xy / tmpvar_53.w);
    float Z_54;
    Z_54 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_55;
    tmpvar_55 = texture (light1_shadowMap, projPos_51.xy);
    lowp vec3 tmpvar_56;
    tmpvar_56.z = 0.0;
    tmpvar_56.x = ((tmpvar_55.y * 0.003921569) + tmpvar_55.x);
    tmpvar_56.y = ((tmpvar_55.w * 0.003921569) + tmpvar_55.z);
    float tmpvar_57;
    tmpvar_57 = (light1_shadowParams.y * Z_54);
    lowp float tmpvar_58;
    tmpvar_58 = max ((tmpvar_56.y - (tmpvar_56.x * tmpvar_56.x)), (tmpvar_57 * tmpvar_57));
    lowp float tmpvar_59;
    tmpvar_59 = (Z_54 - tmpvar_56.x);
    lowp float tmpvar_60;
    tmpvar_60 = clamp (((
      (tmpvar_58 / (tmpvar_58 + (tmpvar_59 * tmpvar_59)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_61;
    if ((Z_54 <= tmpvar_56.x)) {
      tmpvar_61 = 1.0;
    } else {
      tmpvar_61 = tmpvar_60;
    };
    dAtten = (dAtten * tmpvar_61);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_62;
    tmpvar_62 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_44) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_62)
     * 
      (tmpvar_62 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dSpecularLight = (dSpecularLight * tmpvar_18.x);
  dReflection = (tmpvar_35 * tmpvar_18.x);
  lowp vec3 tmpvar_63;
  tmpvar_63 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_63;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_64;
  tmpvar_64 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_64, tmpvar_64))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1497069859^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float alpha_ref;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  lowp vec4 rgba_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (texture_diffuseMap, vUv0);
  rgba_3.w = tmpvar_4.w;
  rgba_3.xyz = pow (tmpvar_4.xyz, vec3(2.2, 2.2, 2.2));
  vec3 fixedReflDir_5;
  vec3 vec_6;
  vec_6 = tmpvar_2;
  float tmpvar_7;
  tmpvar_7 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_8;
  tmpvar_8 = abs(tmpvar_2.x);
  if ((tmpvar_8 != tmpvar_7)) {
    vec_6.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_9;
  tmpvar_9 = abs(tmpvar_2.y);
  if ((tmpvar_9 != tmpvar_7)) {
    vec_6.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_10;
  tmpvar_10 = abs(tmpvar_2.z);
  if ((tmpvar_10 != tmpvar_7)) {
    vec_6.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_5.yz = vec_6.yz;
  fixedReflDir_5.x = -(vec_6.x);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (texture_prefilteredCubeMap4, fixedReflDir_5);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((8.0 * tmpvar_11.w) * tmpvar_11.xyz);
  dDiffuseLight = ((tmpvar_12 * tmpvar_12) * skyboxIntensity);
  lowp vec3 tmpvar_13;
  tmpvar_13 = (rgba_3.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_13;
  lowp vec3 tmpvar_14;
  lowp vec4 rgba_15;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_emissiveMap, vUv0);
  rgba_15.w = tmpvar_16.w;
  rgba_15.xyz = pow (tmpvar_16.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_14 = (rgba_15.xyz * material_emissiveIntensity);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_14);
  vec3 tmpvar_17;
  tmpvar_17 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_17, tmpvar_17))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1508153913^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dSpecularity;
lowp float dGlossiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUV0_1);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), rgba_4.xyz, material_metalness);
  dAlbedo = (rgba_4.xyz * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_2.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_3;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  lowp vec3 tmpvar_36;
  tmpvar_36 = mix ((dAlbedo * tmpvar_17), (tmpvar_35.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_36;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_37;
  tmpvar_37 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_37, tmpvar_37))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1579920794^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
vec3 dSpecularity;
float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_emissiveMap;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_6;
  float tmpvar_7;
  tmpvar_7 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  fresnel_6 = (tmpvar_7 * (tmpvar_8 * tmpvar_8));
  fresnel_6 = (fresnel_6 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_6));
  vec3 fixedReflDir_9;
  vec3 vec_10;
  vec_10 = tmpvar_2;
  float tmpvar_11;
  tmpvar_11 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.x);
  if ((tmpvar_12 != tmpvar_11)) {
    vec_10.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.y);
  if ((tmpvar_13 != tmpvar_11)) {
    vec_10.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.z);
  if ((tmpvar_14 != tmpvar_11)) {
    vec_10.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_9.yz = vec_10.yz;
  fixedReflDir_9.x = -(vec_10.x);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_prefilteredCubeMap4, fixedReflDir_9);
  lowp vec3 tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  tmpvar_16 = (tmpvar_17 * tmpvar_17);
  dDiffuseLight = tmpvar_16;
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_3;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_3.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_3.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_3.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = (tmpvar_33 * tmpvar_33);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_35)
    ), 0.0));
    vec4 projPos_42;
    vec4 tmpvar_43;
    tmpvar_43.w = 1.0;
    tmpvar_43.xyz = vPositionW;
    vec4 tmpvar_44;
    tmpvar_44 = (light0_shadowMatrix * tmpvar_43);
    projPos_42.zw = tmpvar_44.zw;
    projPos_42.xy = (tmpvar_44.xy / tmpvar_44.w);
    float Z_45;
    Z_45 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture (light0_shadowMap, projPos_42.xy);
    lowp vec3 tmpvar_47;
    tmpvar_47.z = 0.0;
    tmpvar_47.x = ((tmpvar_46.y * 0.003921569) + tmpvar_46.x);
    tmpvar_47.y = ((tmpvar_46.w * 0.003921569) + tmpvar_46.z);
    float tmpvar_48;
    tmpvar_48 = (light0_shadowParams.y * Z_45);
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x)), (tmpvar_48 * tmpvar_48));
    lowp float tmpvar_50;
    tmpvar_50 = (Z_45 - tmpvar_47.x);
    lowp float tmpvar_51;
    tmpvar_51 = clamp (((
      (tmpvar_49 / (tmpvar_49 + (tmpvar_50 * tmpvar_50)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_52;
    if ((Z_45 <= tmpvar_47.x)) {
      tmpvar_52 = 1.0;
    } else {
      tmpvar_52 = tmpvar_51;
    };
    dAtten = (dAtten * tmpvar_52);
    dDiffuseLight = (tmpvar_16 + (dAtten * light0_color));
    float tmpvar_53;
    tmpvar_53 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_53)
     * 
      (tmpvar_53 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  lowp vec3 tmpvar_54;
  tmpvar_54 = mix ((rgba_4.xyz * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_54;
  lowp vec3 tmpvar_55;
  lowp vec4 rgba_56;
  lowp vec4 tmpvar_57;
  tmpvar_57 = texture (texture_emissiveMap, vUv0);
  rgba_56.w = tmpvar_57.w;
  rgba_56.xyz = pow (tmpvar_57.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_55 = (rgba_56.yyy * material_emissive);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_55);
  vec3 tmpvar_58;
  tmpvar_58 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_58, tmpvar_58))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1603444974^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularity;
float dGlossiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), rgba_4.xyz, material_metalness);
  dAlbedo = (rgba_4.xyz * (1.0 - material_metalness));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_2.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (texture_aoMap, vUv0);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * tmpvar_18.x);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  vec3 fixedReflDir_23;
  highp int index2_24;
  highp int index1_25;
  float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  vec3 vec_27;
  vec_27 = tmpvar_3;
  float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dReflection = (tmpvar_35 * tmpvar_18.x);
  lowp vec3 tmpvar_36;
  tmpvar_36 = mix ((dAlbedo * dDiffuseLight), (dReflection.xyz * dReflection.w), dSpecularity);
  pc_fragColor.xyz = tmpvar_36;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_37;
  tmpvar_37 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_37, tmpvar_37))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1635638879^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform vec3 light2_color;
uniform vec3 light2_position;
uniform float light2_radius;
uniform vec3 light2_direction;
uniform float light2_innerConeAngle;
uniform float light2_outerConeAngle;
uniform mat4 light2_shadowMatrix;
uniform vec4 light2_shadowParams;
uniform sampler2D light2_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_3, material_bumpiness)));
  lowp vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (texture_specularMap, vUv0);
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_8;
  lowp float tmpvar_9;
  tmpvar_9 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  fresnel_8 = (tmpvar_9 * (tmpvar_10 * tmpvar_10));
  fresnel_8 = (fresnel_8 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_7.xxx + ((1.0 - tmpvar_7.xxx) * fresnel_8));
  lowp vec3 fixedReflDir_11;
  lowp vec3 vec_12;
  vec_12 = dNormalW;
  lowp float tmpvar_13;
  tmpvar_13 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.x);
  if ((tmpvar_14 != tmpvar_13)) {
    vec_12.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.y);
  if ((tmpvar_15 != tmpvar_13)) {
    vec_12.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_16;
  tmpvar_16 = abs(dNormalW.z);
  if ((tmpvar_16 != tmpvar_13)) {
    vec_12.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_11.yz = vec_12.yz;
  fixedReflDir_11.x = -(vec_12.x);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (texture_prefilteredCubeMap4, fixedReflDir_11);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_17.w) * tmpvar_17.xyz);
  dDiffuseLight = ((tmpvar_18 * tmpvar_18) * skyboxIntensity);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_4;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_4.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_4.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_4.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_4.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = ((tmpvar_34 * tmpvar_34) * skyboxIntensity);
  tmpvar_35.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  lowp float tmpvar_37;
  tmpvar_37 = max (((light0_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light0_radius), 0.0);
  dAtten = tmpvar_37;
  if ((tmpvar_37 > 1e-05)) {
    float tmpvar_38;
    tmpvar_38 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_37 * (tmpvar_38 * (tmpvar_38 * 
      (3.0 - (2.0 * tmpvar_38))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_36)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_39;
    tmpvar_39 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_40;
    tmpvar_40 = max ((tmpvar_39 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_39 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_40)
     * 
      (tmpvar_40 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_41;
  tmpvar_41 = normalize(dLightDirW);
  float falloff_42;
  float tmpvar_43;
  tmpvar_43 = dot (dLightDirW, dLightDirW);
  float tmpvar_44;
  tmpvar_44 = (1.0/(light1_radius));
  falloff_42 = ((1.0/((tmpvar_43 + 1.0))) * 16.0);
  float x_45;
  x_45 = (tmpvar_43 * (tmpvar_44 * tmpvar_44));
  float tmpvar_46;
  tmpvar_46 = clamp ((1.0 - (x_45 * x_45)), 0.0, 1.0);
  falloff_42 = (falloff_42 * (tmpvar_46 * tmpvar_46));
  dAtten = falloff_42;
  if ((falloff_42 > 1e-05)) {
    float tmpvar_47;
    tmpvar_47 = clamp (((
      dot (tmpvar_41, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_42 * (tmpvar_47 * (tmpvar_47 * 
      (3.0 - (2.0 * tmpvar_47))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_41)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_48;
    tmpvar_48 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_48 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_48 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_41) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_49)
     * 
      (tmpvar_49 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dLightDirW = (vPositionW - light2_position);
  vec3 tmpvar_50;
  tmpvar_50 = normalize(dLightDirW);
  lowp float tmpvar_51;
  tmpvar_51 = max (((light2_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light2_radius), 0.0);
  dAtten = tmpvar_51;
  if ((tmpvar_51 > 1e-05)) {
    float tmpvar_52;
    tmpvar_52 = clamp (((
      dot (tmpvar_50, light2_direction)
     - light2_outerConeAngle) / (light2_innerConeAngle - light2_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_51 * (tmpvar_52 * (tmpvar_52 * 
      (3.0 - (2.0 * tmpvar_52))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_50)
    ), 0.0));
    vec4 projPos_53;
    vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vPositionW;
    vec4 tmpvar_55;
    tmpvar_55 = (light2_shadowMatrix * tmpvar_54);
    projPos_53.zw = tmpvar_55.zw;
    projPos_53.xy = (tmpvar_55.xy / tmpvar_55.w);
    float Z_56;
    Z_56 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light2_shadowParams.w) + light2_shadowParams.z);
    lowp vec4 tmpvar_57;
    tmpvar_57 = texture (light2_shadowMap, projPos_53.xy);
    lowp vec3 tmpvar_58;
    tmpvar_58.z = 0.0;
    tmpvar_58.x = ((tmpvar_57.y * 0.003921569) + tmpvar_57.x);
    tmpvar_58.y = ((tmpvar_57.w * 0.003921569) + tmpvar_57.z);
    float tmpvar_59;
    tmpvar_59 = (light2_shadowParams.y * Z_56);
    lowp float tmpvar_60;
    tmpvar_60 = max ((tmpvar_58.y - (tmpvar_58.x * tmpvar_58.x)), (tmpvar_59 * tmpvar_59));
    lowp float tmpvar_61;
    tmpvar_61 = (Z_56 - tmpvar_58.x);
    lowp float tmpvar_62;
    tmpvar_62 = clamp (((
      (tmpvar_60 / (tmpvar_60 + (tmpvar_61 * tmpvar_61)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_63;
    if ((Z_56 <= tmpvar_58.x)) {
      tmpvar_63 = 1.0;
    } else {
      tmpvar_63 = tmpvar_62;
    };
    dAtten = (dAtten * tmpvar_63);
    dDiffuseLight = (dDiffuseLight + (dAtten * light2_color));
    lowp float tmpvar_64;
    tmpvar_64 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_65;
    tmpvar_65 = max ((tmpvar_64 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_64 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_50) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_65)
     * 
      (tmpvar_65 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light2_color));
  };
  lowp vec3 tmpvar_66;
  tmpvar_66 = mix ((rgba_5.xyz * dDiffuseLight), (dSpecularLight + (tmpvar_35.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_66;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_67;
  tmpvar_67 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_67, tmpvar_67))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^1719270801^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vec3 tmpvar_40;
  tmpvar_40 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_40;
  vec3 tmpvar_41;
  tmpvar_41 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_41;
  vBinormalW = (((tmpvar_40.yzx * tmpvar_41.zxy) - (tmpvar_40.zxy * tmpvar_41.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform vec3 light2_color;
uniform vec3 light2_position;
uniform float light2_radius;
uniform vec3 light2_direction;
uniform float light2_innerConeAngle;
uniform float light2_outerConeAngle;
uniform vec3 light3_color;
uniform vec3 light3_position;
uniform float light3_radius;
uniform vec3 light3_direction;
uniform float light3_innerConeAngle;
uniform float light3_outerConeAngle;
uniform vec3 light4_color;
uniform vec3 light4_position;
uniform float light4_radius;
uniform vec3 light4_direction;
uniform float light4_innerConeAngle;
uniform float light4_outerConeAngle;
uniform vec3 light5_color;
uniform vec3 light5_position;
uniform float light5_radius;
uniform vec3 light5_direction;
uniform float light5_innerConeAngle;
uniform float light5_outerConeAngle;
uniform mat4 light5_shadowMatrix;
uniform vec4 light5_shadowParams;
uniform sampler2D light5_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform float isLeaves;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  dSpecularity = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_3, material_bumpiness)));
  lowp vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = rgba_5.xyz;
  if ((isLeaves > 0.5)) {
    dAlbedo = (rgba_5.xyz * vec3((vVertexColor.w * 2.0)));
  } else {
    dAlbedo = (dAlbedo * vec3(clamp ((
      (vVertexColor.w * vVertexColor.w)
     * 
      (vVertexColor.w * 5.0)
    ), 0.0, 1.0)));
  };
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  lowp vec3 fixedReflDir_10;
  lowp vec3 vec_11;
  vec_11 = dNormalW;
  lowp float tmpvar_12;
  tmpvar_12 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_13;
  tmpvar_13 = abs(dNormalW.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  float tmpvar_18;
  tmpvar_18 = clamp (vVertexColor.w, 0.0, 1.0);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * tmpvar_18);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_4;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_4.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_4.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_4.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_4.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dReflection = tmpvar_35;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_36)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_43;
    tmpvar_43 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_44;
    tmpvar_44 = max ((tmpvar_43 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_43 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_44)
     * 
      (tmpvar_44 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_45;
  tmpvar_45 = normalize(dLightDirW);
  float falloff_46;
  float tmpvar_47;
  tmpvar_47 = dot (dLightDirW, dLightDirW);
  float tmpvar_48;
  tmpvar_48 = (1.0/(light1_radius));
  falloff_46 = ((1.0/((tmpvar_47 + 1.0))) * 16.0);
  float x_49;
  x_49 = (tmpvar_47 * (tmpvar_48 * tmpvar_48));
  float tmpvar_50;
  tmpvar_50 = clamp ((1.0 - (x_49 * x_49)), 0.0, 1.0);
  falloff_46 = (falloff_46 * (tmpvar_50 * tmpvar_50));
  dAtten = falloff_46;
  if ((falloff_46 > 1e-05)) {
    float tmpvar_51;
    tmpvar_51 = clamp (((
      dot (tmpvar_45, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_46 * (tmpvar_51 * (tmpvar_51 * 
      (3.0 - (2.0 * tmpvar_51))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_45)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_52;
    tmpvar_52 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_53;
    tmpvar_53 = max ((tmpvar_52 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_52 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_45) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_53)
     * 
      (tmpvar_53 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dLightDirW = (vPositionW - light2_position);
  vec3 tmpvar_54;
  tmpvar_54 = normalize(dLightDirW);
  float falloff_55;
  float tmpvar_56;
  tmpvar_56 = dot (dLightDirW, dLightDirW);
  float tmpvar_57;
  tmpvar_57 = (1.0/(light2_radius));
  falloff_55 = ((1.0/((tmpvar_56 + 1.0))) * 16.0);
  float x_58;
  x_58 = (tmpvar_56 * (tmpvar_57 * tmpvar_57));
  float tmpvar_59;
  tmpvar_59 = clamp ((1.0 - (x_58 * x_58)), 0.0, 1.0);
  falloff_55 = (falloff_55 * (tmpvar_59 * tmpvar_59));
  dAtten = falloff_55;
  if ((falloff_55 > 1e-05)) {
    float tmpvar_60;
    tmpvar_60 = clamp (((
      dot (tmpvar_54, light2_direction)
     - light2_outerConeAngle) / (light2_innerConeAngle - light2_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_55 * (tmpvar_60 * (tmpvar_60 * 
      (3.0 - (2.0 * tmpvar_60))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_54)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light2_color));
    lowp float tmpvar_61;
    tmpvar_61 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_62;
    tmpvar_62 = max ((tmpvar_61 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_61 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_54) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_62)
     * 
      (tmpvar_62 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light2_color));
  };
  dLightDirW = (vPositionW - light3_position);
  vec3 tmpvar_63;
  tmpvar_63 = normalize(dLightDirW);
  float falloff_64;
  float tmpvar_65;
  tmpvar_65 = dot (dLightDirW, dLightDirW);
  float tmpvar_66;
  tmpvar_66 = (1.0/(light3_radius));
  falloff_64 = ((1.0/((tmpvar_65 + 1.0))) * 16.0);
  float x_67;
  x_67 = (tmpvar_65 * (tmpvar_66 * tmpvar_66));
  float tmpvar_68;
  tmpvar_68 = clamp ((1.0 - (x_67 * x_67)), 0.0, 1.0);
  falloff_64 = (falloff_64 * (tmpvar_68 * tmpvar_68));
  dAtten = falloff_64;
  if ((falloff_64 > 1e-05)) {
    float tmpvar_69;
    tmpvar_69 = clamp (((
      dot (tmpvar_63, light3_direction)
     - light3_outerConeAngle) / (light3_innerConeAngle - light3_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_64 * (tmpvar_69 * (tmpvar_69 * 
      (3.0 - (2.0 * tmpvar_69))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_63)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light3_color));
    lowp float tmpvar_70;
    tmpvar_70 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_71;
    tmpvar_71 = max ((tmpvar_70 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_70 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_63) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_71)
     * 
      (tmpvar_71 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light3_color));
  };
  dLightDirW = (vPositionW - light4_position);
  vec3 tmpvar_72;
  tmpvar_72 = normalize(dLightDirW);
  float falloff_73;
  float tmpvar_74;
  tmpvar_74 = dot (dLightDirW, dLightDirW);
  float tmpvar_75;
  tmpvar_75 = (1.0/(light4_radius));
  falloff_73 = ((1.0/((tmpvar_74 + 1.0))) * 16.0);
  float x_76;
  x_76 = (tmpvar_74 * (tmpvar_75 * tmpvar_75));
  float tmpvar_77;
  tmpvar_77 = clamp ((1.0 - (x_76 * x_76)), 0.0, 1.0);
  falloff_73 = (falloff_73 * (tmpvar_77 * tmpvar_77));
  dAtten = falloff_73;
  if ((falloff_73 > 1e-05)) {
    float tmpvar_78;
    tmpvar_78 = clamp (((
      dot (tmpvar_72, light4_direction)
     - light4_outerConeAngle) / (light4_innerConeAngle - light4_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_73 * (tmpvar_78 * (tmpvar_78 * 
      (3.0 - (2.0 * tmpvar_78))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_72)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light4_color));
    lowp float tmpvar_79;
    tmpvar_79 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_80;
    tmpvar_80 = max ((tmpvar_79 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_79 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_72) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_80)
     * 
      (tmpvar_80 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light4_color));
  };
  dLightDirW = (vPositionW - light5_position);
  vec3 tmpvar_81;
  tmpvar_81 = normalize(dLightDirW);
  float falloff_82;
  float tmpvar_83;
  tmpvar_83 = dot (dLightDirW, dLightDirW);
  float tmpvar_84;
  tmpvar_84 = (1.0/(light5_radius));
  falloff_82 = ((1.0/((tmpvar_83 + 1.0))) * 16.0);
  float x_85;
  x_85 = (tmpvar_83 * (tmpvar_84 * tmpvar_84));
  float tmpvar_86;
  tmpvar_86 = clamp ((1.0 - (x_85 * x_85)), 0.0, 1.0);
  falloff_82 = (falloff_82 * (tmpvar_86 * tmpvar_86));
  dAtten = falloff_82;
  if ((falloff_82 > 1e-05)) {
    float tmpvar_87;
    tmpvar_87 = clamp (((
      dot (tmpvar_81, light5_direction)
     - light5_outerConeAngle) / (light5_innerConeAngle - light5_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_82 * (tmpvar_87 * (tmpvar_87 * 
      (3.0 - (2.0 * tmpvar_87))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_81)
    ), 0.0));
    vec4 projPos_88;
    vec4 tmpvar_89;
    tmpvar_89.w = 1.0;
    tmpvar_89.xyz = vPositionW;
    vec4 tmpvar_90;
    tmpvar_90 = (light5_shadowMatrix * tmpvar_89);
    projPos_88.zw = tmpvar_90.zw;
    projPos_88.xy = (tmpvar_90.xy / tmpvar_90.w);
    float Z_91;
    Z_91 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light5_shadowParams.w) + light5_shadowParams.z);
    lowp vec4 tmpvar_92;
    tmpvar_92 = texture (light5_shadowMap, projPos_88.xy);
    lowp vec3 tmpvar_93;
    tmpvar_93.z = 0.0;
    tmpvar_93.x = ((tmpvar_92.y * 0.003921569) + tmpvar_92.x);
    tmpvar_93.y = ((tmpvar_92.w * 0.003921569) + tmpvar_92.z);
    float tmpvar_94;
    tmpvar_94 = (light5_shadowParams.y * Z_91);
    lowp float tmpvar_95;
    tmpvar_95 = max ((tmpvar_93.y - (tmpvar_93.x * tmpvar_93.x)), (tmpvar_94 * tmpvar_94));
    lowp float tmpvar_96;
    tmpvar_96 = (Z_91 - tmpvar_93.x);
    lowp float tmpvar_97;
    tmpvar_97 = clamp (((
      (tmpvar_95 / (tmpvar_95 + (tmpvar_96 * tmpvar_96)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_98;
    if ((Z_91 <= tmpvar_93.x)) {
      tmpvar_98 = 1.0;
    } else {
      tmpvar_98 = tmpvar_97;
    };
    dAtten = (dAtten * tmpvar_98);
    dDiffuseLight = (dDiffuseLight + (dAtten * light5_color));
    lowp float tmpvar_99;
    tmpvar_99 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_100;
    tmpvar_100 = max ((tmpvar_99 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_99 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_81) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_100)
     * 
      (tmpvar_100 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light5_color));
  };
  dSpecularLight = (dSpecularLight * tmpvar_18);
  dReflection = (tmpvar_35 * tmpvar_18);
  lowp vec3 tmpvar_101;
  tmpvar_101 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_101;
  pc_fragColor.xyz = (pc_fragColor.xyz + (pow (
    clamp (vVertexColor.xyz, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))
  , vec3(2.2, 2.2, 2.2)) * material_emissive));
  vec3 tmpvar_102;
  tmpvar_102 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_102, tmpvar_102))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^1738636809^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularity;
float dGlossiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform float material_opacity;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), rgba_4.xyz, material_metalness);
  dAlbedo = (rgba_4.xyz * (1.0 - material_metalness));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_2.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (texture_aoMap, vUv0);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * tmpvar_18.x);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  vec3 fixedReflDir_23;
  highp int index2_24;
  highp int index1_25;
  float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  vec3 vec_27;
  vec_27 = tmpvar_3;
  float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dReflection = (tmpvar_35 * tmpvar_18.x);
  lowp vec3 tmpvar_36;
  tmpvar_36 = mix ((dAlbedo * dDiffuseLight), (dReflection.xyz * dReflection.w), dSpecularity);
  pc_fragColor.xyz = tmpvar_36;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_37;
  tmpvar_37 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_37, tmpvar_37))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = material_opacity;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1766879150^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
#define varying in
out highp vec4 pc_fragColor;
#define gl_FragColor pc_fragColor
#define texture2D texture
#define textureCube texture
#define texture2DProj textureProj
#define GL2
// ----- zebraAlpha ----- 
precision highp float;

varying vec3 vPositionW;
varying vec3 vNormalW;
varying vec2 vUv0;

uniform vec3 view_position;
uniform vec3 light_globalAmbient;
float square(float x) {
    return x*x;
}
float saturate(float x) {
    return clamp(x, 0.0, 1.0);
}
vec3 saturate(vec3 x) {
    return clamp(x, vec3(0.0), vec3(1.0));
}
vec4 dReflection;
vec3 dAlbedo;
vec3 dNormalW;
vec3 dViewDirW;
vec3 dReflDirW;
vec3 dDiffuseLight;
vec3 dSpecularLight;
vec3 dLightDirNormW;
vec3 dLightDirW;
vec3 dLightPosW;
vec3 dShadowCoord;
vec3 dSpecularity;
float dGlossiness;
float dAlpha;
float dAtten;
float getSpotEffect(vec3 lightSpotDirW, float lightInnerConeAngle, float lightOuterConeAngle) {
    float cosAngle = dot(dLightDirNormW, lightSpotDirW);
    return smoothstep(lightOuterConeAngle, lightInnerConeAngle, cosAngle);
}
float getFalloffInvSquared(float lightRadius) {
    float sqrDist = dot(dLightDirW, dLightDirW);
    float falloff = 1.0 / (sqrDist + 1.0);
    float invRadius = 1.0 / lightRadius;
    falloff *= 16.0;
    falloff *= square( saturate( 1.0 - square( sqrDist * square(invRadius) ) ) );
    return falloff;
}
void getLightDirPoint(vec3 lightPosW) {
    dLightDirW = vPositionW - lightPosW;
    dLightDirNormW = normalize(dLightDirW);
    dLightPosW = lightPosW;
}
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;

void getNormal() {
    dNormalW = normalize(vNormalW);
}
vec3 gammaCorrectInput(vec3 color) {
    return pow(color, vec3(2.2));
}
float gammaCorrectInput(float color) {
    return pow(color, 2.2);
}
vec4 gammaCorrectInput(vec4 color) {
    return vec4(pow(color.rgb, vec3(2.2)), color.a);
}
vec4 texture2DSRGB(sampler2D tex, vec2 uv) {
    vec4 rgba = texture2D(tex, uv);
    rgba.rgb = gammaCorrectInput(rgba.rgb);
    return rgba;
}
vec4 textureCubeSRGB(samplerCube tex, vec3 uvw) {
    vec4 rgba = textureCube(tex, uvw);
    rgba.rgb = gammaCorrectInput(rgba.rgb);
    return rgba;
}
vec3 gammaCorrectOutput(vec3 color) {
    return color;
}
vec3 toneMap(vec3 color) {
    return color;
}

uniform vec3 fog_color;
uniform float fog_density;

vec3 addFog(vec3 color) {
    float depth = distance(vPositionW, view_position);

    float fogFactor = exp(-depth * fog_density);
    fogFactor = clamp(fogFactor, 0.0, 1.0);

    vec3 result = mix(fog_color, color, fogFactor);
    return result;
}

vec3 decodeRGBM(vec4 rgbm) {
    vec3 color = (8.0 * rgbm.a) * rgbm.rgb;
    return color * color;
}
vec3 texture2DRGBM(sampler2D tex, vec2 uv) {
    return decodeRGBM(texture2D(tex, uv));
}
vec3 textureCubeRGBM(samplerCube tex, vec3 uvw) {
    return decodeRGBM(textureCube(tex, uvw));
}
vec3 fixSeams(vec3 vec, float mipmapIndex) {
    float scale = 1.0 - exp2(mipmapIndex) / 128.0;
    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));
    if (abs(vec.x) != M) vec.x *= scale;
    if (abs(vec.y) != M) vec.y *= scale;
    if (abs(vec.z) != M) vec.z *= scale;
    return vec;
}
vec3 fixSeams(vec3 vec) {
    float scale = 1.0 - 1.0 / 128.0;
    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));
    if (abs(vec.x) != M) vec.x *= scale;
    if (abs(vec.y) != M) vec.y *= scale;
    if (abs(vec.z) != M) vec.z *= scale;
    return vec;
}
vec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {
    float scale = invRecMipSize;
    float M = max(max(abs(vec.x), abs(vec.y)), abs(vec.z));
    if (abs(vec.x) != M) vec.x *= scale;
    if (abs(vec.y) != M) vec.y *= scale;
    if (abs(vec.z) != M) vec.z *= scale;
    return vec;
}
vec3 cubeMapProject(vec3 dir) {
    return dir;
}

//#ifdef GL2
//#define skyboxIntensity uniformScene.fogColor_skyInt.w
//#else
uniform float skyboxIntensity;
//#endif
vec3 processEnvironment(vec3 color) {
    return color * skyboxIntensity;
}
uniform vec3 material_diffuse;
void getAlbedo() {
    dAlbedo = material_diffuse.rgb;
}
uniform sampler2D texture_opacityMap;
void getOpacity() {
    dAlpha = texture2D(texture_opacityMap, vUv0).g;
}
uniform vec3 material_emissive;
vec3 getEmission() {
    return material_emissive;
}
float antiAliasGlossiness(float power) {
    return power;
}
uniform vec3 material_specular;
void getSpecularity() {
    dSpecularity = material_specular;
}
uniform float material_shininess;
void getGlossiness() {
    dGlossiness = material_shininess + 0.0000001;
}
// Schlick's approximation
uniform float material_fresnelFactor; // unused
void getFresnel() {
    float fresnel = 1.0 - max(dot(dNormalW, dViewDirW), 0.0);
    float fresnel2 = fresnel * fresnel;
    fresnel *= fresnel2 * fresnel2;
    fresnel *= dGlossiness * dGlossiness;
    dSpecularity = dSpecularity + (1.0 - dSpecularity) * fresnel;
}
uniform samplerCube texture_prefilteredCubeMap128;
uniform samplerCube texture_prefilteredCubeMap64;
uniform samplerCube texture_prefilteredCubeMap32;
uniform samplerCube texture_prefilteredCubeMap16;
uniform samplerCube texture_prefilteredCubeMap8;
uniform samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void addReflection() {
    // Unfortunately, WebGL doesn't allow us using textureCubeLod. Therefore bunch of nasty workarounds is required.
    // We fix mip0 to 128x128, so code is rather static.
    // Mips smaller than 4x4 aren't great even for diffuse. Don't forget that we don't have bilinear filtering between different faces.
    float bias = saturate(1.0 - dGlossiness) * 5.0; // multiply by max mip level
    int index1 = int(bias);
    int index2 = int(min(bias + 1.0, 7.0));
    vec3 fixedReflDir = fixSeams(cubeMapProject(dReflDirW), bias);
    fixedReflDir.x *= -1.0;
    vec4 cubes[6];
    cubes[0] = textureCube(texture_prefilteredCubeMap128, fixedReflDir);
    cubes[1] = textureCube(texture_prefilteredCubeMap64, fixedReflDir);
    cubes[2] = textureCube(texture_prefilteredCubeMap32, fixedReflDir);
    cubes[3] = textureCube(texture_prefilteredCubeMap16, fixedReflDir);
    cubes[4] = textureCube(texture_prefilteredCubeMap8, fixedReflDir);
    cubes[5] = textureCube(texture_prefilteredCubeMap4, fixedReflDir);
    // Also we don't have dynamic indexing in PS, so...
    vec4 cube[2];
    for(int i = 0; i < 6; i++) {
        if (i == index1) {
            cube[0] = cubes[i];
        }
        if (i == index2) {
            cube[1] = cubes[i];
        }
    }
    // another variant
    /*if (index1==0){ cube[0]=cubes[0];
    }else if (index1==1){ cube[0]=cubes[1];
    }else if (index1==2){ cube[0]=cubes[2];
    }else if (index1==3){ cube[0]=cubes[3];
    }else if (index1==4){ cube[0]=cubes[4];
    }else if (index1==5){ cube[0]=cubes[5];}
    if (index2==0){ cube[1]=cubes[0];
    }else if (index2==1){ cube[1]=cubes[1];
    }else if (index2==2){ cube[1]=cubes[2];
    }else if (index2==3){ cube[1]=cubes[3];
    }else if (index2==4){ cube[1]=cubes[4];
    }else if (index2==5){ cube[1]=cubes[5];}*/
    vec4 cubeFinal = mix(cube[0], cube[1], fract(bias));
    vec3 refl = processEnvironment(decodeRGBM(cubeFinal).rgb);
    dReflection += vec4(refl, material_reflectivity);
}
float linstep(float a, float b, float v) {
    return saturate((v - a) / (b - a));
}
float reduceLightBleeding(float pMax, float amount) {
  // Remove the [0, amount] tail and linearly rescale (amount, 1].
   return linstep(amount, 1.0, pMax);
}
float chebyshevUpperBound(vec2 moments, float mean, float minVariance, float lightBleedingReduction) {
    // Compute variance
    float variance = moments.y - (moments.x * moments.x);
    variance = max(variance, minVariance);
    // Compute probabilistic upper bound
    float d = mean - moments.x;
    float pMax = variance / (variance + (d * d));
    pMax = reduceLightBleeding(pMax, lightBleedingReduction);
    // One-tailed Chebyshev
    return (mean <= moments.x ? 1.0 : pMax);
}
float calculateEVSM(vec3 moments, float Z, float vsmBias, float exponent) {
    Z = 2.0 * Z - 1.0;
    float warpedDepth = exp(exponent * Z);
    moments.xy += vec2(warpedDepth, warpedDepth*warpedDepth) * (1.0 - moments.z);
    float VSMBias = vsmBias;//0.01 * 0.25;
    float depthScale = VSMBias * exponent * warpedDepth;
    float minVariance1 = depthScale * depthScale;
    return chebyshevUpperBound(moments.xy, warpedDepth, minVariance1, 0.1);
}
float calculateVSM8(vec3 moments, float Z, float vsmBias) {
    float VSMBias = vsmBias;//0.01 * 0.25;
    float depthScale = VSMBias * Z;
    float minVariance1 = depthScale * depthScale;
    return chebyshevUpperBound(moments.xy, Z, minVariance1, 0.1);
}
float decodeFloatRG(vec2 rg) {
    return rg.y*(1.0/255.0) + rg.x;
}
float VSM8(sampler2D tex, vec2 texCoords, float resolution, float Z, float vsmBias, float exponent) {
    vec4 c = texture2D(tex, texCoords);
    vec3 moments = vec3(decodeFloatRG(c.xy), decodeFloatRG(c.zw), 0.0);
    return calculateVSM8(moments, Z, vsmBias);
}
float getShadowVSM8(sampler2D shadowMap, vec3 shadowParams, float exponent) {
    return VSM8(shadowMap, dShadowCoord.xy, shadowParams.x, dShadowCoord.z, shadowParams.y, 0.0);
}
float getShadowSpotVSM8(sampler2D shadowMap, vec4 shadowParams, float exponent) {
    return VSM8(shadowMap, dShadowCoord.xy, shadowParams.x, length(dLightDirW) * shadowParams.w + shadowParams.z, shadowParams.y, 0.0);
}
float getShadowBias(float resolution, float maxBias) {
    return maxBias;
}
void _getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams, vec3 wPos) {
    dShadowCoord = (shadowMatrix * vec4(wPos, 1.0)).xyz;
    dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);
    //dShadowCoord.z = min(dShadowCoord.z, 1.0);
}
void _getShadowCoordPersp(mat4 shadowMatrix, vec4 shadowParams, vec3 wPos) {
    vec4 projPos = shadowMatrix * vec4(wPos, 1.0);
    projPos.xy /= projPos.w;
    dShadowCoord.xy = projPos.xy;
    dShadowCoord.z = projPos.z / projPos.w;//length(dLightDirW) * shadowParams.w;
    //dShadowCoord.z = length(dLightDirW) * shadowParams.w;
    //dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z);
    float f = 1.0 / shadowParams.w;
    float n = f / 1000.0;
    //dShadowCoord.z = (2.0*n) / (f + n - dShadowCoord.z * (f - n)); // linearize
    dShadowCoord.z = -((2.0*f*n)/(f-n)) / (dShadowCoord.z - (f+n)/(f-n)); // linearize
    dShadowCoord.z *= shadowParams.w;
    dShadowCoord.z += getShadowBias(shadowParams.x, shadowParams.z) * 10.0;
    dShadowCoord.z /= shadowParams.w;
    dShadowCoord.z = (f+n)/(f-n) - (2.0*f*n)/(f-n) / dShadowCoord.z; // unlinearize
}
void getShadowCoordOrtho(mat4 shadowMatrix, vec3 shadowParams) {
    _getShadowCoordOrtho(shadowMatrix, shadowParams, vPositionW);
}
void getShadowCoordPersp(mat4 shadowMatrix, vec4 shadowParams) {
    _getShadowCoordPersp(shadowMatrix, shadowParams, vPositionW);
}
void getShadowCoordPerspNormalOffset(mat4 shadowMatrix, vec4 shadowParams) {
    float distScale = abs(dot(vPositionW - dLightPosW, dLightDirNormW)); // fov?
    vec3 wPos = vPositionW + vNormalW * shadowParams.y * clamp(1.0 - dot(vNormalW, -dLightDirNormW), 0.0, 1.0) * distScale;
    _getShadowCoordPersp(shadowMatrix, shadowParams, wPos);
}
void getShadowCoordOrthoNormalOffset(mat4 shadowMatrix, vec3 shadowParams) {
    vec3 wPos = vPositionW + vNormalW * shadowParams.y * clamp(1.0 - dot(vNormalW, -dLightDirNormW), 0.0, 1.0); //0.08
    _getShadowCoordOrtho(shadowMatrix, shadowParams, wPos);
}
void normalOffsetPointShadow(vec4 shadowParams) {
    float distScale = length(dLightDirW);
    vec3 wPos = vPositionW + vNormalW * shadowParams.y * clamp(1.0 - dot(vNormalW, -dLightDirNormW), 0.0, 1.0) * distScale; //0.02
    vec3 dir = wPos - dLightPosW;
    dLightDirW = dir;
}
float getLightDiffuse() {
    return max(dot(dNormalW, -dLightDirNormW), 0.0);
}
// Energy-conserving (hopefully) Blinn-Phong
float getLightSpecular() {
    vec3 h = normalize( -dLightDirNormW + dViewDirW );
    float nh = max( dot( h, dNormalW ), 0.0 );
    float specPow = exp2(dGlossiness * 11.0); // glossiness is linear, power is not; 0 - 2048
    specPow = antiAliasGlossiness(specPow);
    // Hack: On Mac OS X, calling pow with zero for the exponent generates hideous artifacts so bias up a little
    specPow = max(specPow, 0.0001);
    return pow(nh, specPow) * (specPow + 2.0) / 8.0;
}
vec3 combineColor() {
    return mix(dAlbedo * dDiffuseLight, dSpecularLight + dReflection.rgb * dReflection.a, dSpecularity);
}
void addAmbient() {
    vec3 fixedReflDir = fixSeamsStatic(dNormalW, 1.0 - 1.0 / 4.0);
    fixedReflDir.x *= -1.0;
    dDiffuseLight += processEnvironment(decodeRGBM(textureCube(texture_prefilteredCubeMap4, fixedReflDir)).rgb);
}
uniform float alpha_ref;
void alphaTest(float a) {
    if (a < alpha_ref) discard;
}
void getViewDir() {
    dViewDirW = normalize(view_position - vPositionW);
}
void getReflDir() {
    dReflDirW = normalize(-reflect(dViewDirW, dNormalW));
}

void main(void) {
    dDiffuseLight = vec3(0);
    dSpecularLight = vec3(0);
    dReflection = vec4(0);
    dSpecularity = vec3(0);
   getOpacity();
   alphaTest(dAlpha);
   getViewDir();
   getNormal();
   getReflDir();
   getAlbedo();
   getSpecularity();
   getGlossiness();
   getFresnel();
   addAmbient();
   addReflection();
   getLightDirPoint(light0_position);
   dAtten = getFalloffInvSquared(light0_radius);
   if (dAtten > 0.00001) {
       dAtten *= getSpotEffect(light0_direction, light0_innerConeAngle, light0_outerConeAngle);
       dAtten *= getLightDiffuse();
       dDiffuseLight += dAtten * light0_color;
       dAtten *= getLightSpecular();
       dSpecularLight += dAtten * light0_color;
   }

   getLightDirPoint(light1_position);
   dAtten = getFalloffInvSquared(light1_radius);
   if (dAtten > 0.00001) {
       dAtten *= getSpotEffect(light1_direction, light1_innerConeAngle, light1_outerConeAngle);
       dAtten *= getLightDiffuse();
    getShadowCoordPersp(light1_shadowMatrix, light1_shadowParams);
       dAtten *= getShadowSpotVSM8(light1_shadowMap, light1_shadowParams, 0.0);
       dDiffuseLight += dAtten * light1_color;
       dAtten *= getLightSpecular();
       dSpecularLight += dAtten * light1_color;
   }


   gl_FragColor.rgb = combineColor();
   gl_FragColor.rgb += getEmission();
   gl_FragColor.rgb = addFog(gl_FragColor.rgb);
   gl_FragColor.rgb = toneMap(gl_FragColor.rgb);
   gl_FragColor.rgb = gammaCorrectOutput(gl_FragColor.rgb);
gl_FragColor.a = dAlpha;

}
^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1803281114^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
vec3 dSpecularity;
float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = (rgba_4.xyz * material_diffuse);
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_6;
  float tmpvar_7;
  tmpvar_7 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  fresnel_6 = (tmpvar_7 * (tmpvar_8 * tmpvar_8));
  fresnel_6 = (fresnel_6 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_6));
  vec3 fixedReflDir_9;
  vec3 vec_10;
  vec_10 = tmpvar_2;
  float tmpvar_11;
  tmpvar_11 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.x);
  if ((tmpvar_12 != tmpvar_11)) {
    vec_10.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.y);
  if ((tmpvar_13 != tmpvar_11)) {
    vec_10.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.z);
  if ((tmpvar_14 != tmpvar_11)) {
    vec_10.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_9.yz = vec_10.yz;
  fixedReflDir_9.x = -(vec_10.x);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_prefilteredCubeMap4, fixedReflDir_9);
  lowp vec3 tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  tmpvar_16 = (tmpvar_17 * tmpvar_17);
  dDiffuseLight = tmpvar_16;
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_3;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_3.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_3.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_3.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = (tmpvar_33 * tmpvar_33);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_35)
    ), 0.0));
    vec4 projPos_42;
    vec4 tmpvar_43;
    tmpvar_43.w = 1.0;
    tmpvar_43.xyz = vPositionW;
    vec4 tmpvar_44;
    tmpvar_44 = (light0_shadowMatrix * tmpvar_43);
    projPos_42.zw = tmpvar_44.zw;
    projPos_42.xy = (tmpvar_44.xy / tmpvar_44.w);
    float Z_45;
    Z_45 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture (light0_shadowMap, projPos_42.xy);
    lowp vec3 tmpvar_47;
    tmpvar_47.z = 0.0;
    tmpvar_47.x = ((tmpvar_46.y * 0.003921569) + tmpvar_46.x);
    tmpvar_47.y = ((tmpvar_46.w * 0.003921569) + tmpvar_46.z);
    float tmpvar_48;
    tmpvar_48 = (light0_shadowParams.y * Z_45);
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x)), (tmpvar_48 * tmpvar_48));
    lowp float tmpvar_50;
    tmpvar_50 = (Z_45 - tmpvar_47.x);
    lowp float tmpvar_51;
    tmpvar_51 = clamp (((
      (tmpvar_49 / (tmpvar_49 + (tmpvar_50 * tmpvar_50)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_52;
    if ((Z_45 <= tmpvar_47.x)) {
      tmpvar_52 = 1.0;
    } else {
      tmpvar_52 = tmpvar_51;
    };
    dAtten = (dAtten * tmpvar_52);
    dDiffuseLight = (tmpvar_16 + (dAtten * light0_color));
    float tmpvar_53;
    tmpvar_53 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_53)
     * 
      (tmpvar_53 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  lowp vec3 tmpvar_54;
  tmpvar_54 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_54;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_55;
  tmpvar_55 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_55, tmpvar_55))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1851663588^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform vec3 light2_color;
uniform vec3 light2_position;
uniform float light2_radius;
uniform vec3 light2_direction;
uniform float light2_innerConeAngle;
uniform float light2_outerConeAngle;
uniform vec3 light3_color;
uniform vec3 light3_position;
uniform float light3_radius;
uniform vec3 light3_direction;
uniform float light3_innerConeAngle;
uniform float light3_outerConeAngle;
uniform mat4 light3_shadowMatrix;
uniform vec4 light3_shadowParams;
uniform sampler2D light3_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dAlpha = texture (texture_opacityMap, vUv0).z;
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_6;
  float tmpvar_7;
  tmpvar_7 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  fresnel_6 = (tmpvar_7 * (tmpvar_8 * tmpvar_8));
  fresnel_6 = (fresnel_6 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_6));
  vec3 fixedReflDir_9;
  vec3 vec_10;
  vec_10 = tmpvar_2;
  float tmpvar_11;
  tmpvar_11 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.x);
  if ((tmpvar_12 != tmpvar_11)) {
    vec_10.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.y);
  if ((tmpvar_13 != tmpvar_11)) {
    vec_10.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.z);
  if ((tmpvar_14 != tmpvar_11)) {
    vec_10.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_9.yz = vec_10.yz;
  fixedReflDir_9.x = -(vec_10.x);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_prefilteredCubeMap4, fixedReflDir_9);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  dDiffuseLight = ((tmpvar_16 * tmpvar_16) * skyboxIntensity);
  lowp vec4 cube_0_18;
  lowp vec4 cube_1_19;
  lowp vec4 cubes_20[6];
  vec3 fixedReflDir_21;
  highp int index2_22;
  highp int index1_23;
  float tmpvar_24;
  tmpvar_24 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_23 = int(tmpvar_24);
  index2_22 = int(min ((tmpvar_24 + 1.0), 7.0));
  vec3 vec_25;
  vec_25 = tmpvar_3;
  float tmpvar_26;
  tmpvar_26 = (1.0 - (exp2(tmpvar_24) / 128.0));
  float tmpvar_27;
  tmpvar_27 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_28;
  tmpvar_28 = abs(tmpvar_3.x);
  if ((tmpvar_28 != tmpvar_27)) {
    vec_25.x = (tmpvar_3.x * tmpvar_26);
  };
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.y);
  if ((tmpvar_29 != tmpvar_27)) {
    vec_25.y = (tmpvar_3.y * tmpvar_26);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.z);
  if ((tmpvar_30 != tmpvar_27)) {
    vec_25.z = (tmpvar_3.z * tmpvar_26);
  };
  fixedReflDir_21.yz = vec_25.yz;
  fixedReflDir_21.x = -(vec_25.x);
  cubes_20[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_21);
  cubes_20[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_21);
  cubes_20[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_21);
  cubes_20[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_21);
  cubes_20[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_21);
  cubes_20[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_21);
  for (highp int i_17 = 0; i_17 < 6; i_17++) {
    if ((i_17 == index1_23)) {
      cube_0_18 = cubes_20[i_17];
    };
    if ((i_17 == index2_22)) {
      cube_1_19 = cubes_20[i_17];
    };
  };
  lowp vec4 tmpvar_31;
  tmpvar_31 = mix (cube_0_18, cube_1_19, fract(tmpvar_24));
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((8.0 * tmpvar_31.w) * tmpvar_31.xyz);
  lowp vec4 tmpvar_33;
  tmpvar_33.xyz = ((tmpvar_32 * tmpvar_32) * skyboxIntensity);
  tmpvar_33.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_34;
  tmpvar_34 = normalize(dLightDirW);
  lowp float tmpvar_35;
  tmpvar_35 = max (((light0_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light0_radius), 0.0);
  dAtten = tmpvar_35;
  if ((tmpvar_35 > 1e-05)) {
    float tmpvar_36;
    tmpvar_36 = clamp (((
      dot (tmpvar_34, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_35 * (tmpvar_36 * (tmpvar_36 * 
      (3.0 - (2.0 * tmpvar_36))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_34)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_37;
    tmpvar_37 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_34) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_37)
     * 
      (tmpvar_37 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_38;
  tmpvar_38 = normalize(dLightDirW);
  lowp float tmpvar_39;
  tmpvar_39 = max (((light1_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light1_radius), 0.0);
  dAtten = tmpvar_39;
  if ((tmpvar_39 > 1e-05)) {
    float tmpvar_40;
    tmpvar_40 = clamp (((
      dot (tmpvar_38, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_39 * (tmpvar_40 * (tmpvar_40 * 
      (3.0 - (2.0 * tmpvar_40))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_38)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_41;
    tmpvar_41 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_38) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_41)
     * 
      (tmpvar_41 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dLightDirW = (vPositionW - light2_position);
  vec3 tmpvar_42;
  tmpvar_42 = normalize(dLightDirW);
  float falloff_43;
  float tmpvar_44;
  tmpvar_44 = dot (dLightDirW, dLightDirW);
  float tmpvar_45;
  tmpvar_45 = (1.0/(light2_radius));
  falloff_43 = ((1.0/((tmpvar_44 + 1.0))) * 16.0);
  float x_46;
  x_46 = (tmpvar_44 * (tmpvar_45 * tmpvar_45));
  float tmpvar_47;
  tmpvar_47 = clamp ((1.0 - (x_46 * x_46)), 0.0, 1.0);
  falloff_43 = (falloff_43 * (tmpvar_47 * tmpvar_47));
  dAtten = falloff_43;
  if ((falloff_43 > 1e-05)) {
    float tmpvar_48;
    tmpvar_48 = clamp (((
      dot (tmpvar_42, light2_direction)
     - light2_outerConeAngle) / (light2_innerConeAngle - light2_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_43 * (tmpvar_48 * (tmpvar_48 * 
      (3.0 - (2.0 * tmpvar_48))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_42)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light2_color));
    float tmpvar_49;
    tmpvar_49 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_42) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_49)
     * 
      (tmpvar_49 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light2_color));
  };
  dLightDirW = (vPositionW - light3_position);
  vec3 tmpvar_50;
  tmpvar_50 = normalize(dLightDirW);
  lowp float tmpvar_51;
  tmpvar_51 = max (((light3_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light3_radius), 0.0);
  dAtten = tmpvar_51;
  if ((tmpvar_51 > 1e-05)) {
    float tmpvar_52;
    tmpvar_52 = clamp (((
      dot (tmpvar_50, light3_direction)
     - light3_outerConeAngle) / (light3_innerConeAngle - light3_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_51 * (tmpvar_52 * (tmpvar_52 * 
      (3.0 - (2.0 * tmpvar_52))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_50)
    ), 0.0));
    vec4 projPos_53;
    vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vPositionW;
    vec4 tmpvar_55;
    tmpvar_55 = (light3_shadowMatrix * tmpvar_54);
    projPos_53.zw = tmpvar_55.zw;
    projPos_53.xy = (tmpvar_55.xy / tmpvar_55.w);
    float Z_56;
    Z_56 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light3_shadowParams.w) + light3_shadowParams.z);
    lowp vec4 tmpvar_57;
    tmpvar_57 = texture (light3_shadowMap, projPos_53.xy);
    lowp vec3 tmpvar_58;
    tmpvar_58.z = 0.0;
    tmpvar_58.x = ((tmpvar_57.y * 0.003921569) + tmpvar_57.x);
    tmpvar_58.y = ((tmpvar_57.w * 0.003921569) + tmpvar_57.z);
    float tmpvar_59;
    tmpvar_59 = (light3_shadowParams.y * Z_56);
    lowp float tmpvar_60;
    tmpvar_60 = max ((tmpvar_58.y - (tmpvar_58.x * tmpvar_58.x)), (tmpvar_59 * tmpvar_59));
    lowp float tmpvar_61;
    tmpvar_61 = (Z_56 - tmpvar_58.x);
    lowp float tmpvar_62;
    tmpvar_62 = clamp (((
      (tmpvar_60 / (tmpvar_60 + (tmpvar_61 * tmpvar_61)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_63;
    if ((Z_56 <= tmpvar_58.x)) {
      tmpvar_63 = 1.0;
    } else {
      tmpvar_63 = tmpvar_62;
    };
    dAtten = (dAtten * tmpvar_63);
    dDiffuseLight = (dDiffuseLight + (dAtten * light3_color));
    float tmpvar_64;
    tmpvar_64 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_50) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_64)
     * 
      (tmpvar_64 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light3_color));
  };
  lowp vec3 tmpvar_65;
  tmpvar_65 = mix ((rgba_4.xyz * dDiffuseLight), (dSpecularLight + (tmpvar_33.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_65;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_66;
  tmpvar_66 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_66, tmpvar_66))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1902852829^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform float isLeaves;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform float alpha_ref;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dSpecularity = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_2;
  tmpvar_2 = normalize((view_position - vPositionW));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(vNormalW);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (tmpvar_3, tmpvar_2) * tmpvar_3)
  ) - tmpvar_2));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = rgba_5.xyz;
  if ((isLeaves > 0.5)) {
    dAlbedo = (rgba_5.xyz * vec3((vVertexColor.w * 2.0)));
  } else {
    dAlbedo = (dAlbedo * vec3(clamp ((
      (vVertexColor.w * vVertexColor.w)
     * 
      (vVertexColor.w * 5.0)
    ), 0.0, 1.0)));
  };
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * clamp (vVertexColor.x, 0.0, 1.0)) + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_3, tmpvar_2), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_3;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_3.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_3.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_3.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_3.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_3.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_3.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * skyboxIntensity);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_4;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_4.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_4.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_4.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_4.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = ((tmpvar_33 * tmpvar_33) * skyboxIntensity);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_35)
    ), 0.0));
    vec4 projPos_42;
    vec4 tmpvar_43;
    tmpvar_43.w = 1.0;
    tmpvar_43.xyz = vPositionW;
    vec4 tmpvar_44;
    tmpvar_44 = (light0_shadowMatrix * tmpvar_43);
    projPos_42.zw = tmpvar_44.zw;
    projPos_42.xy = (tmpvar_44.xy / tmpvar_44.w);
    float Z_45;
    Z_45 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture (light0_shadowMap, projPos_42.xy);
    lowp vec3 tmpvar_47;
    tmpvar_47.z = 0.0;
    tmpvar_47.x = ((tmpvar_46.y * 0.003921569) + tmpvar_46.x);
    tmpvar_47.y = ((tmpvar_46.w * 0.003921569) + tmpvar_46.z);
    float tmpvar_48;
    tmpvar_48 = (light0_shadowParams.y * Z_45);
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x)), (tmpvar_48 * tmpvar_48));
    lowp float tmpvar_50;
    tmpvar_50 = (Z_45 - tmpvar_47.x);
    lowp float tmpvar_51;
    tmpvar_51 = clamp (((
      (tmpvar_49 / (tmpvar_49 + (tmpvar_50 * tmpvar_50)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_52;
    if ((Z_45 <= tmpvar_47.x)) {
      tmpvar_52 = 1.0;
    } else {
      tmpvar_52 = tmpvar_51;
    };
    dAtten = (dAtten * tmpvar_52);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_53;
    tmpvar_53 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_53)
     * 
      (tmpvar_53 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_54;
  tmpvar_54 = normalize(dLightDirW);
  float falloff_55;
  float tmpvar_56;
  tmpvar_56 = dot (dLightDirW, dLightDirW);
  float tmpvar_57;
  tmpvar_57 = (1.0/(light1_radius));
  falloff_55 = ((1.0/((tmpvar_56 + 1.0))) * 16.0);
  float x_58;
  x_58 = (tmpvar_56 * (tmpvar_57 * tmpvar_57));
  float tmpvar_59;
  tmpvar_59 = clamp ((1.0 - (x_58 * x_58)), 0.0, 1.0);
  falloff_55 = (falloff_55 * (tmpvar_59 * tmpvar_59));
  dAtten = falloff_55;
  if ((falloff_55 > 1e-05)) {
    float tmpvar_60;
    tmpvar_60 = clamp (((
      dot (tmpvar_54, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_55 * (tmpvar_60 * (tmpvar_60 * 
      (3.0 - (2.0 * tmpvar_60))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_54)
    ), 0.0));
    vec4 projPos_61;
    vec4 tmpvar_62;
    tmpvar_62.w = 1.0;
    tmpvar_62.xyz = vPositionW;
    vec4 tmpvar_63;
    tmpvar_63 = (light1_shadowMatrix * tmpvar_62);
    projPos_61.zw = tmpvar_63.zw;
    projPos_61.xy = (tmpvar_63.xy / tmpvar_63.w);
    float Z_64;
    Z_64 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_65;
    tmpvar_65 = texture (light1_shadowMap, projPos_61.xy);
    lowp vec3 tmpvar_66;
    tmpvar_66.z = 0.0;
    tmpvar_66.x = ((tmpvar_65.y * 0.003921569) + tmpvar_65.x);
    tmpvar_66.y = ((tmpvar_65.w * 0.003921569) + tmpvar_65.z);
    float tmpvar_67;
    tmpvar_67 = (light1_shadowParams.y * Z_64);
    lowp float tmpvar_68;
    tmpvar_68 = max ((tmpvar_66.y - (tmpvar_66.x * tmpvar_66.x)), (tmpvar_67 * tmpvar_67));
    lowp float tmpvar_69;
    tmpvar_69 = (Z_64 - tmpvar_66.x);
    lowp float tmpvar_70;
    tmpvar_70 = clamp (((
      (tmpvar_68 / (tmpvar_68 + (tmpvar_69 * tmpvar_69)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_71;
    if ((Z_64 <= tmpvar_66.x)) {
      tmpvar_71 = 1.0;
    } else {
      tmpvar_71 = tmpvar_70;
    };
    dAtten = (dAtten * tmpvar_71);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_72;
    tmpvar_72 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_54) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_72)
     * 
      (tmpvar_72 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_73;
  tmpvar_73 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_73;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_74;
  tmpvar_74 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_74, tmpvar_74))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^1969848832^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
vec3 dSpecularity;
float dGlossiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_emissiveMap;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_6;
  float tmpvar_7;
  tmpvar_7 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  fresnel_6 = (tmpvar_7 * (tmpvar_8 * tmpvar_8));
  fresnel_6 = (fresnel_6 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_6));
  vec3 fixedReflDir_9;
  vec3 vec_10;
  vec_10 = tmpvar_2;
  float tmpvar_11;
  tmpvar_11 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.x);
  if ((tmpvar_12 != tmpvar_11)) {
    vec_10.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.y);
  if ((tmpvar_13 != tmpvar_11)) {
    vec_10.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.z);
  if ((tmpvar_14 != tmpvar_11)) {
    vec_10.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_9.yz = vec_10.yz;
  fixedReflDir_9.x = -(vec_10.x);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_prefilteredCubeMap4, fixedReflDir_9);
  lowp vec3 tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  tmpvar_16 = (tmpvar_17 * tmpvar_17);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_3;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_3.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_3.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_3.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = (tmpvar_33 * tmpvar_33);
  tmpvar_34.w = material_reflectivity;
  lowp vec3 tmpvar_35;
  tmpvar_35 = mix ((rgba_4.xyz * tmpvar_16), (tmpvar_34.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_35;
  lowp vec3 tmpvar_36;
  lowp vec4 rgba_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture (texture_emissiveMap, vUv0);
  rgba_37.w = tmpvar_38.w;
  rgba_37.xyz = pow (tmpvar_38.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_36 = (rgba_37.yyy * material_emissive);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_36);
  vec3 tmpvar_39;
  tmpvar_39 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_39, tmpvar_39))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^1985450833^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv1;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv1 = vertex_texCoord1;
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv1;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform sampler2D texture_lightMap;
uniform sampler2D topMap;
uniform vec3 leavesPos;
void main ()
{
  vec2 offsets_1[8];
  lowp vec3 shadow_2;
  float height_3;
  vec2 topUv_4;
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_5;
  tmpvar_5 = normalize((view_position - vPositionW));
  mat3 tmpvar_6;
  tmpvar_6[uint(0)] = normalize(vTangentW);
  tmpvar_6[1u] = normalize(vBinormalW);
  tmpvar_6[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_7;
  tmpvar_7 = ((texture (texture_normalMap, vUV0_1).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_6 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_7, material_bumpiness)));
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_5) * dNormalW)
  ) - tmpvar_5));
  lowp vec4 rgba_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_diffuseMap, vUV0_1);
  rgba_9.w = tmpvar_10.w;
  rgba_9.xyz = pow (tmpvar_10.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_11;
  tmpvar_11 = mix (vec3(0.04, 0.04, 0.04), rgba_9.xyz, material_metalness);
  dAlbedo = (rgba_9.xyz * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_12;
  lowp float tmpvar_13;
  tmpvar_13 = (1.0 - max (dot (dNormalW, tmpvar_5), 0.0));
  lowp float tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  fresnel_12 = (tmpvar_13 * (tmpvar_14 * tmpvar_14));
  fresnel_12 = (fresnel_12 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_11 + ((1.0 - tmpvar_11) * fresnel_12));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_aoMap, vUv1);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = (tmpvar_17 * tmpvar_17);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  lowp vec3 fixedReflDir_22;
  lowp int index2_23;
  lowp int index1_24;
  lowp float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  lowp vec3 vec_26;
  vec_26 = tmpvar_8;
  lowp float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  lowp float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_8.x), abs(tmpvar_8.y)), abs(tmpvar_8.z));
  lowp float tmpvar_29;
  tmpvar_29 = abs(tmpvar_8.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_8.x * tmpvar_27);
  };
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_8.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_8.y * tmpvar_27);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_8.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_8.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = (tmpvar_33 * tmpvar_33);
  tmpvar_34.w = material_reflectivity;
  dReflection = tmpvar_34;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_35)
    ), 0.0));
    vec4 projPos_42;
    vec4 tmpvar_43;
    tmpvar_43.w = 1.0;
    tmpvar_43.xyz = vPositionW;
    vec4 tmpvar_44;
    tmpvar_44 = (light0_shadowMatrix * tmpvar_43);
    projPos_42.zw = tmpvar_44.zw;
    projPos_42.xy = (tmpvar_44.xy / tmpvar_44.w);
    float Z_45;
    Z_45 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture (light0_shadowMap, projPos_42.xy);
    lowp vec3 tmpvar_47;
    tmpvar_47.z = 0.0;
    tmpvar_47.x = ((tmpvar_46.y * 0.003921569) + tmpvar_46.x);
    tmpvar_47.y = ((tmpvar_46.w * 0.003921569) + tmpvar_46.z);
    float tmpvar_48;
    tmpvar_48 = (light0_shadowParams.y * Z_45);
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x)), (tmpvar_48 * tmpvar_48));
    lowp float tmpvar_50;
    tmpvar_50 = (Z_45 - tmpvar_47.x);
    lowp float tmpvar_51;
    tmpvar_51 = clamp (((
      (tmpvar_49 / (tmpvar_49 + (tmpvar_50 * tmpvar_50)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_52;
    if ((Z_45 <= tmpvar_47.x)) {
      tmpvar_52 = 1.0;
    } else {
      tmpvar_52 = tmpvar_51;
    };
    dAtten = (dAtten * tmpvar_52);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_53;
    tmpvar_53 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_54;
    tmpvar_54 = max ((tmpvar_53 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_53 * (
        (1.0/(clamp (sqrt(dot (tmpvar_7, tmpvar_7)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_5)
      ), dNormalW), 0.0), tmpvar_54)
     * 
      (tmpvar_54 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dSpecularLight = (dSpecularLight * tmpvar_15.z);
  dReflection = (tmpvar_34 * tmpvar_15.z);
  vec3 tmpvar_55;
  tmpvar_55 = (vPositionW - leavesPos);
  vec2 tmpvar_56;
  tmpvar_56 = (((tmpvar_55.xz / vec2(16.0, -16.0)) * 0.5) + 0.5);
  topUv_4 = tmpvar_56;
  height_3 = 0.0;
  if ((((
    (tmpvar_55.x > -1.1)
   && 
    (tmpvar_55.x < 1.1)
  ) && (tmpvar_55.z > -1.1)) && (tmpvar_55.z < 1.1))) {
    height_3 = 1.0;
  };
  height_3 = ((height_3 / 4.0) + 0.01);
  shadow_2 = vec3(0.0, 0.0, 0.0);
  offsets_1[0] = vec2(-0.003196313, -0.00186043);
  offsets_1[1] = vec2(-0.002162161, -0.006022575);
  offsets_1[2] = vec2(-0.00398718, 0.002402105);
  offsets_1[3] = vec2(0.003552565, 0.00177002);
  offsets_1[4] = vec2(-0.0001136277, 0.005086533);
  offsets_1[5] = vec2(0.002264441, -0.003647392);
  offsets_1[6] = vec2(0.006564216, -0.002330364);
  offsets_1[7] = vec2(0.005495788, 0.005262966);
  if ((vNormalW.y > 0.0)) {
    for (highp int i_57 = 0; i_57 < 8; i_57++) {
      lowp vec4 tmpvar_58;
      tmpvar_58 = texture (topMap, (topUv_4 + offsets_1[i_57]));
      lowp float tmpvar_59;
      tmpvar_59 = tmpvar_58.w;
      lowp vec3 tmpvar_60;
      if ((height_3 < tmpvar_58.w)) {
        lowp vec3 tmpvar_61;
        tmpvar_61.xz = vec2(0.125, 1.0);
        tmpvar_61.y = tmpvar_59;
        tmpvar_60 = tmpvar_61;
      } else {
        tmpvar_60 = vec3(0.0, 0.0, 0.0);
      };
      shadow_2 = (shadow_2 + tmpvar_60);
    };
    shadow_2.x = (1.0 - (shadow_2.x * 0.3));
    shadow_2.y = (shadow_2.y / shadow_2.z);
    dDiffuseLight = (dDiffuseLight * mix (shadow_2.x, 1.0, clamp (shadow_2.y, 0.0, 1.0)));
    lowp vec4 tmpvar_62;
    tmpvar_62 = texture (topMap, tmpvar_56);
    dDiffuseLight = (dDiffuseLight * mix (1.0, (1.0 - 
      clamp (((tmpvar_62.x - tmpvar_62.y) * 4.0), 0.0, 1.0)
    ), clamp (vNormalW.y, 0.0, 1.0)));
  };
  lowp vec3 tmpvar_63;
  tmpvar_63 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_63;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_64;
  tmpvar_64 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_64, tmpvar_64))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^2001787720^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUV0_1).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUV0_1);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = (rgba_4.xyz * material_diffuse);
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), dAlbedo, material_metalness);
  dAlbedo = (dAlbedo * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  lowp vec3 fixedReflDir_10;
  lowp vec3 vec_11;
  vec_11 = dNormalW;
  lowp float tmpvar_12;
  tmpvar_12 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_13;
  tmpvar_13 = abs(dNormalW.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  dDiffuseLight = tmpvar_17;
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_3;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_36)
    ), 0.0));
    vec4 projPos_43;
    vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vPositionW;
    vec4 tmpvar_45;
    tmpvar_45 = (light0_shadowMatrix * tmpvar_44);
    projPos_43.zw = tmpvar_45.zw;
    projPos_43.xy = (tmpvar_45.xy / tmpvar_45.w);
    float Z_46;
    Z_46 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_47;
    tmpvar_47 = texture (light0_shadowMap, projPos_43.xy);
    lowp vec3 tmpvar_48;
    tmpvar_48.z = 0.0;
    tmpvar_48.x = ((tmpvar_47.y * 0.003921569) + tmpvar_47.x);
    tmpvar_48.y = ((tmpvar_47.w * 0.003921569) + tmpvar_47.z);
    float tmpvar_49;
    tmpvar_49 = (light0_shadowParams.y * Z_46);
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x)), (tmpvar_49 * tmpvar_49));
    lowp float tmpvar_51;
    tmpvar_51 = (Z_46 - tmpvar_48.x);
    lowp float tmpvar_52;
    tmpvar_52 = clamp (((
      (tmpvar_50 / (tmpvar_50 + (tmpvar_51 * tmpvar_51)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_53;
    if ((Z_46 <= tmpvar_48.x)) {
      tmpvar_53 = 1.0;
    } else {
      tmpvar_53 = tmpvar_52;
    };
    dAtten = (dAtten * tmpvar_53);
    dDiffuseLight = (tmpvar_17 + (dAtten * light0_color));
    lowp float tmpvar_54;
    tmpvar_54 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_54)
     * 
      (tmpvar_54 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  lowp vec3 tmpvar_55;
  tmpvar_55 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_35.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_55;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_56;
  tmpvar_56 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_56, tmpvar_56))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^2062117651^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
vec3 dLightDirW;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform vec3 light2_color;
uniform vec3 light2_position;
uniform float light2_radius;
uniform vec3 light2_direction;
uniform float light2_innerConeAngle;
uniform float light2_outerConeAngle;
uniform vec3 light3_color;
uniform vec3 light3_position;
uniform float light3_radius;
uniform vec3 light3_direction;
uniform float light3_innerConeAngle;
uniform float light3_outerConeAngle;
uniform mat4 light3_shadowMatrix;
uniform vec4 light3_shadowParams;
uniform sampler2D light3_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform lowp samplerCube texture_prefilteredCubeMap4;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  mat3 tmpvar_1;
  tmpvar_1[uint(0)] = normalize(vTangentW);
  tmpvar_1[1u] = normalize(vBinormalW);
  tmpvar_1[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_1 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 fixedReflDir_4;
  lowp vec3 vec_5;
  vec_5 = dNormalW;
  lowp float tmpvar_6;
  tmpvar_6 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_7;
  tmpvar_7 = abs(dNormalW.x);
  if ((tmpvar_7 != tmpvar_6)) {
    vec_5.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_8;
  tmpvar_8 = abs(dNormalW.y);
  if ((tmpvar_8 != tmpvar_6)) {
    vec_5.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_9;
  tmpvar_9 = abs(dNormalW.z);
  if ((tmpvar_9 != tmpvar_6)) {
    vec_5.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_4.yz = vec_5.yz;
  fixedReflDir_4.x = -(vec_5.x);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_prefilteredCubeMap4, fixedReflDir_4);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((8.0 * tmpvar_10.w) * tmpvar_10.xyz);
  dDiffuseLight = ((tmpvar_11 * tmpvar_11) * skyboxIntensity);
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(dLightDirW);
  lowp float tmpvar_13;
  tmpvar_13 = max (((light0_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light0_radius), 0.0);
  dAtten = tmpvar_13;
  if ((tmpvar_13 > 1e-05)) {
    float tmpvar_14;
    tmpvar_14 = clamp (((
      dot (tmpvar_12, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_13 * (tmpvar_14 * (tmpvar_14 * 
      (3.0 - (2.0 * tmpvar_14))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_12)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_15;
  tmpvar_15 = normalize(dLightDirW);
  lowp float tmpvar_16;
  tmpvar_16 = max (((light1_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light1_radius), 0.0);
  dAtten = tmpvar_16;
  if ((tmpvar_16 > 1e-05)) {
    float tmpvar_17;
    tmpvar_17 = clamp (((
      dot (tmpvar_15, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_16 * (tmpvar_17 * (tmpvar_17 * 
      (3.0 - (2.0 * tmpvar_17))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_15)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
  };
  dLightDirW = (vPositionW - light2_position);
  vec3 tmpvar_18;
  tmpvar_18 = normalize(dLightDirW);
  float falloff_19;
  float tmpvar_20;
  tmpvar_20 = dot (dLightDirW, dLightDirW);
  float tmpvar_21;
  tmpvar_21 = (1.0/(light2_radius));
  falloff_19 = ((1.0/((tmpvar_20 + 1.0))) * 16.0);
  float x_22;
  x_22 = (tmpvar_20 * (tmpvar_21 * tmpvar_21));
  float tmpvar_23;
  tmpvar_23 = clamp ((1.0 - (x_22 * x_22)), 0.0, 1.0);
  falloff_19 = (falloff_19 * (tmpvar_23 * tmpvar_23));
  dAtten = falloff_19;
  if ((falloff_19 > 1e-05)) {
    float tmpvar_24;
    tmpvar_24 = clamp (((
      dot (tmpvar_18, light2_direction)
     - light2_outerConeAngle) / (light2_innerConeAngle - light2_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_19 * (tmpvar_24 * (tmpvar_24 * 
      (3.0 - (2.0 * tmpvar_24))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_18)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light2_color));
  };
  dLightDirW = (vPositionW - light3_position);
  vec3 tmpvar_25;
  tmpvar_25 = normalize(dLightDirW);
  lowp float tmpvar_26;
  tmpvar_26 = max (((light3_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light3_radius), 0.0);
  dAtten = tmpvar_26;
  if ((tmpvar_26 > 1e-05)) {
    float tmpvar_27;
    tmpvar_27 = clamp (((
      dot (tmpvar_25, light3_direction)
     - light3_outerConeAngle) / (light3_innerConeAngle - light3_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_26 * (tmpvar_27 * (tmpvar_27 * 
      (3.0 - (2.0 * tmpvar_27))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_25)
    ), 0.0));
    vec4 projPos_28;
    vec4 tmpvar_29;
    tmpvar_29.w = 1.0;
    tmpvar_29.xyz = vPositionW;
    vec4 tmpvar_30;
    tmpvar_30 = (light3_shadowMatrix * tmpvar_29);
    projPos_28.zw = tmpvar_30.zw;
    projPos_28.xy = (tmpvar_30.xy / tmpvar_30.w);
    float Z_31;
    Z_31 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light3_shadowParams.w) + light3_shadowParams.z);
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture (light3_shadowMap, projPos_28.xy);
    lowp vec3 tmpvar_33;
    tmpvar_33.z = 0.0;
    tmpvar_33.x = ((tmpvar_32.y * 0.003921569) + tmpvar_32.x);
    tmpvar_33.y = ((tmpvar_32.w * 0.003921569) + tmpvar_32.z);
    float tmpvar_34;
    tmpvar_34 = (light3_shadowParams.y * Z_31);
    lowp float tmpvar_35;
    tmpvar_35 = max ((tmpvar_33.y - (tmpvar_33.x * tmpvar_33.x)), (tmpvar_34 * tmpvar_34));
    lowp float tmpvar_36;
    tmpvar_36 = (Z_31 - tmpvar_33.x);
    lowp float tmpvar_37;
    tmpvar_37 = clamp (((
      (tmpvar_35 / (tmpvar_35 + (tmpvar_36 * tmpvar_36)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_38;
    if ((Z_31 <= tmpvar_33.x)) {
      tmpvar_38 = 1.0;
    } else {
      tmpvar_38 = tmpvar_37;
    };
    dAtten = (dAtten * tmpvar_38);
    dDiffuseLight = (dDiffuseLight + (dAtten * light3_color));
  };
  lowp vec3 tmpvar_39;
  tmpvar_39 = (rgba_2.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_39;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_40;
  tmpvar_40 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_40, tmpvar_40))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^2087432384^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
vec3 dLightDirW;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform vec3 light2_color;
uniform vec3 light2_position;
uniform float light2_radius;
uniform vec3 light2_direction;
uniform float light2_innerConeAngle;
uniform float light2_outerConeAngle;
uniform mat4 light2_shadowMatrix;
uniform vec4 light2_shadowParams;
uniform sampler2D light2_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform lowp samplerCube texture_prefilteredCubeMap4;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  mat3 tmpvar_1;
  tmpvar_1[uint(0)] = normalize(vTangentW);
  tmpvar_1[1u] = normalize(vBinormalW);
  tmpvar_1[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_1 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 fixedReflDir_4;
  lowp vec3 vec_5;
  vec_5 = dNormalW;
  lowp float tmpvar_6;
  tmpvar_6 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_7;
  tmpvar_7 = abs(dNormalW.x);
  if ((tmpvar_7 != tmpvar_6)) {
    vec_5.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_8;
  tmpvar_8 = abs(dNormalW.y);
  if ((tmpvar_8 != tmpvar_6)) {
    vec_5.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_9;
  tmpvar_9 = abs(dNormalW.z);
  if ((tmpvar_9 != tmpvar_6)) {
    vec_5.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_4.yz = vec_5.yz;
  fixedReflDir_4.x = -(vec_5.x);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_prefilteredCubeMap4, fixedReflDir_4);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((8.0 * tmpvar_10.w) * tmpvar_10.xyz);
  dDiffuseLight = ((tmpvar_11 * tmpvar_11) * skyboxIntensity);
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_12;
  tmpvar_12 = normalize(dLightDirW);
  lowp float tmpvar_13;
  tmpvar_13 = max (((light0_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light0_radius), 0.0);
  dAtten = tmpvar_13;
  if ((tmpvar_13 > 1e-05)) {
    float tmpvar_14;
    tmpvar_14 = clamp (((
      dot (tmpvar_12, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_13 * (tmpvar_14 * (tmpvar_14 * 
      (3.0 - (2.0 * tmpvar_14))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_12)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_15;
  tmpvar_15 = normalize(dLightDirW);
  float falloff_16;
  float tmpvar_17;
  tmpvar_17 = dot (dLightDirW, dLightDirW);
  float tmpvar_18;
  tmpvar_18 = (1.0/(light1_radius));
  falloff_16 = ((1.0/((tmpvar_17 + 1.0))) * 16.0);
  float x_19;
  x_19 = (tmpvar_17 * (tmpvar_18 * tmpvar_18));
  float tmpvar_20;
  tmpvar_20 = clamp ((1.0 - (x_19 * x_19)), 0.0, 1.0);
  falloff_16 = (falloff_16 * (tmpvar_20 * tmpvar_20));
  dAtten = falloff_16;
  if ((falloff_16 > 1e-05)) {
    float tmpvar_21;
    tmpvar_21 = clamp (((
      dot (tmpvar_15, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_16 * (tmpvar_21 * (tmpvar_21 * 
      (3.0 - (2.0 * tmpvar_21))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_15)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
  };
  dLightDirW = (vPositionW - light2_position);
  vec3 tmpvar_22;
  tmpvar_22 = normalize(dLightDirW);
  lowp float tmpvar_23;
  tmpvar_23 = max (((light2_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light2_radius), 0.0);
  dAtten = tmpvar_23;
  if ((tmpvar_23 > 1e-05)) {
    float tmpvar_24;
    tmpvar_24 = clamp (((
      dot (tmpvar_22, light2_direction)
     - light2_outerConeAngle) / (light2_innerConeAngle - light2_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_23 * (tmpvar_24 * (tmpvar_24 * 
      (3.0 - (2.0 * tmpvar_24))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_22)
    ), 0.0));
    vec4 projPos_25;
    vec4 tmpvar_26;
    tmpvar_26.w = 1.0;
    tmpvar_26.xyz = vPositionW;
    vec4 tmpvar_27;
    tmpvar_27 = (light2_shadowMatrix * tmpvar_26);
    projPos_25.zw = tmpvar_27.zw;
    projPos_25.xy = (tmpvar_27.xy / tmpvar_27.w);
    float Z_28;
    Z_28 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light2_shadowParams.w) + light2_shadowParams.z);
    lowp vec4 tmpvar_29;
    tmpvar_29 = texture (light2_shadowMap, projPos_25.xy);
    lowp vec3 tmpvar_30;
    tmpvar_30.z = 0.0;
    tmpvar_30.x = ((tmpvar_29.y * 0.003921569) + tmpvar_29.x);
    tmpvar_30.y = ((tmpvar_29.w * 0.003921569) + tmpvar_29.z);
    float tmpvar_31;
    tmpvar_31 = (light2_shadowParams.y * Z_28);
    lowp float tmpvar_32;
    tmpvar_32 = max ((tmpvar_30.y - (tmpvar_30.x * tmpvar_30.x)), (tmpvar_31 * tmpvar_31));
    lowp float tmpvar_33;
    tmpvar_33 = (Z_28 - tmpvar_30.x);
    lowp float tmpvar_34;
    tmpvar_34 = clamp (((
      (tmpvar_32 / (tmpvar_32 + (tmpvar_33 * tmpvar_33)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_35;
    if ((Z_28 <= tmpvar_30.x)) {
      tmpvar_35 = 1.0;
    } else {
      tmpvar_35 = tmpvar_34;
    };
    dAtten = (dAtten * tmpvar_35);
    dDiffuseLight = (dDiffuseLight + (dAtten * light2_color));
  };
  lowp vec3 tmpvar_36;
  tmpvar_36 = (rgba_2.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_36;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_37;
  tmpvar_37 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_37, tmpvar_37))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^ptest1^VS^#version 300 es
in vec2 vertex_position;
out vec2 vUv0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.zw = vec2(0.5, 1.0);
  tmpvar_1.xy = vertex_position;
  gl_Position = tmpvar_1;
  vUv0 = ((vertex_position * 0.5) + 0.5);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
void main ()
{
  pc_fragColor = vec4(2.147484e+09, 2.147484e+09, 2.147484e+09, 2.147484e+09);
}

^AT^vertex_position,POSITION,^SH^ptest2^VS^#version 300 es
in vec2 vertex_position;
out vec2 vUv0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.zw = vec2(0.5, 1.0);
  tmpvar_1.xy = vertex_position;
  gl_Position = tmpvar_1;
  vUv0 = ((vertex_position * 0.5) + 0.5);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
uniform sampler2D source;
void main ()
{
  highp vec4 tmpvar_1;
  lowp vec4 res_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = ((vec4(mod ((vec4(4.27819e+09, 1.671168e+07, 65280.0, 255.0) * 
    (abs((texture (source, vec2(0.0, 0.0)).x - 2.147484e+09)) / 2.147484e+09)
  ), vec4(256.0, 256.0, 256.0, 256.0)))) / vec4(255.0, 255.0, 255.0, 255.0));
  res_2 = (tmpvar_3 - (tmpvar_3.xxyz * vec4(0.0, 0.00390625, 0.00390625, 0.00390625)));
  tmpvar_1 = res_2;
  pc_fragColor = tmpvar_1;
}

^AT^vertex_position,POSITION,^SH^depth^VS^attribute vec3 vertex_position;
uniform mat4 matrix_model;
uniform mat4 matrix_viewProjection;
vec3 dPositionW;
mat4 dModelMatrix;
mat4 getModelMatrix() {
    return matrix_model;
}
vec4 getPosition() {
    dModelMatrix = getModelMatrix();
    vec4 posW = dModelMatrix * vec4(vertex_position, 1.0);
    dPositionW = posW.xyz;
    return matrix_viewProjection * posW;
}
vec3 getWorldPosition() {
    return dPositionW;
}
varying float vDepth;
uniform mat4 matrix_view;
uniform float camera_far;

void main(void)
{
   gl_Position = getPosition();
    vDepth = -(matrix_view * vec4(getWorldPosition(),1.0)).z / camera_far;
}
^PS^precision highp float;

varying float vDepth;

vec4 packFloat(float depth)
{
    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);
    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);
    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);
    res -= res.xxyz * bit_mask;
    return res;
}

void main(void)
{
float depth = vDepth;
gl_FragColor = packFloat(depth);
}
^AT^vertex_position,POSITION,^SH^depth_skin^VS^attribute vec3 vertex_position;
uniform mat4 matrix_model;
uniform mat4 matrix_viewProjection;
vec3 dPositionW;
mat4 dModelMatrix;
attribute5 vec4 vertex_boneWeights;
attribute6 vec4 vertex_boneIndices;
uniform sampler2D texture_poseMap;
uniform vec2 texture_poseMapSize;
uniform vec3 skinPosOffset;
mat4 getBoneMatrix(const in float i)
{
    float j = i * 4.0;
    float x = mod(j, float(texture_poseMapSize.x));
    float y = floor(j / float(texture_poseMapSize.x));
    float dx = 1.0 / float(texture_poseMapSize.x);
    float dy = 1.0 / float(texture_poseMapSize.y);
    y = dy * (y + 0.5);
    vec4 v1 = texture2D(texture_poseMap, vec2(dx * (x + 0.5), y));
    vec4 v2 = texture2D(texture_poseMap, vec2(dx * (x + 1.5), y));
    vec4 v3 = texture2D(texture_poseMap, vec2(dx * (x + 2.5), y));
    vec4 v4 = texture2D(texture_poseMap, vec2(dx * (x + 3.5), y));
    mat4 bone = mat4(v1, v2, v3, v4);
    return bone;
}
mat4 getModelMatrix() {
    return getBoneMatrix(vertex_boneIndices.x) * vertex_boneWeights.x +
           getBoneMatrix(vertex_boneIndices.y) * vertex_boneWeights.y +
           getBoneMatrix(vertex_boneIndices.z) * vertex_boneWeights.z +
           getBoneMatrix(vertex_boneIndices.w) * vertex_boneWeights.w;
}
vec4 getPosition() {
    dModelMatrix = getModelMatrix();
    vec4 posW = dModelMatrix * vec4(vertex_position, 1.0);
    //posW.xyz /= posW.w;
    posW.xyz += skinPosOffset;
    dPositionW = posW.xyz;// / posW.w;
    return matrix_viewProjection * posW;
}
vec3 getWorldPosition() {
    return dPositionW;
}
varying float vDepth;
uniform mat4 matrix_view;
uniform float camera_far;

void main(void)
{
   gl_Position = getPosition();
    vDepth = -(matrix_view * vec4(getWorldPosition(),1.0)).z / camera_far;
}
^PS^precision highp float;

varying float vDepth;

vec4 packFloat(float depth)
{
    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);
    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);
    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);
    res -= res.xxyz * bit_mask;
    return res;
}

void main(void)
{
float depth = vDepth;
gl_FragColor = packFloat(depth);
}
^AT^vertex_position,POSITION,vertex_boneWeights,BLENDWEIGHT,vertex_boneIndices,BLENDINDICES,^SH^depth_opam^VS^attribute vec3 vertex_position;
uniform mat4 matrix_model;
uniform mat4 matrix_viewProjection;
vec3 dPositionW;
mat4 dModelMatrix;
mat4 getModelMatrix() {
    return matrix_model;
}
vec4 getPosition() {
    dModelMatrix = getModelMatrix();
    vec4 posW = dModelMatrix * vec4(vertex_position, 1.0);
    dPositionW = posW.xyz;
    return matrix_viewProjection * posW;
}
vec3 getWorldPosition() {
    return dPositionW;
}
attribute vec2 vertex_texCoord0;

varying vec2 vUv0;

varying float vDepth;
uniform mat4 matrix_view;
uniform float camera_far;

void main(void)
{
   gl_Position = getPosition();
    vUv0 = vertex_texCoord0;
    vDepth = -(matrix_view * vec4(getWorldPosition(),1.0)).z / camera_far;
}
^PS^precision highp float;

varying vec2 vUv0;

uniform sampler2D texture_opacityMap;

uniform float alpha_ref;
void alphaTest(float a) {
    if (a < alpha_ref) discard;
}
varying float vDepth;

vec4 packFloat(float depth)
{
    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);
    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);
    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);
    res -= res.xxyz * bit_mask;
    return res;
}

void main(void)
{
    alphaTest(texture2D(texture_opacityMap, vUv0).r );

float depth = vDepth;
gl_FragColor = packFloat(depth);
}
^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,^SH^depth_skin_opam^VS^attribute vec3 vertex_position;
uniform mat4 matrix_model;
uniform mat4 matrix_viewProjection;
vec3 dPositionW;
mat4 dModelMatrix;
attribute5 vec4 vertex_boneWeights;
attribute6 vec4 vertex_boneIndices;
uniform sampler2D texture_poseMap;
uniform vec2 texture_poseMapSize;
uniform vec3 skinPosOffset;
mat4 getBoneMatrix(const in float i)
{
    float j = i * 4.0;
    float x = mod(j, float(texture_poseMapSize.x));
    float y = floor(j / float(texture_poseMapSize.x));
    float dx = 1.0 / float(texture_poseMapSize.x);
    float dy = 1.0 / float(texture_poseMapSize.y);
    y = dy * (y + 0.5);
    vec4 v1 = texture2D(texture_poseMap, vec2(dx * (x + 0.5), y));
    vec4 v2 = texture2D(texture_poseMap, vec2(dx * (x + 1.5), y));
    vec4 v3 = texture2D(texture_poseMap, vec2(dx * (x + 2.5), y));
    vec4 v4 = texture2D(texture_poseMap, vec2(dx * (x + 3.5), y));
    mat4 bone = mat4(v1, v2, v3, v4);
    return bone;
}
mat4 getModelMatrix() {
    return getBoneMatrix(vertex_boneIndices.x) * vertex_boneWeights.x +
           getBoneMatrix(vertex_boneIndices.y) * vertex_boneWeights.y +
           getBoneMatrix(vertex_boneIndices.z) * vertex_boneWeights.z +
           getBoneMatrix(vertex_boneIndices.w) * vertex_boneWeights.w;
}
vec4 getPosition() {
    dModelMatrix = getModelMatrix();
    vec4 posW = dModelMatrix * vec4(vertex_position, 1.0);
    //posW.xyz /= posW.w;
    posW.xyz += skinPosOffset;
    dPositionW = posW.xyz;// / posW.w;
    return matrix_viewProjection * posW;
}
vec3 getWorldPosition() {
    return dPositionW;
}
attribute vec2 vertex_texCoord0;

varying vec2 vUv0;

varying float vDepth;
uniform mat4 matrix_view;
uniform float camera_far;

void main(void)
{
   gl_Position = getPosition();
    vUv0 = vertex_texCoord0;
    vDepth = -(matrix_view * vec4(getWorldPosition(),1.0)).z / camera_far;
}
^PS^precision highp float;

varying vec2 vUv0;

uniform sampler2D texture_opacityMap;

uniform float alpha_ref;
void alphaTest(float a) {
    if (a < alpha_ref) discard;
}
varying float vDepth;

vec4 packFloat(float depth)
{
    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);
    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);
    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);
    res -= res.xxyz * bit_mask;
    return res;
}

void main(void)
{
    alphaTest(texture2D(texture_opacityMap, vUv0).r );

float depth = vDepth;
gl_FragColor = packFloat(depth);
}
^AT^vertex_position,POSITION,vertex_boneWeights,BLENDWEIGHT,vertex_boneIndices,BLENDINDICES,vertex_texCoord0,TEXCOORD0,^SH^skySample^VS^#version 300 es
in vec3 vertex_position;
uniform mat4 matrix_view;
uniform mat4 matrix_projection;
out vec3 vViewDir;
void main ()
{
  mat4 view_1;
  view_1 = matrix_view;
  vec4 tmpvar_2;
  tmpvar_2.xyw = matrix_view[3].xyw;
  tmpvar_2.z = 0.0;
  view_1[3] = tmpvar_2;
  vec4 tmpvar_3;
  tmpvar_3.xzw = view_1[3].xzw;
  tmpvar_3.y = tmpvar_2.z;
  view_1[3] = tmpvar_3;
  vec4 tmpvar_4;
  tmpvar_4.yzw = view_1[3].yzw;
  tmpvar_4.x = tmpvar_3.y;
  view_1[3] = tmpvar_4;
  vec4 tmpvar_5;
  tmpvar_5.w = 1.0;
  tmpvar_5.xyz = vertex_position;
  gl_Position = ((matrix_projection * view_1) * tmpvar_5);
  gl_Position.z = (gl_Position.w - 5e-06);
  vViewDir.y = vertex_position.y;
  mat2 tmpvar_6;
  tmpvar_6[uint(0)].x = 0.921061;
  tmpvar_6[uint(0)].y = -0.3894183;
  tmpvar_6[1u].x = 0.3894183;
  tmpvar_6[1u].y = 0.921061;
  vViewDir.xz = (tmpvar_6 * vertex_position.xz);
}

^PS^#version 300 es
precision highp sampler3D;
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vViewDir;
uniform sampler2D skyTex1;
uniform sampler2D skyTex2;
uniform float skyBlend;
uniform float globalTime;
void main ()
{
  float morphMoveLength_1;
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vViewDir);
  float tmpvar_3;
  tmpvar_3 = clamp (tmpvar_2.y, 0.0, 1.0);
  morphMoveLength_1 = (mix (2.0, 0.9, tmpvar_3) * 0.0140625);
  vec3 p_4;
  float t_5;
  t_5 = (globalTime * 0.1);
  p_4 = (tmpvar_2 * 0.25);
  vec3 tmpvar_6;
  tmpvar_6 = floor(p_4);
  vec3 p_7;
  p_7 = (tmpvar_6 + vec3(1.0, 0.0, 0.0));
  vec3 tmpvar_8;
  tmpvar_8 = fract((p_7 * vec3(0.16532, 0.17369, 0.15787)));
  p_7 = (tmpvar_8 + dot (tmpvar_8, (tmpvar_8.yzx + 19.19)));
  vec3 p_9;
  p_9 = (tmpvar_6 + vec3(0.0, 1.0, 0.0));
  vec3 tmpvar_10;
  tmpvar_10 = fract((p_9 * vec3(0.16532, 0.17369, 0.15787)));
  p_9 = (tmpvar_10 + dot (tmpvar_10, (tmpvar_10.yzx + 19.19)));
  vec3 p_11;
  p_11 = (tmpvar_6 + vec3(1.0, 1.0, 0.0));
  vec3 tmpvar_12;
  tmpvar_12 = fract((p_11 * vec3(0.16532, 0.17369, 0.15787)));
  p_11 = (tmpvar_12 + dot (tmpvar_12, (tmpvar_12.yzx + 19.19)));
  vec3 p_13;
  p_13 = (tmpvar_6 + vec3(0.0, 0.0, 1.0));
  vec3 tmpvar_14;
  tmpvar_14 = fract((p_13 * vec3(0.16532, 0.17369, 0.15787)));
  p_13 = (tmpvar_14 + dot (tmpvar_14, (tmpvar_14.yzx + 19.19)));
  vec3 p_15;
  p_15 = (tmpvar_6 + vec3(1.0, 0.0, 1.0));
  vec3 tmpvar_16;
  tmpvar_16 = fract((p_15 * vec3(0.16532, 0.17369, 0.15787)));
  p_15 = (tmpvar_16 + dot (tmpvar_16, (tmpvar_16.yzx + 19.19)));
  vec3 p_17;
  p_17 = (tmpvar_6 + vec3(0.0, 1.0, 1.0));
  vec3 tmpvar_18;
  tmpvar_18 = fract((p_17 * vec3(0.16532, 0.17369, 0.15787)));
  p_17 = (tmpvar_18 + dot (tmpvar_18, (tmpvar_18.yzx + 19.19)));
  vec3 p_19;
  p_19 = (tmpvar_6 + vec3(1.0, 1.0, 1.0));
  vec3 tmpvar_20;
  tmpvar_20 = fract((p_19 * vec3(0.16532, 0.17369, 0.15787)));
  p_19 = (tmpvar_20 + dot (tmpvar_20, (tmpvar_20.yzx + 19.19)));
  p_4 = (p_4 * 3.02);
  p_4.yz = (p_4.yz - (vec2(t_5) * vec2(0.2, 0.2)));
  vec3 tmpvar_21;
  tmpvar_21 = floor(p_4);
  vec3 p_22;
  p_22 = (tmpvar_21 + vec3(1.0, 0.0, 0.0));
  vec3 tmpvar_23;
  tmpvar_23 = fract((p_22 * vec3(0.16532, 0.17369, 0.15787)));
  p_22 = (tmpvar_23 + dot (tmpvar_23, (tmpvar_23.yzx + 19.19)));
  vec3 p_24;
  p_24 = (tmpvar_21 + vec3(0.0, 1.0, 0.0));
  vec3 tmpvar_25;
  tmpvar_25 = fract((p_24 * vec3(0.16532, 0.17369, 0.15787)));
  p_24 = (tmpvar_25 + dot (tmpvar_25, (tmpvar_25.yzx + 19.19)));
  vec3 p_26;
  p_26 = (tmpvar_21 + vec3(1.0, 1.0, 0.0));
  vec3 tmpvar_27;
  tmpvar_27 = fract((p_26 * vec3(0.16532, 0.17369, 0.15787)));
  p_26 = (tmpvar_27 + dot (tmpvar_27, (tmpvar_27.yzx + 19.19)));
  vec3 p_28;
  p_28 = (tmpvar_21 + vec3(0.0, 0.0, 1.0));
  vec3 tmpvar_29;
  tmpvar_29 = fract((p_28 * vec3(0.16532, 0.17369, 0.15787)));
  p_28 = (tmpvar_29 + dot (tmpvar_29, (tmpvar_29.yzx + 19.19)));
  vec3 p_30;
  p_30 = (tmpvar_21 + vec3(1.0, 0.0, 1.0));
  vec3 tmpvar_31;
  tmpvar_31 = fract((p_30 * vec3(0.16532, 0.17369, 0.15787)));
  p_30 = (tmpvar_31 + dot (tmpvar_31, (tmpvar_31.yzx + 19.19)));
  vec3 p_32;
  p_32 = (tmpvar_21 + vec3(0.0, 1.0, 1.0));
  vec3 tmpvar_33;
  tmpvar_33 = fract((p_32 * vec3(0.16532, 0.17369, 0.15787)));
  p_32 = (tmpvar_33 + dot (tmpvar_33, (tmpvar_33.yzx + 19.19)));
  vec3 p_34;
  p_34 = (tmpvar_21 + vec3(1.0, 1.0, 1.0));
  vec3 tmpvar_35;
  tmpvar_35 = fract((p_34 * vec3(0.16532, 0.17369, 0.15787)));
  p_34 = (tmpvar_35 + dot (tmpvar_35, (tmpvar_35.yzx + 19.19)));
  p_4 = (p_4 * 3.03);
  p_4.yz = (p_4.yz + (vec2(t_5) * vec2(0.06, 0.06)));
  vec3 tmpvar_36;
  tmpvar_36 = floor(p_4);
  vec3 p_37;
  p_37 = (tmpvar_36 + vec3(1.0, 0.0, 0.0));
  vec3 tmpvar_38;
  tmpvar_38 = fract((p_37 * vec3(0.16532, 0.17369, 0.15787)));
  p_37 = (tmpvar_38 + dot (tmpvar_38, (tmpvar_38.yzx + 19.19)));
  vec3 p_39;
  p_39 = (tmpvar_36 + vec3(0.0, 1.0, 0.0));
  vec3 tmpvar_40;
  tmpvar_40 = fract((p_39 * vec3(0.16532, 0.17369, 0.15787)));
  p_39 = (tmpvar_40 + dot (tmpvar_40, (tmpvar_40.yzx + 19.19)));
  vec3 p_41;
  p_41 = (tmpvar_36 + vec3(1.0, 1.0, 0.0));
  vec3 tmpvar_42;
  tmpvar_42 = fract((p_41 * vec3(0.16532, 0.17369, 0.15787)));
  p_41 = (tmpvar_42 + dot (tmpvar_42, (tmpvar_42.yzx + 19.19)));
  vec3 p_43;
  p_43 = (tmpvar_36 + vec3(0.0, 0.0, 1.0));
  vec3 tmpvar_44;
  tmpvar_44 = fract((p_43 * vec3(0.16532, 0.17369, 0.15787)));
  p_43 = (tmpvar_44 + dot (tmpvar_44, (tmpvar_44.yzx + 19.19)));
  vec3 p_45;
  p_45 = (tmpvar_36 + vec3(1.0, 0.0, 1.0));
  vec3 tmpvar_46;
  tmpvar_46 = fract((p_45 * vec3(0.16532, 0.17369, 0.15787)));
  p_45 = (tmpvar_46 + dot (tmpvar_46, (tmpvar_46.yzx + 19.19)));
  vec3 p_47;
  p_47 = (tmpvar_36 + vec3(0.0, 1.0, 1.0));
  vec3 tmpvar_48;
  tmpvar_48 = fract((p_47 * vec3(0.16532, 0.17369, 0.15787)));
  p_47 = (tmpvar_48 + dot (tmpvar_48, (tmpvar_48.yzx + 19.19)));
  vec3 p_49;
  p_49 = (tmpvar_36 + vec3(1.0, 1.0, 1.0));
  vec3 tmpvar_50;
  tmpvar_50 = fract((p_49 * vec3(0.16532, 0.17369, 0.15787)));
  p_49 = (tmpvar_50 + dot (tmpvar_50, (tmpvar_50.yzx + 19.19)));
  p_4 = (p_4 * 3.01);
  vec3 tmpvar_51;
  tmpvar_51 = floor(p_4);
  vec3 p_52;
  p_52 = (tmpvar_51 + vec3(1.0, 0.0, 0.0));
  vec3 tmpvar_53;
  tmpvar_53 = fract((p_52 * vec3(0.16532, 0.17369, 0.15787)));
  p_52 = (tmpvar_53 + dot (tmpvar_53, (tmpvar_53.yzx + 19.19)));
  vec3 p_54;
  p_54 = (tmpvar_51 + vec3(0.0, 1.0, 0.0));
  vec3 tmpvar_55;
  tmpvar_55 = fract((p_54 * vec3(0.16532, 0.17369, 0.15787)));
  p_54 = (tmpvar_55 + dot (tmpvar_55, (tmpvar_55.yzx + 19.19)));
  vec3 p_56;
  p_56 = (tmpvar_51 + vec3(1.0, 1.0, 0.0));
  vec3 tmpvar_57;
  tmpvar_57 = fract((p_56 * vec3(0.16532, 0.17369, 0.15787)));
  p_56 = (tmpvar_57 + dot (tmpvar_57, (tmpvar_57.yzx + 19.19)));
  vec3 p_58;
  p_58 = (tmpvar_51 + vec3(0.0, 0.0, 1.0));
  vec3 tmpvar_59;
  tmpvar_59 = fract((p_58 * vec3(0.16532, 0.17369, 0.15787)));
  p_58 = (tmpvar_59 + dot (tmpvar_59, (tmpvar_59.yzx + 19.19)));
  vec3 p_60;
  p_60 = (tmpvar_51 + vec3(1.0, 0.0, 1.0));
  vec3 tmpvar_61;
  tmpvar_61 = fract((p_60 * vec3(0.16532, 0.17369, 0.15787)));
  p_60 = (tmpvar_61 + dot (tmpvar_61, (tmpvar_61.yzx + 19.19)));
  vec3 p_62;
  p_62 = (tmpvar_51 + vec3(0.0, 1.0, 1.0));
  vec3 tmpvar_63;
  tmpvar_63 = fract((p_62 * vec3(0.16532, 0.17369, 0.15787)));
  p_62 = (tmpvar_63 + dot (tmpvar_63, (tmpvar_63.yzx + 19.19)));
  vec3 p_64;
  p_64 = (tmpvar_51 + vec3(1.0, 1.0, 1.0));
  vec3 tmpvar_65;
  tmpvar_65 = fract((p_64 * vec3(0.16532, 0.17369, 0.15787)));
  p_64 = (tmpvar_65 + dot (tmpvar_65, (tmpvar_65.yzx + 19.19)));
  p_4 = (p_4 * 3.03);
  vec3 tmpvar_66;
  tmpvar_66 = floor(p_4);
  vec3 p_67;
  p_67 = (tmpvar_66 + vec3(1.0, 0.0, 0.0));
  vec3 tmpvar_68;
  tmpvar_68 = fract((p_67 * vec3(0.16532, 0.17369, 0.15787)));
  p_67 = (tmpvar_68 + dot (tmpvar_68, (tmpvar_68.yzx + 19.19)));
  vec3 p_69;
  p_69 = (tmpvar_66 + vec3(0.0, 1.0, 0.0));
  vec3 tmpvar_70;
  tmpvar_70 = fract((p_69 * vec3(0.16532, 0.17369, 0.15787)));
  p_69 = (tmpvar_70 + dot (tmpvar_70, (tmpvar_70.yzx + 19.19)));
  vec3 p_71;
  p_71 = (tmpvar_66 + vec3(1.0, 1.0, 0.0));
  vec3 tmpvar_72;
  tmpvar_72 = fract((p_71 * vec3(0.16532, 0.17369, 0.15787)));
  p_71 = (tmpvar_72 + dot (tmpvar_72, (tmpvar_72.yzx + 19.19)));
  vec3 p_73;
  p_73 = (tmpvar_66 + vec3(0.0, 0.0, 1.0));
  vec3 tmpvar_74;
  tmpvar_74 = fract((p_73 * vec3(0.16532, 0.17369, 0.15787)));
  p_73 = (tmpvar_74 + dot (tmpvar_74, (tmpvar_74.yzx + 19.19)));
  vec3 p_75;
  p_75 = (tmpvar_66 + vec3(1.0, 0.0, 1.0));
  vec3 tmpvar_76;
  tmpvar_76 = fract((p_75 * vec3(0.16532, 0.17369, 0.15787)));
  p_75 = (tmpvar_76 + dot (tmpvar_76, (tmpvar_76.yzx + 19.19)));
  vec3 p_77;
  p_77 = (tmpvar_66 + vec3(0.0, 1.0, 1.0));
  vec3 tmpvar_78;
  tmpvar_78 = fract((p_77 * vec3(0.16532, 0.17369, 0.15787)));
  p_77 = (tmpvar_78 + dot (tmpvar_78, (tmpvar_78.yzx + 19.19)));
  vec3 p_79;
  p_79 = (tmpvar_66 + vec3(1.0, 1.0, 1.0));
  vec3 tmpvar_80;
  tmpvar_80 = fract((p_79 * vec3(0.16532, 0.17369, 0.15787)));
  p_79 = (tmpvar_80 + dot (tmpvar_80, (tmpvar_80.yzx + 19.19)));
  p_4 = (p_4 * 3.02);
  vec3 tmpvar_81;
  tmpvar_81 = floor(p_4);
  vec3 p_82;
  p_82 = (tmpvar_81 + vec3(1.0, 0.0, 0.0));
  vec3 tmpvar_83;
  tmpvar_83 = fract((p_82 * vec3(0.16532, 0.17369, 0.15787)));
  p_82 = (tmpvar_83 + dot (tmpvar_83, (tmpvar_83.yzx + 19.19)));
  vec3 p_84;
  p_84 = (tmpvar_81 + vec3(0.0, 1.0, 0.0));
  vec3 tmpvar_85;
  tmpvar_85 = fract((p_84 * vec3(0.16532, 0.17369, 0.15787)));
  p_84 = (tmpvar_85 + dot (tmpvar_85, (tmpvar_85.yzx + 19.19)));
  vec3 p_86;
  p_86 = (tmpvar_81 + vec3(1.0, 1.0, 0.0));
  vec3 tmpvar_87;
  tmpvar_87 = fract((p_86 * vec3(0.16532, 0.17369, 0.15787)));
  p_86 = (tmpvar_87 + dot (tmpvar_87, (tmpvar_87.yzx + 19.19)));
  vec3 p_88;
  p_88 = (tmpvar_81 + vec3(0.0, 0.0, 1.0));
  vec3 tmpvar_89;
  tmpvar_89 = fract((p_88 * vec3(0.16532, 0.17369, 0.15787)));
  p_88 = (tmpvar_89 + dot (tmpvar_89, (tmpvar_89.yzx + 19.19)));
  vec3 p_90;
  p_90 = (tmpvar_81 + vec3(1.0, 0.0, 1.0));
  vec3 tmpvar_91;
  tmpvar_91 = fract((p_90 * vec3(0.16532, 0.17369, 0.15787)));
  p_90 = (tmpvar_91 + dot (tmpvar_91, (tmpvar_91.yzx + 19.19)));
  vec3 p_92;
  p_92 = (tmpvar_81 + vec3(0.0, 1.0, 1.0));
  vec3 tmpvar_93;
  tmpvar_93 = fract((p_92 * vec3(0.16532, 0.17369, 0.15787)));
  p_92 = (tmpvar_93 + dot (tmpvar_93, (tmpvar_93.yzx + 19.19)));
  vec3 p_94;
  p_94 = (tmpvar_81 + vec3(1.0, 1.0, 1.0));
  vec3 tmpvar_95;
  tmpvar_95 = fract((p_94 * vec3(0.16532, 0.17369, 0.15787)));
  p_94 = (tmpvar_95 + dot (tmpvar_95, (tmpvar_95.yzx + 19.19)));
  vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_2 + ((
    (vec3(1.0, 0.0, 1.0) * -(skyBlend))
   * morphMoveLength_1) * tmpvar_3));
  vec2 tmpvar_97;
  tmpvar_97 = (tmpvar_96.xz / dot (vec3(1.0, 1.0, 1.0), abs(tmpvar_96)));
  vec2 tmpvar_98;
  tmpvar_98.x = (tmpvar_97.x - tmpvar_97.y);
  tmpvar_98.y = (tmpvar_97.x + tmpvar_97.y);
  vec3 tmpvar_99;
  tmpvar_99 = (tmpvar_2 + ((
    (vec3(1.0, 0.0, 1.0) * (1.0 - skyBlend))
   * morphMoveLength_1) * tmpvar_3));
  vec2 tmpvar_100;
  tmpvar_100 = (tmpvar_99.xz / dot (vec3(1.0, 1.0, 1.0), abs(tmpvar_99)));
  vec2 tmpvar_101;
  tmpvar_101.x = (tmpvar_100.x - tmpvar_100.y);
  tmpvar_101.y = (tmpvar_100.x + tmpvar_100.y);
  lowp vec4 tmpvar_102;
  tmpvar_102 = texture (skyTex1, ((tmpvar_98 * 0.5) + vec2(0.5, 0.5)));
  lowp vec3 tmpvar_103;
  tmpvar_103 = ((8.0 * tmpvar_102.w) * tmpvar_102.xyz);
  lowp vec4 tmpvar_104;
  tmpvar_104 = texture (skyTex2, ((tmpvar_101 * 0.5) + vec2(0.5, 0.5)));
  lowp vec3 tmpvar_105;
  tmpvar_105 = ((8.0 * tmpvar_104.w) * tmpvar_104.xyz);
  lowp vec3 tmpvar_106;
  tmpvar_106 = mix ((tmpvar_103 * tmpvar_103), (tmpvar_105 * tmpvar_105), skyBlend);
  highp vec4 tmpvar_107;
  tmpvar_107.w = 1.0;
  tmpvar_107.xyz = tmpvar_106;
  pc_fragColor = tmpvar_107;
}

^AT^vertex_position,POSITION,^SH^lutConvert^VS^#version 300 es
in vec2 vertex_position;
out vec2 vUv0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.zw = vec2(0.5, 1.0);
  tmpvar_1.xy = vertex_position;
  gl_Position = tmpvar_1;
  vUv0 = ((vertex_position * 0.5) + 0.5);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec2 vUv0;
uniform sampler2D skyLutTex;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (skyLutTex, vUv0);
  pc_fragColor = tmpvar_1;
}

^AT^vertex_position,POSITION,^SH^skyboxtrue true true11true0^VS^attribute vec3 aPosition;
uniform mat4 matrix_view;
uniform mat4 matrix_projection;
varying vec3 vViewDir;
void main(void)
{
    mat4 view = matrix_view;
    view[3][0] = view[3][1] = view[3][2] = 0.0;
    gl_Position = matrix_projection * view * vec4(aPosition, 1.0);
    // Force skybox to far Z, regardless of the clip planes on the camera
    // Subtract a tiny fudge factor to ensure floating point errors don't
    // still push pixels beyond far Z. See:
    // http://www.opengl.org/discussion_boards/showthread.php/171867-skybox-problem
    gl_Position.z = gl_Position.w - 0.00001;
    vViewDir = aPosition;
    vViewDir.x *= -1.0;
}
^PS^precision highp float;

vec3 fixSeams(vec3 vec, float mipmapIndex) {
    return vec;
}
vec3 fixSeams(vec3 vec) {
    return vec;
}
vec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {
    return vec;
}

//#ifdef GL2
//#define skyboxIntensity uniformScene.fogColor_skyInt.w
//#else
uniform float skyboxIntensity;
//#endif
vec3 processEnvironment(vec3 color) {
    return color * skyboxIntensity;
}
vec3 gammaCorrectInput(vec3 color) {
    return pow(color, vec3(2.2));
}
float gammaCorrectInput(float color) {
    return pow(color, 2.2);
}
vec4 gammaCorrectInput(vec4 color) {
    return vec4(pow(color.rgb, vec3(2.2)), color.a);
}
vec4 texture2DSRGB(sampler2D tex, vec2 uv) {
    vec4 rgba = texture2D(tex, uv);
    rgba.rgb = gammaCorrectInput(rgba.rgb);
    return rgba;
}
vec4 textureCubeSRGB(samplerCube tex, vec3 uvw) {
    vec4 rgba = textureCube(tex, uvw);
    rgba.rgb = gammaCorrectInput(rgba.rgb);
    return rgba;
}
vec3 gammaCorrectOutput(vec3 color) {
    color += vec3(0.0000001);
    return pow(color, vec3(0.45));
}
const float A =  0.15;
const float B =  0.50;
const float C =  0.10;
const float D =  0.20;
const float E =  0.02;
const float F =  0.30;
const float W =  11.2;
uniform float exposure;
vec3 uncharted2Tonemap(vec3 x) {
   return ((x*(A*x+C*B)+D*E)/(x*(A*x+B)+D*F))-E/F;
}
vec3 toneMap(vec3 color) {
    color = uncharted2Tonemap(color * exposure);
    vec3 whiteScale = 1.0 / uncharted2Tonemap(vec3(W,W,W));
    color = color * whiteScale;
    return color;
}
vec3 decodeRGBM(vec4 rgbm) {
    vec3 color = (8.0 * rgbm.a) * rgbm.rgb;
    return color * color;
}
vec3 texture2DRGBM(sampler2D tex, vec2 uv) {
    return decodeRGBM(texture2D(tex, uv));
}
vec3 textureCubeRGBM(samplerCube tex, vec3 uvw) {
    return decodeRGBM(textureCube(tex, uvw));
}
varying vec3 vViewDir;
uniform samplerCube texture_cubeMap;
void main(void) {
    vec3 color = processEnvironment(textureCubeRGBM(texture_cubeMap, fixSeamsStatic(vViewDir, 0.9921875)).rgb);
    color = toneMap(color);
    color = gammaCorrectOutput(color);
    gl_FragColor = vec4(color, 1.0);
}
^AT^aPosition,POSITION,^SH^leavesShadowedVSM^VS^#version 300 es
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=3) in vec2 vertex_texCoord1;
out lowp vec4 vUv;
out lowp vec3 vPositionW;
out lowp vec3 vPositionL;
out lowp vec3 vNormalW;
out vec4 vRotation;
out lowp float vHeight;
out lowp vec2 vAnimUv;
uniform float globalTime;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform sampler2D sceneHeightmap;
void main ()
{
  lowp vec3 localNormalFront_1;
  lowp vec3 localPosFront_2;
  lowp vec3 localPos_3;
  lowp vec3 quadNormal_4;
  lowp vec2 rndA_5;
  lowp float tmpvar_6;
  tmpvar_6 = fract((vertex_texCoord1.y * 10.0));
  lowp vec2 tmpvar_7;
  tmpvar_7.x = vertex_texCoord1.y;
  tmpvar_7.y = tmpvar_6;
  vUv.xy = (vertex_position.xy + 0.5);
  vUv.xy = vUv.yx;
  vUv.zw = vUv.xy;
  vUv.xy = (vUv.xy / vec2(5.0, 1.0));
  vUv.xy = (vUv.xy + (floor(
    (tmpvar_7 * vec2(5.0, 1.0))
  ) / vec2(5.0, 1.0)));
  lowp float tmpvar_8;
  tmpvar_8 = ((dot (texture (sceneHeightmap, 
    (((vertex_normal.xz / vec2(16.0, -16.0)) * 0.5) + 0.5)
  ), vec4(5.960464e-08, 1.525879e-05, 0.00390625, 1.0)) * -1000.0) + 100.0);
  lowp float tmpvar_9;
  if ((tmpvar_8 > 0.01)) {
    tmpvar_9 = tmpvar_8;
  } else {
    tmpvar_9 = -1.0;
  };
  lowp float tmpvar_10;
  tmpvar_10 = (vertex_normal.y - tmpvar_9);
  vHeight = tmpvar_10;
  rndA_5.y = tmpvar_7.y;
  rndA_5.x = (vertex_texCoord1.y + fract(globalTime));
  rndA_5.x = mix (0.25, rndA_5.x, clamp (tmpvar_10, 0.0, 1.0));
  vAnimUv = (vUv.zw / vec2(16.0, 5.0));
  vAnimUv = (vAnimUv + (floor(
    (rndA_5 * vec2(16.0, 5.0))
  ) / vec2(16.0, 5.0)));
  lowp float tmpvar_11;
  tmpvar_11 = ((vertex_position.y * vertex_position.y) * (vertex_texCoord1.y * 2.0));
  vec3 tmpvar_12;
  tmpvar_12.xz = vec2(0.0, 1.0);
  tmpvar_12.y = mix (-0.5, 0.5, (vertex_position.y + 0.5));
  vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  quadNormal_4.z = tmpvar_13.z;
  lowp vec2 tmpvar_14;
  lowp float pRotation_15;
  pRotation_15 = ((vertex_texCoord1.y + tmpvar_6) * 3.14);
  lowp float tmpvar_16;
  tmpvar_16 = cos(pRotation_15);
  lowp float tmpvar_17;
  tmpvar_17 = sin(pRotation_15);
  lowp mat2 tmpvar_18;
  tmpvar_18[uint(0)].x = tmpvar_16;
  tmpvar_18[uint(0)].y = -(tmpvar_17);
  tmpvar_18[1u].x = tmpvar_17;
  tmpvar_18[1u].y = tmpvar_16;
  tmpvar_14 = (tmpvar_18 * vertex_position.xy);
  lowp float pRotation_19;
  pRotation_19 = ((vertex_texCoord1.y + tmpvar_6) * 3.14);
  lowp float tmpvar_20;
  tmpvar_20 = cos(pRotation_19);
  lowp float tmpvar_21;
  tmpvar_21 = sin(pRotation_19);
  lowp mat2 tmpvar_22;
  tmpvar_22[uint(0)].x = tmpvar_20;
  tmpvar_22[uint(0)].y = -(tmpvar_21);
  tmpvar_22[1u].x = tmpvar_21;
  tmpvar_22[1u].y = tmpvar_20;
  quadNormal_4.xy = (tmpvar_22 * tmpvar_13.xy);
  lowp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_14.y;
  tmpvar_23.y = tmpvar_11;
  tmpvar_23.z = tmpvar_14.x;
  lowp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_23 * ((vertex_texCoord1.y * 0.5) + 1.0));
  lowp vec3 tmpvar_25;
  tmpvar_25.x = quadNormal_4.y;
  tmpvar_25.y = -(tmpvar_13.z);
  tmpvar_25.z = quadNormal_4.x;
  lowp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_25);
  localPos_3.y = (tmpvar_24.y + 0.1);
  vec4 tmpvar_27;
  tmpvar_27 = abs(((
    fract((((
      (fract(((
        (globalTime * 0.2)
       + 
        dot (vertex_normal, vec3(1.0, 1.0, 1.0))
      ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
     - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
   * 2.0) - 1.0));
  vec4 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (3.0 - (2.0 * tmpvar_27)));
  localPos_3.xz = (tmpvar_24.xz + ((
    (tmpvar_28.xz + tmpvar_28.yw)
   * tmpvar_11) * 4.0));
  localPosFront_2.y = localPos_3.y;
  float tmpvar_29;
  tmpvar_29 = ((globalTime + (vertex_texCoord1.y * 1.6)) * 4.0);
  lowp float tmpvar_30;
  tmpvar_30 = ((globalTime + (tmpvar_6 * 1.6)) * 4.0);
  float tmpvar_31;
  tmpvar_31 = cos(tmpvar_29);
  float tmpvar_32;
  tmpvar_32 = sin(tmpvar_29);
  mat2 tmpvar_33;
  tmpvar_33[uint(0)].x = tmpvar_31;
  tmpvar_33[uint(0)].y = -(tmpvar_32);
  tmpvar_33[1u].x = tmpvar_32;
  tmpvar_33[1u].y = tmpvar_31;
  localPosFront_2.xz = (tmpvar_33 * localPos_3.xz);
  lowp float tmpvar_34;
  tmpvar_34 = cos(tmpvar_30);
  lowp float tmpvar_35;
  tmpvar_35 = sin(tmpvar_30);
  lowp mat2 tmpvar_36;
  tmpvar_36[uint(0)].x = tmpvar_34;
  tmpvar_36[uint(0)].y = -(tmpvar_35);
  tmpvar_36[1u].x = tmpvar_35;
  tmpvar_36[1u].y = tmpvar_34;
  localPosFront_2.xy = (tmpvar_36 * localPosFront_2.yx).yx;
  lowp vec3 tmpvar_37;
  tmpvar_37 = mix (localPos_3, localPosFront_2, clamp (tmpvar_10, 0.0, 1.0));
  localPos_3 = tmpvar_37;
  localNormalFront_1.y = tmpvar_26.y;
  float tmpvar_38;
  tmpvar_38 = cos(tmpvar_29);
  float tmpvar_39;
  tmpvar_39 = sin(tmpvar_29);
  mat2 tmpvar_40;
  tmpvar_40[uint(0)].x = tmpvar_38;
  tmpvar_40[uint(0)].y = -(tmpvar_39);
  tmpvar_40[1u].x = tmpvar_39;
  tmpvar_40[1u].y = tmpvar_38;
  localNormalFront_1.xz = (tmpvar_40 * tmpvar_26.xz);
  float tmpvar_41;
  tmpvar_41 = cos(tmpvar_29);
  float tmpvar_42;
  tmpvar_42 = sin(tmpvar_29);
  mat2 tmpvar_43;
  tmpvar_43[uint(0)].x = tmpvar_41;
  tmpvar_43[uint(0)].y = -(tmpvar_42);
  tmpvar_43[1u].x = tmpvar_42;
  tmpvar_43[1u].y = tmpvar_41;
  vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_41;
  tmpvar_44.y = -(tmpvar_42);
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_41;
  vRotation = tmpvar_44;
  localNormalFront_1.xy = (tmpvar_43 * localNormalFront_1.yx).yx;
  vNormalW = normalize(mix (tmpvar_26, localNormalFront_1, clamp (tmpvar_10, 0.0, 1.0)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = ((tmpvar_37 * 0.3) + vertex_normal);
  vPositionL = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = tmpvar_45;
  vPositionW = (matrix_model * tmpvar_46).xyz;
  lowp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = vPositionW;
  gl_Position = (matrix_viewProjection * tmpvar_47);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vUv;
in vec3 vPositionW;
in vec3 vPositionL;
in vec3 vNormalW;
in float vHeight;
uniform sampler2D diffuseMap;
uniform sampler2D opacityMap;
uniform sampler2D topMap;
uniform lowp samplerCube skyboxLowCurrent;
uniform vec4 light_posRadius;
uniform vec4 light_directionInner;
uniform vec4 light_colorOuter;
uniform mat4 light_shadowMatrix;
uniform sampler2D light_shadowMap;
vec3 dLightDirW;
void main ()
{
  lowp float dAtten_1;
  vec2 offsets_3[8];
  float shadow_4;
  float height_5;
  lowp vec3 color_6;
  vec2 topUv_7;
  topUv_7 = (((vPositionL.xz / vec2(16.0, -16.0)) * 0.5) + 0.5);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (diffuseMap, vUv.xy);
  color_6 = tmpvar_8.xyz;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (opacityMap, vUv.xy);
  lowp float tmpvar_10;
  tmpvar_10 = tmpvar_9.y;
  if ((tmpvar_9.y < 0.01)) {
    discard;
  };
  float tmpvar_11;
  tmpvar_11 = ((vHeight / 4.0) + 0.01);
  height_5 = tmpvar_11;
  shadow_4 = 0.0;
  offsets_3[0] = vec2(-0.006392625, -0.003720859);
  offsets_3[1] = vec2(-0.004324322, -0.01204515);
  offsets_3[2] = vec2(-0.007974359, 0.004804211);
  offsets_3[3] = vec2(0.00710513, 0.003540039);
  offsets_3[4] = vec2(-0.0002272555, 0.01017307);
  offsets_3[5] = vec2(0.004528881, -0.007294784);
  offsets_3[6] = vec2(0.01312843, -0.004660728);
  offsets_3[7] = vec2(0.01099158, 0.01052593);
  for (highp int i_2 = 0; i_2 < 8; i_2++) {
    lowp vec4 tmpvar_12;
    tmpvar_12 = texture (topMap, (topUv_7 + offsets_3[i_2]));
    float tmpvar_13;
    if ((height_5 < tmpvar_12.w)) {
      tmpvar_13 = 0.125;
    } else {
      tmpvar_13 = 0.0;
    };
    shadow_4 = (shadow_4 + tmpvar_13);
  };
  color_6 = (tmpvar_8.xyz * (1.0 - (shadow_4 * 0.4)));
  color_6 = (color_6 * ((tmpvar_11 / 3.0) + 0.84));
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (skyboxLowCurrent, vec3(0.0, 1.0, 0.0));
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((8.0 * tmpvar_14.w) * tmpvar_14.xyz);
  color_6 = ((color_6 * tmpvar_15) * (tmpvar_15 * 3.0));
  float tmpvar_16;
  if (gl_FrontFacing) {
    tmpvar_16 = 1.0;
  } else {
    tmpvar_16 = 0.75;
  };
  color_6 = (color_6 * tmpvar_16);
  dLightDirW = (vPositionW - light_posRadius.xyz);
  vec3 tmpvar_17;
  tmpvar_17 = normalize(dLightDirW);
  float falloff_18;
  float tmpvar_19;
  tmpvar_19 = dot (dLightDirW, dLightDirW);
  float tmpvar_20;
  tmpvar_20 = (1.0/(light_posRadius.w));
  falloff_18 = ((1.0/((tmpvar_19 + 1.0))) * 16.0);
  float x_21;
  x_21 = (tmpvar_19 * (tmpvar_20 * tmpvar_20));
  float tmpvar_22;
  tmpvar_22 = clamp ((1.0 - (x_21 * x_21)), 0.0, 1.0);
  falloff_18 = (falloff_18 * (tmpvar_22 * tmpvar_22));
  float tmpvar_23;
  tmpvar_23 = clamp (((
    dot (tmpvar_17, light_directionInner.xyz)
   - light_colorOuter.w) / (light_directionInner.w - light_colorOuter.w)), 0.0, 1.0);
  dAtten_1 = (falloff_18 * (tmpvar_23 * (tmpvar_23 * 
    (3.0 - (2.0 * tmpvar_23))
  )));
  if ((dAtten_1 > 1e-05)) {
    dAtten_1 = (dAtten_1 * clamp ((
      (dot (vNormalW, tmpvar_17) * 0.75)
     + 0.25), 0.0, 1.0));
    vec4 projPos_24;
    vec4 tmpvar_25;
    tmpvar_25.w = 1.0;
    tmpvar_25.xyz = vPositionW;
    vec4 tmpvar_26;
    tmpvar_26 = (light_shadowMatrix * tmpvar_25);
    projPos_24.zw = tmpvar_26.zw;
    projPos_24.xy = (tmpvar_26.xy / tmpvar_26.w);
    float Z_27;
    Z_27 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) / light_posRadius.w) + -0.0002);
    lowp vec4 tmpvar_28;
    tmpvar_28 = texture (light_shadowMap, projPos_24.xy);
    lowp vec3 tmpvar_29;
    tmpvar_29.z = 0.0;
    tmpvar_29.x = ((tmpvar_28.y * 0.003921569) + tmpvar_28.x);
    tmpvar_29.y = ((tmpvar_28.w * 0.003921569) + tmpvar_28.z);
    float tmpvar_30;
    tmpvar_30 = (0.1 * Z_27);
    lowp float tmpvar_31;
    tmpvar_31 = max ((tmpvar_29.y - (tmpvar_29.x * tmpvar_29.x)), (tmpvar_30 * tmpvar_30));
    lowp float tmpvar_32;
    tmpvar_32 = (Z_27 - tmpvar_29.x);
    lowp float tmpvar_33;
    tmpvar_33 = (tmpvar_31 / (tmpvar_31 + (tmpvar_32 * tmpvar_32)));
    lowp float tmpvar_34;
    if ((Z_27 <= tmpvar_29.x)) {
      tmpvar_34 = 1.0;
    } else {
      tmpvar_34 = tmpvar_33;
    };
    dAtten_1 = (dAtten_1 * tmpvar_34);
  };
  color_6 = (color_6 + (tmpvar_8.xyz * (dAtten_1 * light_colorOuter.xyz)));
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = color_6;
  tmpvar_35.w = tmpvar_10;
  pc_fragColor = tmpvar_35;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^leavesTop^VS^#version 300 es
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=3) in vec2 vertex_texCoord1;
out lowp vec4 vUv;
out lowp vec3 vPositionW;
out lowp vec3 vPositionL;
out lowp vec3 vNormalW;
out vec4 vRotation;
out lowp float vHeight;
out lowp vec2 vAnimUv;
uniform float globalTime;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform sampler2D sceneHeightmap;
void main ()
{
  lowp vec3 localNormalFront_1;
  lowp vec3 localPosFront_2;
  lowp vec3 localPos_3;
  lowp vec3 quadNormal_4;
  lowp vec2 rndA_5;
  lowp float tmpvar_6;
  tmpvar_6 = fract((vertex_texCoord1.y * 10.0));
  lowp vec2 tmpvar_7;
  tmpvar_7.x = vertex_texCoord1.y;
  tmpvar_7.y = tmpvar_6;
  vUv.xy = (vertex_position.xy + 0.5);
  vUv.xy = vUv.yx;
  vUv.zw = vUv.xy;
  vUv.xy = (vUv.xy / vec2(5.0, 1.0));
  vUv.xy = (vUv.xy + (floor(
    (tmpvar_7 * vec2(5.0, 1.0))
  ) / vec2(5.0, 1.0)));
  lowp float tmpvar_8;
  tmpvar_8 = ((dot (texture (sceneHeightmap, 
    (((vertex_normal.xz / vec2(16.0, -16.0)) * 0.5) + 0.5)
  ), vec4(5.960464e-08, 1.525879e-05, 0.00390625, 1.0)) * -1000.0) + 100.0);
  lowp float tmpvar_9;
  if ((tmpvar_8 > 0.01)) {
    tmpvar_9 = tmpvar_8;
  } else {
    tmpvar_9 = -1.0;
  };
  lowp float tmpvar_10;
  tmpvar_10 = (vertex_normal.y - tmpvar_9);
  vHeight = tmpvar_10;
  rndA_5.y = tmpvar_7.y;
  rndA_5.x = (vertex_texCoord1.y + fract(globalTime));
  rndA_5.x = mix (0.25, rndA_5.x, clamp (tmpvar_10, 0.0, 1.0));
  vAnimUv = (vUv.zw / vec2(16.0, 5.0));
  vAnimUv = (vAnimUv + (floor(
    (rndA_5 * vec2(16.0, 5.0))
  ) / vec2(16.0, 5.0)));
  lowp float tmpvar_11;
  tmpvar_11 = ((vertex_position.y * vertex_position.y) * (vertex_texCoord1.y * 2.0));
  vec3 tmpvar_12;
  tmpvar_12.xz = vec2(0.0, 1.0);
  tmpvar_12.y = mix (-0.5, 0.5, (vertex_position.y + 0.5));
  vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_12);
  quadNormal_4.z = tmpvar_13.z;
  lowp vec2 tmpvar_14;
  lowp float pRotation_15;
  pRotation_15 = ((vertex_texCoord1.y + tmpvar_6) * 3.14);
  lowp float tmpvar_16;
  tmpvar_16 = cos(pRotation_15);
  lowp float tmpvar_17;
  tmpvar_17 = sin(pRotation_15);
  lowp mat2 tmpvar_18;
  tmpvar_18[uint(0)].x = tmpvar_16;
  tmpvar_18[uint(0)].y = -(tmpvar_17);
  tmpvar_18[1u].x = tmpvar_17;
  tmpvar_18[1u].y = tmpvar_16;
  tmpvar_14 = (tmpvar_18 * vertex_position.xy);
  lowp float pRotation_19;
  pRotation_19 = ((vertex_texCoord1.y + tmpvar_6) * 3.14);
  lowp float tmpvar_20;
  tmpvar_20 = cos(pRotation_19);
  lowp float tmpvar_21;
  tmpvar_21 = sin(pRotation_19);
  lowp mat2 tmpvar_22;
  tmpvar_22[uint(0)].x = tmpvar_20;
  tmpvar_22[uint(0)].y = -(tmpvar_21);
  tmpvar_22[1u].x = tmpvar_21;
  tmpvar_22[1u].y = tmpvar_20;
  quadNormal_4.xy = (tmpvar_22 * tmpvar_13.xy);
  lowp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_14.y;
  tmpvar_23.y = tmpvar_11;
  tmpvar_23.z = tmpvar_14.x;
  lowp vec3 tmpvar_24;
  tmpvar_24 = (tmpvar_23 * ((vertex_texCoord1.y * 0.5) + 1.0));
  lowp vec3 tmpvar_25;
  tmpvar_25.x = quadNormal_4.y;
  tmpvar_25.y = -(tmpvar_13.z);
  tmpvar_25.z = quadNormal_4.x;
  lowp vec3 tmpvar_26;
  tmpvar_26 = normalize(tmpvar_25);
  localPos_3.y = (tmpvar_24.y + 0.1);
  vec4 tmpvar_27;
  tmpvar_27 = abs(((
    fract((((
      (fract(((
        (globalTime * 0.2)
       + 
        dot (vertex_normal, vec3(1.0, 1.0, 1.0))
      ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
     - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
   * 2.0) - 1.0));
  vec4 tmpvar_28;
  tmpvar_28 = ((tmpvar_27 * tmpvar_27) * (3.0 - (2.0 * tmpvar_27)));
  localPos_3.xz = (tmpvar_24.xz + ((
    (tmpvar_28.xz + tmpvar_28.yw)
   * tmpvar_11) * 4.0));
  localPosFront_2.y = localPos_3.y;
  float tmpvar_29;
  tmpvar_29 = ((globalTime + (vertex_texCoord1.y * 1.6)) * 4.0);
  lowp float tmpvar_30;
  tmpvar_30 = ((globalTime + (tmpvar_6 * 1.6)) * 4.0);
  float tmpvar_31;
  tmpvar_31 = cos(tmpvar_29);
  float tmpvar_32;
  tmpvar_32 = sin(tmpvar_29);
  mat2 tmpvar_33;
  tmpvar_33[uint(0)].x = tmpvar_31;
  tmpvar_33[uint(0)].y = -(tmpvar_32);
  tmpvar_33[1u].x = tmpvar_32;
  tmpvar_33[1u].y = tmpvar_31;
  localPosFront_2.xz = (tmpvar_33 * localPos_3.xz);
  lowp float tmpvar_34;
  tmpvar_34 = cos(tmpvar_30);
  lowp float tmpvar_35;
  tmpvar_35 = sin(tmpvar_30);
  lowp mat2 tmpvar_36;
  tmpvar_36[uint(0)].x = tmpvar_34;
  tmpvar_36[uint(0)].y = -(tmpvar_35);
  tmpvar_36[1u].x = tmpvar_35;
  tmpvar_36[1u].y = tmpvar_34;
  localPosFront_2.xy = (tmpvar_36 * localPosFront_2.yx).yx;
  lowp vec3 tmpvar_37;
  tmpvar_37 = mix (localPos_3, localPosFront_2, clamp (tmpvar_10, 0.0, 1.0));
  localPos_3 = tmpvar_37;
  localNormalFront_1.y = tmpvar_26.y;
  float tmpvar_38;
  tmpvar_38 = cos(tmpvar_29);
  float tmpvar_39;
  tmpvar_39 = sin(tmpvar_29);
  mat2 tmpvar_40;
  tmpvar_40[uint(0)].x = tmpvar_38;
  tmpvar_40[uint(0)].y = -(tmpvar_39);
  tmpvar_40[1u].x = tmpvar_39;
  tmpvar_40[1u].y = tmpvar_38;
  localNormalFront_1.xz = (tmpvar_40 * tmpvar_26.xz);
  float tmpvar_41;
  tmpvar_41 = cos(tmpvar_29);
  float tmpvar_42;
  tmpvar_42 = sin(tmpvar_29);
  mat2 tmpvar_43;
  tmpvar_43[uint(0)].x = tmpvar_41;
  tmpvar_43[uint(0)].y = -(tmpvar_42);
  tmpvar_43[1u].x = tmpvar_42;
  tmpvar_43[1u].y = tmpvar_41;
  vec4 tmpvar_44;
  tmpvar_44.x = tmpvar_41;
  tmpvar_44.y = -(tmpvar_42);
  tmpvar_44.z = tmpvar_42;
  tmpvar_44.w = tmpvar_41;
  vRotation = tmpvar_44;
  localNormalFront_1.xy = (tmpvar_43 * localNormalFront_1.yx).yx;
  vNormalW = normalize(mix (tmpvar_26, localNormalFront_1, clamp (tmpvar_10, 0.0, 1.0)));
  lowp vec3 tmpvar_45;
  tmpvar_45 = ((tmpvar_37 * 0.3) + vertex_normal);
  vPositionL = tmpvar_45;
  lowp vec4 tmpvar_46;
  tmpvar_46.w = 1.0;
  tmpvar_46.xyz = tmpvar_45;
  vPositionW = (matrix_model * tmpvar_46).xyz;
  lowp vec4 tmpvar_47;
  tmpvar_47.w = 1.0;
  tmpvar_47.xyz = vPositionW;
  gl_Position = (matrix_viewProjection * tmpvar_47);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vUv;
in float vHeight;
uniform sampler2D opacityMap;
void main ()
{
  float gradient_1;
  vec2 uv_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (opacityMap, vUv.xy);
  if ((tmpvar_3.y < 0.1)) {
    discard;
  };
  uv_2 = ((vUv.zw * 2.0) - 1.0);
  gradient_1 = ((1.0 - sqrt(
    dot (uv_2, uv_2)
  )) * 0.125);
  highp vec4 tmpvar_4;
  tmpvar_4.z = 0.0;
  tmpvar_4.x = gradient_1;
  tmpvar_4.y = (gradient_1 * vHeight);
  tmpvar_4.w = (vHeight / 4.0);
  pc_fragColor = tmpvar_4;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^postprocess^VS^#version 300 es
in vec2 vertex_position;
out vec2 vUv0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.zw = vec2(0.5, 1.0);
  tmpvar_1.xy = vertex_position;
  gl_Position = tmpvar_1;
  vUv0 = ((vertex_position * 0.5) + 0.5);
}

^PS^#version 300 es
precision highp sampler3D;
precision highp float;
out highp vec4 pc_fragColor;
uniform float exposure;
in vec2 vUv0;
uniform sampler2D uScreen;
uniform lowp sampler3D skyLutTex;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (uScreen, vUv0);
  pc_fragColor = tmpvar_1;
  highp vec3 x_2;
  x_2 = (pc_fragColor.xyz * exposure);
  pc_fragColor.xyz = (((
    ((x_2 * ((0.15 * x_2) + 0.05)) + 0.004)
   / 
    ((x_2 * ((0.15 * x_2) + 0.5)) + 0.06)
  ) - 0.06666666) * vec3(1.379064, 1.379064, 1.379064));
  pc_fragColor.xyz = pow ((pc_fragColor.xyz + vec3(1e-07, 1e-07, 1e-07)), vec3(0.45, 0.45, 0.45));
  lowp vec3 tmpvar_3;
  highp vec3 P_4;
  P_4 = ((clamp (pc_fragColor.xyz, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)) * vec3(0.9375, 0.9375, 0.9375)) + vec3(0.03125, 0.03125, 0.03125));
  tmpvar_3 = texture (skyLutTex, P_4).xyz;
  pc_fragColor.xyz = tmpvar_3;
}

^AT^vertex_position,POSITION,^SH^waterBlur^VS^#version 300 es
in vec2 vertex_position;
out vec2 vUv0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.zw = vec2(0.5, 1.0);
  tmpvar_1.xy = vertex_position;
  gl_Position = tmpvar_1;
  vUv0 = ((vertex_position * 0.5) + 0.5);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec2 vUv0;
uniform sampler2D source;
uniform vec2 pixelOffset;
void main ()
{
  vec2 uv_2;
  lowp vec4 color_3;
  color_3 = vec4(0.0, 0.0, 0.0, 0.0);
  uv_2 = vUv0;
  if ((pixelOffset.x > 1e-07)) {
    uv_2 = (vUv0 - (pixelOffset * 4.0));
  };
  for (highp int i_1 = 0; i_1 < 8; i_1++) {
    lowp vec4 c_4;
    if ((pixelOffset.x > 1e-07)) {
      c_4 = texture (source, (uv_2 + (pixelOffset * float(i_1))));
    } else {
      c_4 = texture (source, (uv_2 - (pixelOffset * float(i_1))));
    };
    color_3 = (color_3 + c_4);
  };
  color_3 = (color_3 / 8.0);
  pc_fragColor = color_3;
}

^AT^vertex_position,POSITION,^SH^lmDilate^VS^#version 300 es
in vec2 vertex_position;
out vec2 vUv0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.zw = vec2(0.5, 1.0);
  tmpvar_1.xy = vertex_position;
  gl_Position = tmpvar_1;
  vUv0 = ((vertex_position * 0.5) + 0.5);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec2 vUv0;
uniform sampler2D source;
uniform vec2 pixelOffset;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (source, vUv0);
  lowp vec4 tmpvar_2;
  if ((tmpvar_1.w > 0.0)) {
    tmpvar_2 = tmpvar_1;
  } else {
    tmpvar_2 = texture (source, (vUv0 - pixelOffset));
  };
  lowp vec4 tmpvar_3;
  if ((tmpvar_2.w > 0.0)) {
    tmpvar_3 = tmpvar_2;
  } else {
    vec2 tmpvar_4;
    tmpvar_4.x = 0.0;
    tmpvar_4.y = -(pixelOffset.y);
    tmpvar_3 = texture (source, (vUv0 + tmpvar_4));
  };
  lowp vec4 tmpvar_5;
  if ((tmpvar_3.w > 0.0)) {
    tmpvar_5 = tmpvar_3;
  } else {
    vec2 tmpvar_6;
    tmpvar_6.x = pixelOffset.x;
    tmpvar_6.y = -(pixelOffset.y);
    tmpvar_5 = texture (source, (vUv0 + tmpvar_6));
  };
  lowp vec4 tmpvar_7;
  if ((tmpvar_5.w > 0.0)) {
    tmpvar_7 = tmpvar_5;
  } else {
    vec2 tmpvar_8;
    tmpvar_8.y = 0.0;
    tmpvar_8.x = -(pixelOffset.x);
    tmpvar_7 = texture (source, (vUv0 + tmpvar_8));
  };
  lowp vec4 tmpvar_9;
  if ((tmpvar_7.w > 0.0)) {
    tmpvar_9 = tmpvar_7;
  } else {
    vec2 tmpvar_10;
    tmpvar_10.y = 0.0;
    tmpvar_10.x = pixelOffset.x;
    tmpvar_9 = texture (source, (vUv0 + tmpvar_10));
  };
  lowp vec4 tmpvar_11;
  if ((tmpvar_9.w > 0.0)) {
    tmpvar_11 = tmpvar_9;
  } else {
    vec2 tmpvar_12;
    tmpvar_12.x = -(pixelOffset.x);
    tmpvar_12.y = pixelOffset.y;
    tmpvar_11 = texture (source, (vUv0 + tmpvar_12));
  };
  lowp vec4 tmpvar_13;
  if ((tmpvar_11.w > 0.0)) {
    tmpvar_13 = tmpvar_11;
  } else {
    vec2 tmpvar_14;
    tmpvar_14.x = 0.0;
    tmpvar_14.y = pixelOffset.y;
    tmpvar_13 = texture (source, (vUv0 + tmpvar_14));
  };
  lowp vec4 tmpvar_15;
  if ((tmpvar_13.w > 0.0)) {
    tmpvar_15 = tmpvar_13;
  } else {
    tmpvar_15 = texture (source, (vUv0 + pixelOffset));
  };
  pc_fragColor = tmpvar_15;
}

^AT^vertex_position,POSITION,^SH^depthrgba_pnt_0^VS^attribute vec3 vertex_position;
uniform mat4 matrix_model;
uniform mat4 matrix_viewProjection;
vec3 dPositionW;
mat4 dModelMatrix;
mat4 getModelMatrix() {
    return matrix_model;
}
vec4 getPosition() {
    dModelMatrix = getModelMatrix();
    vec4 posW = dModelMatrix * vec4(vertex_position, 1.0);
    dPositionW = posW.xyz;
    return matrix_viewProjection * posW;
}
vec3 getWorldPosition() {
    return dPositionW;
}
varying vec3 worldPos;

void main(void)
{
   gl_Position = getPosition();
    worldPos = dPositionW;
}
^PS^precision highp float;

varying vec3 worldPos;

uniform vec3 view_position;

uniform float light_radius;

// Packing a float in GLSL with multiplication and mod
// http://blog.gradientstudios.com/2012/08/23/shadow-map-improvement
vec4 packFloat(float depth) {
    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);
    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);
    // combination of mod and multiplication and division works better
    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);
    res -= res.xxyz * bit_mask;
    return res;
}
void main(void)
{
   float depth = min(distance(view_position, worldPos) / light_radius, 0.99999);
   gl_FragData[0] = packFloat(depth);
}
^AT^vertex_position,POSITION,^SH^depthrgba_opama_pnt_0^VS^attribute vec3 vertex_position;
uniform mat4 matrix_model;
uniform mat4 matrix_viewProjection;
vec3 dPositionW;
mat4 dModelMatrix;
mat4 getModelMatrix() {
    return matrix_model;
}
vec4 getPosition() {
    dModelMatrix = getModelMatrix();
    vec4 posW = dModelMatrix * vec4(vertex_position, 1.0);
    dPositionW = posW.xyz;
    return matrix_viewProjection * posW;
}
vec3 getWorldPosition() {
    return dPositionW;
}
attribute vec2 vertex_texCoord0;

varying vec2 vUv0;

varying vec3 worldPos;

void main(void)
{
   gl_Position = getPosition();
    vUv0 = vertex_texCoord0;
    worldPos = dPositionW;
}
^PS^precision highp float;

varying vec2 vUv0;

uniform sampler2D texture_opacityMap;

uniform float alpha_ref;
void alphaTest(float a) {
    if (a < alpha_ref) discard;
}
varying vec3 worldPos;

uniform vec3 view_position;

uniform float light_radius;

// Packing a float in GLSL with multiplication and mod
// http://blog.gradientstudios.com/2012/08/23/shadow-map-improvement
vec4 packFloat(float depth) {
    const vec4 bit_shift = vec4(256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0);
    const vec4 bit_mask  = vec4(0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0);
    // combination of mod and multiplication and division works better
    vec4 res = mod(depth * bit_shift * vec4(255), vec4(256) ) / vec4(255);
    res -= res.xxyz * bit_mask;
    return res;
}
void main(void)
{
    alphaTest( texture2D(texture_opacityMap, vUv0).a );

   float depth = min(distance(view_position, worldPos) / light_radius, 0.99999);
   gl_FragData[0] = packFloat(depth);
}
^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,^SH^-81707175^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=3) in vec2 vertex_texCoord1;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  highp vec4 tmpvar_2;
  tmpvar_2.zw = vec2(0.5, 1.0);
  tmpvar_2.xy = ((vertex_texCoord1 * 2.0) - 1.0);
  gl_Position = tmpvar_2;
  vPositionW = (matrix_model * tmpvar_1).xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv1 = vertex_texCoord1;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv1;
lowp vec3 dDiffuseLight;
vec3 dLightDirW;
highp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec4 light0_shadowParams;
uniform highp samplerCubeShadow light0_shadowMap;
uniform sampler2D texture_lightMap;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((8.0 * tmpvar_2.w) * tmpvar_2.xyz);
  dDiffuseLight = (tmpvar_3 * tmpvar_3);
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(dLightDirW);
  highp float tmpvar_5;
  tmpvar_5 = max (((light0_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light0_radius), 0.0);
  dAtten = tmpvar_5;
  if ((tmpvar_5 > 1e-05)) {
    dAtten = (tmpvar_5 * max (dot (tmpvar_1, 
      -(tmpvar_4)
    ), 0.0));
    vec3 tmpvar_6;
    tmpvar_6 = ((vPositionW + (
      ((vNormalW * light0_shadowParams.y) * clamp ((1.0 - dot (vNormalW, 
        -(tmpvar_4)
      )), 0.0, 1.0))
     * 
      sqrt(dot (dLightDirW, dLightDirW))
    )) - light0_position);
    dLightDirW = tmpvar_6;
    highp vec4 shadowValues_7;
    highp vec3 shadowKernel_0_8;
    highp vec3 shadowKernel_1_9;
    float majorAxisLength_10;
    vec4 dirY_11;
    vec4 dirX_12;
    vec3 tmpvar_13;
    tmpvar_13 = normalize(tmpvar_6);
    vec3 tmpvar_14;
    tmpvar_14 = abs(tmpvar_13);
    vec4 tmpvar_15;
    tmpvar_15.xyz = vec3(1.0, 0.0, 0.0);
    tmpvar_15.w = tmpvar_13.x;
    dirX_12 = tmpvar_15;
    vec4 tmpvar_16;
    tmpvar_16.xyz = vec3(0.0, 1.0, 0.0);
    tmpvar_16.w = tmpvar_13.y;
    dirY_11 = tmpvar_16;
    majorAxisLength_10 = tmpvar_13.z;
    if (((tmpvar_14.x > tmpvar_14.y) && (tmpvar_14.x > tmpvar_14.z))) {
      vec4 tmpvar_17;
      tmpvar_17.xyz = vec3(0.0, 0.0, 1.0);
      tmpvar_17.w = tmpvar_13.z;
      dirX_12 = tmpvar_17;
      vec4 tmpvar_18;
      tmpvar_18.xyz = vec3(0.0, 1.0, 0.0);
      tmpvar_18.w = tmpvar_13.y;
      dirY_11 = tmpvar_18;
      majorAxisLength_10 = tmpvar_13.x;
    } else {
      if (((tmpvar_14.y > tmpvar_14.x) && (tmpvar_14.y > tmpvar_14.z))) {
        vec4 tmpvar_19;
        tmpvar_19.xyz = vec3(1.0, 0.0, 0.0);
        tmpvar_19.w = tmpvar_13.x;
        dirX_12 = tmpvar_19;
        vec4 tmpvar_20;
        tmpvar_20.xyz = vec3(0.0, 0.0, 1.0);
        tmpvar_20.w = tmpvar_13.z;
        dirY_11 = tmpvar_20;
        majorAxisLength_10 = tmpvar_13.y;
      };
    };
    float tmpvar_21;
    tmpvar_21 = (((1.0/(light0_shadowParams.x)) * 2.0) * abs(majorAxisLength_10));
    vec3 tmpvar_22;
    tmpvar_22 = (dirX_12.xyz * tmpvar_21);
    vec3 tmpvar_23;
    tmpvar_23 = (dirY_11.xyz * tmpvar_21);
    vec3 tmpvar_24;
    tmpvar_24 = -(tmpvar_22);
    vec3 tmpvar_25;
    tmpvar_25 = -(tmpvar_23);
    float tmpvar_26;
    tmpvar_26 = (1.0/(light0_shadowParams.w));
    float tmpvar_27;
    tmpvar_27 = (tmpvar_26 / 1000.0);
    float tmpvar_28;
    vec3 tmpvar_29;
    tmpvar_29 = abs(tmpvar_6);
    tmpvar_28 = (((
      ((tmpvar_26 + tmpvar_27) / (tmpvar_26 - tmpvar_27))
     - 
      ((((2.0 * tmpvar_26) * tmpvar_27) / (tmpvar_26 - tmpvar_27)) / (max (tmpvar_29.x, max (tmpvar_29.y, tmpvar_29.z)) + light0_shadowParams.z))
    ) * 0.5) + 0.5);
    vec4 tmpvar_30;
    tmpvar_30.xyz = ((tmpvar_13 + tmpvar_24) + tmpvar_25);
    tmpvar_30.w = tmpvar_28;
    vec4 tmpvar_31;
    tmpvar_31.xyz = (tmpvar_13 + tmpvar_24);
    tmpvar_31.w = tmpvar_28;
    vec4 tmpvar_32;
    tmpvar_32.xyz = ((tmpvar_13 + tmpvar_24) + tmpvar_23);
    tmpvar_32.w = tmpvar_28;
    highp vec3 tmpvar_33;
    tmpvar_33.x = texture (light0_shadowMap, tmpvar_30);
    tmpvar_33.y = texture (light0_shadowMap, tmpvar_31);
    tmpvar_33.z = texture (light0_shadowMap, tmpvar_32);
    vec4 tmpvar_34;
    tmpvar_34.xyz = (tmpvar_13 + tmpvar_25);
    tmpvar_34.w = tmpvar_28;
    vec4 tmpvar_35;
    tmpvar_35.xyz = tmpvar_13;
    tmpvar_35.w = tmpvar_28;
    vec4 tmpvar_36;
    tmpvar_36.xyz = (tmpvar_13 + tmpvar_23);
    tmpvar_36.w = tmpvar_28;
    highp vec3 tmpvar_37;
    tmpvar_37.x = texture (light0_shadowMap, tmpvar_34);
    tmpvar_37.y = texture (light0_shadowMap, tmpvar_35);
    tmpvar_37.z = texture (light0_shadowMap, tmpvar_36);
    vec4 tmpvar_38;
    tmpvar_38.xyz = ((tmpvar_13 + tmpvar_22) + tmpvar_25);
    tmpvar_38.w = tmpvar_28;
    vec4 tmpvar_39;
    tmpvar_39.xyz = (tmpvar_13 + tmpvar_22);
    tmpvar_39.w = tmpvar_28;
    vec4 tmpvar_40;
    tmpvar_40.xyz = ((tmpvar_13 + tmpvar_22) + tmpvar_23);
    tmpvar_40.w = tmpvar_28;
    highp vec3 tmpvar_41;
    tmpvar_41.x = texture (light0_shadowMap, tmpvar_38);
    tmpvar_41.y = texture (light0_shadowMap, tmpvar_39);
    tmpvar_41.z = texture (light0_shadowMap, tmpvar_40);
    vec2 tmpvar_42;
    tmpvar_42.x = dirX_12.w;
    tmpvar_42.y = dirY_11.w;
    vec2 tmpvar_43;
    tmpvar_43 = fract(((
      (tmpvar_42 / abs(majorAxisLength_10))
     * 0.5) * light0_shadowParams.x));
    shadowKernel_0_8 = mix (tmpvar_33, tmpvar_37, tmpvar_43.x);
    shadowKernel_1_9 = mix (tmpvar_37, tmpvar_41, tmpvar_43.x);
    shadowValues_7.x = mix (shadowKernel_0_8.x, shadowKernel_0_8.y, tmpvar_43.y);
    shadowValues_7.y = mix (shadowKernel_0_8.y, shadowKernel_0_8.z, tmpvar_43.y);
    shadowValues_7.z = mix (shadowKernel_1_9.x, shadowKernel_1_9.y, tmpvar_43.y);
    shadowValues_7.w = mix (shadowKernel_1_9.y, shadowKernel_1_9.z, tmpvar_43.y);
    dAtten = (dAtten * (dot (shadowValues_7, vec4(1.0, 1.0, 1.0, 1.0)) * 0.25));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
  };
  pc_fragColor.xyz = dDiffuseLight;
  pc_fragColor.xyz = pow (pc_fragColor.xyz, vec3(0.5, 0.5, 0.5));
  pc_fragColor.xyz = (pc_fragColor.xyz / 8.0);
  pc_fragColor.w = clamp (max (max (pc_fragColor.x, pc_fragColor.y), max (pc_fragColor.z, 0.003921569)), 0.0, 1.0);
  pc_fragColor.w = (ceil((pc_fragColor.w * 255.0)) / 255.0);
  pc_fragColor.xyz = (pc_fragColor.xyz / pc_fragColor.w);
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord1,TEXCOORD1,^SH^-1126291358^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=3) in vec2 vertex_texCoord1;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  highp vec4 tmpvar_2;
  tmpvar_2.zw = vec2(0.5, 1.0);
  tmpvar_2.xy = ((vertex_texCoord1 * 2.0) - 1.0);
  gl_Position = tmpvar_2;
  vPositionW = (matrix_model * tmpvar_1).xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv1 = vertex_texCoord1;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv1;
highp vec3 dDiffuseLight;
vec3 dLightDirW;
vec3 dShadowCoord;
highp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform highp sampler2DShadow light0_shadowMap;
uniform sampler2D texture_lightMap;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((8.0 * tmpvar_2.w) * tmpvar_2.xyz);
  dDiffuseLight = (tmpvar_3 * tmpvar_3);
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(dLightDirW);
  float falloff_5;
  float tmpvar_6;
  tmpvar_6 = dot (dLightDirW, dLightDirW);
  float tmpvar_7;
  tmpvar_7 = (1.0/(light0_radius));
  falloff_5 = ((1.0/((tmpvar_6 + 1.0))) * 16.0);
  float x_8;
  x_8 = (tmpvar_6 * (tmpvar_7 * tmpvar_7));
  float tmpvar_9;
  tmpvar_9 = clamp ((1.0 - (x_8 * x_8)), 0.0, 1.0);
  falloff_5 = (falloff_5 * (tmpvar_9 * tmpvar_9));
  dAtten = falloff_5;
  if ((falloff_5 > 1e-05)) {
    float tmpvar_10;
    tmpvar_10 = clamp (((
      dot (tmpvar_4, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_5 * (tmpvar_10 * (tmpvar_10 * 
      (3.0 - (2.0 * tmpvar_10))
    )));
    dAtten = (dAtten * max (dot (tmpvar_1, 
      -(tmpvar_4)
    ), 0.0));
    vec4 projPos_11;
    vec4 tmpvar_12;
    tmpvar_12.w = 1.0;
    tmpvar_12.xyz = (vPositionW + ((
      (vNormalW * light0_shadowParams.y)
     * 
      clamp ((1.0 - dot (vNormalW, -(tmpvar_4))), 0.0, 1.0)
    ) * abs(
      dot ((vPositionW - light0_position), tmpvar_4)
    )));
    vec4 tmpvar_13;
    tmpvar_13 = (light0_shadowMatrix * tmpvar_12);
    projPos_11.zw = tmpvar_13.zw;
    projPos_11.xy = (tmpvar_13.xy / tmpvar_13.w);
    dShadowCoord.xy = projPos_11.xy;
    dShadowCoord.z = (tmpvar_13.z / tmpvar_13.w);
    float tmpvar_14;
    tmpvar_14 = (1.0/(light0_shadowParams.w));
    float tmpvar_15;
    tmpvar_15 = (tmpvar_14 / 1000.0);
    dShadowCoord.z = (-((
      ((2.0 * tmpvar_14) * tmpvar_15)
     / 
      (tmpvar_14 - tmpvar_15)
    )) / (dShadowCoord.z - (
      (tmpvar_14 + tmpvar_15)
     / 
      (tmpvar_14 - tmpvar_15)
    )));
    dShadowCoord.z = (dShadowCoord.z * light0_shadowParams.w);
    dShadowCoord.z = (dShadowCoord.z + (light0_shadowParams.z * 10.0));
    dShadowCoord.z = (dShadowCoord.z / light0_shadowParams.w);
    dShadowCoord.z = (((tmpvar_14 + tmpvar_15) / (tmpvar_14 - tmpvar_15)) - ((
      ((2.0 * tmpvar_14) * tmpvar_15)
     / 
      (tmpvar_14 - tmpvar_15)
    ) / dShadowCoord.z));
    highp float sum_16;
    float v2_17;
    float v1_18;
    float v0_19;
    float u2_20;
    float u1_21;
    float u0_22;
    vec2 base_uv_23;
    float tmpvar_24;
    tmpvar_24 = (1.0/(light0_shadowParams.x));
    float tmpvar_25;
    tmpvar_25 = dShadowCoord.z;
    vec2 tmpvar_26;
    tmpvar_26 = (projPos_11.xy * light0_shadowParams.x);
    base_uv_23 = floor((tmpvar_26 + vec2(0.5, 0.5)));
    float tmpvar_27;
    tmpvar_27 = ((tmpvar_26.x + 0.5) - base_uv_23.x);
    float tmpvar_28;
    tmpvar_28 = ((tmpvar_26.y + 0.5) - base_uv_23.y);
    base_uv_23 = (base_uv_23 - vec2(0.5, 0.5));
    base_uv_23 = (base_uv_23 * tmpvar_24);
    float tmpvar_29;
    tmpvar_29 = (4.0 - (3.0 * tmpvar_27));
    float tmpvar_30;
    tmpvar_30 = (1.0 + (3.0 * tmpvar_27));
    float tmpvar_31;
    tmpvar_31 = (4.0 - (3.0 * tmpvar_28));
    float tmpvar_32;
    tmpvar_32 = (1.0 + (3.0 * tmpvar_28));
    u0_22 = (((
      (3.0 - (2.0 * tmpvar_27))
     / tmpvar_29) - 2.0) * tmpvar_24);
    v0_19 = (((
      (3.0 - (2.0 * tmpvar_28))
     / tmpvar_31) - 2.0) * tmpvar_24);
    u1_21 = (((3.0 + tmpvar_27) / 7.0) * tmpvar_24);
    v1_18 = (((3.0 + tmpvar_28) / 7.0) * tmpvar_24);
    u2_20 = (((tmpvar_27 / tmpvar_30) + 2.0) * tmpvar_24);
    v2_17 = (((tmpvar_28 / tmpvar_32) + 2.0) * tmpvar_24);
    vec3 tmpvar_33;
    tmpvar_33.x = (base_uv_23.x + u0_22);
    tmpvar_33.y = (base_uv_23.y + v0_19);
    tmpvar_33.z = tmpvar_25;
    sum_16 = ((tmpvar_29 * tmpvar_31) * texture (light0_shadowMap, tmpvar_33));
    vec3 tmpvar_34;
    tmpvar_34.x = (base_uv_23.x + u1_21);
    tmpvar_34.y = (base_uv_23.y + v0_19);
    tmpvar_34.z = tmpvar_25;
    sum_16 = (sum_16 + ((7.0 * tmpvar_31) * texture (light0_shadowMap, tmpvar_34)));
    vec3 tmpvar_35;
    tmpvar_35.x = (base_uv_23.x + u2_20);
    tmpvar_35.y = (base_uv_23.y + v0_19);
    tmpvar_35.z = tmpvar_25;
    sum_16 = (sum_16 + ((tmpvar_30 * tmpvar_31) * texture (light0_shadowMap, tmpvar_35)));
    vec3 tmpvar_36;
    tmpvar_36.x = (base_uv_23.x + u0_22);
    tmpvar_36.y = (base_uv_23.y + v1_18);
    tmpvar_36.z = tmpvar_25;
    sum_16 = (sum_16 + ((tmpvar_29 * 7.0) * texture (light0_shadowMap, tmpvar_36)));
    vec3 tmpvar_37;
    tmpvar_37.x = (base_uv_23.x + u1_21);
    tmpvar_37.y = (base_uv_23.y + v1_18);
    tmpvar_37.z = tmpvar_25;
    sum_16 = (sum_16 + (49.0 * texture (light0_shadowMap, tmpvar_37)));
    vec3 tmpvar_38;
    tmpvar_38.x = (base_uv_23.x + u2_20);
    tmpvar_38.y = (base_uv_23.y + v1_18);
    tmpvar_38.z = tmpvar_25;
    sum_16 = (sum_16 + ((tmpvar_30 * 7.0) * texture (light0_shadowMap, tmpvar_38)));
    vec3 tmpvar_39;
    tmpvar_39.x = (base_uv_23.x + u0_22);
    tmpvar_39.y = (base_uv_23.y + v2_17);
    tmpvar_39.z = tmpvar_25;
    sum_16 = (sum_16 + ((tmpvar_29 * tmpvar_32) * texture (light0_shadowMap, tmpvar_39)));
    vec3 tmpvar_40;
    tmpvar_40.x = (base_uv_23.x + u1_21);
    tmpvar_40.y = (base_uv_23.y + v2_17);
    tmpvar_40.z = tmpvar_25;
    sum_16 = (sum_16 + ((7.0 * tmpvar_32) * texture (light0_shadowMap, tmpvar_40)));
    vec3 tmpvar_41;
    tmpvar_41.x = (base_uv_23.x + u2_20);
    tmpvar_41.y = (base_uv_23.y + v2_17);
    tmpvar_41.z = tmpvar_25;
    sum_16 = (sum_16 + ((tmpvar_30 * tmpvar_32) * texture (light0_shadowMap, tmpvar_41)));
    sum_16 = (sum_16 * 0.006944444);
    highp float tmpvar_42;
    tmpvar_42 = pow (sum_16, 2.2);
    sum_16 = tmpvar_42;
    dAtten = (dAtten * tmpvar_42);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
  };
  pc_fragColor.xyz = pow (dDiffuseLight, vec3(0.5, 0.5, 0.5));
  pc_fragColor.xyz = (pc_fragColor.xyz / 8.0);
  pc_fragColor.w = clamp (max (max (pc_fragColor.x, pc_fragColor.y), max (pc_fragColor.z, 0.003921569)), 0.0, 1.0);
  pc_fragColor.w = (ceil((pc_fragColor.w * 255.0)) / 255.0);
  pc_fragColor.xyz = (pc_fragColor.xyz / pc_fragColor.w);
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord1,TEXCOORD1,^SH^-1722871350^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=3) in vec2 vertex_texCoord1;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  highp vec4 tmpvar_2;
  tmpvar_2.zw = vec2(0.5, 1.0);
  tmpvar_2.xy = ((vertex_texCoord1 * 2.0) - 1.0);
  gl_Position = tmpvar_2;
  vPositionW = (matrix_model * tmpvar_1).xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv1 = vertex_texCoord1;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv1;
lowp vec3 dDiffuseLight;
vec3 dLightDirW;
float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform sampler2D texture_lightMap;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((8.0 * tmpvar_2.w) * tmpvar_2.xyz);
  dDiffuseLight = (tmpvar_3 * tmpvar_3);
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(dLightDirW);
  float falloff_5;
  float tmpvar_6;
  tmpvar_6 = dot (dLightDirW, dLightDirW);
  float tmpvar_7;
  tmpvar_7 = (1.0/(light0_radius));
  falloff_5 = ((1.0/((tmpvar_6 + 1.0))) * 16.0);
  float x_8;
  x_8 = (tmpvar_6 * (tmpvar_7 * tmpvar_7));
  float tmpvar_9;
  tmpvar_9 = clamp ((1.0 - (x_8 * x_8)), 0.0, 1.0);
  falloff_5 = (falloff_5 * (tmpvar_9 * tmpvar_9));
  dAtten = falloff_5;
  if ((falloff_5 > 1e-05)) {
    float tmpvar_10;
    tmpvar_10 = clamp (((
      dot (tmpvar_4, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_5 * (tmpvar_10 * (tmpvar_10 * 
      (3.0 - (2.0 * tmpvar_10))
    )));
    dAtten = (dAtten * max (dot (tmpvar_1, 
      -(tmpvar_4)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
  };
  pc_fragColor.xyz = dDiffuseLight;
  pc_fragColor.xyz = pow (pc_fragColor.xyz, vec3(0.5, 0.5, 0.5));
  pc_fragColor.xyz = (pc_fragColor.xyz / 8.0);
  pc_fragColor.w = clamp (max (max (pc_fragColor.x, pc_fragColor.y), max (pc_fragColor.z, 0.003921569)), 0.0, 1.0);
  pc_fragColor.w = (ceil((pc_fragColor.w * 255.0)) / 255.0);
  pc_fragColor.xyz = (pc_fragColor.xyz / pc_fragColor.w);
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord1,TEXCOORD1,^SH^-658873696^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=3) in vec2 vertex_texCoord1;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  highp vec4 tmpvar_2;
  tmpvar_2.zw = vec2(0.5, 1.0);
  tmpvar_2.xy = ((vertex_texCoord1 * 2.0) - 1.0);
  gl_Position = tmpvar_2;
  vPositionW = (matrix_model * tmpvar_1).xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv1 = vertex_texCoord1;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv1;
lowp vec3 dDiffuseLight;
vec3 dLightDirW;
float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform sampler2D texture_lightMap;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((8.0 * tmpvar_2.w) * tmpvar_2.xyz);
  dDiffuseLight = (tmpvar_3 * tmpvar_3);
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(dLightDirW);
  float tmpvar_5;
  tmpvar_5 = max (((light0_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light0_radius), 0.0);
  dAtten = tmpvar_5;
  if ((tmpvar_5 > 1e-05)) {
    dAtten = (tmpvar_5 * max (dot (tmpvar_1, 
      -(tmpvar_4)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
  };
  pc_fragColor.xyz = dDiffuseLight;
  pc_fragColor.xyz = pow (pc_fragColor.xyz, vec3(0.5, 0.5, 0.5));
  pc_fragColor.xyz = (pc_fragColor.xyz / 8.0);
  pc_fragColor.w = clamp (max (max (pc_fragColor.x, pc_fragColor.y), max (pc_fragColor.z, 0.003921569)), 0.0, 1.0);
  pc_fragColor.w = (ceil((pc_fragColor.w * 255.0)) / 255.0);
  pc_fragColor.xyz = (pc_fragColor.xyz / pc_fragColor.w);
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord1,TEXCOORD1,^SH^-1804213619^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=3) in vec2 vertex_texCoord1;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  highp vec4 tmpvar_2;
  tmpvar_2.zw = vec2(0.5, 1.0);
  tmpvar_2.xy = ((vertex_texCoord1 * 2.0) - 1.0);
  gl_Position = tmpvar_2;
  vPositionW = (matrix_model * tmpvar_1).xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv1 = vertex_texCoord1;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv1;
lowp vec3 dDiffuseLight;
vec3 dLightDirW;
float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform sampler2D texture_lightMap;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((8.0 * tmpvar_2.w) * tmpvar_2.xyz);
  dDiffuseLight = (tmpvar_3 * tmpvar_3);
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(dLightDirW);
  float tmpvar_5;
  tmpvar_5 = max (((light0_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light0_radius), 0.0);
  dAtten = tmpvar_5;
  if ((tmpvar_5 > 1e-05)) {
    float tmpvar_6;
    tmpvar_6 = clamp (((
      dot (tmpvar_4, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_5 * (tmpvar_6 * (tmpvar_6 * 
      (3.0 - (2.0 * tmpvar_6))
    )));
    dAtten = (dAtten * max (dot (tmpvar_1, 
      -(tmpvar_4)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
  };
  pc_fragColor.xyz = dDiffuseLight;
  pc_fragColor.xyz = pow (pc_fragColor.xyz, vec3(0.5, 0.5, 0.5));
  pc_fragColor.xyz = (pc_fragColor.xyz / 8.0);
  pc_fragColor.w = clamp (max (max (pc_fragColor.x, pc_fragColor.y), max (pc_fragColor.z, 0.003921569)), 0.0, 1.0);
  pc_fragColor.w = (ceil((pc_fragColor.w * 255.0)) / 255.0);
  pc_fragColor.xyz = (pc_fragColor.xyz / pc_fragColor.w);
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord1,TEXCOORD1,^SH^depthrgba_opama_pnt_1^VS^attribute vec3 vertex_position;
uniform mat4 matrix_model;
uniform mat4 matrix_viewProjection;
vec3 dPositionW;
mat4 dModelMatrix;
mat4 getModelMatrix() {
    return matrix_model;
}
vec4 getPosition() {
    dModelMatrix = getModelMatrix();
    vec4 posW = dModelMatrix * vec4(vertex_position, 1.0);
    dPositionW = posW.xyz;
    return matrix_viewProjection * posW;
}
vec3 getWorldPosition() {
    return dPositionW;
}
attribute vec2 vertex_texCoord0;

varying vec2 vUv0;

varying vec3 worldPos;

void main(void)
{
   gl_Position = getPosition();
    vUv0 = vertex_texCoord0;
    worldPos = dPositionW;
}
^PS^precision highp float;

varying vec2 vUv0;

uniform sampler2D texture_opacityMap;

uniform float alpha_ref;
void alphaTest(float a) {
    if (a < alpha_ref) discard;
}
varying vec3 worldPos;

uniform vec3 view_position;

uniform float light_radius;

vec2 encodeFloatRG( float v ) {

                     vec2 enc = vec2(1.0, 255.0) * v;

                     enc = fract(enc);

                     enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);

                     return enc;

                    }
void main(void)
{
    alphaTest( texture2D(texture_opacityMap, vUv0).a );

   float depth = min(distance(view_position, worldPos) / light_radius, 0.99999);
   gl_FragColor = vec4(encodeFloatRG(depth), encodeFloatRG(depth*depth));
}
^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,^SH^depthrgba_pnt_1^VS^attribute vec3 vertex_position;
uniform mat4 matrix_model;
uniform mat4 matrix_viewProjection;
vec3 dPositionW;
mat4 dModelMatrix;
mat4 getModelMatrix() {
    return matrix_model;
}
vec4 getPosition() {
    dModelMatrix = getModelMatrix();
    vec4 posW = dModelMatrix * vec4(vertex_position, 1.0);
    dPositionW = posW.xyz;
    return matrix_viewProjection * posW;
}
vec3 getWorldPosition() {
    return dPositionW;
}
varying vec3 worldPos;

void main(void)
{
   gl_Position = getPosition();
    worldPos = dPositionW;
}
^PS^precision highp float;

varying vec3 worldPos;

uniform vec3 view_position;

uniform float light_radius;

vec2 encodeFloatRG( float v ) {

                     vec2 enc = vec2(1.0, 255.0) * v;

                     enc = fract(enc);

                     enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);

                     return enc;

                    }
void main(void)
{
   float depth = min(distance(view_position, worldPos) / light_radius, 0.99999);
   gl_FragColor = vec4(encodeFloatRG(depth), encodeFloatRG(depth*depth));
}
^AT^vertex_position,POSITION,^SH^blurVsm13true^VS^#version 300 es
in vec2 vertex_position;
out vec2 vUv0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.zw = vec2(0.5, 1.0);
  tmpvar_1.xy = vertex_position;
  gl_Position = tmpvar_1;
  vUv0 = ((vertex_position * 0.5) + 0.5);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec2 vUv0;
uniform sampler2D source;
uniform vec2 pixelOffset;
uniform float weight[3];
void main ()
{
  vec2 uv_2;
  lowp vec3 moments_3;
  moments_3 = vec3(0.0, 0.0, 0.0);
  uv_2 = (vUv0 - (pixelOffset * 1.5));
  for (highp int i_1 = 0; i_1 < 3; i_1++) {
    lowp vec4 c_4;
    lowp vec4 tmpvar_5;
    tmpvar_5 = texture (source, (uv_2 + (pixelOffset * float(i_1))));
    c_4.zw = tmpvar_5.zw;
    lowp vec2 tmpvar_6;
    tmpvar_6.x = ((tmpvar_5.y * 0.003921569) + tmpvar_5.x);
    tmpvar_6.y = ((tmpvar_5.w * 0.003921569) + tmpvar_5.z);
    c_4.xy = tmpvar_6;
    moments_3 = (moments_3 + (c_4.xyz * weight[i_1]));
  };
  lowp vec2 enc_7;
  lowp vec2 tmpvar_8;
  tmpvar_8 = fract((vec2(1.0, 255.0) * moments_3.x));
  enc_7 = (tmpvar_8 - (tmpvar_8.yy * vec2(0.003921569, 0.003921569)));
  lowp vec2 enc_9;
  lowp vec2 tmpvar_10;
  tmpvar_10 = fract((vec2(1.0, 255.0) * moments_3.y));
  enc_9 = (tmpvar_10 - (tmpvar_10.yy * vec2(0.003921569, 0.003921569)));
  highp vec4 tmpvar_11;
  tmpvar_11.xy = enc_7;
  tmpvar_11.zw = enc_9;
  pc_fragColor = tmpvar_11;
}

^AT^vertex_position,POSITION,^SH^blurVsm15true^VS^#version 300 es
in vec2 vertex_position;
out vec2 vUv0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.zw = vec2(0.5, 1.0);
  tmpvar_1.xy = vertex_position;
  gl_Position = tmpvar_1;
  vUv0 = ((vertex_position * 0.5) + 0.5);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec2 vUv0;
uniform sampler2D source;
uniform vec2 pixelOffset;
uniform float weight[5];
void main ()
{
  vec2 uv_2;
  lowp vec3 moments_3;
  moments_3 = vec3(0.0, 0.0, 0.0);
  uv_2 = (vUv0 - (pixelOffset * 2.5));
  for (highp int i_1 = 0; i_1 < 5; i_1++) {
    lowp vec4 c_4;
    lowp vec4 tmpvar_5;
    tmpvar_5 = texture (source, (uv_2 + (pixelOffset * float(i_1))));
    c_4.zw = tmpvar_5.zw;
    lowp vec2 tmpvar_6;
    tmpvar_6.x = ((tmpvar_5.y * 0.003921569) + tmpvar_5.x);
    tmpvar_6.y = ((tmpvar_5.w * 0.003921569) + tmpvar_5.z);
    c_4.xy = tmpvar_6;
    moments_3 = (moments_3 + (c_4.xyz * weight[i_1]));
  };
  lowp vec2 enc_7;
  lowp vec2 tmpvar_8;
  tmpvar_8 = fract((vec2(1.0, 255.0) * moments_3.x));
  enc_7 = (tmpvar_8 - (tmpvar_8.yy * vec2(0.003921569, 0.003921569)));
  lowp vec2 enc_9;
  lowp vec2 tmpvar_10;
  tmpvar_10 = fract((vec2(1.0, 255.0) * moments_3.y));
  enc_9 = (tmpvar_10 - (tmpvar_10.yy * vec2(0.003921569, 0.003921569)));
  highp vec4 tmpvar_11;
  tmpvar_11.xy = enc_7;
  tmpvar_11.zw = enc_9;
  pc_fragColor = tmpvar_11;
}

^AT^vertex_position,POSITION,^SH^blurVsm111true^VS^#version 300 es
in vec2 vertex_position;
out vec2 vUv0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1.zw = vec2(0.5, 1.0);
  tmpvar_1.xy = vertex_position;
  gl_Position = tmpvar_1;
  vUv0 = ((vertex_position * 0.5) + 0.5);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec2 vUv0;
uniform sampler2D source;
uniform vec2 pixelOffset;
uniform float weight[11];
void main ()
{
  vec2 uv_2;
  lowp vec3 moments_3;
  moments_3 = vec3(0.0, 0.0, 0.0);
  uv_2 = (vUv0 - (pixelOffset * 5.5));
  for (highp int i_1 = 0; i_1 < 11; i_1++) {
    lowp vec4 c_4;
    lowp vec4 tmpvar_5;
    tmpvar_5 = texture (source, (uv_2 + (pixelOffset * float(i_1))));
    c_4.zw = tmpvar_5.zw;
    lowp vec2 tmpvar_6;
    tmpvar_6.x = ((tmpvar_5.y * 0.003921569) + tmpvar_5.x);
    tmpvar_6.y = ((tmpvar_5.w * 0.003921569) + tmpvar_5.z);
    c_4.xy = tmpvar_6;
    moments_3 = (moments_3 + (c_4.xyz * weight[i_1]));
  };
  lowp vec2 enc_7;
  lowp vec2 tmpvar_8;
  tmpvar_8 = fract((vec2(1.0, 255.0) * moments_3.x));
  enc_7 = (tmpvar_8 - (tmpvar_8.yy * vec2(0.003921569, 0.003921569)));
  lowp vec2 enc_9;
  lowp vec2 tmpvar_10;
  tmpvar_10 = fract((vec2(1.0, 255.0) * moments_3.y));
  enc_9 = (tmpvar_10 - (tmpvar_10.yy * vec2(0.003921569, 0.003921569)));
  highp vec4 tmpvar_11;
  tmpvar_11.xy = enc_7;
  tmpvar_11.zw = enc_9;
  pc_fragColor = tmpvar_11;
}

^AT^vertex_position,POSITION,^SH^depthrgba_opamb_pnt_1^VS^attribute vec3 vertex_position;
uniform mat4 matrix_model;
uniform mat4 matrix_viewProjection;
vec3 dPositionW;
mat4 dModelMatrix;
mat4 getModelMatrix() {
    return matrix_model;
}
vec4 getPosition() {
    dModelMatrix = getModelMatrix();
    vec4 posW = dModelMatrix * vec4(vertex_position, 1.0);
    dPositionW = posW.xyz;
    return matrix_viewProjection * posW;
}
vec3 getWorldPosition() {
    return dPositionW;
}
attribute vec2 vertex_texCoord0;

varying vec2 vUv0;

varying vec3 worldPos;

void main(void)
{
   gl_Position = getPosition();
    vUv0 = vertex_texCoord0;
    worldPos = dPositionW;
}
^PS^precision highp float;

varying vec2 vUv0;

uniform sampler2D texture_opacityMap;

uniform float alpha_ref;
void alphaTest(float a) {
    if (a < alpha_ref) discard;
}
varying vec3 worldPos;

uniform vec3 view_position;

uniform float light_radius;

vec2 encodeFloatRG( float v ) {

                     vec2 enc = vec2(1.0, 255.0) * v;

                     enc = fract(enc);

                     enc -= enc.yy * vec2(1.0/255.0, 1.0/255.0);

                     return enc;

                    }
void main(void)
{
    alphaTest( texture2D(texture_opacityMap, vUv0).b );

   float depth = min(distance(view_position, worldPos) / light_radius, 0.99999);
   gl_FragColor = vec4(encodeFloatRG(depth), encodeFloatRG(depth*depth));
}
^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,^SH^-1033445037^VS^#version 300 es
out vec3 vPositionW;
layout(location=0) in vec3 vertex_position;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
uniform vec3 light_globalAmbient;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
void main ()
{
  pc_fragColor.xyz = (material_diffuse * light_globalAmbient);
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,^SH^-597599666^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
uniform vec3 view_position;
vec3 dSpecularity;
float dGlossiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform vec3 envBoxMin;
uniform vec3 envBoxMax;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_4;
  float tmpvar_5;
  tmpvar_5 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  fresnel_4 = (tmpvar_5 * (tmpvar_6 * tmpvar_6));
  fresnel_4 = (fresnel_4 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_4));
  vec3 fixedReflDir_7;
  vec3 vec_8;
  vec_8 = tmpvar_2;
  float tmpvar_9;
  tmpvar_9 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_10;
  tmpvar_10 = abs(tmpvar_2.x);
  if ((tmpvar_10 != tmpvar_9)) {
    vec_8.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_11;
  tmpvar_11 = abs(tmpvar_2.y);
  if ((tmpvar_11 != tmpvar_9)) {
    vec_8.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.z);
  if ((tmpvar_12 != tmpvar_9)) {
    vec_8.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_7.yz = vec_8.yz;
  fixedReflDir_7.x = -(vec_8.x);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (texture_prefilteredCubeMap4, fixedReflDir_7);
  lowp vec3 tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((8.0 * tmpvar_13.w) * tmpvar_13.xyz);
  tmpvar_14 = (tmpvar_15 * tmpvar_15);
  lowp vec4 cube_0_17;
  lowp vec4 cube_1_18;
  lowp vec4 cubes_19[6];
  vec3 fixedReflDir_20;
  highp int index2_21;
  highp int index1_22;
  float tmpvar_23;
  tmpvar_23 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_22 = int(tmpvar_23);
  index2_21 = int(min ((tmpvar_23 + 1.0), 7.0));
  vec3 tmpvar_24;
  vec3 tmpvar_25;
  tmpvar_25 = ((envBoxMax - vPositionW) / tmpvar_3);
  vec3 tmpvar_26;
  tmpvar_26 = ((envBoxMin - vPositionW) / tmpvar_3);
  float tmpvar_27;
  if ((tmpvar_3.x > 0.0)) {
    tmpvar_27 = tmpvar_25.x;
  } else {
    tmpvar_27 = tmpvar_26.x;
  };
  float tmpvar_28;
  if ((tmpvar_3.y > 0.0)) {
    tmpvar_28 = tmpvar_25.y;
  } else {
    tmpvar_28 = tmpvar_26.y;
  };
  float tmpvar_29;
  if ((tmpvar_3.z > 0.0)) {
    tmpvar_29 = tmpvar_25.z;
  } else {
    tmpvar_29 = tmpvar_26.z;
  };
  tmpvar_24 = ((vPositionW + (tmpvar_3 * 
    min (min (tmpvar_27, tmpvar_28), tmpvar_29)
  )) - ((envBoxMin + envBoxMax) * 0.5));
  vec3 vec_30;
  vec_30 = tmpvar_24;
  float tmpvar_31;
  tmpvar_31 = (1.0 - (exp2(tmpvar_23) / 128.0));
  float tmpvar_32;
  tmpvar_32 = max (max (abs(tmpvar_24.x), abs(tmpvar_24.y)), abs(tmpvar_24.z));
  float tmpvar_33;
  tmpvar_33 = abs(tmpvar_24.x);
  if ((tmpvar_33 != tmpvar_32)) {
    vec_30.x = (tmpvar_24.x * tmpvar_31);
  };
  float tmpvar_34;
  tmpvar_34 = abs(tmpvar_24.y);
  if ((tmpvar_34 != tmpvar_32)) {
    vec_30.y = (tmpvar_24.y * tmpvar_31);
  };
  float tmpvar_35;
  tmpvar_35 = abs(tmpvar_24.z);
  if ((tmpvar_35 != tmpvar_32)) {
    vec_30.z = (tmpvar_24.z * tmpvar_31);
  };
  fixedReflDir_20.yz = vec_30.yz;
  fixedReflDir_20.x = -(vec_30.x);
  cubes_19[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_20);
  cubes_19[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_20);
  cubes_19[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_20);
  cubes_19[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_20);
  cubes_19[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_20);
  cubes_19[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_20);
  for (highp int i_16 = 0; i_16 < 6; i_16++) {
    if ((i_16 == index1_22)) {
      cube_0_17 = cubes_19[i_16];
    };
    if ((i_16 == index2_21)) {
      cube_1_18 = cubes_19[i_16];
    };
  };
  lowp vec4 tmpvar_36;
  tmpvar_36 = mix (cube_0_17, cube_1_18, fract(tmpvar_23));
  lowp vec3 tmpvar_37;
  tmpvar_37 = ((8.0 * tmpvar_36.w) * tmpvar_36.xyz);
  lowp vec4 tmpvar_38;
  tmpvar_38.xyz = (tmpvar_37 * tmpvar_37);
  tmpvar_38.w = material_reflectivity;
  lowp vec3 tmpvar_39;
  tmpvar_39 = mix ((material_diffuse * tmpvar_14), (tmpvar_38.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_39;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_40;
  tmpvar_40 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_40, tmpvar_40))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,^SH^-1973141971^VS^#version 300 es
out vec3 vPositionW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec2 vUv0;
uniform vec3 view_position;
uniform vec3 fog_color;
uniform float fog_density;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
uniform sampler2D texture_lightMap;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_lightMap, vUv0);
  lowp vec3 tmpvar_2;
  tmpvar_2 = ((8.0 * tmpvar_1.w) * tmpvar_1.xyz);
  lowp vec3 tmpvar_3;
  tmpvar_3 = (material_diffuse * (tmpvar_2 * tmpvar_2));
  pc_fragColor.xyz = tmpvar_3;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_4;
  tmpvar_4 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_4, tmpvar_4))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,^SH^-298628061^VS^#version 300 es
out vec3 vPositionW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform sampler2D texture_lightMap;
void main ()
{
  lowp vec4 rgba_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (texture_diffuseMap, vUv1);
  rgba_1.w = tmpvar_2.w;
  rgba_1.xyz = pow (tmpvar_2.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_lightMap, vUv0);
  lowp vec3 tmpvar_4;
  tmpvar_4 = ((8.0 * tmpvar_3.w) * tmpvar_3.xyz);
  lowp vec3 tmpvar_5;
  tmpvar_5 = (rgba_1.xyz * (tmpvar_4 * tmpvar_4));
  pc_fragColor.xyz = tmpvar_5;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_6;
  tmpvar_6 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_6, tmpvar_6))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^-1442435223^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv1;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv1 = vertex_texCoord1;
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv1;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform sampler2D texture_lightMap;
void main ()
{
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (texture_normalMap, vUV0_1).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_3, material_bumpiness)));
  lowp vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUV0_1);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_7;
  tmpvar_7 = mix (vec3(0.04, 0.04, 0.04), rgba_5.xyz, material_metalness);
  dAlbedo = (rgba_5.xyz * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_8;
  lowp float tmpvar_9;
  tmpvar_9 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  fresnel_8 = (tmpvar_9 * (tmpvar_10 * tmpvar_10));
  fresnel_8 = (fresnel_8 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_7 + ((1.0 - tmpvar_7) * fresnel_8));
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (texture_aoMap, vUv1);
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((8.0 * tmpvar_12.w) * tmpvar_12.xyz);
  dDiffuseLight = (tmpvar_13 * tmpvar_13);
  lowp vec4 cube_0_15;
  lowp vec4 cube_1_16;
  lowp vec4 cubes_17[6];
  lowp vec3 fixedReflDir_18;
  lowp int index2_19;
  lowp int index1_20;
  lowp float tmpvar_21;
  tmpvar_21 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_20 = int(tmpvar_21);
  index2_19 = int(min ((tmpvar_21 + 1.0), 7.0));
  lowp vec3 vec_22;
  vec_22 = tmpvar_4;
  lowp float tmpvar_23;
  tmpvar_23 = (1.0 - (exp2(tmpvar_21) / 128.0));
  lowp float tmpvar_24;
  tmpvar_24 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  lowp float tmpvar_25;
  tmpvar_25 = abs(tmpvar_4.x);
  if ((tmpvar_25 != tmpvar_24)) {
    vec_22.x = (tmpvar_4.x * tmpvar_23);
  };
  lowp float tmpvar_26;
  tmpvar_26 = abs(tmpvar_4.y);
  if ((tmpvar_26 != tmpvar_24)) {
    vec_22.y = (tmpvar_4.y * tmpvar_23);
  };
  lowp float tmpvar_27;
  tmpvar_27 = abs(tmpvar_4.z);
  if ((tmpvar_27 != tmpvar_24)) {
    vec_22.z = (tmpvar_4.z * tmpvar_23);
  };
  fixedReflDir_18.yz = vec_22.yz;
  fixedReflDir_18.x = -(vec_22.x);
  cubes_17[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_18);
  cubes_17[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_18);
  cubes_17[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_18);
  cubes_17[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_18);
  cubes_17[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_18);
  cubes_17[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_18);
  for (highp int i_14 = 0; i_14 < 6; i_14++) {
    if ((i_14 == index1_20)) {
      cube_0_15 = cubes_17[i_14];
    };
    if ((i_14 == index2_19)) {
      cube_1_16 = cubes_17[i_14];
    };
  };
  lowp vec4 tmpvar_28;
  tmpvar_28 = mix (cube_0_15, cube_1_16, fract(tmpvar_21));
  lowp vec3 tmpvar_29;
  tmpvar_29 = ((8.0 * tmpvar_28.w) * tmpvar_28.xyz);
  lowp vec4 tmpvar_30;
  tmpvar_30.xyz = (tmpvar_29 * tmpvar_29);
  tmpvar_30.w = material_reflectivity;
  dReflection = tmpvar_30;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_31;
  tmpvar_31 = normalize(dLightDirW);
  float falloff_32;
  float tmpvar_33;
  tmpvar_33 = dot (dLightDirW, dLightDirW);
  float tmpvar_34;
  tmpvar_34 = (1.0/(light0_radius));
  falloff_32 = ((1.0/((tmpvar_33 + 1.0))) * 16.0);
  float x_35;
  x_35 = (tmpvar_33 * (tmpvar_34 * tmpvar_34));
  float tmpvar_36;
  tmpvar_36 = clamp ((1.0 - (x_35 * x_35)), 0.0, 1.0);
  falloff_32 = (falloff_32 * (tmpvar_36 * tmpvar_36));
  dAtten = falloff_32;
  if ((falloff_32 > 1e-05)) {
    float tmpvar_37;
    tmpvar_37 = clamp (((
      dot (tmpvar_31, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_32 * (tmpvar_37 * (tmpvar_37 * 
      (3.0 - (2.0 * tmpvar_37))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_31)
    ), 0.0));
    vec4 projPos_38;
    vec4 tmpvar_39;
    tmpvar_39.w = 1.0;
    tmpvar_39.xyz = vPositionW;
    vec4 tmpvar_40;
    tmpvar_40 = (light0_shadowMatrix * tmpvar_39);
    projPos_38.zw = tmpvar_40.zw;
    projPos_38.xy = (tmpvar_40.xy / tmpvar_40.w);
    float Z_41;
    Z_41 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_42;
    tmpvar_42 = texture (light0_shadowMap, projPos_38.xy);
    lowp vec3 tmpvar_43;
    tmpvar_43.z = 0.0;
    tmpvar_43.x = ((tmpvar_42.y * 0.003921569) + tmpvar_42.x);
    tmpvar_43.y = ((tmpvar_42.w * 0.003921569) + tmpvar_42.z);
    float tmpvar_44;
    tmpvar_44 = (light0_shadowParams.y * Z_41);
    lowp float tmpvar_45;
    tmpvar_45 = max ((tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x)), (tmpvar_44 * tmpvar_44));
    lowp float tmpvar_46;
    tmpvar_46 = (Z_41 - tmpvar_43.x);
    lowp float tmpvar_47;
    tmpvar_47 = clamp (((
      (tmpvar_45 / (tmpvar_45 + (tmpvar_46 * tmpvar_46)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_48;
    if ((Z_41 <= tmpvar_43.x)) {
      tmpvar_48 = 1.0;
    } else {
      tmpvar_48 = tmpvar_47;
    };
    dAtten = (dAtten * tmpvar_48);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_49;
    tmpvar_49 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_49 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_49 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_31) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_50)
     * 
      (tmpvar_50 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dSpecularLight = (dSpecularLight * tmpvar_11.z);
  dReflection = (tmpvar_30 * tmpvar_11.z);
  lowp vec3 tmpvar_51;
  tmpvar_51 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_51;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_52;
  tmpvar_52 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_52, tmpvar_52))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^-933171447^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv1;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv1 = vertex_texCoord1;
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv1;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform sampler2D texture_lightMap;
uniform sampler2D topMap;
uniform vec3 leavesPos;
void main ()
{
  vec2 offsets_1[8];
  lowp vec3 shadow_2;
  float height_3;
  vec2 topUv_4;
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_5;
  tmpvar_5 = normalize((view_position - vPositionW));
  mat3 tmpvar_6;
  tmpvar_6[uint(0)] = normalize(vTangentW);
  tmpvar_6[1u] = normalize(vBinormalW);
  tmpvar_6[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_7;
  tmpvar_7 = ((texture (texture_normalMap, vUV0_1).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_6 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_7, material_bumpiness)));
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_5) * dNormalW)
  ) - tmpvar_5));
  lowp vec4 rgba_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_diffuseMap, vUV0_1);
  rgba_9.w = tmpvar_10.w;
  rgba_9.xyz = pow (tmpvar_10.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_11;
  tmpvar_11 = mix (vec3(0.04, 0.04, 0.04), rgba_9.xyz, material_metalness);
  dAlbedo = (rgba_9.xyz * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_12;
  lowp float tmpvar_13;
  tmpvar_13 = (1.0 - max (dot (dNormalW, tmpvar_5), 0.0));
  lowp float tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  fresnel_12 = (tmpvar_13 * (tmpvar_14 * tmpvar_14));
  fresnel_12 = (fresnel_12 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_11 + ((1.0 - tmpvar_11) * fresnel_12));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_aoMap, vUv1);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = (tmpvar_17 * tmpvar_17);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  lowp vec3 fixedReflDir_22;
  lowp int index2_23;
  lowp int index1_24;
  lowp float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  lowp vec3 vec_26;
  vec_26 = tmpvar_8;
  lowp float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  lowp float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_8.x), abs(tmpvar_8.y)), abs(tmpvar_8.z));
  lowp float tmpvar_29;
  tmpvar_29 = abs(tmpvar_8.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_8.x * tmpvar_27);
  };
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_8.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_8.y * tmpvar_27);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_8.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_8.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = (tmpvar_33 * tmpvar_33);
  tmpvar_34.w = material_reflectivity;
  dReflection = tmpvar_34;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  lowp float tmpvar_36;
  tmpvar_36 = max (((light0_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light0_radius), 0.0);
  dAtten = tmpvar_36;
  if ((tmpvar_36 > 1e-05)) {
    float tmpvar_37;
    tmpvar_37 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_36 * (tmpvar_37 * (tmpvar_37 * 
      (3.0 - (2.0 * tmpvar_37))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_35)
    ), 0.0));
    vec4 projPos_38;
    vec4 tmpvar_39;
    tmpvar_39.w = 1.0;
    tmpvar_39.xyz = vPositionW;
    vec4 tmpvar_40;
    tmpvar_40 = (light0_shadowMatrix * tmpvar_39);
    projPos_38.zw = tmpvar_40.zw;
    projPos_38.xy = (tmpvar_40.xy / tmpvar_40.w);
    float Z_41;
    Z_41 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_42;
    tmpvar_42 = texture (light0_shadowMap, projPos_38.xy);
    lowp vec3 tmpvar_43;
    tmpvar_43.z = 0.0;
    tmpvar_43.x = ((tmpvar_42.y * 0.003921569) + tmpvar_42.x);
    tmpvar_43.y = ((tmpvar_42.w * 0.003921569) + tmpvar_42.z);
    float tmpvar_44;
    tmpvar_44 = (light0_shadowParams.y * Z_41);
    lowp float tmpvar_45;
    tmpvar_45 = max ((tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x)), (tmpvar_44 * tmpvar_44));
    lowp float tmpvar_46;
    tmpvar_46 = (Z_41 - tmpvar_43.x);
    lowp float tmpvar_47;
    tmpvar_47 = clamp (((
      (tmpvar_45 / (tmpvar_45 + (tmpvar_46 * tmpvar_46)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_48;
    if ((Z_41 <= tmpvar_43.x)) {
      tmpvar_48 = 1.0;
    } else {
      tmpvar_48 = tmpvar_47;
    };
    dAtten = (dAtten * tmpvar_48);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_49;
    tmpvar_49 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_49 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_49 * (
        (1.0/(clamp (sqrt(dot (tmpvar_7, tmpvar_7)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_5)
      ), dNormalW), 0.0), tmpvar_50)
     * 
      (tmpvar_50 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dSpecularLight = (dSpecularLight * tmpvar_15.z);
  dReflection = (tmpvar_34 * tmpvar_15.z);
  vec3 tmpvar_51;
  tmpvar_51 = (vPositionW - leavesPos);
  vec2 tmpvar_52;
  tmpvar_52 = (((tmpvar_51.xz / vec2(16.0, -16.0)) * 0.5) + 0.5);
  topUv_4 = tmpvar_52;
  height_3 = 0.0;
  if ((((
    (tmpvar_51.x > -1.1)
   && 
    (tmpvar_51.x < 1.1)
  ) && (tmpvar_51.z > -1.1)) && (tmpvar_51.z < 1.1))) {
    height_3 = 1.0;
  };
  height_3 = ((height_3 / 4.0) + 0.01);
  shadow_2 = vec3(0.0, 0.0, 0.0);
  offsets_1[0] = vec2(-0.003196313, -0.00186043);
  offsets_1[1] = vec2(-0.002162161, -0.006022575);
  offsets_1[2] = vec2(-0.00398718, 0.002402105);
  offsets_1[3] = vec2(0.003552565, 0.00177002);
  offsets_1[4] = vec2(-0.0001136277, 0.005086533);
  offsets_1[5] = vec2(0.002264441, -0.003647392);
  offsets_1[6] = vec2(0.006564216, -0.002330364);
  offsets_1[7] = vec2(0.005495788, 0.005262966);
  if ((vNormalW.y > 0.0)) {
    for (highp int i_53 = 0; i_53 < 8; i_53++) {
      lowp vec4 tmpvar_54;
      tmpvar_54 = texture (topMap, (topUv_4 + offsets_1[i_53]));
      lowp float tmpvar_55;
      tmpvar_55 = tmpvar_54.w;
      lowp vec3 tmpvar_56;
      if ((height_3 < tmpvar_54.w)) {
        lowp vec3 tmpvar_57;
        tmpvar_57.xz = vec2(0.125, 1.0);
        tmpvar_57.y = tmpvar_55;
        tmpvar_56 = tmpvar_57;
      } else {
        tmpvar_56 = vec3(0.0, 0.0, 0.0);
      };
      shadow_2 = (shadow_2 + tmpvar_56);
    };
    shadow_2.x = (1.0 - (shadow_2.x * 0.3));
    shadow_2.y = (shadow_2.y / shadow_2.z);
    dDiffuseLight = (dDiffuseLight * mix (shadow_2.x, 1.0, clamp (shadow_2.y, 0.0, 1.0)));
    lowp vec4 tmpvar_58;
    tmpvar_58 = texture (topMap, tmpvar_52);
    dDiffuseLight = (dDiffuseLight * mix (1.0, (1.0 - 
      clamp (((tmpvar_58.x - tmpvar_58.y) * 4.0), 0.0, 1.0)
    ), clamp (vNormalW.y, 0.0, 1.0)));
  };
  lowp vec3 tmpvar_59;
  tmpvar_59 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_59;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_60;
  tmpvar_60 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_60, tmpvar_60))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^-1114140821^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv1;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv1 = vertex_texCoord1;
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv1;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform sampler2D texture_lightMap;
uniform sampler2D topMap;
uniform vec3 leavesPos;
void main ()
{
  vec2 offsets_1[8];
  lowp vec3 shadow_2;
  float height_3;
  vec2 topUv_4;
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_5;
  tmpvar_5 = normalize((view_position - vPositionW));
  mat3 tmpvar_6;
  tmpvar_6[uint(0)] = normalize(vTangentW);
  tmpvar_6[1u] = normalize(vBinormalW);
  tmpvar_6[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_7;
  tmpvar_7 = ((texture (texture_normalMap, vUV0_1).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_6 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_7, material_bumpiness)));
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_5) * dNormalW)
  ) - tmpvar_5));
  lowp vec4 rgba_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_diffuseMap, vUV0_1);
  rgba_9.w = tmpvar_10.w;
  rgba_9.xyz = pow (tmpvar_10.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_11;
  tmpvar_11 = mix (vec3(0.04, 0.04, 0.04), rgba_9.xyz, material_metalness);
  dAlbedo = (rgba_9.xyz * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_12;
  lowp float tmpvar_13;
  tmpvar_13 = (1.0 - max (dot (dNormalW, tmpvar_5), 0.0));
  lowp float tmpvar_14;
  tmpvar_14 = (tmpvar_13 * tmpvar_13);
  fresnel_12 = (tmpvar_13 * (tmpvar_14 * tmpvar_14));
  fresnel_12 = (fresnel_12 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_11 + ((1.0 - tmpvar_11) * fresnel_12));
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_aoMap, vUv1);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = (tmpvar_17 * tmpvar_17);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  lowp vec3 fixedReflDir_22;
  lowp int index2_23;
  lowp int index1_24;
  lowp float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  lowp vec3 vec_26;
  vec_26 = tmpvar_8;
  lowp float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  lowp float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_8.x), abs(tmpvar_8.y)), abs(tmpvar_8.z));
  lowp float tmpvar_29;
  tmpvar_29 = abs(tmpvar_8.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_8.x * tmpvar_27);
  };
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_8.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_8.y * tmpvar_27);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_8.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_8.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = (tmpvar_33 * tmpvar_33);
  tmpvar_34.w = material_reflectivity;
  dReflection = tmpvar_34;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_35)
    ), 0.0));
    vec4 projPos_42;
    vec4 tmpvar_43;
    tmpvar_43.w = 1.0;
    tmpvar_43.xyz = vPositionW;
    vec4 tmpvar_44;
    tmpvar_44 = (light0_shadowMatrix * tmpvar_43);
    projPos_42.zw = tmpvar_44.zw;
    projPos_42.xy = (tmpvar_44.xy / tmpvar_44.w);
    float Z_45;
    Z_45 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture (light0_shadowMap, projPos_42.xy);
    lowp vec3 tmpvar_47;
    tmpvar_47.z = 0.0;
    tmpvar_47.x = ((tmpvar_46.y * 0.003921569) + tmpvar_46.x);
    tmpvar_47.y = ((tmpvar_46.w * 0.003921569) + tmpvar_46.z);
    float tmpvar_48;
    tmpvar_48 = (light0_shadowParams.y * Z_45);
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x)), (tmpvar_48 * tmpvar_48));
    lowp float tmpvar_50;
    tmpvar_50 = (Z_45 - tmpvar_47.x);
    lowp float tmpvar_51;
    tmpvar_51 = clamp (((
      (tmpvar_49 / (tmpvar_49 + (tmpvar_50 * tmpvar_50)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_52;
    if ((Z_45 <= tmpvar_47.x)) {
      tmpvar_52 = 1.0;
    } else {
      tmpvar_52 = tmpvar_51;
    };
    dAtten = (dAtten * tmpvar_52);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_53;
    tmpvar_53 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_54;
    tmpvar_54 = max ((tmpvar_53 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_53 * (
        (1.0/(clamp (sqrt(dot (tmpvar_7, tmpvar_7)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_5)
      ), dNormalW), 0.0), tmpvar_54)
     * 
      (tmpvar_54 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_55;
  tmpvar_55 = normalize(dLightDirW);
  float falloff_56;
  float tmpvar_57;
  tmpvar_57 = dot (dLightDirW, dLightDirW);
  float tmpvar_58;
  tmpvar_58 = (1.0/(light1_radius));
  falloff_56 = ((1.0/((tmpvar_57 + 1.0))) * 16.0);
  float x_59;
  x_59 = (tmpvar_57 * (tmpvar_58 * tmpvar_58));
  float tmpvar_60;
  tmpvar_60 = clamp ((1.0 - (x_59 * x_59)), 0.0, 1.0);
  falloff_56 = (falloff_56 * (tmpvar_60 * tmpvar_60));
  dAtten = falloff_56;
  if ((falloff_56 > 1e-05)) {
    float tmpvar_61;
    tmpvar_61 = clamp (((
      dot (tmpvar_55, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_56 * (tmpvar_61 * (tmpvar_61 * 
      (3.0 - (2.0 * tmpvar_61))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_55)
    ), 0.0));
    vec4 projPos_62;
    vec4 tmpvar_63;
    tmpvar_63.w = 1.0;
    tmpvar_63.xyz = vPositionW;
    vec4 tmpvar_64;
    tmpvar_64 = (light1_shadowMatrix * tmpvar_63);
    projPos_62.zw = tmpvar_64.zw;
    projPos_62.xy = (tmpvar_64.xy / tmpvar_64.w);
    float Z_65;
    Z_65 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_66;
    tmpvar_66 = texture (light1_shadowMap, projPos_62.xy);
    lowp vec3 tmpvar_67;
    tmpvar_67.z = 0.0;
    tmpvar_67.x = ((tmpvar_66.y * 0.003921569) + tmpvar_66.x);
    tmpvar_67.y = ((tmpvar_66.w * 0.003921569) + tmpvar_66.z);
    float tmpvar_68;
    tmpvar_68 = (light1_shadowParams.y * Z_65);
    lowp float tmpvar_69;
    tmpvar_69 = max ((tmpvar_67.y - (tmpvar_67.x * tmpvar_67.x)), (tmpvar_68 * tmpvar_68));
    lowp float tmpvar_70;
    tmpvar_70 = (Z_65 - tmpvar_67.x);
    lowp float tmpvar_71;
    tmpvar_71 = clamp (((
      (tmpvar_69 / (tmpvar_69 + (tmpvar_70 * tmpvar_70)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_72;
    if ((Z_65 <= tmpvar_67.x)) {
      tmpvar_72 = 1.0;
    } else {
      tmpvar_72 = tmpvar_71;
    };
    dAtten = (dAtten * tmpvar_72);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_73;
    tmpvar_73 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_74;
    tmpvar_74 = max ((tmpvar_73 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_73 * (
        (1.0/(clamp (sqrt(dot (tmpvar_7, tmpvar_7)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_55) + tmpvar_5)
      ), dNormalW), 0.0), tmpvar_74)
     * 
      (tmpvar_74 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dSpecularLight = (dSpecularLight * tmpvar_15.z);
  dReflection = (tmpvar_34 * tmpvar_15.z);
  vec3 tmpvar_75;
  tmpvar_75 = (vPositionW - leavesPos);
  vec2 tmpvar_76;
  tmpvar_76 = (((tmpvar_75.xz / vec2(16.0, -16.0)) * 0.5) + 0.5);
  topUv_4 = tmpvar_76;
  height_3 = 0.0;
  if ((((
    (tmpvar_75.x > -1.1)
   && 
    (tmpvar_75.x < 1.1)
  ) && (tmpvar_75.z > -1.1)) && (tmpvar_75.z < 1.1))) {
    height_3 = 1.0;
  };
  height_3 = ((height_3 / 4.0) + 0.01);
  shadow_2 = vec3(0.0, 0.0, 0.0);
  offsets_1[0] = vec2(-0.003196313, -0.00186043);
  offsets_1[1] = vec2(-0.002162161, -0.006022575);
  offsets_1[2] = vec2(-0.00398718, 0.002402105);
  offsets_1[3] = vec2(0.003552565, 0.00177002);
  offsets_1[4] = vec2(-0.0001136277, 0.005086533);
  offsets_1[5] = vec2(0.002264441, -0.003647392);
  offsets_1[6] = vec2(0.006564216, -0.002330364);
  offsets_1[7] = vec2(0.005495788, 0.005262966);
  if ((vNormalW.y > 0.0)) {
    for (highp int i_77 = 0; i_77 < 8; i_77++) {
      lowp vec4 tmpvar_78;
      tmpvar_78 = texture (topMap, (topUv_4 + offsets_1[i_77]));
      lowp float tmpvar_79;
      tmpvar_79 = tmpvar_78.w;
      lowp vec3 tmpvar_80;
      if ((height_3 < tmpvar_78.w)) {
        lowp vec3 tmpvar_81;
        tmpvar_81.xz = vec2(0.125, 1.0);
        tmpvar_81.y = tmpvar_79;
        tmpvar_80 = tmpvar_81;
      } else {
        tmpvar_80 = vec3(0.0, 0.0, 0.0);
      };
      shadow_2 = (shadow_2 + tmpvar_80);
    };
    shadow_2.x = (1.0 - (shadow_2.x * 0.3));
    shadow_2.y = (shadow_2.y / shadow_2.z);
    dDiffuseLight = (dDiffuseLight * mix (shadow_2.x, 1.0, clamp (shadow_2.y, 0.0, 1.0)));
    lowp vec4 tmpvar_82;
    tmpvar_82 = texture (topMap, tmpvar_76);
    dDiffuseLight = (dDiffuseLight * mix (1.0, (1.0 - 
      clamp (((tmpvar_82.x - tmpvar_82.y) * 4.0), 0.0, 1.0)
    ), clamp (vNormalW.y, 0.0, 1.0)));
  };
  lowp vec3 tmpvar_83;
  tmpvar_83 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_83;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_84;
  tmpvar_84 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_84, tmpvar_84))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^-2125524167^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform sampler2D texture_lightMap;
void main ()
{
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_3, material_bumpiness)));
  lowp vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dSpecularity = (texture (texture_specularMap, vUv0).xyz * material_specular);
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_aoMap, vUv1);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (texture_lightMap, vUv1);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((8.0 * tmpvar_11.w) * tmpvar_11.xyz);
  dDiffuseLight = (tmpvar_12 * tmpvar_12);
  lowp vec4 cube_0_14;
  lowp vec4 cube_1_15;
  lowp vec4 cubes_16[6];
  lowp vec3 fixedReflDir_17;
  lowp int index2_18;
  lowp int index1_19;
  lowp float tmpvar_20;
  tmpvar_20 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_19 = int(tmpvar_20);
  index2_18 = int(min ((tmpvar_20 + 1.0), 7.0));
  lowp vec3 vec_21;
  vec_21 = tmpvar_4;
  lowp float tmpvar_22;
  tmpvar_22 = (1.0 - (exp2(tmpvar_20) / 128.0));
  lowp float tmpvar_23;
  tmpvar_23 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  lowp float tmpvar_24;
  tmpvar_24 = abs(tmpvar_4.x);
  if ((tmpvar_24 != tmpvar_23)) {
    vec_21.x = (tmpvar_4.x * tmpvar_22);
  };
  lowp float tmpvar_25;
  tmpvar_25 = abs(tmpvar_4.y);
  if ((tmpvar_25 != tmpvar_23)) {
    vec_21.y = (tmpvar_4.y * tmpvar_22);
  };
  lowp float tmpvar_26;
  tmpvar_26 = abs(tmpvar_4.z);
  if ((tmpvar_26 != tmpvar_23)) {
    vec_21.z = (tmpvar_4.z * tmpvar_22);
  };
  fixedReflDir_17.yz = vec_21.yz;
  fixedReflDir_17.x = -(vec_21.x);
  cubes_16[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_17);
  cubes_16[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_17);
  cubes_16[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_17);
  cubes_16[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_17);
  cubes_16[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_17);
  cubes_16[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_17);
  for (highp int i_13 = 0; i_13 < 6; i_13++) {
    if ((i_13 == index1_19)) {
      cube_0_14 = cubes_16[i_13];
    };
    if ((i_13 == index2_18)) {
      cube_1_15 = cubes_16[i_13];
    };
  };
  lowp vec4 tmpvar_27;
  tmpvar_27 = mix (cube_0_14, cube_1_15, fract(tmpvar_20));
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((8.0 * tmpvar_27.w) * tmpvar_27.xyz);
  lowp vec4 tmpvar_29;
  tmpvar_29.xyz = (tmpvar_28 * tmpvar_28);
  tmpvar_29.w = material_reflectivity;
  dReflection = tmpvar_29;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_30;
  tmpvar_30 = normalize(dLightDirW);
  float falloff_31;
  float tmpvar_32;
  tmpvar_32 = dot (dLightDirW, dLightDirW);
  float tmpvar_33;
  tmpvar_33 = (1.0/(light0_radius));
  falloff_31 = ((1.0/((tmpvar_32 + 1.0))) * 16.0);
  float x_34;
  x_34 = (tmpvar_32 * (tmpvar_33 * tmpvar_33));
  float tmpvar_35;
  tmpvar_35 = clamp ((1.0 - (x_34 * x_34)), 0.0, 1.0);
  falloff_31 = (falloff_31 * (tmpvar_35 * tmpvar_35));
  dAtten = falloff_31;
  if ((falloff_31 > 1e-05)) {
    float tmpvar_36;
    tmpvar_36 = clamp (((
      dot (tmpvar_30, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_31 * (tmpvar_36 * (tmpvar_36 * 
      (3.0 - (2.0 * tmpvar_36))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_30)
    ), 0.0));
    vec4 projPos_37;
    vec4 tmpvar_38;
    tmpvar_38.w = 1.0;
    tmpvar_38.xyz = vPositionW;
    vec4 tmpvar_39;
    tmpvar_39 = (light0_shadowMatrix * tmpvar_38);
    projPos_37.zw = tmpvar_39.zw;
    projPos_37.xy = (tmpvar_39.xy / tmpvar_39.w);
    float Z_40;
    Z_40 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_41;
    tmpvar_41 = texture (light0_shadowMap, projPos_37.xy);
    lowp vec3 tmpvar_42;
    tmpvar_42.z = 0.0;
    tmpvar_42.x = ((tmpvar_41.y * 0.003921569) + tmpvar_41.x);
    tmpvar_42.y = ((tmpvar_41.w * 0.003921569) + tmpvar_41.z);
    float tmpvar_43;
    tmpvar_43 = (light0_shadowParams.y * Z_40);
    lowp float tmpvar_44;
    tmpvar_44 = max ((tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x)), (tmpvar_43 * tmpvar_43));
    lowp float tmpvar_45;
    tmpvar_45 = (Z_40 - tmpvar_42.x);
    lowp float tmpvar_46;
    tmpvar_46 = clamp (((
      (tmpvar_44 / (tmpvar_44 + (tmpvar_45 * tmpvar_45)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_47;
    if ((Z_40 <= tmpvar_42.x)) {
      tmpvar_47 = 1.0;
    } else {
      tmpvar_47 = tmpvar_46;
    };
    dAtten = (dAtten * tmpvar_47);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_48;
    tmpvar_48 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_48 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_48 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_30) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_49)
     * 
      (tmpvar_49 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dSpecularLight = (dSpecularLight * tmpvar_10.z);
  dReflection = (tmpvar_29 * tmpvar_10.z);
  lowp vec3 tmpvar_50;
  tmpvar_50 = mix ((rgba_5.xyz * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_50;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_51;
  tmpvar_51 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_51, tmpvar_51))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,^SH^-606881612^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
vec3 dSpecularity;
float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = (rgba_4.xyz * material_diffuse);
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_6;
  float tmpvar_7;
  tmpvar_7 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  fresnel_6 = (tmpvar_7 * (tmpvar_8 * tmpvar_8));
  fresnel_6 = (fresnel_6 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_6));
  vec3 fixedReflDir_9;
  vec3 vec_10;
  vec_10 = tmpvar_2;
  float tmpvar_11;
  tmpvar_11 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.x);
  if ((tmpvar_12 != tmpvar_11)) {
    vec_10.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.y);
  if ((tmpvar_13 != tmpvar_11)) {
    vec_10.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.z);
  if ((tmpvar_14 != tmpvar_11)) {
    vec_10.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_9.yz = vec_10.yz;
  fixedReflDir_9.x = -(vec_10.x);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_prefilteredCubeMap4, fixedReflDir_9);
  lowp vec3 tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  tmpvar_16 = (tmpvar_17 * tmpvar_17);
  dDiffuseLight = tmpvar_16;
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_3;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_3.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_3.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_3.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = (tmpvar_33 * tmpvar_33);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_35)
    ), 0.0));
    vec4 projPos_42;
    vec4 tmpvar_43;
    tmpvar_43.w = 1.0;
    tmpvar_43.xyz = vPositionW;
    vec4 tmpvar_44;
    tmpvar_44 = (light0_shadowMatrix * tmpvar_43);
    projPos_42.zw = tmpvar_44.zw;
    projPos_42.xy = (tmpvar_44.xy / tmpvar_44.w);
    float Z_45;
    Z_45 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_46;
    tmpvar_46 = texture (light0_shadowMap, projPos_42.xy);
    lowp vec3 tmpvar_47;
    tmpvar_47.z = 0.0;
    tmpvar_47.x = ((tmpvar_46.y * 0.003921569) + tmpvar_46.x);
    tmpvar_47.y = ((tmpvar_46.w * 0.003921569) + tmpvar_46.z);
    float tmpvar_48;
    tmpvar_48 = (light0_shadowParams.y * Z_45);
    lowp float tmpvar_49;
    tmpvar_49 = max ((tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x)), (tmpvar_48 * tmpvar_48));
    lowp float tmpvar_50;
    tmpvar_50 = (Z_45 - tmpvar_47.x);
    lowp float tmpvar_51;
    tmpvar_51 = clamp (((
      (tmpvar_49 / (tmpvar_49 + (tmpvar_50 * tmpvar_50)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_52;
    if ((Z_45 <= tmpvar_47.x)) {
      tmpvar_52 = 1.0;
    } else {
      tmpvar_52 = tmpvar_51;
    };
    dAtten = (dAtten * tmpvar_52);
    dDiffuseLight = (tmpvar_16 + (dAtten * light0_color));
    float tmpvar_53;
    tmpvar_53 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_53)
     * 
      (tmpvar_53 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_54;
  tmpvar_54 = normalize(dLightDirW);
  float falloff_55;
  float tmpvar_56;
  tmpvar_56 = dot (dLightDirW, dLightDirW);
  float tmpvar_57;
  tmpvar_57 = (1.0/(light1_radius));
  falloff_55 = ((1.0/((tmpvar_56 + 1.0))) * 16.0);
  float x_58;
  x_58 = (tmpvar_56 * (tmpvar_57 * tmpvar_57));
  float tmpvar_59;
  tmpvar_59 = clamp ((1.0 - (x_58 * x_58)), 0.0, 1.0);
  falloff_55 = (falloff_55 * (tmpvar_59 * tmpvar_59));
  dAtten = falloff_55;
  if ((falloff_55 > 1e-05)) {
    float tmpvar_60;
    tmpvar_60 = clamp (((
      dot (tmpvar_54, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_55 * (tmpvar_60 * (tmpvar_60 * 
      (3.0 - (2.0 * tmpvar_60))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_54)
    ), 0.0));
    vec4 projPos_61;
    vec4 tmpvar_62;
    tmpvar_62.w = 1.0;
    tmpvar_62.xyz = vPositionW;
    vec4 tmpvar_63;
    tmpvar_63 = (light1_shadowMatrix * tmpvar_62);
    projPos_61.zw = tmpvar_63.zw;
    projPos_61.xy = (tmpvar_63.xy / tmpvar_63.w);
    float Z_64;
    Z_64 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_65;
    tmpvar_65 = texture (light1_shadowMap, projPos_61.xy);
    lowp vec3 tmpvar_66;
    tmpvar_66.z = 0.0;
    tmpvar_66.x = ((tmpvar_65.y * 0.003921569) + tmpvar_65.x);
    tmpvar_66.y = ((tmpvar_65.w * 0.003921569) + tmpvar_65.z);
    float tmpvar_67;
    tmpvar_67 = (light1_shadowParams.y * Z_64);
    lowp float tmpvar_68;
    tmpvar_68 = max ((tmpvar_66.y - (tmpvar_66.x * tmpvar_66.x)), (tmpvar_67 * tmpvar_67));
    lowp float tmpvar_69;
    tmpvar_69 = (Z_64 - tmpvar_66.x);
    lowp float tmpvar_70;
    tmpvar_70 = clamp (((
      (tmpvar_68 / (tmpvar_68 + (tmpvar_69 * tmpvar_69)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_71;
    if ((Z_64 <= tmpvar_66.x)) {
      tmpvar_71 = 1.0;
    } else {
      tmpvar_71 = tmpvar_70;
    };
    dAtten = (dAtten * tmpvar_71);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_72;
    tmpvar_72 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_54) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_72)
     * 
      (tmpvar_72 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_73;
  tmpvar_73 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_73;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_74;
  tmpvar_74 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_74, tmpvar_74))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^-1582143777^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUV0_1);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), rgba_4.xyz, material_metalness);
  dAlbedo = (rgba_4.xyz * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_2.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  dDiffuseLight = tmpvar_17;
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_3;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_36)
    ), 0.0));
    vec4 projPos_43;
    vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vPositionW;
    vec4 tmpvar_45;
    tmpvar_45 = (light0_shadowMatrix * tmpvar_44);
    projPos_43.zw = tmpvar_45.zw;
    projPos_43.xy = (tmpvar_45.xy / tmpvar_45.w);
    float Z_46;
    Z_46 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_47;
    tmpvar_47 = texture (light0_shadowMap, projPos_43.xy);
    lowp vec3 tmpvar_48;
    tmpvar_48.z = 0.0;
    tmpvar_48.x = ((tmpvar_47.y * 0.003921569) + tmpvar_47.x);
    tmpvar_48.y = ((tmpvar_47.w * 0.003921569) + tmpvar_47.z);
    float tmpvar_49;
    tmpvar_49 = (light0_shadowParams.y * Z_46);
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x)), (tmpvar_49 * tmpvar_49));
    lowp float tmpvar_51;
    tmpvar_51 = (Z_46 - tmpvar_48.x);
    lowp float tmpvar_52;
    tmpvar_52 = clamp (((
      (tmpvar_50 / (tmpvar_50 + (tmpvar_51 * tmpvar_51)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_53;
    if ((Z_46 <= tmpvar_48.x)) {
      tmpvar_53 = 1.0;
    } else {
      tmpvar_53 = tmpvar_52;
    };
    dAtten = (dAtten * tmpvar_53);
    dDiffuseLight = (tmpvar_17 + (dAtten * light0_color));
    lowp float tmpvar_54;
    tmpvar_54 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_54)
     * 
      (tmpvar_54 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_55;
  tmpvar_55 = normalize(dLightDirW);
  float falloff_56;
  float tmpvar_57;
  tmpvar_57 = dot (dLightDirW, dLightDirW);
  float tmpvar_58;
  tmpvar_58 = (1.0/(light1_radius));
  falloff_56 = ((1.0/((tmpvar_57 + 1.0))) * 16.0);
  float x_59;
  x_59 = (tmpvar_57 * (tmpvar_58 * tmpvar_58));
  float tmpvar_60;
  tmpvar_60 = clamp ((1.0 - (x_59 * x_59)), 0.0, 1.0);
  falloff_56 = (falloff_56 * (tmpvar_60 * tmpvar_60));
  dAtten = falloff_56;
  if ((falloff_56 > 1e-05)) {
    float tmpvar_61;
    tmpvar_61 = clamp (((
      dot (tmpvar_55, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_56 * (tmpvar_61 * (tmpvar_61 * 
      (3.0 - (2.0 * tmpvar_61))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_55)
    ), 0.0));
    vec4 projPos_62;
    vec4 tmpvar_63;
    tmpvar_63.w = 1.0;
    tmpvar_63.xyz = vPositionW;
    vec4 tmpvar_64;
    tmpvar_64 = (light1_shadowMatrix * tmpvar_63);
    projPos_62.zw = tmpvar_64.zw;
    projPos_62.xy = (tmpvar_64.xy / tmpvar_64.w);
    float Z_65;
    Z_65 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_66;
    tmpvar_66 = texture (light1_shadowMap, projPos_62.xy);
    lowp vec3 tmpvar_67;
    tmpvar_67.z = 0.0;
    tmpvar_67.x = ((tmpvar_66.y * 0.003921569) + tmpvar_66.x);
    tmpvar_67.y = ((tmpvar_66.w * 0.003921569) + tmpvar_66.z);
    float tmpvar_68;
    tmpvar_68 = (light1_shadowParams.y * Z_65);
    lowp float tmpvar_69;
    tmpvar_69 = max ((tmpvar_67.y - (tmpvar_67.x * tmpvar_67.x)), (tmpvar_68 * tmpvar_68));
    lowp float tmpvar_70;
    tmpvar_70 = (Z_65 - tmpvar_67.x);
    lowp float tmpvar_71;
    tmpvar_71 = clamp (((
      (tmpvar_69 / (tmpvar_69 + (tmpvar_70 * tmpvar_70)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_72;
    if ((Z_65 <= tmpvar_67.x)) {
      tmpvar_72 = 1.0;
    } else {
      tmpvar_72 = tmpvar_71;
    };
    dAtten = (dAtten * tmpvar_72);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_73;
    tmpvar_73 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_55) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_73)
     * 
      (tmpvar_73 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_74;
  tmpvar_74 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_35.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_74;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_75;
  tmpvar_75 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_75, tmpvar_75))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^-827797395^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUV0_1);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), rgba_4.xyz, material_metalness);
  dAlbedo = (rgba_4.xyz * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_2.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  dDiffuseLight = tmpvar_17;
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_3;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_36)
    ), 0.0));
    vec4 projPos_43;
    vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vPositionW;
    vec4 tmpvar_45;
    tmpvar_45 = (light0_shadowMatrix * tmpvar_44);
    projPos_43.zw = tmpvar_45.zw;
    projPos_43.xy = (tmpvar_45.xy / tmpvar_45.w);
    float Z_46;
    Z_46 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_47;
    tmpvar_47 = texture (light0_shadowMap, projPos_43.xy);
    lowp vec3 tmpvar_48;
    tmpvar_48.z = 0.0;
    tmpvar_48.x = ((tmpvar_47.y * 0.003921569) + tmpvar_47.x);
    tmpvar_48.y = ((tmpvar_47.w * 0.003921569) + tmpvar_47.z);
    float tmpvar_49;
    tmpvar_49 = (light0_shadowParams.y * Z_46);
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x)), (tmpvar_49 * tmpvar_49));
    lowp float tmpvar_51;
    tmpvar_51 = (Z_46 - tmpvar_48.x);
    lowp float tmpvar_52;
    tmpvar_52 = clamp (((
      (tmpvar_50 / (tmpvar_50 + (tmpvar_51 * tmpvar_51)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_53;
    if ((Z_46 <= tmpvar_48.x)) {
      tmpvar_53 = 1.0;
    } else {
      tmpvar_53 = tmpvar_52;
    };
    dAtten = (dAtten * tmpvar_53);
    dDiffuseLight = (tmpvar_17 + (dAtten * light0_color));
    lowp float tmpvar_54;
    tmpvar_54 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_54)
     * 
      (tmpvar_54 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  lowp vec3 tmpvar_55;
  tmpvar_55 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_35.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_55;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_56;
  tmpvar_56 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_56, tmpvar_56))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^-1148145583^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vec3 tmpvar_40;
  tmpvar_40 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_40;
  vec3 tmpvar_41;
  tmpvar_41 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_41;
  vBinormalW = (((tmpvar_40.yzx * tmpvar_41.zxy) - (tmpvar_40.zxy * tmpvar_41.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform float isLeaves;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  dSpecularity = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_3, material_bumpiness)));
  lowp vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = rgba_5.xyz;
  if ((isLeaves > 0.5)) {
    dAlbedo = (rgba_5.xyz * vec3((vVertexColor.w * 2.0)));
  } else {
    dAlbedo = (dAlbedo * vec3(clamp ((
      (vVertexColor.w * vVertexColor.w)
     * 
      (vVertexColor.w * 5.0)
    ), 0.0, 1.0)));
  };
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  lowp vec3 fixedReflDir_10;
  lowp vec3 vec_11;
  vec_11 = dNormalW;
  lowp float tmpvar_12;
  tmpvar_12 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_13;
  tmpvar_13 = abs(dNormalW.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  float tmpvar_18;
  tmpvar_18 = clamp (vVertexColor.w, 0.0, 1.0);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * tmpvar_18);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_4;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_4.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_4.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_4.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_4.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dReflection = tmpvar_35;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_36)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_43;
    tmpvar_43 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_44;
    tmpvar_44 = max ((tmpvar_43 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_43 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_44)
     * 
      (tmpvar_44 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_45;
  tmpvar_45 = normalize(dLightDirW);
  float falloff_46;
  float tmpvar_47;
  tmpvar_47 = dot (dLightDirW, dLightDirW);
  float tmpvar_48;
  tmpvar_48 = (1.0/(light1_radius));
  falloff_46 = ((1.0/((tmpvar_47 + 1.0))) * 16.0);
  float x_49;
  x_49 = (tmpvar_47 * (tmpvar_48 * tmpvar_48));
  float tmpvar_50;
  tmpvar_50 = clamp ((1.0 - (x_49 * x_49)), 0.0, 1.0);
  falloff_46 = (falloff_46 * (tmpvar_50 * tmpvar_50));
  dAtten = falloff_46;
  if ((falloff_46 > 1e-05)) {
    float tmpvar_51;
    tmpvar_51 = clamp (((
      dot (tmpvar_45, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_46 * (tmpvar_51 * (tmpvar_51 * 
      (3.0 - (2.0 * tmpvar_51))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_45)
    ), 0.0));
    vec4 projPos_52;
    vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = vPositionW;
    vec4 tmpvar_54;
    tmpvar_54 = (light1_shadowMatrix * tmpvar_53);
    projPos_52.zw = tmpvar_54.zw;
    projPos_52.xy = (tmpvar_54.xy / tmpvar_54.w);
    float Z_55;
    Z_55 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_56;
    tmpvar_56 = texture (light1_shadowMap, projPos_52.xy);
    lowp vec3 tmpvar_57;
    tmpvar_57.z = 0.0;
    tmpvar_57.x = ((tmpvar_56.y * 0.003921569) + tmpvar_56.x);
    tmpvar_57.y = ((tmpvar_56.w * 0.003921569) + tmpvar_56.z);
    float tmpvar_58;
    tmpvar_58 = (light1_shadowParams.y * Z_55);
    lowp float tmpvar_59;
    tmpvar_59 = max ((tmpvar_57.y - (tmpvar_57.x * tmpvar_57.x)), (tmpvar_58 * tmpvar_58));
    lowp float tmpvar_60;
    tmpvar_60 = (Z_55 - tmpvar_57.x);
    lowp float tmpvar_61;
    tmpvar_61 = clamp (((
      (tmpvar_59 / (tmpvar_59 + (tmpvar_60 * tmpvar_60)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_62;
    if ((Z_55 <= tmpvar_57.x)) {
      tmpvar_62 = 1.0;
    } else {
      tmpvar_62 = tmpvar_61;
    };
    dAtten = (dAtten * tmpvar_62);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_63;
    tmpvar_63 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_64;
    tmpvar_64 = max ((tmpvar_63 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_63 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_45) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_64)
     * 
      (tmpvar_64 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dSpecularLight = (dSpecularLight * tmpvar_18);
  dReflection = (tmpvar_35 * tmpvar_18);
  lowp vec3 tmpvar_65;
  tmpvar_65 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_65;
  pc_fragColor.xyz = (pc_fragColor.xyz + (pow (
    clamp (vVertexColor.xyz, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))
  , vec3(2.2, 2.2, 2.2)) * material_emissive));
  vec3 tmpvar_66;
  tmpvar_66 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_66, tmpvar_66))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^-20185727^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=4) in vec4 vertex_tangent;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vec3 tmpvar_40;
  tmpvar_40 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_40;
  vec3 tmpvar_41;
  tmpvar_41 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_41;
  vBinormalW = (((tmpvar_40.yzx * tmpvar_41.zxy) - (tmpvar_40.zxy * tmpvar_41.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform float isLeaves;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  dSpecularity = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_3, material_bumpiness)));
  lowp vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = rgba_5.xyz;
  if ((isLeaves > 0.5)) {
    dAlbedo = (rgba_5.xyz * vec3((vVertexColor.w * 2.0)));
  } else {
    dAlbedo = (dAlbedo * vec3(clamp ((
      (vVertexColor.w * vVertexColor.w)
     * 
      (vVertexColor.w * 5.0)
    ), 0.0, 1.0)));
  };
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  lowp vec3 fixedReflDir_10;
  lowp vec3 vec_11;
  vec_11 = dNormalW;
  lowp float tmpvar_12;
  tmpvar_12 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_13;
  tmpvar_13 = abs(dNormalW.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  float tmpvar_18;
  tmpvar_18 = clamp (vVertexColor.w, 0.0, 1.0);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * tmpvar_18);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_4;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_4.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_4.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_4.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_4.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dReflection = tmpvar_35;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_36)
    ), 0.0));
    vec4 projPos_43;
    vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vPositionW;
    vec4 tmpvar_45;
    tmpvar_45 = (light0_shadowMatrix * tmpvar_44);
    projPos_43.zw = tmpvar_45.zw;
    projPos_43.xy = (tmpvar_45.xy / tmpvar_45.w);
    float Z_46;
    Z_46 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_47;
    tmpvar_47 = texture (light0_shadowMap, projPos_43.xy);
    lowp vec3 tmpvar_48;
    tmpvar_48.z = 0.0;
    tmpvar_48.x = ((tmpvar_47.y * 0.003921569) + tmpvar_47.x);
    tmpvar_48.y = ((tmpvar_47.w * 0.003921569) + tmpvar_47.z);
    float tmpvar_49;
    tmpvar_49 = (light0_shadowParams.y * Z_46);
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x)), (tmpvar_49 * tmpvar_49));
    lowp float tmpvar_51;
    tmpvar_51 = (Z_46 - tmpvar_48.x);
    lowp float tmpvar_52;
    tmpvar_52 = clamp (((
      (tmpvar_50 / (tmpvar_50 + (tmpvar_51 * tmpvar_51)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_53;
    if ((Z_46 <= tmpvar_48.x)) {
      tmpvar_53 = 1.0;
    } else {
      tmpvar_53 = tmpvar_52;
    };
    dAtten = (dAtten * tmpvar_53);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_54;
    tmpvar_54 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_55;
    tmpvar_55 = max ((tmpvar_54 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_54 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_55)
     * 
      (tmpvar_55 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dSpecularLight = (dSpecularLight * tmpvar_18);
  dReflection = (tmpvar_35 * tmpvar_18);
  lowp vec3 tmpvar_56;
  tmpvar_56 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_56;
  pc_fragColor.xyz = (pc_fragColor.xyz + (pow (
    clamp (vVertexColor.xyz, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))
  , vec3(2.2, 2.2, 2.2)) * material_emissive));
  vec3 tmpvar_57;
  tmpvar_57 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_57, tmpvar_57))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^-1209904997^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
vec3 dSpecularity;
float dGlossiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUV0_1);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_6;
  float tmpvar_7;
  tmpvar_7 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  fresnel_6 = (tmpvar_7 * (tmpvar_8 * tmpvar_8));
  fresnel_6 = (fresnel_6 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_6));
  vec3 fixedReflDir_9;
  vec3 vec_10;
  vec_10 = tmpvar_2;
  float tmpvar_11;
  tmpvar_11 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.x);
  if ((tmpvar_12 != tmpvar_11)) {
    vec_10.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.y);
  if ((tmpvar_13 != tmpvar_11)) {
    vec_10.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.z);
  if ((tmpvar_14 != tmpvar_11)) {
    vec_10.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_9.yz = vec_10.yz;
  fixedReflDir_9.x = -(vec_10.x);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_prefilteredCubeMap4, fixedReflDir_9);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  dDiffuseLight = ((tmpvar_16 * tmpvar_16) * skyboxIntensity);
  lowp vec4 cube_0_18;
  lowp vec4 cube_1_19;
  lowp vec4 cubes_20[6];
  vec3 fixedReflDir_21;
  highp int index2_22;
  highp int index1_23;
  float tmpvar_24;
  tmpvar_24 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_23 = int(tmpvar_24);
  index2_22 = int(min ((tmpvar_24 + 1.0), 7.0));
  vec3 vec_25;
  vec_25 = tmpvar_3;
  float tmpvar_26;
  tmpvar_26 = (1.0 - (exp2(tmpvar_24) / 128.0));
  float tmpvar_27;
  tmpvar_27 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_28;
  tmpvar_28 = abs(tmpvar_3.x);
  if ((tmpvar_28 != tmpvar_27)) {
    vec_25.x = (tmpvar_3.x * tmpvar_26);
  };
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.y);
  if ((tmpvar_29 != tmpvar_27)) {
    vec_25.y = (tmpvar_3.y * tmpvar_26);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.z);
  if ((tmpvar_30 != tmpvar_27)) {
    vec_25.z = (tmpvar_3.z * tmpvar_26);
  };
  fixedReflDir_21.yz = vec_25.yz;
  fixedReflDir_21.x = -(vec_25.x);
  cubes_20[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_21);
  cubes_20[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_21);
  cubes_20[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_21);
  cubes_20[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_21);
  cubes_20[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_21);
  cubes_20[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_21);
  for (highp int i_17 = 0; i_17 < 6; i_17++) {
    if ((i_17 == index1_23)) {
      cube_0_18 = cubes_20[i_17];
    };
    if ((i_17 == index2_22)) {
      cube_1_19 = cubes_20[i_17];
    };
  };
  lowp vec4 tmpvar_31;
  tmpvar_31 = mix (cube_0_18, cube_1_19, fract(tmpvar_24));
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((8.0 * tmpvar_31.w) * tmpvar_31.xyz);
  lowp vec4 tmpvar_33;
  tmpvar_33.xyz = ((tmpvar_32 * tmpvar_32) * skyboxIntensity);
  tmpvar_33.w = material_reflectivity;
  lowp vec3 tmpvar_34;
  tmpvar_34 = mix ((rgba_4.xyz * dDiffuseLight), (tmpvar_33.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_34;
  lowp vec3 tmpvar_35;
  lowp vec4 rgba_36;
  lowp vec4 tmpvar_37;
  tmpvar_37 = texture (texture_emissiveMap, vUV0_1);
  rgba_36.w = tmpvar_37.w;
  rgba_36.xyz = pow (tmpvar_37.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_35 = (rgba_36.xyz * material_emissiveIntensity);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_35);
  vec3 tmpvar_38;
  tmpvar_38 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_38, tmpvar_38))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^-1351369121^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
vec3 dSpecularity;
float dGlossiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_4;
  float tmpvar_5;
  tmpvar_5 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_6;
  tmpvar_6 = (tmpvar_5 * tmpvar_5);
  fresnel_4 = (tmpvar_5 * (tmpvar_6 * tmpvar_6));
  fresnel_4 = (fresnel_4 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_4));
  vec3 fixedReflDir_7;
  vec3 vec_8;
  vec_8 = tmpvar_2;
  float tmpvar_9;
  tmpvar_9 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_10;
  tmpvar_10 = abs(tmpvar_2.x);
  if ((tmpvar_10 != tmpvar_9)) {
    vec_8.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_11;
  tmpvar_11 = abs(tmpvar_2.y);
  if ((tmpvar_11 != tmpvar_9)) {
    vec_8.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.z);
  if ((tmpvar_12 != tmpvar_9)) {
    vec_8.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_7.yz = vec_8.yz;
  fixedReflDir_7.x = -(vec_8.x);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (texture_prefilteredCubeMap4, fixedReflDir_7);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((8.0 * tmpvar_13.w) * tmpvar_13.xyz);
  dDiffuseLight = ((tmpvar_14 * tmpvar_14) * skyboxIntensity);
  lowp vec4 cube_0_16;
  lowp vec4 cube_1_17;
  lowp vec4 cubes_18[6];
  vec3 fixedReflDir_19;
  highp int index2_20;
  highp int index1_21;
  float tmpvar_22;
  tmpvar_22 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_21 = int(tmpvar_22);
  index2_20 = int(min ((tmpvar_22 + 1.0), 7.0));
  vec3 vec_23;
  vec_23 = tmpvar_3;
  float tmpvar_24;
  tmpvar_24 = (1.0 - (exp2(tmpvar_22) / 128.0));
  float tmpvar_25;
  tmpvar_25 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_26;
  tmpvar_26 = abs(tmpvar_3.x);
  if ((tmpvar_26 != tmpvar_25)) {
    vec_23.x = (tmpvar_3.x * tmpvar_24);
  };
  float tmpvar_27;
  tmpvar_27 = abs(tmpvar_3.y);
  if ((tmpvar_27 != tmpvar_25)) {
    vec_23.y = (tmpvar_3.y * tmpvar_24);
  };
  float tmpvar_28;
  tmpvar_28 = abs(tmpvar_3.z);
  if ((tmpvar_28 != tmpvar_25)) {
    vec_23.z = (tmpvar_3.z * tmpvar_24);
  };
  fixedReflDir_19.yz = vec_23.yz;
  fixedReflDir_19.x = -(vec_23.x);
  cubes_18[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_19);
  cubes_18[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_19);
  cubes_18[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_19);
  cubes_18[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_19);
  cubes_18[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_19);
  cubes_18[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_19);
  for (highp int i_15 = 0; i_15 < 6; i_15++) {
    if ((i_15 == index1_21)) {
      cube_0_16 = cubes_18[i_15];
    };
    if ((i_15 == index2_20)) {
      cube_1_17 = cubes_18[i_15];
    };
  };
  lowp vec4 tmpvar_29;
  tmpvar_29 = mix (cube_0_16, cube_1_17, fract(tmpvar_22));
  lowp vec3 tmpvar_30;
  tmpvar_30 = ((8.0 * tmpvar_29.w) * tmpvar_29.xyz);
  lowp vec4 tmpvar_31;
  tmpvar_31.xyz = ((tmpvar_30 * tmpvar_30) * skyboxIntensity);
  tmpvar_31.w = material_reflectivity;
  lowp vec3 tmpvar_32;
  tmpvar_32 = mix ((material_diffuse * dDiffuseLight), (tmpvar_31.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_32;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_33;
  tmpvar_33 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_33, tmpvar_33))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,^SH^-418920950^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec4 dReflection;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform float material_shininess;
uniform sampler2D texture_aoMap;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dReflection = vec4(0.0, 0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), rgba_4.xyz, material_metalness);
  dAlbedo = (rgba_4.xyz * (1.0 - material_metalness));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_2;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_2.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (texture_aoMap, vUv0);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * tmpvar_18.x);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  vec3 fixedReflDir_23;
  highp int index2_24;
  highp int index1_25;
  float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  vec3 vec_27;
  vec_27 = tmpvar_3;
  float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dReflection = tmpvar_35;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_36)
    ), 0.0));
    vec4 projPos_43;
    vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vPositionW;
    vec4 tmpvar_45;
    tmpvar_45 = (light0_shadowMatrix * tmpvar_44);
    projPos_43.zw = tmpvar_45.zw;
    projPos_43.xy = (tmpvar_45.xy / tmpvar_45.w);
    float Z_46;
    Z_46 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_47;
    tmpvar_47 = texture (light0_shadowMap, projPos_43.xy);
    lowp vec3 tmpvar_48;
    tmpvar_48.z = 0.0;
    tmpvar_48.x = ((tmpvar_47.y * 0.003921569) + tmpvar_47.x);
    tmpvar_48.y = ((tmpvar_47.w * 0.003921569) + tmpvar_47.z);
    float tmpvar_49;
    tmpvar_49 = (light0_shadowParams.y * Z_46);
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x)), (tmpvar_49 * tmpvar_49));
    lowp float tmpvar_51;
    tmpvar_51 = (Z_46 - tmpvar_48.x);
    lowp float tmpvar_52;
    tmpvar_52 = clamp (((
      (tmpvar_50 / (tmpvar_50 + (tmpvar_51 * tmpvar_51)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_53;
    if ((Z_46 <= tmpvar_48.x)) {
      tmpvar_53 = 1.0;
    } else {
      tmpvar_53 = tmpvar_52;
    };
    dAtten = (dAtten * tmpvar_53);
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_54;
    tmpvar_54 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_54)
     * 
      (tmpvar_54 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_55;
  tmpvar_55 = normalize(dLightDirW);
  float falloff_56;
  float tmpvar_57;
  tmpvar_57 = dot (dLightDirW, dLightDirW);
  float tmpvar_58;
  tmpvar_58 = (1.0/(light1_radius));
  falloff_56 = ((1.0/((tmpvar_57 + 1.0))) * 16.0);
  float x_59;
  x_59 = (tmpvar_57 * (tmpvar_58 * tmpvar_58));
  float tmpvar_60;
  tmpvar_60 = clamp ((1.0 - (x_59 * x_59)), 0.0, 1.0);
  falloff_56 = (falloff_56 * (tmpvar_60 * tmpvar_60));
  dAtten = falloff_56;
  if ((falloff_56 > 1e-05)) {
    float tmpvar_61;
    tmpvar_61 = clamp (((
      dot (tmpvar_55, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_56 * (tmpvar_61 * (tmpvar_61 * 
      (3.0 - (2.0 * tmpvar_61))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_55)
    ), 0.0));
    vec4 projPos_62;
    vec4 tmpvar_63;
    tmpvar_63.w = 1.0;
    tmpvar_63.xyz = vPositionW;
    vec4 tmpvar_64;
    tmpvar_64 = (light1_shadowMatrix * tmpvar_63);
    projPos_62.zw = tmpvar_64.zw;
    projPos_62.xy = (tmpvar_64.xy / tmpvar_64.w);
    float Z_65;
    Z_65 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_66;
    tmpvar_66 = texture (light1_shadowMap, projPos_62.xy);
    lowp vec3 tmpvar_67;
    tmpvar_67.z = 0.0;
    tmpvar_67.x = ((tmpvar_66.y * 0.003921569) + tmpvar_66.x);
    tmpvar_67.y = ((tmpvar_66.w * 0.003921569) + tmpvar_66.z);
    float tmpvar_68;
    tmpvar_68 = (light1_shadowParams.y * Z_65);
    lowp float tmpvar_69;
    tmpvar_69 = max ((tmpvar_67.y - (tmpvar_67.x * tmpvar_67.x)), (tmpvar_68 * tmpvar_68));
    lowp float tmpvar_70;
    tmpvar_70 = (Z_65 - tmpvar_67.x);
    lowp float tmpvar_71;
    tmpvar_71 = clamp (((
      (tmpvar_69 / (tmpvar_69 + (tmpvar_70 * tmpvar_70)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_72;
    if ((Z_65 <= tmpvar_67.x)) {
      tmpvar_72 = 1.0;
    } else {
      tmpvar_72 = tmpvar_71;
    };
    dAtten = (dAtten * tmpvar_72);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_73;
    tmpvar_73 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_55) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_73)
     * 
      (tmpvar_73 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dSpecularLight = (dSpecularLight * tmpvar_18.x);
  dReflection = (tmpvar_35 * tmpvar_18.x);
  lowp vec3 tmpvar_74;
  tmpvar_74 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (dReflection.xyz * dReflection.w)), dSpecularity);
  pc_fragColor.xyz = tmpvar_74;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_75;
  tmpvar_75 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_75, tmpvar_75))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^-475037712^VS^#version 300 es
out vec3 vPositionW;
layout(location=0) in vec3 vertex_position;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
uniform vec3 view_position;
uniform vec3 light_globalAmbient;
uniform vec3 fog_color;
uniform float fog_density;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
void main ()
{
  pc_fragColor.xyz = (material_diffuse * light_globalAmbient);
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_1;
  tmpvar_1 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_1, tmpvar_1))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,^SH^skyboxtrue true true03true0^VS^attribute vec3 aPosition;
uniform mat4 matrix_view;
uniform mat4 matrix_projection;
varying vec3 vViewDir;
void main(void)
{
    mat4 view = matrix_view;
    view[3][0] = view[3][1] = view[3][2] = 0.0;
    gl_Position = matrix_projection * view * vec4(aPosition, 1.0);
    // Force skybox to far Z, regardless of the clip planes on the camera
    // Subtract a tiny fudge factor to ensure floating point errors don't
    // still push pixels beyond far Z. See:
    // http://www.opengl.org/discussion_boards/showthread.php/171867-skybox-problem
    gl_Position.z = gl_Position.w - 0.00001;
    vViewDir = aPosition;
    vViewDir.x *= -1.0;
}
^PS^precision highp float;

vec3 fixSeams(vec3 vec, float mipmapIndex) {
    return vec;
}
vec3 fixSeams(vec3 vec) {
    return vec;
}
vec3 fixSeamsStatic(vec3 vec, float invRecMipSize) {
    return vec;
}

//#ifdef GL2
//#define skyboxIntensity uniformScene.fogColor_skyInt.w
//#else
uniform float skyboxIntensity;
//#endif
vec3 processEnvironment(vec3 color) {
    return color * skyboxIntensity;
}
vec3 gammaCorrectInput(vec3 color) {
    return pow(color, vec3(2.2));
}
float gammaCorrectInput(float color) {
    return pow(color, 2.2);
}
vec4 gammaCorrectInput(vec4 color) {
    return vec4(pow(color.rgb, vec3(2.2)), color.a);
}
vec4 texture2DSRGB(sampler2D tex, vec2 uv) {
    vec4 rgba = texture2D(tex, uv);
    rgba.rgb = gammaCorrectInput(rgba.rgb);
    return rgba;
}
vec4 textureCubeSRGB(samplerCube tex, vec3 uvw) {
    vec4 rgba = textureCube(tex, uvw);
    rgba.rgb = gammaCorrectInput(rgba.rgb);
    return rgba;
}
vec3 gammaCorrectOutput(vec3 color) {
    return color;
}
uniform float exposure;
vec3 toneMap(vec3 color) {
    return color * exposure;
}
vec3 decodeRGBM(vec4 rgbm) {
    vec3 color = (8.0 * rgbm.a) * rgbm.rgb;
    return color * color;
}
vec3 texture2DRGBM(sampler2D tex, vec2 uv) {
    return decodeRGBM(texture2D(tex, uv));
}
vec3 textureCubeRGBM(samplerCube tex, vec3 uvw) {
    return decodeRGBM(textureCube(tex, uvw));
}
varying vec3 vViewDir;
uniform samplerCube texture_cubeMap;
void main(void) {
    vec3 color = processEnvironment(textureCubeRGBM(texture_cubeMap, fixSeamsStatic(vViewDir, 0.9921875)).rgb);
    color = toneMap(color);
    color = gammaCorrectOutput(color);
    gl_FragColor = vec4(color, 1.0);
}
^AT^aPosition,POSITION,^SH^-1739709577^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_5;
  tmpvar_5 = normalize(((tmpvar_4.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_4.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_6;
  tmpvar_6[uint(0)] = tmpvar_5;
  tmpvar_6[1u] = normalize(((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)));
  tmpvar_6[2u] = tmpvar_4;
  vec3 pos_7;
  pos_7 = (pos_1 * tmpvar_6);
  float tmpvar_8;
  tmpvar_8 = abs(cos((globalTime + 
    dot (((tmpvar_4 * 3.0) + matrix_model[3].xyz), vec3(1.0, 1.0, 1.0))
  )));
  float pRotation_9;
  pRotation_9 = (((0.05 * 
    ((tmpvar_8 * tmpvar_8) * (3.0 - (2.0 * tmpvar_8)))
  ) * clamp (
    (sqrt(dot (pos_1, pos_1)) / 3.5)
  , 0.0, 1.0)) * windAmplitude);
  float tmpvar_10;
  tmpvar_10 = cos(pRotation_9);
  float tmpvar_11;
  tmpvar_11 = sin(pRotation_9);
  mat2 tmpvar_12;
  tmpvar_12[uint(0)].x = tmpvar_10;
  tmpvar_12[uint(0)].y = -(tmpvar_11);
  tmpvar_12[1u].x = tmpvar_11;
  tmpvar_12[1u].y = tmpvar_10;
  pos_7.yz = (tmpvar_12 * pos_7.yz);
  pos_7 = (tmpvar_6 * pos_7);
  pos_1 = pos_7;
  testVec = pos_7;
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = pos_7;
  vec4 tmpvar_14;
  tmpvar_14 = (matrix_model * tmpvar_13);
  gl_Position = (matrix_viewProjection * tmpvar_14);
  vPositionW = tmpvar_14.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dAlbedo;
vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform float isLeaves;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform float alpha_ref;
void main ()
{
  dSpecularity = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_2;
  tmpvar_2 = normalize((view_position - vPositionW));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(vNormalW);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (tmpvar_3, tmpvar_2) * tmpvar_3)
  ) - tmpvar_2));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = rgba_5.xyz;
  if ((isLeaves > 0.5)) {
    dAlbedo = (rgba_5.xyz * vec3((vVertexColor.w * 2.0)));
  } else {
    dAlbedo = (dAlbedo * vec3(clamp ((
      (vVertexColor.w * vVertexColor.w)
     * 
      (vVertexColor.w * 5.0)
    ), 0.0, 1.0)));
  };
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_3, tmpvar_2), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_3;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_3.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_3.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_3.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_3.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_3.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_3.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  vec3 fixedReflDir_23;
  highp int index2_24;
  highp int index1_25;
  float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  vec3 vec_27;
  vec_27 = tmpvar_4;
  float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_4.x * tmpvar_28);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_4.y * tmpvar_28);
  };
  float tmpvar_32;
  tmpvar_32 = abs(tmpvar_4.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_4.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  lowp vec3 tmpvar_36;
  tmpvar_36 = mix ((dAlbedo * tmpvar_17), (tmpvar_35.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_36;
  pc_fragColor.xyz = (pc_fragColor.xyz + (pow (
    clamp (vVertexColor.xyz, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))
  , vec3(2.2, 2.2, 2.2)) * material_emissive));
  vec3 tmpvar_37;
  tmpvar_37 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_37, tmpvar_37))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^-521022149^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform mat4 light1_shadowMatrix;
uniform vec4 light1_shadowParams;
uniform sampler2D light1_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform float isLeaves;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform float alpha_ref;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dSpecularity = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_2;
  tmpvar_2 = normalize((view_position - vPositionW));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(vNormalW);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (tmpvar_3, tmpvar_2) * tmpvar_3)
  ) - tmpvar_2));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = rgba_5.xyz;
  if ((isLeaves > 0.5)) {
    dAlbedo = (rgba_5.xyz * vec3((vVertexColor.w * 2.0)));
  } else {
    dAlbedo = (dAlbedo * vec3(clamp ((
      (vVertexColor.w * vVertexColor.w)
     * 
      (vVertexColor.w * 5.0)
    ), 0.0, 1.0)));
  };
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * clamp (vVertexColor.x, 0.0, 1.0)) + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_3, tmpvar_2), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_3;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_3.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_3.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_3.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_3.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_3.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_3.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * skyboxIntensity);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_4;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_4.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_4.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_4.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_4.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = ((tmpvar_33 * tmpvar_33) * skyboxIntensity);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_35)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_42;
    tmpvar_42 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_42)
     * 
      (tmpvar_42 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_43;
  tmpvar_43 = normalize(dLightDirW);
  float falloff_44;
  float tmpvar_45;
  tmpvar_45 = dot (dLightDirW, dLightDirW);
  float tmpvar_46;
  tmpvar_46 = (1.0/(light1_radius));
  falloff_44 = ((1.0/((tmpvar_45 + 1.0))) * 16.0);
  float x_47;
  x_47 = (tmpvar_45 * (tmpvar_46 * tmpvar_46));
  float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (x_47 * x_47)), 0.0, 1.0);
  falloff_44 = (falloff_44 * (tmpvar_48 * tmpvar_48));
  dAtten = falloff_44;
  if ((falloff_44 > 1e-05)) {
    float tmpvar_49;
    tmpvar_49 = clamp (((
      dot (tmpvar_43, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_44 * (tmpvar_49 * (tmpvar_49 * 
      (3.0 - (2.0 * tmpvar_49))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_43)
    ), 0.0));
    vec4 projPos_50;
    vec4 tmpvar_51;
    tmpvar_51.w = 1.0;
    tmpvar_51.xyz = vPositionW;
    vec4 tmpvar_52;
    tmpvar_52 = (light1_shadowMatrix * tmpvar_51);
    projPos_50.zw = tmpvar_52.zw;
    projPos_50.xy = (tmpvar_52.xy / tmpvar_52.w);
    float Z_53;
    Z_53 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light1_shadowParams.w) + light1_shadowParams.z);
    lowp vec4 tmpvar_54;
    tmpvar_54 = texture (light1_shadowMap, projPos_50.xy);
    lowp vec3 tmpvar_55;
    tmpvar_55.z = 0.0;
    tmpvar_55.x = ((tmpvar_54.y * 0.003921569) + tmpvar_54.x);
    tmpvar_55.y = ((tmpvar_54.w * 0.003921569) + tmpvar_54.z);
    float tmpvar_56;
    tmpvar_56 = (light1_shadowParams.y * Z_53);
    lowp float tmpvar_57;
    tmpvar_57 = max ((tmpvar_55.y - (tmpvar_55.x * tmpvar_55.x)), (tmpvar_56 * tmpvar_56));
    lowp float tmpvar_58;
    tmpvar_58 = (Z_53 - tmpvar_55.x);
    lowp float tmpvar_59;
    tmpvar_59 = clamp (((
      (tmpvar_57 / (tmpvar_57 + (tmpvar_58 * tmpvar_58)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_60;
    if ((Z_53 <= tmpvar_55.x)) {
      tmpvar_60 = 1.0;
    } else {
      tmpvar_60 = tmpvar_59;
    };
    dAtten = (dAtten * tmpvar_60);
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_61;
    tmpvar_61 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_43) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_61)
     * 
      (tmpvar_61 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  lowp vec3 tmpvar_62;
  tmpvar_62 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_62;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_63;
  tmpvar_63 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_63, tmpvar_63))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^-511280442^VS^#version 300 es
out vec3 vPositionW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform vec3 view_position;
uniform float material_opacity;
out float vFade;
void main ()
{
  mat3 rotMat_1;
  vec3 lookX_2;
  vec4 posW_3;
  vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = vertex_position;
  posW_3.w = (matrix_model * tmpvar_4).w;
  vec3 tmpvar_5;
  tmpvar_5.x = matrix_model[3].x;
  tmpvar_5.y = matrix_model[3].y;
  tmpvar_5.z = matrix_model[3].z;
  vec3 tmpvar_6;
  tmpvar_6.x = matrix_model[2].x;
  tmpvar_6.y = matrix_model[2].y;
  tmpvar_6.z = matrix_model[2].z;
  vec3 tmpvar_7;
  tmpvar_7 = normalize(tmpvar_6);
  vec3 tmpvar_8;
  tmpvar_8 = normalize((view_position - tmpvar_5));
  vec3 tmpvar_9;
  tmpvar_9.x = matrix_model[0].x;
  tmpvar_9.y = matrix_model[0].y;
  tmpvar_9.z = matrix_model[0].z;
  lookX_2 = (normalize((
    (tmpvar_7.yzx * tmpvar_8.zxy)
   - 
    (tmpvar_7.zxy * tmpvar_8.yzx)
  )) * sqrt(dot (tmpvar_9, tmpvar_9)));
  mat3 tmpvar_10;
  tmpvar_10[uint(0)] = matrix_model[uint(0)].xyz;
  tmpvar_10[1u] = matrix_model[1u].xyz;
  tmpvar_10[2u] = matrix_model[2u].xyz;
  rotMat_1 = tmpvar_10;
  vec3 tmpvar_11;
  tmpvar_11.yz = tmpvar_10[0].yz;
  tmpvar_11.x = lookX_2.x;
  rotMat_1[0] = tmpvar_11;
  vec3 tmpvar_12;
  tmpvar_12.xz = rotMat_1[0].xz;
  tmpvar_12.y = lookX_2.y;
  rotMat_1[0] = tmpvar_12;
  vec3 tmpvar_13;
  tmpvar_13.xy = rotMat_1[0].xy;
  tmpvar_13.z = lookX_2.z;
  rotMat_1[0] = tmpvar_13;
  vec3 tmpvar_14;
  tmpvar_14.yz = rotMat_1[1].yz;
  tmpvar_14.x = tmpvar_8.x;
  rotMat_1[1] = tmpvar_14;
  vec3 tmpvar_15;
  tmpvar_15.xz = rotMat_1[1].xz;
  tmpvar_15.y = tmpvar_8.y;
  rotMat_1[1] = tmpvar_15;
  vec3 tmpvar_16;
  tmpvar_16.xy = rotMat_1[1].xy;
  tmpvar_16.z = tmpvar_8.z;
  rotMat_1[1] = tmpvar_16;
  posW_3.xyz = ((rotMat_1 * vertex_position) + tmpvar_5);
  vFade = (1.0 - abs(dot (tmpvar_7, 
    -(normalize((view_position - posW_3.xyz)))
  )));
  vFade = (vFade * (vFade * material_opacity));
  gl_Position = (matrix_viewProjection * posW_3);
  vPositionW = posW_3.xyz;
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec2 vUv0;
uniform vec3 view_position;
uniform vec3 light_globalAmbient;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform vec3 material_diffuse;
uniform sampler2D texture_opacityMap;
in float vFade;
uniform sampler2D texture_emissiveMap;
uniform float alpha_ref;
void main ()
{
  dAlpha = (texture (texture_opacityMap, vUv0).w * vFade);
  if ((dAlpha < alpha_ref)) {
    discard;
  };
  pc_fragColor.xyz = (material_diffuse * light_globalAmbient);
  lowp vec4 rgba_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (texture_emissiveMap, vUv0);
  rgba_1.w = tmpvar_2.w;
  rgba_1.xyz = pow (tmpvar_2.xyz, vec3(2.2, 2.2, 2.2));
  pc_fragColor.xyz = (pc_fragColor.xyz + rgba_1.xyz);
  vec3 tmpvar_3;
  tmpvar_3 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_3, tmpvar_3))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,^SH^-1203690741^VS^#version 300 es
out vec3 vPositionW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec2 vUv0;
uniform vec3 view_position;
uniform vec3 light_globalAmbient;
uniform vec3 fog_color;
uniform float fog_density;
uniform vec3 material_diffuse;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
void main ()
{
  pc_fragColor.xyz = (material_diffuse * light_globalAmbient);
  lowp vec3 tmpvar_1;
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_emissiveMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_1 = (rgba_2.xyz * material_emissiveIntensity);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_1);
  vec3 tmpvar_4;
  tmpvar_4 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_4, tmpvar_4))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,^SH^-1292628261^VS^#version 300 es
out vec3 vPositionW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec2 vUv0;
uniform vec3 view_position;
uniform vec3 light_globalAmbient;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform float material_opacity;
uniform vec3 material_emissive;
uniform float alpha_ref;
void main ()
{
  dAlpha = (texture (texture_opacityMap, vUv0).w * material_opacity);
  if ((dAlpha < alpha_ref)) {
    discard;
  };
  lowp vec4 rgba_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = texture (texture_diffuseMap, vUv0);
  rgba_1.w = tmpvar_2.w;
  rgba_1.xyz = pow (tmpvar_2.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec3 tmpvar_3;
  tmpvar_3 = (rgba_1.xyz * light_globalAmbient);
  pc_fragColor.xyz = tmpvar_3;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_4;
  tmpvar_4 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_4, tmpvar_4))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_texCoord0,TEXCOORD0,^SH^-126671551^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec3 dNormalW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dAlpha = texture (texture_opacityMap, vUV0_1).x;
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUV0_1).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUV0_1);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dSpecularity = (texture (texture_specularMap, vUV0_1).zzz * material_specular);
  dGlossiness = (material_shininess + 1e-07);
  lowp float fresnel_6;
  lowp float tmpvar_7;
  tmpvar_7 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  fresnel_6 = (tmpvar_7 * (tmpvar_8 * tmpvar_8));
  fresnel_6 = (fresnel_6 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_6));
  lowp vec3 fixedReflDir_9;
  lowp vec3 vec_10;
  vec_10 = dNormalW;
  lowp float tmpvar_11;
  tmpvar_11 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_12;
  tmpvar_12 = abs(dNormalW.x);
  if ((tmpvar_12 != tmpvar_11)) {
    vec_10.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_13;
  tmpvar_13 = abs(dNormalW.y);
  if ((tmpvar_13 != tmpvar_11)) {
    vec_10.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.z);
  if ((tmpvar_14 != tmpvar_11)) {
    vec_10.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_9.yz = vec_10.yz;
  fixedReflDir_9.x = -(vec_10.x);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_prefilteredCubeMap4, fixedReflDir_9);
  lowp vec3 tmpvar_16;
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  tmpvar_16 = (tmpvar_17 * tmpvar_17);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  lowp vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  lowp vec3 vec_26;
  vec_26 = tmpvar_3;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  lowp float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_3.x * tmpvar_27);
  };
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_3.y * tmpvar_27);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_3.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = (tmpvar_33 * tmpvar_33);
  tmpvar_34.w = material_reflectivity;
  lowp vec3 tmpvar_35;
  tmpvar_35 = mix ((rgba_4.yyy * tmpvar_16), (tmpvar_34.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_35;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_36;
  tmpvar_36 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_36, tmpvar_36))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^-926340558^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUV0_1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec4 texture_diffuseMapTransform;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUV0_1 = ((vertex_texCoord0 * texture_diffuseMapTransform.xy) + texture_diffuseMapTransform.zw);
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUV0_1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dNormalW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUV0_1).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUV0_1);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = (rgba_4.xyz * material_diffuse);
  lowp vec3 tmpvar_6;
  tmpvar_6 = mix (vec3(0.04, 0.04, 0.04), dAlbedo, material_metalness);
  dAlbedo = (dAlbedo * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUV0_1).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6 + ((1.0 - tmpvar_6) * fresnel_7));
  lowp vec3 fixedReflDir_10;
  lowp vec3 vec_11;
  vec_11 = dNormalW;
  lowp float tmpvar_12;
  tmpvar_12 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_13;
  tmpvar_13 = abs(dNormalW.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_3;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_3.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_3.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_3.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_3.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  lowp vec3 tmpvar_36;
  tmpvar_36 = mix ((dAlbedo * tmpvar_17), (tmpvar_35.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_36;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_37;
  tmpvar_37 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_37, tmpvar_37))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^-375730122^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform lowp samplerCube texture_prefilteredCubeMap4;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dAlpha = texture (texture_opacityMap, vUv0).x;
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  vec3 fixedReflDir_4;
  vec3 vec_5;
  vec_5 = tmpvar_1;
  float tmpvar_6;
  tmpvar_6 = max (max (abs(tmpvar_1.x), abs(tmpvar_1.y)), abs(tmpvar_1.z));
  float tmpvar_7;
  tmpvar_7 = abs(tmpvar_1.x);
  if ((tmpvar_7 != tmpvar_6)) {
    vec_5.x = (tmpvar_1.x * 0.75);
  };
  float tmpvar_8;
  tmpvar_8 = abs(tmpvar_1.y);
  if ((tmpvar_8 != tmpvar_6)) {
    vec_5.y = (tmpvar_1.y * 0.75);
  };
  float tmpvar_9;
  tmpvar_9 = abs(tmpvar_1.z);
  if ((tmpvar_9 != tmpvar_6)) {
    vec_5.z = (tmpvar_1.z * 0.75);
  };
  fixedReflDir_4.yz = vec_5.yz;
  fixedReflDir_4.x = -(vec_5.x);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_prefilteredCubeMap4, fixedReflDir_4);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((8.0 * tmpvar_10.w) * tmpvar_10.xyz);
  dDiffuseLight = ((tmpvar_11 * tmpvar_11) * skyboxIntensity);
  lowp vec3 tmpvar_12;
  tmpvar_12 = (rgba_2.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_12;
  lowp vec3 tmpvar_13;
  lowp vec4 rgba_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_emissiveMap, vUv0);
  rgba_14.w = tmpvar_15.w;
  rgba_14.xyz = pow (tmpvar_15.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_13 = (rgba_14.xyz * material_emissiveIntensity);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_13);
  vec3 tmpvar_16;
  tmpvar_16 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_16, tmpvar_16))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^-1008143362^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform float material_opacity;
uniform vec3 material_emissive;
uniform lowp samplerCube texture_prefilteredCubeMap4;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  vec3 fixedReflDir_4;
  vec3 vec_5;
  vec_5 = tmpvar_1;
  float tmpvar_6;
  tmpvar_6 = max (max (abs(tmpvar_1.x), abs(tmpvar_1.y)), abs(tmpvar_1.z));
  float tmpvar_7;
  tmpvar_7 = abs(tmpvar_1.x);
  if ((tmpvar_7 != tmpvar_6)) {
    vec_5.x = (tmpvar_1.x * 0.75);
  };
  float tmpvar_8;
  tmpvar_8 = abs(tmpvar_1.y);
  if ((tmpvar_8 != tmpvar_6)) {
    vec_5.y = (tmpvar_1.y * 0.75);
  };
  float tmpvar_9;
  tmpvar_9 = abs(tmpvar_1.z);
  if ((tmpvar_9 != tmpvar_6)) {
    vec_5.z = (tmpvar_1.z * 0.75);
  };
  fixedReflDir_4.yz = vec_5.yz;
  fixedReflDir_4.x = -(vec_5.x);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_prefilteredCubeMap4, fixedReflDir_4);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((8.0 * tmpvar_10.w) * tmpvar_10.xyz);
  dDiffuseLight = ((tmpvar_11 * tmpvar_11) * skyboxIntensity);
  lowp vec3 tmpvar_12;
  tmpvar_12 = (rgba_2.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_12;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_13;
  tmpvar_13 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_13, tmpvar_13))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = material_opacity;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^-2090099732^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularity;
lowp float dGlossiness;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), 
    ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0)
  , material_bumpiness)));
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_specularMap, vUv0);
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_7;
  lowp float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_6.xxx + ((1.0 - tmpvar_6.xxx) * fresnel_7));
  lowp vec3 fixedReflDir_10;
  lowp vec3 vec_11;
  vec_11 = dNormalW;
  lowp float tmpvar_12;
  tmpvar_12 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_13;
  tmpvar_13 = abs(dNormalW.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * skyboxIntensity);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  lowp vec3 fixedReflDir_22;
  lowp int index2_23;
  lowp int index1_24;
  lowp float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  lowp vec3 vec_26;
  vec_26 = tmpvar_3;
  lowp float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  lowp float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_3.x * tmpvar_27);
  };
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_3.y * tmpvar_27);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_3.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_3.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = ((tmpvar_33 * tmpvar_33) * skyboxIntensity);
  tmpvar_34.w = material_reflectivity;
  lowp vec3 tmpvar_35;
  tmpvar_35 = mix ((rgba_4.xyz * dDiffuseLight), (tmpvar_34.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_35;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_36;
  tmpvar_36 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_36, tmpvar_36))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,^SH^-2080539796^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dAlpha = texture (texture_opacityMap, vUv0).z;
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec4 rgba_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (texture_diffuseMap, vUv0);
  rgba_4.w = tmpvar_5.w;
  rgba_4.xyz = pow (tmpvar_5.xyz, vec3(2.2, 2.2, 2.2));
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_6;
  float tmpvar_7;
  tmpvar_7 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  float tmpvar_8;
  tmpvar_8 = (tmpvar_7 * tmpvar_7);
  fresnel_6 = (tmpvar_7 * (tmpvar_8 * tmpvar_8));
  fresnel_6 = (fresnel_6 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_6));
  vec3 fixedReflDir_9;
  vec3 vec_10;
  vec_10 = tmpvar_2;
  float tmpvar_11;
  tmpvar_11 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.x);
  if ((tmpvar_12 != tmpvar_11)) {
    vec_10.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.y);
  if ((tmpvar_13 != tmpvar_11)) {
    vec_10.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_2.z);
  if ((tmpvar_14 != tmpvar_11)) {
    vec_10.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_9.yz = vec_10.yz;
  fixedReflDir_9.x = -(vec_10.x);
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (texture_prefilteredCubeMap4, fixedReflDir_9);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((8.0 * tmpvar_15.w) * tmpvar_15.xyz);
  dDiffuseLight = ((tmpvar_16 * tmpvar_16) * skyboxIntensity);
  lowp vec4 cube_0_18;
  lowp vec4 cube_1_19;
  lowp vec4 cubes_20[6];
  vec3 fixedReflDir_21;
  highp int index2_22;
  highp int index1_23;
  float tmpvar_24;
  tmpvar_24 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_23 = int(tmpvar_24);
  index2_22 = int(min ((tmpvar_24 + 1.0), 7.0));
  vec3 vec_25;
  vec_25 = tmpvar_3;
  float tmpvar_26;
  tmpvar_26 = (1.0 - (exp2(tmpvar_24) / 128.0));
  float tmpvar_27;
  tmpvar_27 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_28;
  tmpvar_28 = abs(tmpvar_3.x);
  if ((tmpvar_28 != tmpvar_27)) {
    vec_25.x = (tmpvar_3.x * tmpvar_26);
  };
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.y);
  if ((tmpvar_29 != tmpvar_27)) {
    vec_25.y = (tmpvar_3.y * tmpvar_26);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.z);
  if ((tmpvar_30 != tmpvar_27)) {
    vec_25.z = (tmpvar_3.z * tmpvar_26);
  };
  fixedReflDir_21.yz = vec_25.yz;
  fixedReflDir_21.x = -(vec_25.x);
  cubes_20[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_21);
  cubes_20[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_21);
  cubes_20[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_21);
  cubes_20[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_21);
  cubes_20[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_21);
  cubes_20[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_21);
  for (highp int i_17 = 0; i_17 < 6; i_17++) {
    if ((i_17 == index1_23)) {
      cube_0_18 = cubes_20[i_17];
    };
    if ((i_17 == index2_22)) {
      cube_1_19 = cubes_20[i_17];
    };
  };
  lowp vec4 tmpvar_31;
  tmpvar_31 = mix (cube_0_18, cube_1_19, fract(tmpvar_24));
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((8.0 * tmpvar_31.w) * tmpvar_31.xyz);
  lowp vec4 tmpvar_33;
  tmpvar_33.xyz = ((tmpvar_32 * tmpvar_32) * skyboxIntensity);
  tmpvar_33.w = material_reflectivity;
  lowp vec3 tmpvar_34;
  tmpvar_34 = mix ((rgba_4.xyz * dDiffuseLight), (tmpvar_33.xyz * material_reflectivity), dSpecularity);
  pc_fragColor.xyz = tmpvar_34;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_35;
  tmpvar_35 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_35, tmpvar_35))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^-316414215^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform vec3 material_diffuse;
uniform vec3 material_emissive;
uniform lowp samplerCube texture_prefilteredCubeMap4;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  vec3 fixedReflDir_2;
  vec3 vec_3;
  vec_3 = tmpvar_1;
  float tmpvar_4;
  tmpvar_4 = max (max (abs(tmpvar_1.x), abs(tmpvar_1.y)), abs(tmpvar_1.z));
  float tmpvar_5;
  tmpvar_5 = abs(tmpvar_1.x);
  if ((tmpvar_5 != tmpvar_4)) {
    vec_3.x = (tmpvar_1.x * 0.75);
  };
  float tmpvar_6;
  tmpvar_6 = abs(tmpvar_1.y);
  if ((tmpvar_6 != tmpvar_4)) {
    vec_3.y = (tmpvar_1.y * 0.75);
  };
  float tmpvar_7;
  tmpvar_7 = abs(tmpvar_1.z);
  if ((tmpvar_7 != tmpvar_4)) {
    vec_3.z = (tmpvar_1.z * 0.75);
  };
  fixedReflDir_2.yz = vec_3.yz;
  fixedReflDir_2.x = -(vec_3.x);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (texture_prefilteredCubeMap4, fixedReflDir_2);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((8.0 * tmpvar_8.w) * tmpvar_8.xyz);
  dDiffuseLight = ((tmpvar_9 * tmpvar_9) * skyboxIntensity);
  lowp vec3 tmpvar_10;
  tmpvar_10 = (material_diffuse * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_10;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_11;
  tmpvar_11 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_11, tmpvar_11))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,^SH^-840755486^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform vec3 material_diffuse;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform float material_metalness;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  vec3 tmpvar_2;
  tmpvar_2 = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = normalize(((2.0 * 
    (dot (tmpvar_2, tmpvar_1) * tmpvar_2)
  ) - tmpvar_1));
  lowp vec3 tmpvar_4;
  tmpvar_4 = mix (vec3(0.04, 0.04, 0.04), material_diffuse, material_metalness);
  dAlbedo = (material_diffuse * (1.0 - material_metalness));
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_5;
  lowp float tmpvar_6;
  tmpvar_6 = (1.0 - max (dot (tmpvar_2, tmpvar_1), 0.0));
  lowp float tmpvar_7;
  tmpvar_7 = (tmpvar_6 * tmpvar_6);
  fresnel_5 = (tmpvar_6 * (tmpvar_7 * tmpvar_7));
  fresnel_5 = (fresnel_5 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_4 + ((1.0 - tmpvar_4) * fresnel_5));
  vec3 fixedReflDir_8;
  vec3 vec_9;
  vec_9 = tmpvar_2;
  float tmpvar_10;
  tmpvar_10 = max (max (abs(tmpvar_2.x), abs(tmpvar_2.y)), abs(tmpvar_2.z));
  float tmpvar_11;
  tmpvar_11 = abs(tmpvar_2.x);
  if ((tmpvar_11 != tmpvar_10)) {
    vec_9.x = (tmpvar_2.x * 0.75);
  };
  float tmpvar_12;
  tmpvar_12 = abs(tmpvar_2.y);
  if ((tmpvar_12 != tmpvar_10)) {
    vec_9.y = (tmpvar_2.y * 0.75);
  };
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_2.z);
  if ((tmpvar_13 != tmpvar_10)) {
    vec_9.z = (tmpvar_2.z * 0.75);
  };
  fixedReflDir_8.yz = vec_9.yz;
  fixedReflDir_8.x = -(vec_9.x);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (texture_prefilteredCubeMap4, fixedReflDir_8);
  lowp vec3 tmpvar_15;
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((8.0 * tmpvar_14.w) * tmpvar_14.xyz);
  tmpvar_15 = (tmpvar_16 * tmpvar_16);
  dDiffuseLight = tmpvar_15;
  lowp vec4 cube_0_18;
  lowp vec4 cube_1_19;
  lowp vec4 cubes_20[6];
  lowp vec3 fixedReflDir_21;
  lowp int index2_22;
  lowp int index1_23;
  lowp float tmpvar_24;
  tmpvar_24 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_23 = int(tmpvar_24);
  index2_22 = int(min ((tmpvar_24 + 1.0), 7.0));
  lowp vec3 vec_25;
  vec_25 = tmpvar_3;
  lowp float tmpvar_26;
  tmpvar_26 = (1.0 - (exp2(tmpvar_24) / 128.0));
  lowp float tmpvar_27;
  tmpvar_27 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  lowp float tmpvar_28;
  tmpvar_28 = abs(tmpvar_3.x);
  if ((tmpvar_28 != tmpvar_27)) {
    vec_25.x = (tmpvar_3.x * tmpvar_26);
  };
  lowp float tmpvar_29;
  tmpvar_29 = abs(tmpvar_3.y);
  if ((tmpvar_29 != tmpvar_27)) {
    vec_25.y = (tmpvar_3.y * tmpvar_26);
  };
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_3.z);
  if ((tmpvar_30 != tmpvar_27)) {
    vec_25.z = (tmpvar_3.z * tmpvar_26);
  };
  fixedReflDir_21.yz = vec_25.yz;
  fixedReflDir_21.x = -(vec_25.x);
  cubes_20[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_21);
  cubes_20[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_21);
  cubes_20[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_21);
  cubes_20[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_21);
  cubes_20[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_21);
  cubes_20[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_21);
  for (highp int i_17 = 0; i_17 < 6; i_17++) {
    if ((i_17 == index1_23)) {
      cube_0_18 = cubes_20[i_17];
    };
    if ((i_17 == index2_22)) {
      cube_1_19 = cubes_20[i_17];
    };
  };
  lowp vec4 tmpvar_31;
  tmpvar_31 = mix (cube_0_18, cube_1_19, fract(tmpvar_24));
  lowp vec3 tmpvar_32;
  tmpvar_32 = ((8.0 * tmpvar_31.w) * tmpvar_31.xyz);
  lowp vec4 tmpvar_33;
  tmpvar_33.xyz = (tmpvar_32 * tmpvar_32);
  tmpvar_33.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_34;
  tmpvar_34 = normalize(dLightDirW);
  float falloff_35;
  float tmpvar_36;
  tmpvar_36 = dot (dLightDirW, dLightDirW);
  float tmpvar_37;
  tmpvar_37 = (1.0/(light0_radius));
  falloff_35 = ((1.0/((tmpvar_36 + 1.0))) * 16.0);
  float x_38;
  x_38 = (tmpvar_36 * (tmpvar_37 * tmpvar_37));
  float tmpvar_39;
  tmpvar_39 = clamp ((1.0 - (x_38 * x_38)), 0.0, 1.0);
  falloff_35 = (falloff_35 * (tmpvar_39 * tmpvar_39));
  dAtten = falloff_35;
  if ((falloff_35 > 1e-05)) {
    float tmpvar_40;
    tmpvar_40 = clamp (((
      dot (tmpvar_34, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_35 * (tmpvar_40 * (tmpvar_40 * 
      (3.0 - (2.0 * tmpvar_40))
    )));
    dAtten = (dAtten * max (dot (tmpvar_2, 
      -(tmpvar_34)
    ), 0.0));
    vec4 projPos_41;
    vec4 tmpvar_42;
    tmpvar_42.w = 1.0;
    tmpvar_42.xyz = vPositionW;
    vec4 tmpvar_43;
    tmpvar_43 = (light0_shadowMatrix * tmpvar_42);
    projPos_41.zw = tmpvar_43.zw;
    projPos_41.xy = (tmpvar_43.xy / tmpvar_43.w);
    float Z_44;
    Z_44 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_45;
    tmpvar_45 = texture (light0_shadowMap, projPos_41.xy);
    lowp vec3 tmpvar_46;
    tmpvar_46.z = 0.0;
    tmpvar_46.x = ((tmpvar_45.y * 0.003921569) + tmpvar_45.x);
    tmpvar_46.y = ((tmpvar_45.w * 0.003921569) + tmpvar_45.z);
    float tmpvar_47;
    tmpvar_47 = (light0_shadowParams.y * Z_44);
    lowp float tmpvar_48;
    tmpvar_48 = max ((tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x)), (tmpvar_47 * tmpvar_47));
    lowp float tmpvar_49;
    tmpvar_49 = (Z_44 - tmpvar_46.x);
    lowp float tmpvar_50;
    tmpvar_50 = clamp (((
      (tmpvar_48 / (tmpvar_48 + (tmpvar_49 * tmpvar_49)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_51;
    if ((Z_44 <= tmpvar_46.x)) {
      tmpvar_51 = 1.0;
    } else {
      tmpvar_51 = tmpvar_50;
    };
    dAtten = (dAtten * tmpvar_51);
    dDiffuseLight = (tmpvar_15 + (dAtten * light0_color));
    lowp float tmpvar_52;
    tmpvar_52 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_34) + tmpvar_1)
      ), tmpvar_2), 0.0), tmpvar_52)
     * 
      (tmpvar_52 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  lowp vec3 tmpvar_53;
  tmpvar_53 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_33.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_53;
  lowp vec3 tmpvar_54;
  lowp vec4 rgba_55;
  lowp vec4 tmpvar_56;
  tmpvar_56 = texture (texture_emissiveMap, vUv0);
  rgba_55.w = tmpvar_56.w;
  rgba_55.xyz = pow (tmpvar_56.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_54 = (rgba_55.xyz * material_emissiveIntensity);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_54);
  vec3 tmpvar_57;
  tmpvar_57 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_57, tmpvar_57))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^-1262654341^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform vec3 light2_color;
uniform vec3 light2_position;
uniform float light2_radius;
uniform vec3 light2_direction;
uniform float light2_innerConeAngle;
uniform float light2_outerConeAngle;
uniform vec3 light3_color;
uniform vec3 light3_position;
uniform float light3_radius;
uniform vec3 light3_direction;
uniform float light3_innerConeAngle;
uniform float light3_outerConeAngle;
uniform vec3 light4_color;
uniform vec3 light4_position;
uniform float light4_radius;
uniform vec3 light4_direction;
uniform float light4_innerConeAngle;
uniform float light4_outerConeAngle;
uniform vec3 light5_color;
uniform vec3 light5_position;
uniform float light5_radius;
uniform vec3 light5_direction;
uniform float light5_innerConeAngle;
uniform float light5_outerConeAngle;
uniform mat4 light5_shadowMatrix;
uniform vec4 light5_shadowParams;
uniform sampler2D light5_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform float isLeaves;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform float alpha_ref;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dSpecularity = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_2;
  tmpvar_2 = normalize((view_position - vPositionW));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(vNormalW);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (tmpvar_3, tmpvar_2) * tmpvar_3)
  ) - tmpvar_2));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = rgba_5.xyz;
  if ((isLeaves > 0.5)) {
    dAlbedo = (rgba_5.xyz * vec3((vVertexColor.w * 2.0)));
  } else {
    dAlbedo = (dAlbedo * vec3(clamp ((
      (vVertexColor.w * vVertexColor.w)
     * 
      (vVertexColor.w * 5.0)
    ), 0.0, 1.0)));
  };
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * clamp (vVertexColor.x, 0.0, 1.0)) + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_3, tmpvar_2), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_3;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_3.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_3.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_3.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_3.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_3.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_3.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * skyboxIntensity);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_4;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_4.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_4.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_4.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_4.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = ((tmpvar_33 * tmpvar_33) * skyboxIntensity);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_35)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_42;
    tmpvar_42 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_42)
     * 
      (tmpvar_42 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_43;
  tmpvar_43 = normalize(dLightDirW);
  float falloff_44;
  float tmpvar_45;
  tmpvar_45 = dot (dLightDirW, dLightDirW);
  float tmpvar_46;
  tmpvar_46 = (1.0/(light1_radius));
  falloff_44 = ((1.0/((tmpvar_45 + 1.0))) * 16.0);
  float x_47;
  x_47 = (tmpvar_45 * (tmpvar_46 * tmpvar_46));
  float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (x_47 * x_47)), 0.0, 1.0);
  falloff_44 = (falloff_44 * (tmpvar_48 * tmpvar_48));
  dAtten = falloff_44;
  if ((falloff_44 > 1e-05)) {
    float tmpvar_49;
    tmpvar_49 = clamp (((
      dot (tmpvar_43, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_44 * (tmpvar_49 * (tmpvar_49 * 
      (3.0 - (2.0 * tmpvar_49))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_43)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_50;
    tmpvar_50 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_43) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_50)
     * 
      (tmpvar_50 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dLightDirW = (vPositionW - light2_position);
  vec3 tmpvar_51;
  tmpvar_51 = normalize(dLightDirW);
  float falloff_52;
  float tmpvar_53;
  tmpvar_53 = dot (dLightDirW, dLightDirW);
  float tmpvar_54;
  tmpvar_54 = (1.0/(light2_radius));
  falloff_52 = ((1.0/((tmpvar_53 + 1.0))) * 16.0);
  float x_55;
  x_55 = (tmpvar_53 * (tmpvar_54 * tmpvar_54));
  float tmpvar_56;
  tmpvar_56 = clamp ((1.0 - (x_55 * x_55)), 0.0, 1.0);
  falloff_52 = (falloff_52 * (tmpvar_56 * tmpvar_56));
  dAtten = falloff_52;
  if ((falloff_52 > 1e-05)) {
    float tmpvar_57;
    tmpvar_57 = clamp (((
      dot (tmpvar_51, light2_direction)
     - light2_outerConeAngle) / (light2_innerConeAngle - light2_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_52 * (tmpvar_57 * (tmpvar_57 * 
      (3.0 - (2.0 * tmpvar_57))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_51)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light2_color));
    float tmpvar_58;
    tmpvar_58 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_51) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_58)
     * 
      (tmpvar_58 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light2_color));
  };
  dLightDirW = (vPositionW - light3_position);
  vec3 tmpvar_59;
  tmpvar_59 = normalize(dLightDirW);
  float falloff_60;
  float tmpvar_61;
  tmpvar_61 = dot (dLightDirW, dLightDirW);
  float tmpvar_62;
  tmpvar_62 = (1.0/(light3_radius));
  falloff_60 = ((1.0/((tmpvar_61 + 1.0))) * 16.0);
  float x_63;
  x_63 = (tmpvar_61 * (tmpvar_62 * tmpvar_62));
  float tmpvar_64;
  tmpvar_64 = clamp ((1.0 - (x_63 * x_63)), 0.0, 1.0);
  falloff_60 = (falloff_60 * (tmpvar_64 * tmpvar_64));
  dAtten = falloff_60;
  if ((falloff_60 > 1e-05)) {
    float tmpvar_65;
    tmpvar_65 = clamp (((
      dot (tmpvar_59, light3_direction)
     - light3_outerConeAngle) / (light3_innerConeAngle - light3_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_60 * (tmpvar_65 * (tmpvar_65 * 
      (3.0 - (2.0 * tmpvar_65))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_59)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light3_color));
    float tmpvar_66;
    tmpvar_66 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_59) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_66)
     * 
      (tmpvar_66 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light3_color));
  };
  dLightDirW = (vPositionW - light4_position);
  vec3 tmpvar_67;
  tmpvar_67 = normalize(dLightDirW);
  float falloff_68;
  float tmpvar_69;
  tmpvar_69 = dot (dLightDirW, dLightDirW);
  float tmpvar_70;
  tmpvar_70 = (1.0/(light4_radius));
  falloff_68 = ((1.0/((tmpvar_69 + 1.0))) * 16.0);
  float x_71;
  x_71 = (tmpvar_69 * (tmpvar_70 * tmpvar_70));
  float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (x_71 * x_71)), 0.0, 1.0);
  falloff_68 = (falloff_68 * (tmpvar_72 * tmpvar_72));
  dAtten = falloff_68;
  if ((falloff_68 > 1e-05)) {
    float tmpvar_73;
    tmpvar_73 = clamp (((
      dot (tmpvar_67, light4_direction)
     - light4_outerConeAngle) / (light4_innerConeAngle - light4_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_68 * (tmpvar_73 * (tmpvar_73 * 
      (3.0 - (2.0 * tmpvar_73))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_67)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light4_color));
    float tmpvar_74;
    tmpvar_74 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_67) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_74)
     * 
      (tmpvar_74 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light4_color));
  };
  dLightDirW = (vPositionW - light5_position);
  vec3 tmpvar_75;
  tmpvar_75 = normalize(dLightDirW);
  float falloff_76;
  float tmpvar_77;
  tmpvar_77 = dot (dLightDirW, dLightDirW);
  float tmpvar_78;
  tmpvar_78 = (1.0/(light5_radius));
  falloff_76 = ((1.0/((tmpvar_77 + 1.0))) * 16.0);
  float x_79;
  x_79 = (tmpvar_77 * (tmpvar_78 * tmpvar_78));
  float tmpvar_80;
  tmpvar_80 = clamp ((1.0 - (x_79 * x_79)), 0.0, 1.0);
  falloff_76 = (falloff_76 * (tmpvar_80 * tmpvar_80));
  dAtten = falloff_76;
  if ((falloff_76 > 1e-05)) {
    float tmpvar_81;
    tmpvar_81 = clamp (((
      dot (tmpvar_75, light5_direction)
     - light5_outerConeAngle) / (light5_innerConeAngle - light5_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_76 * (tmpvar_81 * (tmpvar_81 * 
      (3.0 - (2.0 * tmpvar_81))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_75)
    ), 0.0));
    vec4 projPos_82;
    vec4 tmpvar_83;
    tmpvar_83.w = 1.0;
    tmpvar_83.xyz = vPositionW;
    vec4 tmpvar_84;
    tmpvar_84 = (light5_shadowMatrix * tmpvar_83);
    projPos_82.zw = tmpvar_84.zw;
    projPos_82.xy = (tmpvar_84.xy / tmpvar_84.w);
    float Z_85;
    Z_85 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light5_shadowParams.w) + light5_shadowParams.z);
    lowp vec4 tmpvar_86;
    tmpvar_86 = texture (light5_shadowMap, projPos_82.xy);
    lowp vec3 tmpvar_87;
    tmpvar_87.z = 0.0;
    tmpvar_87.x = ((tmpvar_86.y * 0.003921569) + tmpvar_86.x);
    tmpvar_87.y = ((tmpvar_86.w * 0.003921569) + tmpvar_86.z);
    float tmpvar_88;
    tmpvar_88 = (light5_shadowParams.y * Z_85);
    lowp float tmpvar_89;
    tmpvar_89 = max ((tmpvar_87.y - (tmpvar_87.x * tmpvar_87.x)), (tmpvar_88 * tmpvar_88));
    lowp float tmpvar_90;
    tmpvar_90 = (Z_85 - tmpvar_87.x);
    lowp float tmpvar_91;
    tmpvar_91 = clamp (((
      (tmpvar_89 / (tmpvar_89 + (tmpvar_90 * tmpvar_90)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_92;
    if ((Z_85 <= tmpvar_87.x)) {
      tmpvar_92 = 1.0;
    } else {
      tmpvar_92 = tmpvar_91;
    };
    dAtten = (dAtten * tmpvar_92);
    dDiffuseLight = (dDiffuseLight + (dAtten * light5_color));
    float tmpvar_93;
    tmpvar_93 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_75) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_93)
     * 
      (tmpvar_93 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light5_color));
  };
  lowp vec3 tmpvar_94;
  tmpvar_94 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_94;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_95;
  tmpvar_95 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_95, tmpvar_95))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^-981396528^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
out vec2 vUv1;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=3) in vec2 vertex_texCoord1;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform vec3 treeSize;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = ((treeSize * 0.0254) / 0.3048);
  vec3 tmpvar_5;
  tmpvar_5.x = fract(vertex_texCoord1.x);
  tmpvar_5.y = fract((vertex_texCoord1.x * 256.0));
  tmpvar_5.z = fract((vertex_texCoord1.x * 65536.0));
  vec3 tmpvar_6;
  tmpvar_6 = (tmpvar_5 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_7;
  tmpvar_7.x = fract(vertex_texCoord1.y);
  tmpvar_7.y = fract((vertex_texCoord1.y * 256.0));
  tmpvar_7.z = fract((vertex_texCoord1.y * 65536.0));
  vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 - vec3(0.5, 0.5, 0.0));
  vec3 tmpvar_9;
  tmpvar_9 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_10;
  tmpvar_10 = normalize((tmpvar_6 - tmpvar_8));
  vec3 tmpvar_11;
  tmpvar_11 = normalize(((tmpvar_9.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_9.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_12;
  tmpvar_12[uint(0)] = tmpvar_11;
  tmpvar_12[1u] = normalize(((tmpvar_9.yzx * tmpvar_11.zxy) - (tmpvar_9.zxy * tmpvar_11.yzx)));
  tmpvar_12[2u] = tmpvar_9;
  vec3 tmpvar_13;
  tmpvar_13 = normalize(((tmpvar_10.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_10.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_14;
  tmpvar_14[uint(0)] = tmpvar_13;
  tmpvar_14[1u] = normalize(((tmpvar_10.yzx * tmpvar_13.zxy) - (tmpvar_10.zxy * tmpvar_13.yzx)));
  tmpvar_14[2u] = tmpvar_10;
  float tmpvar_15;
  tmpvar_15 = sqrt(dot (tmpvar_6, tmpvar_6));
  if ((tmpvar_15 > 0.03)) {
    vec3 pos_16;
    vec3 parentPos_17;
    parentPos_17 = (tmpvar_6 * tmpvar_4);
    pos_16 = (pos_1 - parentPos_17);
    float tmpvar_18;
    tmpvar_18 = clamp ((sqrt(
      dot (pos_16, pos_16)
    ) / 3.5), 0.0, 1.0);
    pos_16 = (pos_16 * tmpvar_12);
    float tmpvar_19;
    tmpvar_19 = abs(cos((globalTime + 
      dot (parentPos_17, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_20;
    pRotation_20 = (((0.05 * 
      ((tmpvar_19 * tmpvar_19) * (3.0 - (2.0 * tmpvar_19)))
    ) * tmpvar_18) * windAmplitude);
    float tmpvar_21;
    tmpvar_21 = cos(pRotation_20);
    float tmpvar_22;
    tmpvar_22 = sin(pRotation_20);
    mat2 tmpvar_23;
    tmpvar_23[uint(0)].x = tmpvar_21;
    tmpvar_23[uint(0)].y = -(tmpvar_22);
    tmpvar_23[1u].x = tmpvar_22;
    tmpvar_23[1u].y = tmpvar_21;
    pos_16.yz = (tmpvar_23 * pos_16.yz);
    pos_16 = (tmpvar_12 * pos_16);
    pos_16 = (pos_16 + parentPos_17);
    pos_1 = pos_16;
  };
  float tmpvar_24;
  tmpvar_24 = sqrt(dot (tmpvar_8, tmpvar_8));
  if ((tmpvar_24 > 0.03)) {
    vec3 pos_25;
    vec3 parentPos_26;
    parentPos_26 = (tmpvar_8 * tmpvar_4);
    pos_25 = (pos_1 - parentPos_26);
    float tmpvar_27;
    tmpvar_27 = clamp ((sqrt(
      dot (pos_25, pos_25)
    ) / 3.5), 0.0, 1.0);
    pos_25 = (pos_25 * tmpvar_14);
    float tmpvar_28;
    tmpvar_28 = abs(cos((globalTime + 
      dot (parentPos_26, vec3(1.0, 1.0, 1.0))
    )));
    float pRotation_29;
    pRotation_29 = (((0.05 * 
      ((tmpvar_28 * tmpvar_28) * (3.0 - (2.0 * tmpvar_28)))
    ) * tmpvar_27) * windAmplitude);
    float tmpvar_30;
    tmpvar_30 = cos(pRotation_29);
    float tmpvar_31;
    tmpvar_31 = sin(pRotation_29);
    mat2 tmpvar_32;
    tmpvar_32[uint(0)].x = tmpvar_30;
    tmpvar_32[uint(0)].y = -(tmpvar_31);
    tmpvar_32[1u].x = tmpvar_31;
    tmpvar_32[1u].y = tmpvar_30;
    pos_25.yz = (tmpvar_32 * pos_25.yz);
    pos_25 = (tmpvar_14 * pos_25);
    pos_25 = (pos_25 + parentPos_26);
    pos_1 = pos_25;
  };
  vec3 pos_33;
  pos_33.x = pos_1.x;
  float pRotation_34;
  pRotation_34 = ((0.035 * cos(globalTime)) * clamp ((pos_1.z / 16.0), 0.0, 1.0));
  float tmpvar_35;
  tmpvar_35 = cos(pRotation_34);
  float tmpvar_36;
  tmpvar_36 = sin(pRotation_34);
  mat2 tmpvar_37;
  tmpvar_37[uint(0)].x = tmpvar_35;
  tmpvar_37[uint(0)].y = -(tmpvar_36);
  tmpvar_37[1u].x = tmpvar_36;
  tmpvar_37[1u].y = tmpvar_35;
  pos_33.yz = (tmpvar_37 * pos_1.yz);
  pos_1 = pos_33;
  testVec = tmpvar_6;
  vec4 tmpvar_38;
  tmpvar_38.w = 1.0;
  tmpvar_38.xyz = pos_33;
  vec4 tmpvar_39;
  tmpvar_39 = (matrix_model * tmpvar_38);
  gl_Position = (matrix_viewProjection * tmpvar_39);
  vPositionW = tmpvar_39.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
  vUv1 = vertex_texCoord1;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
in vec2 vUv1;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform vec3 light2_color;
uniform vec3 light2_position;
uniform float light2_radius;
uniform vec3 light2_direction;
uniform float light2_innerConeAngle;
uniform float light2_outerConeAngle;
uniform vec3 light3_color;
uniform vec3 light3_position;
uniform float light3_radius;
uniform vec3 light3_direction;
uniform float light3_innerConeAngle;
uniform float light3_outerConeAngle;
uniform vec3 light4_color;
uniform vec3 light4_position;
uniform float light4_radius;
uniform vec3 light4_direction;
uniform float light4_innerConeAngle;
uniform float light4_outerConeAngle;
uniform vec3 light5_color;
uniform vec3 light5_position;
uniform float light5_radius;
uniform vec3 light5_direction;
uniform float light5_innerConeAngle;
uniform float light5_outerConeAngle;
uniform mat4 light5_shadowMatrix;
uniform vec4 light5_shadowParams;
uniform sampler2D light5_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_diffuse;
uniform sampler2D texture_opacityMap;
uniform sampler2D texture_emissiveMap;
uniform float material_emissiveIntensity;
uniform sampler2D texture_specularMap;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform float alpha_ref;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_2;
  tmpvar_2 = normalize((view_position - vPositionW));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(vNormalW);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (tmpvar_3, tmpvar_2) * tmpvar_3)
  ) - tmpvar_2));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = (rgba_5.xyz * material_diffuse);
  dSpecularity = (texture (texture_specularMap, vUv1).xyz * material_specular);
  dGlossiness = ((material_shininess * clamp (vVertexColor.x, 0.0, 1.0)) + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_3, tmpvar_2), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (dSpecularity + ((1.0 - dSpecularity) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_3;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_3.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_3.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_3.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_3.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_3.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_3.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  tmpvar_17 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  dDiffuseLight = ((tmpvar_17 * tmpvar_17) * skyboxIntensity);
  lowp vec4 cube_0_19;
  lowp vec4 cube_1_20;
  lowp vec4 cubes_21[6];
  vec3 fixedReflDir_22;
  highp int index2_23;
  highp int index1_24;
  float tmpvar_25;
  tmpvar_25 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_24 = int(tmpvar_25);
  index2_23 = int(min ((tmpvar_25 + 1.0), 7.0));
  vec3 vec_26;
  vec_26 = tmpvar_4;
  float tmpvar_27;
  tmpvar_27 = (1.0 - (exp2(tmpvar_25) / 128.0));
  float tmpvar_28;
  tmpvar_28 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  float tmpvar_29;
  tmpvar_29 = abs(tmpvar_4.x);
  if ((tmpvar_29 != tmpvar_28)) {
    vec_26.x = (tmpvar_4.x * tmpvar_27);
  };
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.y);
  if ((tmpvar_30 != tmpvar_28)) {
    vec_26.y = (tmpvar_4.y * tmpvar_27);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.z);
  if ((tmpvar_31 != tmpvar_28)) {
    vec_26.z = (tmpvar_4.z * tmpvar_27);
  };
  fixedReflDir_22.yz = vec_26.yz;
  fixedReflDir_22.x = -(vec_26.x);
  cubes_21[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_22);
  cubes_21[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_22);
  cubes_21[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_22);
  cubes_21[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_22);
  cubes_21[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_22);
  cubes_21[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_22);
  for (highp int i_18 = 0; i_18 < 6; i_18++) {
    if ((i_18 == index1_24)) {
      cube_0_19 = cubes_21[i_18];
    };
    if ((i_18 == index2_23)) {
      cube_1_20 = cubes_21[i_18];
    };
  };
  lowp vec4 tmpvar_32;
  tmpvar_32 = mix (cube_0_19, cube_1_20, fract(tmpvar_25));
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((8.0 * tmpvar_32.w) * tmpvar_32.xyz);
  lowp vec4 tmpvar_34;
  tmpvar_34.xyz = ((tmpvar_33 * tmpvar_33) * skyboxIntensity);
  tmpvar_34.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_35;
  tmpvar_35 = normalize(dLightDirW);
  float falloff_36;
  float tmpvar_37;
  tmpvar_37 = dot (dLightDirW, dLightDirW);
  float tmpvar_38;
  tmpvar_38 = (1.0/(light0_radius));
  falloff_36 = ((1.0/((tmpvar_37 + 1.0))) * 16.0);
  float x_39;
  x_39 = (tmpvar_37 * (tmpvar_38 * tmpvar_38));
  float tmpvar_40;
  tmpvar_40 = clamp ((1.0 - (x_39 * x_39)), 0.0, 1.0);
  falloff_36 = (falloff_36 * (tmpvar_40 * tmpvar_40));
  dAtten = falloff_36;
  if ((falloff_36 > 1e-05)) {
    float tmpvar_41;
    tmpvar_41 = clamp (((
      dot (tmpvar_35, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_36 * (tmpvar_41 * (tmpvar_41 * 
      (3.0 - (2.0 * tmpvar_41))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_35)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    float tmpvar_42;
    tmpvar_42 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_35) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_42)
     * 
      (tmpvar_42 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_43;
  tmpvar_43 = normalize(dLightDirW);
  float falloff_44;
  float tmpvar_45;
  tmpvar_45 = dot (dLightDirW, dLightDirW);
  float tmpvar_46;
  tmpvar_46 = (1.0/(light1_radius));
  falloff_44 = ((1.0/((tmpvar_45 + 1.0))) * 16.0);
  float x_47;
  x_47 = (tmpvar_45 * (tmpvar_46 * tmpvar_46));
  float tmpvar_48;
  tmpvar_48 = clamp ((1.0 - (x_47 * x_47)), 0.0, 1.0);
  falloff_44 = (falloff_44 * (tmpvar_48 * tmpvar_48));
  dAtten = falloff_44;
  if ((falloff_44 > 1e-05)) {
    float tmpvar_49;
    tmpvar_49 = clamp (((
      dot (tmpvar_43, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_44 * (tmpvar_49 * (tmpvar_49 * 
      (3.0 - (2.0 * tmpvar_49))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_43)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    float tmpvar_50;
    tmpvar_50 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_43) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_50)
     * 
      (tmpvar_50 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dLightDirW = (vPositionW - light2_position);
  vec3 tmpvar_51;
  tmpvar_51 = normalize(dLightDirW);
  float falloff_52;
  float tmpvar_53;
  tmpvar_53 = dot (dLightDirW, dLightDirW);
  float tmpvar_54;
  tmpvar_54 = (1.0/(light2_radius));
  falloff_52 = ((1.0/((tmpvar_53 + 1.0))) * 16.0);
  float x_55;
  x_55 = (tmpvar_53 * (tmpvar_54 * tmpvar_54));
  float tmpvar_56;
  tmpvar_56 = clamp ((1.0 - (x_55 * x_55)), 0.0, 1.0);
  falloff_52 = (falloff_52 * (tmpvar_56 * tmpvar_56));
  dAtten = falloff_52;
  if ((falloff_52 > 1e-05)) {
    float tmpvar_57;
    tmpvar_57 = clamp (((
      dot (tmpvar_51, light2_direction)
     - light2_outerConeAngle) / (light2_innerConeAngle - light2_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_52 * (tmpvar_57 * (tmpvar_57 * 
      (3.0 - (2.0 * tmpvar_57))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_51)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light2_color));
    float tmpvar_58;
    tmpvar_58 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_51) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_58)
     * 
      (tmpvar_58 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light2_color));
  };
  dLightDirW = (vPositionW - light3_position);
  vec3 tmpvar_59;
  tmpvar_59 = normalize(dLightDirW);
  float falloff_60;
  float tmpvar_61;
  tmpvar_61 = dot (dLightDirW, dLightDirW);
  float tmpvar_62;
  tmpvar_62 = (1.0/(light3_radius));
  falloff_60 = ((1.0/((tmpvar_61 + 1.0))) * 16.0);
  float x_63;
  x_63 = (tmpvar_61 * (tmpvar_62 * tmpvar_62));
  float tmpvar_64;
  tmpvar_64 = clamp ((1.0 - (x_63 * x_63)), 0.0, 1.0);
  falloff_60 = (falloff_60 * (tmpvar_64 * tmpvar_64));
  dAtten = falloff_60;
  if ((falloff_60 > 1e-05)) {
    float tmpvar_65;
    tmpvar_65 = clamp (((
      dot (tmpvar_59, light3_direction)
     - light3_outerConeAngle) / (light3_innerConeAngle - light3_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_60 * (tmpvar_65 * (tmpvar_65 * 
      (3.0 - (2.0 * tmpvar_65))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_59)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light3_color));
    float tmpvar_66;
    tmpvar_66 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_59) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_66)
     * 
      (tmpvar_66 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light3_color));
  };
  dLightDirW = (vPositionW - light4_position);
  vec3 tmpvar_67;
  tmpvar_67 = normalize(dLightDirW);
  float falloff_68;
  float tmpvar_69;
  tmpvar_69 = dot (dLightDirW, dLightDirW);
  float tmpvar_70;
  tmpvar_70 = (1.0/(light4_radius));
  falloff_68 = ((1.0/((tmpvar_69 + 1.0))) * 16.0);
  float x_71;
  x_71 = (tmpvar_69 * (tmpvar_70 * tmpvar_70));
  float tmpvar_72;
  tmpvar_72 = clamp ((1.0 - (x_71 * x_71)), 0.0, 1.0);
  falloff_68 = (falloff_68 * (tmpvar_72 * tmpvar_72));
  dAtten = falloff_68;
  if ((falloff_68 > 1e-05)) {
    float tmpvar_73;
    tmpvar_73 = clamp (((
      dot (tmpvar_67, light4_direction)
     - light4_outerConeAngle) / (light4_innerConeAngle - light4_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_68 * (tmpvar_73 * (tmpvar_73 * 
      (3.0 - (2.0 * tmpvar_73))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_67)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light4_color));
    float tmpvar_74;
    tmpvar_74 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_67) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_74)
     * 
      (tmpvar_74 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light4_color));
  };
  dLightDirW = (vPositionW - light5_position);
  vec3 tmpvar_75;
  tmpvar_75 = normalize(dLightDirW);
  float falloff_76;
  float tmpvar_77;
  tmpvar_77 = dot (dLightDirW, dLightDirW);
  float tmpvar_78;
  tmpvar_78 = (1.0/(light5_radius));
  falloff_76 = ((1.0/((tmpvar_77 + 1.0))) * 16.0);
  float x_79;
  x_79 = (tmpvar_77 * (tmpvar_78 * tmpvar_78));
  float tmpvar_80;
  tmpvar_80 = clamp ((1.0 - (x_79 * x_79)), 0.0, 1.0);
  falloff_76 = (falloff_76 * (tmpvar_80 * tmpvar_80));
  dAtten = falloff_76;
  if ((falloff_76 > 1e-05)) {
    float tmpvar_81;
    tmpvar_81 = clamp (((
      dot (tmpvar_75, light5_direction)
     - light5_outerConeAngle) / (light5_innerConeAngle - light5_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_76 * (tmpvar_81 * (tmpvar_81 * 
      (3.0 - (2.0 * tmpvar_81))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_75)
    ), 0.0));
    vec4 projPos_82;
    vec4 tmpvar_83;
    tmpvar_83.w = 1.0;
    tmpvar_83.xyz = vPositionW;
    vec4 tmpvar_84;
    tmpvar_84 = (light5_shadowMatrix * tmpvar_83);
    projPos_82.zw = tmpvar_84.zw;
    projPos_82.xy = (tmpvar_84.xy / tmpvar_84.w);
    float Z_85;
    Z_85 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light5_shadowParams.w) + light5_shadowParams.z);
    lowp vec4 tmpvar_86;
    tmpvar_86 = texture (light5_shadowMap, projPos_82.xy);
    lowp vec3 tmpvar_87;
    tmpvar_87.z = 0.0;
    tmpvar_87.x = ((tmpvar_86.y * 0.003921569) + tmpvar_86.x);
    tmpvar_87.y = ((tmpvar_86.w * 0.003921569) + tmpvar_86.z);
    float tmpvar_88;
    tmpvar_88 = (light5_shadowParams.y * Z_85);
    lowp float tmpvar_89;
    tmpvar_89 = max ((tmpvar_87.y - (tmpvar_87.x * tmpvar_87.x)), (tmpvar_88 * tmpvar_88));
    lowp float tmpvar_90;
    tmpvar_90 = (Z_85 - tmpvar_87.x);
    lowp float tmpvar_91;
    tmpvar_91 = clamp (((
      (tmpvar_89 / (tmpvar_89 + (tmpvar_90 * tmpvar_90)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_92;
    if ((Z_85 <= tmpvar_87.x)) {
      tmpvar_92 = 1.0;
    } else {
      tmpvar_92 = tmpvar_91;
    };
    dAtten = (dAtten * tmpvar_92);
    dDiffuseLight = (dDiffuseLight + (dAtten * light5_color));
    float tmpvar_93;
    tmpvar_93 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_75) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_93)
     * 
      (tmpvar_93 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light5_color));
  };
  lowp vec3 tmpvar_94;
  tmpvar_94 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_34.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_94;
  lowp vec3 tmpvar_95;
  float translucency_96;
  translucency_96 = (clamp (dot (tmpvar_75, 
    -(vNormalW)
  ), 0.0, 1.0) * clamp (dot (
    normalize((view_position - vPositionW))
  , tmpvar_75), 0.0, 1.0));
  translucency_96 = (translucency_96 * ((1.0/(
    (dot (dLightDirW, dLightDirW) + 1.0)
  )) * 4.0));
  float tmpvar_97;
  tmpvar_97 = clamp ((translucency_96 + 0.0025), 0.0, 1.0);
  translucency_96 = tmpvar_97;
  lowp vec4 rgba_98;
  lowp vec4 tmpvar_99;
  tmpvar_99 = texture (texture_emissiveMap, vUv0);
  rgba_98.w = tmpvar_99.w;
  rgba_98.xyz = pow (tmpvar_99.xyz, vec3(2.2, 2.2, 2.2));
  tmpvar_95 = (((rgba_98.xyz * material_emissiveIntensity) * (200.0 * tmpvar_97)) * vVertexColor.w);
  pc_fragColor.xyz = (pc_fragColor.xyz + tmpvar_95);
  vec3 tmpvar_100;
  tmpvar_100 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_100, tmpvar_100))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^-1575708755^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dDiffuseLight;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform lowp samplerCube texture_prefilteredCubeMap4;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize(vNormalW);
  lowp vec4 rgba_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (texture_diffuseMap, vUv0);
  rgba_2.w = tmpvar_3.w;
  rgba_2.xyz = pow (tmpvar_3.xyz, vec3(2.2, 2.2, 2.2));
  vec3 fixedReflDir_4;
  vec3 vec_5;
  vec_5 = tmpvar_1;
  float tmpvar_6;
  tmpvar_6 = max (max (abs(tmpvar_1.x), abs(tmpvar_1.y)), abs(tmpvar_1.z));
  float tmpvar_7;
  tmpvar_7 = abs(tmpvar_1.x);
  if ((tmpvar_7 != tmpvar_6)) {
    vec_5.x = (tmpvar_1.x * 0.75);
  };
  float tmpvar_8;
  tmpvar_8 = abs(tmpvar_1.y);
  if ((tmpvar_8 != tmpvar_6)) {
    vec_5.y = (tmpvar_1.y * 0.75);
  };
  float tmpvar_9;
  tmpvar_9 = abs(tmpvar_1.z);
  if ((tmpvar_9 != tmpvar_6)) {
    vec_5.z = (tmpvar_1.z * 0.75);
  };
  fixedReflDir_4.yz = vec_5.yz;
  fixedReflDir_4.x = -(vec_5.x);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (texture_prefilteredCubeMap4, fixedReflDir_4);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((8.0 * tmpvar_10.w) * tmpvar_10.xyz);
  dDiffuseLight = ((tmpvar_11 * tmpvar_11) * skyboxIntensity);
  lowp vec3 tmpvar_12;
  tmpvar_12 = (rgba_2.xyz * dDiffuseLight);
  pc_fragColor.xyz = tmpvar_12;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_13;
  tmpvar_13 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_13, tmpvar_13))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,^SH^-553556909^VS^#version 300 es
out vec4 vVertexColor;
out vec3 vPositionW;
out vec3 vNormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=7) in vec4 vertex_color;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
uniform float globalTime;
uniform float isLeaves;
uniform float windAmplitude;
out vec3 testVec;
void main ()
{
  vec3 pos_1;
  pos_1 = vertex_position;
  if ((isLeaves > 0.5)) {
    vec4 tmpvar_2;
    tmpvar_2 = abs(((
      fract((((
        (fract(((globalTime + 
          dot (vertex_position, vec3(1.0, 1.0, 1.0))
        ) * vec4(1.975, 0.793, 0.375, 0.193))) * 2.0)
       - vec4(1.0, 1.0, 1.0, 1.0)) * 0.1) + 0.5))
     * 2.0) - 1.0));
    vec4 tmpvar_3;
    tmpvar_3 = ((tmpvar_2 * tmpvar_2) * (3.0 - (2.0 * tmpvar_2)));
    pos_1 = (vertex_position + ((
      (tmpvar_3.xz + tmpvar_3.yw)
    .xxy * vertex_normal) * vertex_texCoord0.y));
  };
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((vertex_color.xyz * 2.0) - 1.0));
  vec3 tmpvar_5;
  tmpvar_5 = normalize(((tmpvar_4.yzx * vec3(1.0, 0.0, 0.0)) - (tmpvar_4.zxy * vec3(0.0, 1.0, 0.0))));
  mat3 tmpvar_6;
  tmpvar_6[uint(0)] = tmpvar_5;
  tmpvar_6[1u] = normalize(((tmpvar_4.yzx * tmpvar_5.zxy) - (tmpvar_4.zxy * tmpvar_5.yzx)));
  tmpvar_6[2u] = tmpvar_4;
  vec3 pos_7;
  pos_7 = (pos_1 * tmpvar_6);
  float tmpvar_8;
  tmpvar_8 = abs(cos((globalTime + 
    dot (((tmpvar_4 * 3.0) + matrix_model[3].xyz), vec3(1.0, 1.0, 1.0))
  )));
  float pRotation_9;
  pRotation_9 = (((0.05 * 
    ((tmpvar_8 * tmpvar_8) * (3.0 - (2.0 * tmpvar_8)))
  ) * clamp (
    (sqrt(dot (pos_1, pos_1)) / 3.5)
  , 0.0, 1.0)) * windAmplitude);
  float tmpvar_10;
  tmpvar_10 = cos(pRotation_9);
  float tmpvar_11;
  tmpvar_11 = sin(pRotation_9);
  mat2 tmpvar_12;
  tmpvar_12[uint(0)].x = tmpvar_10;
  tmpvar_12[uint(0)].y = -(tmpvar_11);
  tmpvar_12[1u].x = tmpvar_11;
  tmpvar_12[1u].y = tmpvar_10;
  pos_7.yz = (tmpvar_12 * pos_7.yz);
  pos_7 = (tmpvar_6 * pos_7);
  pos_1 = pos_7;
  testVec = pos_7;
  vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = pos_7;
  vec4 tmpvar_14;
  tmpvar_14 = (matrix_model * tmpvar_13);
  gl_Position = (matrix_viewProjection * tmpvar_14);
  vPositionW = tmpvar_14.xyz;
  vNormalW = normalize((matrix_normal * vertex_normal));
  vUv0 = vertex_texCoord0;
  vVertexColor = vertex_color;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec4 vVertexColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dAlbedo;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
vec3 dSpecularity;
float dGlossiness;
lowp float dAlpha;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform mat4 light0_shadowMatrix;
uniform vec4 light0_shadowParams;
uniform sampler2D light0_shadowMap;
uniform vec3 fog_color;
uniform float fog_density;
uniform sampler2D texture_diffuseMap;
uniform float isLeaves;
uniform sampler2D texture_opacityMap;
uniform vec3 material_emissive;
uniform vec3 material_specular;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
uniform float alpha_ref;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  dSpecularity = vec3(0.0, 0.0, 0.0);
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (texture_opacityMap, vUv0);
  dAlpha = tmpvar_1.w;
  if ((tmpvar_1.w < alpha_ref)) {
    discard;
  };
  vec3 tmpvar_2;
  tmpvar_2 = normalize((view_position - vPositionW));
  vec3 tmpvar_3;
  tmpvar_3 = normalize(vNormalW);
  vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (tmpvar_3, tmpvar_2) * tmpvar_3)
  ) - tmpvar_2));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  dAlbedo = rgba_5.xyz;
  if ((isLeaves > 0.5)) {
    dAlbedo = (rgba_5.xyz * vec3((vVertexColor.w * 2.0)));
  } else {
    dAlbedo = (dAlbedo * vec3(clamp ((
      (vVertexColor.w * vVertexColor.w)
     * 
      (vVertexColor.w * 5.0)
    ), 0.0, 1.0)));
  };
  dGlossiness = (material_shininess + 1e-07);
  float fresnel_7;
  float tmpvar_8;
  tmpvar_8 = (1.0 - max (dot (tmpvar_3, tmpvar_2), 0.0));
  float tmpvar_9;
  tmpvar_9 = (tmpvar_8 * tmpvar_8);
  fresnel_7 = (tmpvar_8 * (tmpvar_9 * tmpvar_9));
  fresnel_7 = (fresnel_7 * (dGlossiness * dGlossiness));
  dSpecularity = (material_specular + ((1.0 - material_specular) * fresnel_7));
  vec3 fixedReflDir_10;
  vec3 vec_11;
  vec_11 = tmpvar_3;
  float tmpvar_12;
  tmpvar_12 = max (max (abs(tmpvar_3.x), abs(tmpvar_3.y)), abs(tmpvar_3.z));
  float tmpvar_13;
  tmpvar_13 = abs(tmpvar_3.x);
  if ((tmpvar_13 != tmpvar_12)) {
    vec_11.x = (tmpvar_3.x * 0.75);
  };
  float tmpvar_14;
  tmpvar_14 = abs(tmpvar_3.y);
  if ((tmpvar_14 != tmpvar_12)) {
    vec_11.y = (tmpvar_3.y * 0.75);
  };
  float tmpvar_15;
  tmpvar_15 = abs(tmpvar_3.z);
  if ((tmpvar_15 != tmpvar_12)) {
    vec_11.z = (tmpvar_3.z * 0.75);
  };
  fixedReflDir_10.yz = vec_11.yz;
  fixedReflDir_10.x = -(vec_11.x);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (texture_prefilteredCubeMap4, fixedReflDir_10);
  lowp vec3 tmpvar_17;
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_16.w) * tmpvar_16.xyz);
  tmpvar_17 = (tmpvar_18 * tmpvar_18);
  dDiffuseLight = tmpvar_17;
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  vec3 fixedReflDir_23;
  highp int index2_24;
  highp int index1_25;
  float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  vec3 vec_27;
  vec_27 = tmpvar_4;
  float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_4.x * tmpvar_28);
  };
  float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_4.y * tmpvar_28);
  };
  float tmpvar_32;
  tmpvar_32 = abs(tmpvar_4.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_4.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = (tmpvar_34 * tmpvar_34);
  tmpvar_35.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  float falloff_37;
  float tmpvar_38;
  tmpvar_38 = dot (dLightDirW, dLightDirW);
  float tmpvar_39;
  tmpvar_39 = (1.0/(light0_radius));
  falloff_37 = ((1.0/((tmpvar_38 + 1.0))) * 16.0);
  float x_40;
  x_40 = (tmpvar_38 * (tmpvar_39 * tmpvar_39));
  float tmpvar_41;
  tmpvar_41 = clamp ((1.0 - (x_40 * x_40)), 0.0, 1.0);
  falloff_37 = (falloff_37 * (tmpvar_41 * tmpvar_41));
  dAtten = falloff_37;
  if ((falloff_37 > 1e-05)) {
    float tmpvar_42;
    tmpvar_42 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_37 * (tmpvar_42 * (tmpvar_42 * 
      (3.0 - (2.0 * tmpvar_42))
    )));
    dAtten = (dAtten * max (dot (tmpvar_3, 
      -(tmpvar_36)
    ), 0.0));
    vec4 projPos_43;
    vec4 tmpvar_44;
    tmpvar_44.w = 1.0;
    tmpvar_44.xyz = vPositionW;
    vec4 tmpvar_45;
    tmpvar_45 = (light0_shadowMatrix * tmpvar_44);
    projPos_43.zw = tmpvar_45.zw;
    projPos_43.xy = (tmpvar_45.xy / tmpvar_45.w);
    float Z_46;
    Z_46 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light0_shadowParams.w) + light0_shadowParams.z);
    lowp vec4 tmpvar_47;
    tmpvar_47 = texture (light0_shadowMap, projPos_43.xy);
    lowp vec3 tmpvar_48;
    tmpvar_48.z = 0.0;
    tmpvar_48.x = ((tmpvar_47.y * 0.003921569) + tmpvar_47.x);
    tmpvar_48.y = ((tmpvar_47.w * 0.003921569) + tmpvar_47.z);
    float tmpvar_49;
    tmpvar_49 = (light0_shadowParams.y * Z_46);
    lowp float tmpvar_50;
    tmpvar_50 = max ((tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x)), (tmpvar_49 * tmpvar_49));
    lowp float tmpvar_51;
    tmpvar_51 = (Z_46 - tmpvar_48.x);
    lowp float tmpvar_52;
    tmpvar_52 = clamp (((
      (tmpvar_50 / (tmpvar_50 + (tmpvar_51 * tmpvar_51)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_53;
    if ((Z_46 <= tmpvar_48.x)) {
      tmpvar_53 = 1.0;
    } else {
      tmpvar_53 = tmpvar_52;
    };
    dAtten = (dAtten * tmpvar_53);
    dDiffuseLight = (tmpvar_17 + (dAtten * light0_color));
    float tmpvar_54;
    tmpvar_54 = max (exp2((dGlossiness * 11.0)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_2)
      ), tmpvar_3), 0.0), tmpvar_54)
     * 
      (tmpvar_54 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  lowp vec3 tmpvar_55;
  tmpvar_55 = mix ((dAlbedo * dDiffuseLight), (dSpecularLight + (tmpvar_35.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_55;
  pc_fragColor.xyz = (pc_fragColor.xyz + (pow (
    clamp (vVertexColor.xyz, vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))
  , vec3(2.2, 2.2, 2.2)) * material_emissive));
  vec3 tmpvar_56;
  tmpvar_56 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_56, tmpvar_56))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = dAlpha;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_texCoord0,TEXCOORD0,vertex_texCoord1,TEXCOORD1,vertex_color,COLOR,^SH^-1308565862^VS^#version 300 es
out vec3 vPositionW;
out vec3 vNormalW;
out vec3 vTangentW;
out vec3 vBinormalW;
out vec2 vUv0;
layout(location=0) in vec3 vertex_position;
layout(location=1) in vec3 vertex_normal;
layout(location=2) in vec2 vertex_texCoord0;
layout(location=4) in vec4 vertex_tangent;
uniform mat4 matrix_viewProjection;
uniform mat4 matrix_model;
uniform mat3 matrix_normal;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.w = 1.0;
  tmpvar_1.xyz = vertex_position;
  vec4 tmpvar_2;
  tmpvar_2 = (matrix_model * tmpvar_1);
  gl_Position = (matrix_viewProjection * tmpvar_2);
  vPositionW = tmpvar_2.xyz;
  vec3 tmpvar_3;
  tmpvar_3 = normalize((matrix_normal * vertex_normal));
  vNormalW = tmpvar_3;
  vec3 tmpvar_4;
  tmpvar_4 = normalize((matrix_normal * vertex_tangent.xyz));
  vTangentW = tmpvar_4;
  vBinormalW = (((tmpvar_3.yzx * tmpvar_4.zxy) - (tmpvar_3.zxy * tmpvar_4.yzx)) * vertex_tangent.w);
  vUv0 = vertex_texCoord0;
}

^PS^#version 300 es
precision highp float;
out highp vec4 pc_fragColor;
in vec3 vPositionW;
in vec3 vNormalW;
in vec3 vTangentW;
in vec3 vBinormalW;
in vec2 vUv0;
uniform vec3 view_position;
lowp vec3 dNormalW;
lowp vec3 dDiffuseLight;
lowp vec3 dSpecularLight;
vec3 dLightDirW;
lowp vec3 dSpecularity;
lowp float dGlossiness;
lowp float dAtten;
uniform vec3 light0_color;
uniform vec3 light0_position;
uniform float light0_radius;
uniform vec3 light0_direction;
uniform float light0_innerConeAngle;
uniform float light0_outerConeAngle;
uniform vec3 light1_color;
uniform vec3 light1_position;
uniform float light1_radius;
uniform vec3 light1_direction;
uniform float light1_innerConeAngle;
uniform float light1_outerConeAngle;
uniform vec3 light2_color;
uniform vec3 light2_position;
uniform float light2_radius;
uniform vec3 light2_direction;
uniform float light2_innerConeAngle;
uniform float light2_outerConeAngle;
uniform vec3 light3_color;
uniform vec3 light3_position;
uniform float light3_radius;
uniform vec3 light3_direction;
uniform float light3_innerConeAngle;
uniform float light3_outerConeAngle;
uniform mat4 light3_shadowMatrix;
uniform vec4 light3_shadowParams;
uniform sampler2D light3_shadowMap;
uniform sampler2D texture_normalMap;
uniform float material_bumpiness;
uniform vec3 fog_color;
uniform float fog_density;
uniform float skyboxIntensity;
uniform sampler2D texture_diffuseMap;
uniform vec3 material_emissive;
uniform sampler2D texture_specularMap;
uniform sampler2D texture_glossMap;
uniform float material_shininess;
uniform lowp samplerCube texture_prefilteredCubeMap128;
uniform lowp samplerCube texture_prefilteredCubeMap64;
uniform lowp samplerCube texture_prefilteredCubeMap32;
uniform lowp samplerCube texture_prefilteredCubeMap16;
uniform lowp samplerCube texture_prefilteredCubeMap8;
uniform lowp samplerCube texture_prefilteredCubeMap4;
uniform float material_reflectivity;
void main ()
{
  dDiffuseLight = vec3(0.0, 0.0, 0.0);
  dSpecularLight = vec3(0.0, 0.0, 0.0);
  vec3 tmpvar_1;
  tmpvar_1 = normalize((view_position - vPositionW));
  mat3 tmpvar_2;
  tmpvar_2[uint(0)] = normalize(vTangentW);
  tmpvar_2[1u] = normalize(vBinormalW);
  tmpvar_2[2u] = normalize(vNormalW);
  lowp vec3 tmpvar_3;
  tmpvar_3 = ((texture (texture_normalMap, vUv0).xyz * 2.0) - 1.0);
  dNormalW = (tmpvar_2 * normalize(mix (vec3(0.0, 0.0, 1.0), tmpvar_3, material_bumpiness)));
  lowp vec3 tmpvar_4;
  tmpvar_4 = normalize(((2.0 * 
    (dot (dNormalW, tmpvar_1) * dNormalW)
  ) - tmpvar_1));
  lowp vec4 rgba_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (texture_diffuseMap, vUv0);
  rgba_5.w = tmpvar_6.w;
  rgba_5.xyz = pow (tmpvar_6.xyz, vec3(2.2, 2.2, 2.2));
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (texture_specularMap, vUv0);
  dGlossiness = ((material_shininess * texture (texture_glossMap, vUv0).y) + 1e-07);
  lowp float fresnel_8;
  lowp float tmpvar_9;
  tmpvar_9 = (1.0 - max (dot (dNormalW, tmpvar_1), 0.0));
  lowp float tmpvar_10;
  tmpvar_10 = (tmpvar_9 * tmpvar_9);
  fresnel_8 = (tmpvar_9 * (tmpvar_10 * tmpvar_10));
  fresnel_8 = (fresnel_8 * (dGlossiness * dGlossiness));
  dSpecularity = (tmpvar_7.xxx + ((1.0 - tmpvar_7.xxx) * fresnel_8));
  lowp vec3 fixedReflDir_11;
  lowp vec3 vec_12;
  vec_12 = dNormalW;
  lowp float tmpvar_13;
  tmpvar_13 = max (max (abs(dNormalW.x), abs(dNormalW.y)), abs(dNormalW.z));
  lowp float tmpvar_14;
  tmpvar_14 = abs(dNormalW.x);
  if ((tmpvar_14 != tmpvar_13)) {
    vec_12.x = (dNormalW.x * 0.75);
  };
  lowp float tmpvar_15;
  tmpvar_15 = abs(dNormalW.y);
  if ((tmpvar_15 != tmpvar_13)) {
    vec_12.y = (dNormalW.y * 0.75);
  };
  lowp float tmpvar_16;
  tmpvar_16 = abs(dNormalW.z);
  if ((tmpvar_16 != tmpvar_13)) {
    vec_12.z = (dNormalW.z * 0.75);
  };
  fixedReflDir_11.yz = vec_12.yz;
  fixedReflDir_11.x = -(vec_12.x);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (texture_prefilteredCubeMap4, fixedReflDir_11);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((8.0 * tmpvar_17.w) * tmpvar_17.xyz);
  dDiffuseLight = ((tmpvar_18 * tmpvar_18) * skyboxIntensity);
  lowp vec4 cube_0_20;
  lowp vec4 cube_1_21;
  lowp vec4 cubes_22[6];
  lowp vec3 fixedReflDir_23;
  lowp int index2_24;
  lowp int index1_25;
  lowp float tmpvar_26;
  tmpvar_26 = (clamp ((1.0 - dGlossiness), 0.0, 1.0) * 5.0);
  index1_25 = int(tmpvar_26);
  index2_24 = int(min ((tmpvar_26 + 1.0), 7.0));
  lowp vec3 vec_27;
  vec_27 = tmpvar_4;
  lowp float tmpvar_28;
  tmpvar_28 = (1.0 - (exp2(tmpvar_26) / 128.0));
  lowp float tmpvar_29;
  tmpvar_29 = max (max (abs(tmpvar_4.x), abs(tmpvar_4.y)), abs(tmpvar_4.z));
  lowp float tmpvar_30;
  tmpvar_30 = abs(tmpvar_4.x);
  if ((tmpvar_30 != tmpvar_29)) {
    vec_27.x = (tmpvar_4.x * tmpvar_28);
  };
  lowp float tmpvar_31;
  tmpvar_31 = abs(tmpvar_4.y);
  if ((tmpvar_31 != tmpvar_29)) {
    vec_27.y = (tmpvar_4.y * tmpvar_28);
  };
  lowp float tmpvar_32;
  tmpvar_32 = abs(tmpvar_4.z);
  if ((tmpvar_32 != tmpvar_29)) {
    vec_27.z = (tmpvar_4.z * tmpvar_28);
  };
  fixedReflDir_23.yz = vec_27.yz;
  fixedReflDir_23.x = -(vec_27.x);
  cubes_22[0] = texture (texture_prefilteredCubeMap128, fixedReflDir_23);
  cubes_22[1] = texture (texture_prefilteredCubeMap64, fixedReflDir_23);
  cubes_22[2] = texture (texture_prefilteredCubeMap32, fixedReflDir_23);
  cubes_22[3] = texture (texture_prefilteredCubeMap16, fixedReflDir_23);
  cubes_22[4] = texture (texture_prefilteredCubeMap8, fixedReflDir_23);
  cubes_22[5] = texture (texture_prefilteredCubeMap4, fixedReflDir_23);
  for (highp int i_19 = 0; i_19 < 6; i_19++) {
    if ((i_19 == index1_25)) {
      cube_0_20 = cubes_22[i_19];
    };
    if ((i_19 == index2_24)) {
      cube_1_21 = cubes_22[i_19];
    };
  };
  lowp vec4 tmpvar_33;
  tmpvar_33 = mix (cube_0_20, cube_1_21, fract(tmpvar_26));
  lowp vec3 tmpvar_34;
  tmpvar_34 = ((8.0 * tmpvar_33.w) * tmpvar_33.xyz);
  lowp vec4 tmpvar_35;
  tmpvar_35.xyz = ((tmpvar_34 * tmpvar_34) * skyboxIntensity);
  tmpvar_35.w = material_reflectivity;
  dLightDirW = (vPositionW - light0_position);
  vec3 tmpvar_36;
  tmpvar_36 = normalize(dLightDirW);
  lowp float tmpvar_37;
  tmpvar_37 = max (((light0_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light0_radius), 0.0);
  dAtten = tmpvar_37;
  if ((tmpvar_37 > 1e-05)) {
    float tmpvar_38;
    tmpvar_38 = clamp (((
      dot (tmpvar_36, light0_direction)
     - light0_outerConeAngle) / (light0_innerConeAngle - light0_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_37 * (tmpvar_38 * (tmpvar_38 * 
      (3.0 - (2.0 * tmpvar_38))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_36)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light0_color));
    lowp float tmpvar_39;
    tmpvar_39 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_40;
    tmpvar_40 = max ((tmpvar_39 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_39 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_36) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_40)
     * 
      (tmpvar_40 + 2.0)
    ) / 8.0));
    dSpecularLight = (dAtten * light0_color);
  };
  dLightDirW = (vPositionW - light1_position);
  vec3 tmpvar_41;
  tmpvar_41 = normalize(dLightDirW);
  lowp float tmpvar_42;
  tmpvar_42 = max (((light1_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light1_radius), 0.0);
  dAtten = tmpvar_42;
  if ((tmpvar_42 > 1e-05)) {
    float tmpvar_43;
    tmpvar_43 = clamp (((
      dot (tmpvar_41, light1_direction)
     - light1_outerConeAngle) / (light1_innerConeAngle - light1_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_42 * (tmpvar_43 * (tmpvar_43 * 
      (3.0 - (2.0 * tmpvar_43))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_41)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light1_color));
    lowp float tmpvar_44;
    tmpvar_44 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_45;
    tmpvar_45 = max ((tmpvar_44 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_44 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_41) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_45)
     * 
      (tmpvar_45 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light1_color));
  };
  dLightDirW = (vPositionW - light2_position);
  vec3 tmpvar_46;
  tmpvar_46 = normalize(dLightDirW);
  float falloff_47;
  float tmpvar_48;
  tmpvar_48 = dot (dLightDirW, dLightDirW);
  float tmpvar_49;
  tmpvar_49 = (1.0/(light2_radius));
  falloff_47 = ((1.0/((tmpvar_48 + 1.0))) * 16.0);
  float x_50;
  x_50 = (tmpvar_48 * (tmpvar_49 * tmpvar_49));
  float tmpvar_51;
  tmpvar_51 = clamp ((1.0 - (x_50 * x_50)), 0.0, 1.0);
  falloff_47 = (falloff_47 * (tmpvar_51 * tmpvar_51));
  dAtten = falloff_47;
  if ((falloff_47 > 1e-05)) {
    float tmpvar_52;
    tmpvar_52 = clamp (((
      dot (tmpvar_46, light2_direction)
     - light2_outerConeAngle) / (light2_innerConeAngle - light2_outerConeAngle)), 0.0, 1.0);
    dAtten = (falloff_47 * (tmpvar_52 * (tmpvar_52 * 
      (3.0 - (2.0 * tmpvar_52))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_46)
    ), 0.0));
    dDiffuseLight = (dDiffuseLight + (dAtten * light2_color));
    lowp float tmpvar_53;
    tmpvar_53 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_54;
    tmpvar_54 = max ((tmpvar_53 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_53 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_46) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_54)
     * 
      (tmpvar_54 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light2_color));
  };
  dLightDirW = (vPositionW - light3_position);
  vec3 tmpvar_55;
  tmpvar_55 = normalize(dLightDirW);
  lowp float tmpvar_56;
  tmpvar_56 = max (((light3_radius - 
    sqrt(dot (dLightDirW, dLightDirW))
  ) / light3_radius), 0.0);
  dAtten = tmpvar_56;
  if ((tmpvar_56 > 1e-05)) {
    float tmpvar_57;
    tmpvar_57 = clamp (((
      dot (tmpvar_55, light3_direction)
     - light3_outerConeAngle) / (light3_innerConeAngle - light3_outerConeAngle)), 0.0, 1.0);
    dAtten = (tmpvar_56 * (tmpvar_57 * (tmpvar_57 * 
      (3.0 - (2.0 * tmpvar_57))
    )));
    dAtten = (dAtten * max (dot (dNormalW, 
      -(tmpvar_55)
    ), 0.0));
    vec4 projPos_58;
    vec4 tmpvar_59;
    tmpvar_59.w = 1.0;
    tmpvar_59.xyz = vPositionW;
    vec4 tmpvar_60;
    tmpvar_60 = (light3_shadowMatrix * tmpvar_59);
    projPos_58.zw = tmpvar_60.zw;
    projPos_58.xy = (tmpvar_60.xy / tmpvar_60.w);
    float Z_61;
    Z_61 = ((sqrt(
      dot (dLightDirW, dLightDirW)
    ) * light3_shadowParams.w) + light3_shadowParams.z);
    lowp vec4 tmpvar_62;
    tmpvar_62 = texture (light3_shadowMap, projPos_58.xy);
    lowp vec3 tmpvar_63;
    tmpvar_63.z = 0.0;
    tmpvar_63.x = ((tmpvar_62.y * 0.003921569) + tmpvar_62.x);
    tmpvar_63.y = ((tmpvar_62.w * 0.003921569) + tmpvar_62.z);
    float tmpvar_64;
    tmpvar_64 = (light3_shadowParams.y * Z_61);
    lowp float tmpvar_65;
    tmpvar_65 = max ((tmpvar_63.y - (tmpvar_63.x * tmpvar_63.x)), (tmpvar_64 * tmpvar_64));
    lowp float tmpvar_66;
    tmpvar_66 = (Z_61 - tmpvar_63.x);
    lowp float tmpvar_67;
    tmpvar_67 = clamp (((
      (tmpvar_65 / (tmpvar_65 + (tmpvar_66 * tmpvar_66)))
     - 0.1) / 0.9), 0.0, 1.0);
    lowp float tmpvar_68;
    if ((Z_61 <= tmpvar_63.x)) {
      tmpvar_68 = 1.0;
    } else {
      tmpvar_68 = tmpvar_67;
    };
    dAtten = (dAtten * tmpvar_68);
    dDiffuseLight = (dDiffuseLight + (dAtten * light3_color));
    lowp float tmpvar_69;
    tmpvar_69 = exp2((dGlossiness * 11.0));
    lowp float tmpvar_70;
    tmpvar_70 = max ((tmpvar_69 * mix (1.0, 
      (1.0/((1.0 + (tmpvar_69 * (
        (1.0/(clamp (sqrt(dot (tmpvar_3, tmpvar_3)), 0.0, 1.0)))
       - 1.0)))))
    , material_bumpiness)), 0.0001);
    dAtten = (dAtten * ((
      pow (max (dot (normalize(
        (-(tmpvar_55) + tmpvar_1)
      ), dNormalW), 0.0), tmpvar_70)
     * 
      (tmpvar_70 + 2.0)
    ) / 8.0));
    dSpecularLight = (dSpecularLight + (dAtten * light3_color));
  };
  lowp vec3 tmpvar_71;
  tmpvar_71 = mix ((rgba_5.xyz * dDiffuseLight), (dSpecularLight + (tmpvar_35.xyz * material_reflectivity)), dSpecularity);
  pc_fragColor.xyz = tmpvar_71;
  pc_fragColor.xyz = (pc_fragColor.xyz + material_emissive);
  vec3 tmpvar_72;
  tmpvar_72 = (vPositionW - view_position);
  pc_fragColor.xyz = mix (fog_color, pc_fragColor.xyz, clamp (exp(
    (-(sqrt(dot (tmpvar_72, tmpvar_72))) * fog_density)
  ), 0.0, 1.0));
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.xyz = pc_fragColor.xyz;
  pc_fragColor.w = 1.0;
}

^AT^vertex_position,POSITION,vertex_normal,NORMAL,vertex_tangent,TANGENT,vertex_texCoord0,TEXCOORD0,