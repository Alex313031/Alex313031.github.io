"use strict";(self.webpackChunkdocs_beakerbrowser_com=self.webpackChunkdocs_beakerbrowser_com||[]).push([[841],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return k}});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=l(t),m=s,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return t?r.createElement(k,o(o({ref:n},p),{},{components:t})):r.createElement(k,o({ref:n},p))}));function k(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[d]="string"==typeof e?e:s,o[1]=i;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7914:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return k},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return d}});var r=t(7462),s=t(3366),a=(t(7294),t(3905)),o=["components"],i={title:"beaker.peersockets",description:"This API sends and receives messages over Hyperdrive connections"},c=void 0,l={unversionedId:"apis/beaker.peersockets",id:"apis/beaker.peersockets",title:"beaker.peersockets",description:"This API sends and receives messages over Hyperdrive connections",source:"@site/docs/apis/beaker.peersockets.md",sourceDirName:"apis",slug:"/apis/beaker.peersockets",permalink:"/docs.beakerbrowser.com/apis/beaker.peersockets",draft:!1,editUrl:"https://github.com/Alex313031/docs.beakerbrowser.com/edit/master/docs/apis/beaker.peersockets.md",tags:[],version:"current",frontMatter:{title:"beaker.peersockets",description:"This API sends and receives messages over Hyperdrive connections"},sidebar:"docs",previous:{title:"beaker.panes",permalink:"/docs.beakerbrowser.com/apis/beaker.panes"},next:{title:"beaker.shell",permalink:"/docs.beakerbrowser.com/apis/beaker.shell"}},p={},d=[{value:"Technical background",id:"technical-background",level:3},{value:"Example usage",id:"example-usage",level:3},{value:"API",id:"api",level:2},{value:"beaker.peersockets.join(topic)",id:"beakerpeersocketsjointopic",level:3},{value:"beaker.peersockets.watch()",id:"beakerpeersocketswatch",level:3},{value:"<code>Topic</code> Instance",id:"topic-instance",level:2},{value:"&quot;message&quot; event",id:"message-event",level:3},{value:"topic.send(peerId, message)",id:"topicsendpeerid-message",level:3},{value:"topic.close()",id:"topicclose",level:3},{value:"<code>PeerEvents</code> Instance",id:"peerevents-instance",level:2},{value:"&quot;join&quot; event",id:"join-event",level:3},{value:"&quot;leave&quot; event",id:"leave-event",level:3},{value:"peerEvents.close()",id:"peereventsclose",level:3}],u={toc:d},m="wrapper";function k(e){var n=e.components,t=(0,s.Z)(e,o);return(0,a.kt)(m,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Peersockets enable you to send and receive messages to peers on a hyperdrive."),(0,a.kt)("h3",{id:"technical-background"},"Technical background"),(0,a.kt)("p",null,"Hyperdrive establishes connections between users to send drive-data. Peersockets piggybacks on those connections by creating additional message-channels."),(0,a.kt)("p",null,'The peersocket channel is separated into "topics" which are string IDs. You choose to handle messages in a topic by "joining" the topic. If you don\'t join a topic, your device will still receive the messages, but they\'ll be discarded.'),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Note: topics are specific to a hyperdrive. You can only send messages to peers connected to the same hyperdrive.")),(0,a.kt)("p",null,'Every peer has a "peer id" assigned. You send messages to specific peers by using their assigned peer id. You can get the current peers by calling ',(0,a.kt)("inlineCode",{parentName:"p"},"watch()"),' and handling the "join" and "leave" events.'),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Peer IDs are created for the network session and will not persist.")),(0,a.kt)("h3",{id:"example-usage"},"Example usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"// maintain a list of active peers\nvar peerIds = new Set()\nvar peerEvents = beaker.peersockets.watch()\npeerEvents.addEventListener('join', e => {\n  peerIds.add(e.peerId)\n})\npeerEvents.addEventListener('leave', e => {\n  peerIds.delete(e.peerId)\n})\n\n// send and receive 'chat' messages\nvar topic = beaker.peersockets.join('chat')\nfunction sendToAll (message) {\n  message = new TextEncoder('utf-8').encode(message)\n  for (let peerId of peerIds) {\n    topic.send(peerId, message)\n  }\n}\ntopic.addEventListener('message', e => {\n  console.log('peer', e.peerId, 'says', new TextDecoder().decode(e.message))\n})\n")),(0,a.kt)("h2",{id:"api"},"API"),(0,a.kt)("h3",{id:"beakerpeersocketsjointopic"},"beaker.peersockets.join(topic)"),(0,a.kt)("p",null,'Join a "topic" for sending and receiving messages.'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"topic")," String. The topic identifier."),(0,a.kt)("li",{parentName:"ul"},"Returns ",(0,a.kt)("strong",{parentName:"li"},"Topic"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var topic = beaker.peersockets.join('chat')\nfunction sendToAll (message) {\n  message = new TextEncoder('utf-8').encode(message)\n  for (let peerId of peerIds) { // assume `peerIds` is being tracked using watch()\n    topic.send(peerId, message)\n  }\n})\ntopic.addEventListener('message', e => {\n  console.log('peer', e.peerId, 'says', new TextDecoder().decode(e.message))\n})\n")),(0,a.kt)("h3",{id:"beakerpeersocketswatch"},"beaker.peersockets.watch()"),(0,a.kt)("p",null,'Watch for connection events. Emits "join" events for all connections that exist at time-of-call.'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Returns ",(0,a.kt)("strong",{parentName:"li"},"PeerEvents"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"var peerIds = new Set()\nvar peerEvents = beaker.peersockets.watch()\npeerEvents.addEventListener('join', e => {\n  console.log('join', e)\n  peerIds.add(e.peerId)\n})\npeerEvents.addEventListener('leave', e => {\n  console.log('leave', e)\n  peerIds.delete(e.peerId)\n})\n")),(0,a.kt)("h2",{id:"topic-instance"},(0,a.kt)("inlineCode",{parentName:"h2"},"Topic")," Instance"),(0,a.kt)("h3",{id:"message-event"},'"message" event'),(0,a.kt)("p",null,"Emitted when a peer sends you a message on the topic."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"peerId")," Number. The sending peer's identifier."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"message")," Uint8Array. The message content.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"topic.addEventListener('message', e => {\n  console.log('peer', e.peerId, 'says', new TextDecoder().decode(e.message))\n})\n")),(0,a.kt)("h3",{id:"topicsendpeerid-message"},"topic.send(peerId, message)"),(0,a.kt)("p",null,"Sends a message to the specified peer."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"peerId")," Number. The target peer's identifier."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"message")," Uint8Array. The message content."),(0,a.kt)("li",{parentName:"ul"},"Returns ",(0,a.kt)("strong",{parentName:"li"},"Void"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"topic.send(1, new TextEncoder('utf-8').encode('Hello!'))\n")),(0,a.kt)("h3",{id:"topicclose"},"topic.close()"),(0,a.kt)("p",null,"Closes the topic instance. This will not close the topic globally; other topic instances (e.g. in other tabs) remain active."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Returns ",(0,a.kt)("strong",{parentName:"li"},"Void"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"topic.close()\n")),(0,a.kt)("h2",{id:"peerevents-instance"},(0,a.kt)("inlineCode",{parentName:"h2"},"PeerEvents")," Instance"),(0,a.kt)("h3",{id:"join-event"},'"join" event'),(0,a.kt)("p",null,"Emitted when a new peer connects. When ",(0,a.kt)("inlineCode",{parentName:"p"},"watch()")," is called, any existing connections will be emitted as join events."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"peerId")," Number. The connecting peer's identifier.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"peerEvents.addEventListener('join', e => {\n  console.log('new connection:', e.peerId)\n})\n")),(0,a.kt)("h3",{id:"leave-event"},'"leave" event'),(0,a.kt)("p",null,"Emitted when a peer disconnects."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"peerId")," Number. The disconnecting peer's identifier.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"peerEvents.addEventListener('leave', e => {\n  console.log('connection closed:', e.peerId)\n})\n")),(0,a.kt)("h3",{id:"peereventsclose"},"peerEvents.close()"),(0,a.kt)("p",null,"Stops listening for messages on the PeerEvents instance. Does not stop connections from being created."))}k.isMDXComponent=!0}}]);