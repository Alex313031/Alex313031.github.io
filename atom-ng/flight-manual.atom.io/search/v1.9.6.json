{
  "entries": [
    
      
        
        {
          "title": "Upgrading Your Syntax Theme",
          "category": "",
          "category_url": "",
          "url": "/upgrading-to-1-0-apis/sections/upgrading-your-syntax-theme/",
          "body": " Note: The Shadow DOM was removed in Atom 1.13. The :host selector described below won't work and should not be used anymore.   Upgrading Your Syntax Theme Text editor content is now rendered in the shadow DOM, which shields it from being styled by global style sheets to protect against accidental style pollution. For more background on the shadow DOM, check out the Shadow DOM 101 on HTML 5 Rocks. Syntax themes are specifically intended to style only text editor content, so they are automatically loaded directly into the text editor's shadow DOM when it is enabled. This happens automatically when the theme's package.json contains a theme: \"syntax\" declaration, so you don't need to change anything to target the appropriate context. When theme style sheets are loaded into the text editor's shadow DOM, selectors intended to target the editor from the outside no longer make sense. Styles targeting the .editor and .editor-colors classes instead need to target the :host pseudo-element, which matches against the containing atom-text-editor node. Check out the Shadow DOM 201 article for more information about the :host pseudo-element. Here's an example from Atom's light syntax theme. Note that the atom-text-editor selector intended to target the editor from the outside has been retained to allow the theme to keep working during the transition phase when it is possible to disable the shadow DOM. atom-text-editor, :host { /* :host added */ background-color: @syntax-background-color; color: @syntax-text-color; .invisible-character { color: @syntax-invisible-character-color; } /* more nested selectors... */ } ",
          "excerpt": " Note: The Shadow DOM was removed in Atom 1.13. The :host selector described below won't work and should not be used anymore.   Upgrading You…"
        },
      
    
      
        
        {
          "title": "Upgrading Your UI Theme Or Package Selectors",
          "category": "",
          "category_url": "",
          "url": "/upgrading-to-1-0-apis/sections/upgrading-your-ui-theme-or-package-selectors/",
          "body": " Note: The Shadow DOM was removed in Atom 1.13. The ::shadow and /deep/ selectors and the context-targeted style sheets described below won't work and should not be used anymore.   Upgrading Your UI Theme Or Package Selectors In addition to changes in Atom's scripting API, we'll also be making some breaking changes to Atom's DOM structure, requiring style sheets and keymaps in both packages and themes to be updated.  Deprecation Cop Deprecation Cop will list usages of deprecated selector patterns to guide you. You can access it via the Command Palette (cmd-shift-p, then search for Deprecation). It breaks the deprecations down by package:   Custom Tags Rather than adding classes to standard HTML elements to indicate their role, Atom now uses custom element names. For example, &lt;div class=\"workspace\"&gt; has now been replaced with &lt;atom-workspace&gt;. Selectors should be updated accordingly. Note that tag names have lower specificity than classes in CSS, so you'll need to take care in converting things.    Old Selector New Selector     .editor atom-text-editor   .editor.mini atom-text-editor[mini]   .workspace atom-workspace   .horizontal atom-workspace-axis.horizontal   .vertical atom-workspace-axis.vertical   .pane-container atom-pane-container   .pane atom-pane   .tool-panel atom-panel   .panel-top atom-panel.top   .panel-bottom atom-panel.bottom   .panel-left atom-panel.left   .panel-right atom-panel.right   .overlay atom-panel.modal     Supporting the Shadow DOM Text editor content is now rendered in the shadow DOM, which shields it from being styled by global style sheets to protect against accidental style pollution. For more background on the shadow DOM, check out the Shadow DOM 101 on HTML 5 Rocks. If you need to style text editor content in a UI theme, you'll need to circumvent this protection for any rules that target the text editor's content. Some examples of the kinds of UI theme styles needing to be updated:  Highlight decorations Gutter decorations Line decorations Scrollbar styling Anything targeting a child selector of .editor   During a transition phase, it will be possible to enable or disable the text editor's shadow DOM in the settings, so themes will need to be compatible with both approaches.  Shadow DOM Selectors Chromium provides two tools for bypassing shadow boundaries, the ::shadow pseudo-element and the /deep/ combinator. For an in-depth explanation of styling the shadow DOM, see the Shadow DOM 201 article on HTML 5 Rocks.  ::shadow  The ::shadow pseudo-element allows you to bypass a single shadow root. For example, say you want to update a highlight decoration for a linter package. Initially, the style looks as follows: // Without shadow DOM support atom-text-editor .highlight.my-linter { background: hotpink; }  In order for this style to apply with the shadow DOM enabled, you will need to add a second selector with the ::shadow pseudo-element. You should leave the original selector in place so your theme continues to work with the shadow DOM disabled during the transition period. // With shadow DOM support atom-text-editor .highlight.my-linter, atom-text-editor::shadow .highlight.my-linter { background: hotpink; }  Check out the find-and-replace package for another example of using ::shadow to pierce the shadow DOM.  /deep/  The /deep/ combinator overrides all shadow boundaries, making it useful for rules you want to apply globally such as scrollbar styling. Here's a snippet containing scrollbar styling for the Atom Dark UI theme before shadow DOM support: // Without shadow DOM support .scrollbars-visible-always { ::-webkit-scrollbar { width: 8px; height: 8px; } ::-webkit-scrollbar-track, ::-webkit-scrollbar-corner { background: @scrollbar-background-color; } ::-webkit-scrollbar-thumb { background: @scrollbar-color; border-radius: 5px; box-shadow: 0 0 1px black inset; } }  To style scrollbars even inside of the shadow DOM, each rule needs to be prefixed with /deep/. We use /deep/ instead of ::shadow because we don't care about the selector of the host element in this case. We just want our styling to apply everywhere. // With shadow DOM support using /deep/ .scrollbars-visible-always { /deep/ ::-webkit-scrollbar { width: 8px; height: 8px; } /deep/ ::-webkit-scrollbar-track, /deep/ ::-webkit-scrollbar-corner { background: @scrollbar-background-color; } /deep/ ::-webkit-scrollbar-thumb { background: @scrollbar-color; border-radius: 5px; box-shadow: 0 0 1px black inset; } }   Context-Targeted Style Sheets The selector features discussed above allow you to target shadow DOM content with specific selectors, but Atom also allows you to target a specific shadow DOM context with an entire style sheet. The context into which a style sheet is loaded is based on the file name. If you want to load a style sheet into the editor, name it with the .atom-text-editor.less or .atom-text-editor.css extensions. my-ui-theme/ styles/ index.less # loaded globally index.atom-text-editor.less # loaded in the text editor shadow DOM  Check out this style sheet from the decoration-example package for an example of context-targeting. Inside a context-targeted style sheet, there's no need to use the ::shadow or /deep/ expressions. If you want to refer to the element containing the shadow root, you can use the ::host pseudo-element. During the transition phase, style sheets targeting the atom-text-editor context will also be loaded globally. Make sure you update your selectors in a way that maintains compatibility with the shadow DOM being disabled. That means if you use a ::host pseudo element, you should also include the same style rule matches against atom-text-editor.",
          "excerpt": " Note: The Shadow DOM was removed in Atom 1.13. The ::shadow and /deep/ selectors and the context-targeted style sheets described below won't…"
        },
      
    
      
        
        {
          "title": "Upgrading Your Package",
          "category": "",
          "category_url": "",
          "url": "/upgrading-to-1-0-apis/sections/upgrading-your-package/",
          "body": " Upgrading Your Package This document will guide you through the large bits of upgrading your package to work with 1.0 APIs.  TL;DR We've set deprecation messages and errors in strategic places to help make sure you don't miss anything. You should be able to get 95% of the way to an updated package just by fixing errors and deprecations. There are a couple of things you can do to get the full effect of all the errors and deprecations.  Use atom-space-pen-views If you use any class from require 'atom' with a $ or View in the name, add the atom-space-pen-views module to your package's package.json file's dependencies: { \"dependencies\": { \"atom-space-pen-views\": \"^2.0.3\" } }  Then run apm install in your package directory.  Require views from atom-space-pen-views Anywhere you are requiring one of the following from atom you need to require them from atom-space-pen-views instead. # require these from 'atom-space-pen-views' rather than 'atom' $ $$ $$$ View TextEditorView ScrollView SelectListView  So this: # Old way {$, TextEditorView, View, GitRepository} = require 'atom'  Would be replaced by this: # New way {GitRepository} = require 'atom' {$, TextEditorView, View} = require 'atom-space-pen-views'   Run specs and test your package You wrote specs, right!? Here's where they shine. Run them with cmd-shift-P, and search for run package specs. It will show all the deprecation messages and errors.  Update the engines field When you are deprecation free and all done converting, upgrade the engines field in your package.json: { \"engines\": { \"atom\": \"&gt;=0.174.0 &lt;2.0.0\" } }   Examples We have upgraded all the core packages. Please see this issue for a link to all the upgrade PRs.  Deprecations All of the methods in Atom core that have changes will emit deprecation messages when called. These messages are shown in two places: your package specs, and in Deprecation Cop.  Specs Just run your specs, and all the deprecations will be displayed in yellow.   Note: Deprecations are only displayed when executing specs through the \"Window: Run Package Specs\" command in the Atom UI. Deprecations are not displayed when running specs at the terminal.   Deprecation Cop Run Atom in Dev Mode, atom --dev, with your package loaded, and open Deprecation Cop (search for \"deprecation\" in the command palette). Deprecated methods will appear in Deprecation Cop only after they have been called.  When Deprecation Cop is open, and deprecated methods are called, a Refresh button will appear in the top right of the Deprecation Cop interface. So exercise your package, then come back to Deprecation Cop and click the Refresh button.  Upgrading your Views Previous to 1.0, views were baked into Atom core. These views were based on jQuery and space-pen. They looked something like this: # The old way: getting views from atom {$, TextEditorView, View} = require 'atom' module.exports = class SomeView extends View @content: -&gt; @div class: 'find-and-replace', =&gt; @div class: 'block', =&gt; @subview 'myEditor', new TextEditorView(mini: true) #...   The New require 'atom' no longer provides view helpers or jQuery. Atom Core is now 'view agnostic'. The preexisting view system is available from a new Node module: atom-space-pen-views. atom-space-pen-views now provides jQuery, space-pen views, and Atom specific views: # These are now provided by atom-space-pen-views $ $$ $$$ View TextEditorView ScrollView SelectListView   Adding the module dependencies To use the new views, you need to specify the atom-space-pen-views module in your package's package.json file's dependencies: { \"dependencies\": { \"atom-space-pen-views\": \"^2.0.3\" } }  space-pen bundles jQuery. If you do not need space-pen or any of the views, you can require jQuery directly. { \"dependencies\": { \"jquery\": \"^2\" } }   Converting your views Sometimes it is as simple as converting the requires at the top of each view page. I assume you read the 'TL;DR' section and have updated all of your requires.  Upgrading classes extending any space-pen View  afterAttach and beforeRemove updated The afterAttach and beforeRemove hooks have been replaced with attached and detached and the semantics have changed. afterAttach was called whenever the node was attached to another DOM node, even if that parent node wasn't present in the DOM. afterAttach also was called with a boolean indicating whether or not the element and its parents were on the DOM. Now the attached hook is only called when the node and all of its parents are actually on the DOM, and is not called with a boolean. beforeRemove was only called when $.fn.remove was called, which was typically used when the node was completely removed from the DOM. The new detached hook is called whenever the DOM node is detached, which could happen if the node is being detached for reattachment later. In short, if beforeRemove is called the node is never coming back. With detached it might be attached again later. # Old way {View} = require 'atom' class MyView extends View afterAttach: (onDom) -&gt; #... beforeRemove: -&gt; #...  # New way {View} = require 'atom-space-pen-views' class MyView extends View attached: -&gt; # Always called with the equivalent of @afterAttach(true)! #... detached: -&gt; #...   subscribe and subscribeToCommand methods removed The subscribe and subscribeToCommand methods have been removed. See the Eventing and Disposables section for more info.  Upgrading to the new TextEditorView All of the atom-specific methods available on the TextEditorView have been moved to the TextEditor, available via TextEditorView::getModel. See the TextEditorView docs and TextEditor docs for more info.  Upgrading classes extending ScrollView The ScrollView has very minor changes. You can no longer use @off to remove default behavior for core:move-up, core:move-down, etc. # Old way to turn off default behavior class ResultsView extends ScrollView initialize: (@model) -&gt; super() # turn off default scrolling behavior from ScrollView @off 'core:move-up' @off 'core:move-down' @off 'core:move-left' @off 'core:move-right'  # New way to turn off default behavior class ResultsView extends ScrollView initialize: (@model) -&gt; disposable = super() # turn off default scrolling behavior from ScrollView disposable.dispose()   Check out an example from find-and-replace. See the docs for all the options.   Upgrading classes extending SelectListView Your SelectListView might look something like this: # Old! class CommandPaletteView extends SelectListView initialize: -&gt; super() @addClass('command-palette overlay from-top') atom.workspaceView.command 'command-palette:toggle', =&gt; @toggle() confirmed: ({name, jQuery}) -&gt; @cancel() # do something with the result toggle: -&gt; if @hasParent() @cancel() else @attach() attach: -&gt; @storeFocusedElement() items = [] # TODO: build items @setItems(items) atom.workspaceView.append(this) @focusFilterEditor() confirmed: ({name, jQuery}) -&gt; @cancel()  This attaches and detaches itself from the DOM when toggled, canceling magically detaches it from the DOM, and it uses the classes overlay and from-top. The new SelectListView no longer automatically detaches itself from the DOM when cancelled. It's up to you to implement whatever cancel behavior you want. Using the new APIs to mimic the semantics of the old class, it should look like this: # New! class CommandPaletteView extends SelectListView initialize: -&gt; super() # no more need for the `overlay` and `from-top` classes @addClass('command-palette') atom.commands.add 'atom-workspace', 'command-palette:toggle', =&gt; @toggle() # You need to implement the `cancelled` method and hide. cancelled: -&gt; @hide() confirmed: ({name, jQuery}) -&gt; @cancel() # do something with the result toggle: -&gt; # Toggling now checks panel visibility, # and hides / shows rather than attaching to / detaching from the DOM. if @panel?.isVisible() @cancel() else @show() show: -&gt; # Now you will add your select list as a modal panel to the workspace @panel ?= atom.workspace.addModalPanel(item: this) @panel.show() @storeFocusedElement() items = [] # TODO: build items @setItems(items) @focusFilterEditor() hide: -&gt; @panel?.hide()   And check out the conversion of CommandPaletteView as a real-world example. See the SelectListView docs for all options.   Using the model layer rather than the view layer The API no longer exposes any specialized view objects or view classes. atom.workspaceView, and all the view classes: WorkspaceView, EditorView, PaneView, etc. have been globally deprecated. Nearly all of the atom-specific actions performed by the old view objects can now be managed via the model layer. For example, here's adding a panel to the interface using the atom.workspace model instead of the workspaceView: # Old! div = document.createElement('div') atom.workspaceView.appendToTop(div)  # New! div = document.createElement('div') atom.workspace.addTopPanel(item: div)  For actions that still require the view, such as dispatching commands or munging css classes, you'll access the view via the atom.views.getView() method. This will return a subclass of HTMLElement rather than a jQuery object or an instance of a deprecated view class (e.g. WorkspaceView). # Old! workspaceView = atom.workspaceView editorView = workspaceView.getActiveEditorView() paneView = editorView.getPaneView()  # New! # Generally, just use the models workspace = atom.workspace editor = workspace.getActiveTextEditor() pane = editor.getPane() # If you need views, get them with `getView` workspaceElement = atom.views.getView(atom.workspace) editorElement = atom.views.getView(editor) paneElement = atom.views.getView(pane)   Updating Specs atom.workspaceView, the WorkspaceView class and the EditorView class have been deprecated. These two objects are used heavily throughout specs, mostly to dispatch events and commands. This section will explain how to remove them while still retaining the ability to dispatch events and commands.  Removing WorkspaceView references WorkspaceView has been deprecated. Everything you could do on the view, you can now do on the Workspace model. Requiring WorkspaceView from atom and accessing any methods on it will throw a deprecation warning. Many specs lean heavily on WorkspaceView to trigger commands and fetch EditorView objects. Your specs might contain something like this: # Old! {WorkspaceView} = require 'atom' describe 'FindView', -&gt; beforeEach -&gt; atom.workspaceView = new WorkspaceView()  Instead, we will use the atom.views.getView() method. This will return a plain HTMLElement, not a WorkspaceView or jQuery object. # New! describe 'FindView', -&gt; workspaceElement = null beforeEach -&gt; workspaceElement = atom.views.getView(atom.workspace)   Attaching the workspace to the DOM The workspace needs to be attached to the DOM in some cases. For example, view hooks only work (attached() on View, attachedCallback() on custom elements) when there is a descendant attached to the DOM. You might see this in your specs: # Old! atom.workspaceView.attachToDom()  Change it to: # New! jasmine.attachToDOM(workspaceElement)   Removing EditorView references Like WorkspaceView, EditorView has been deprecated. Everything you needed to do on the view you are now able to do on the TextEditor model. In many cases, you will not even need to get the editor's view anymore. Any of those instances should be updated to use the TextEditor instance instead. You should really only need the editor's view when you plan on triggering a command on the view in a spec. Your specs might contain something like this: # Old! describe 'Something', -&gt; [editorView] = [] beforeEach -&gt; editorView = atom.workspaceView.getActiveView()  We're going to use atom.views.getView() again to get the editor element. As in the case of the workspaceElement, getView will return a subclass of HTMLElement rather than an EditorView or jQuery object. # New! describe 'Something', -&gt; [editor, editorElement] = [] beforeEach -&gt; editor = atom.workspace.getActiveTextEditor() editorElement = atom.views.getView(editor)   Dispatching commands Since the editorElement objects are no longer jQuery objects, they no longer support trigger(). Additionally, Atom has a new command dispatcher, atom.commands, that we use rather than commandeering jQuery's trigger method. From this: # Old! workspaceView.trigger 'a-package:toggle' editorView.trigger 'find-and-replace:show'  To this: # New! atom.commands.dispatch workspaceElement, 'a-package:toggle' atom.commands.dispatch editorElement, 'find-and-replace:show'   Eventing and Disposables A couple large things changed with respect to events:  All model events are now exposed as event subscription methods that return Disposable objects The subscribe() method is no longer available on space-pen View objects An Emitter is now provided from require 'atom'    Consuming Events All events from the Atom API are now methods that return a Disposable object, on which you can call dispose() to unsubscribe. # Old! editor.on 'changed', -&gt;  # New! disposable = editor.onDidChange -&gt; # You can unsubscribe at some point in the future via `dispose()` disposable.dispose()  Deprecation warnings will guide you toward the correct methods.  Using a CompositeDisposable  You can group multiple disposables into a single disposable with a CompositeDisposable. {CompositeDisposable} = require 'atom' class Something constructor: -&gt; editor = atom.workspace.getActiveTextEditor() @disposables = new CompositeDisposable @disposables.add editor.onDidChange -&gt; @disposables.add editor.onDidChangePath -&gt; destroy: -&gt; @disposables.dispose()   Removing View::subscribe and Subscriber::subscribe calls There were a couple permutations of subscribe(). In these examples, a CompositeDisposable is used as it will commonly be useful where conversion is necessary.  subscribe(unsubscribable)  This one is very straight forward. # Old! @subscribe editor.on 'changed', -&gt;  # New! disposables = new CompositeDisposable disposables.add editor.onDidChange -&gt;   subscribe(modelObject, event, method)  When the modelObject is an Atom model object, the change is very simple. Just use the correct event method, and add it to your CompositeDisposable. # Old! @subscribe editor, 'changed', -&gt;  # New! disposables = new CompositeDisposable disposables.add editor.onDidChange -&gt;   subscribe(jQueryObject, selector(optional), event, method)  Things are a little more complicated when subscribing to a DOM or jQuery element. Atom no longer provides helpers for subscribing to elements. You can use jQuery or the native DOM APIs, whichever you prefer. # Old! @subscribe $(window), 'focus', -&gt;  # New! {Disposable, CompositeDisposable} = require 'atom' disposables = new CompositeDisposable # New with jQuery focusCallback = -&gt; $(window).on 'focus', focusCallback disposables.add new Disposable -&gt; $(window).off 'focus', focusCallback # New with native APIs focusCallback = -&gt; window.addEventListener 'focus', focusCallback disposables.add new Disposable -&gt; window.removeEventListener 'focus', focusCallback   Providing Events: Using the Emitter  You no longer need to require emissary to get an emitter. We now provide an Emitter class from require 'atom'. We have a specific pattern for use of the Emitter. Rather than mixing it in, we instantiate a member variable, and create explicit subscription methods. For more information see the Emitter docs. # New! {Emitter} = require 'atom' class Something constructor: -&gt; @emitter = new Emitter destroy: -&gt; @emitter.dispose() onDidChange: (callback) -&gt; @emitter.on 'did-change', callback methodThatFiresAChange: -&gt; @emitter.emit 'did-change', {data: 2} # Using the evented class something = new Something something.onDidChange (eventObject) -&gt; console.log eventObject.data # =&gt; 2 something.methodThatFiresAChange()   Subscribing To Commands $.fn.command and View::subscribeToCommand are no longer available. Now we use atom.commands.add, and collect the results in a CompositeDisposable. See the docs for more info. # Old! atom.workspaceView.command 'core:close core:cancel', -&gt; # When inside a View class, you might see this @subscribeToCommand 'core:close core:cancel', -&gt;  # New! @disposables.add atom.commands.add 'atom-workspace', 'core:close': -&gt; 'core:cancel': -&gt; # You can register commands directly on individual DOM elements in addition to # using selectors. When in a View class, you should have a `@element` object # available. `@element` is a plain HTMLElement object @disposables.add atom.commands.add @element, 'core:close': -&gt; 'core:cancel': -&gt;   Upgrading your stylesheet's selectors Many selectors have changed, and we have introduced the Shadow DOM to the editor. See the Upgrading Your UI Theme And Package Selectors guide for more information in upgrading your package stylesheets.",
          "excerpt": " Upgrading Your Package This document will guide you through the large bits of upgrading your package to work with 1.0 APIs.  TL;DR We've set…"
        },
      
    
      
        
        {
          "title": "Removing Shadow DOM styles",
          "category": "",
          "category_url": "",
          "url": "/shadow-dom/sections/removing-shadow-dom-styles/",
          "body": " Removing Shadow DOM styles In Atom 1.13 the Shadow DOM got removed from text editors. For more background on the reasoning, check out the Pull Request where it was removed. In this guide you will learn how to migrate your theme or package.  Summary Here is a quick summary to see all the changes at a glance:    Before +/- After     atom-text-editor::shadow {} - ::shadow  atom-text-editor {}   .class /deep/ .class {} - /deep/  .class .class {}   atom-text-editor, :host {} - :host  atom-text-editor {}   .comment {} + .syntax--  .syntax--comment {}    Below you'll find more detailed examples.  UI themes and packages  ::shadow  Remove the ::shadow pseudo-element selector from atom-text-editor. Before: atom-text-editor::shadow .cursor { border-color: hotpink; }  After: atom-text-editor .cursor { border-color: hotpink; }   /deep/  Remove the /deep/ combinator selector. It didn't get used that often, mainly to customize the scrollbars. Before: .scrollbars-visible-always /deep/ ::-webkit-scrollbar { width: 8px; height: 8px; }  After: .scrollbars-visible-always ::-webkit-scrollbar { width: 8px; height: 8px; }   Syntax themes  :host  Remove the :host pseudo-element selector. To scope any styles to the text editor, using atom-text-editor is already enough. Before: atom-text-editor, :host { .cursor { border-color: hotpink; } }  After: atom-text-editor { .cursor { border-color: hotpink; } }   syntax--  Add a syntax-- prefix to all grammar selectors used by language packages. It looks a bit verbose, but it will protect all the grammar selectors from accidental style pollution. Before: .comment { color: @mono-3; font-style: italic; .markup.link { color: @mono-3; } }  After: .syntax--comment { color: @mono-3; font-style: italic; .syntax--markup.syntax--link { color: @mono-3; } }  Note: Selectors like the .gutter, .indent-guide, .cursor among others, that are also part of Syntax themes, don't need a prefix. Only grammar selectors that get used by language packages. For example .syntax--keyword, .syntax--keyword.syntax--operator.syntax--js.  Context-Targeted Style Sheets Atom also allowed you to target a specific shadow DOM context with an entire style sheet by adding .atom-text-editor to the file name. This is now not necessary anymore and can be removed. Before: my-ui-theme/ styles/ index.atom-text-editor.less  After: my-ui-theme/ styles/ index.less   I followed the guide, but now my styling is broken! By replacing atom-text-editor::shadow with atom-text-editor.editor, specificity might have changed. This can cause the side effect that some of your properties won't be strong enough. To fix that, you can increase specificity on your selector. A simple way is to just repeat your class (in the example below it's .my-class): Before: atom-text-editor::shadow .my-class { color: hotpink; }  After: atom-text-editor .my-class.my-class { color: hotpink; }   When should I migrate my theme/package?  If you already want to test the migration on master or Beta channel, make sure to change your package.json file to \"engines\": { \"atom\": \"&gt;=1.13.0 &lt;2.0.0\" }. This will prevent Atom from updating your theme or package before the user also updates Atom to version 1.13. Or you can wait until Atom 1.13 reaches Stable. Check blog.atom.io to see if 1.13 already has been released. Don't worry if you're a bit late, Atom will transform the deprecated selectors automatically to avoid breaking any themes or packages. But users will start to see a deprecation warning in deprecation-cop. ",
          "excerpt": " Removing Shadow DOM styles In Atom 1.13 the Shadow DOM got removed from text editors. For more background on the reasoning, check out the Pu…"
        },
      
    
      
        
        {
          "title": "Atom Basics",
          "category": "",
          "category_url": "",
          "url": "/getting-started/sections/atom-basics/",
          "body": " Atom Basics Now that Atom is installed on your system, let's fire it up, configure it and get acquainted with the editor. When you launch Atom for the first time, you should get a screen that looks like this:  This is the Atom welcome screen and gives you a pretty good starting point for how to get started with the editor.  Terminology You can find definitions for all of the various terms that we use throughout the manual in our Glossary.  Command Palette In that welcome screen, we are introduced to probably the most important command in Atom, the Command Palette. If you press Cmd+Shift+PCtrl+Shift+P while focused in an editor pane, the command palette will pop up.  Throughout the book, we will use shortcut keybindings like Cmd+Shift+PCtrl+Shift+P to demonstrate how to run a command. These are the default keybindings for the platform that we detected you running. If you want to see a different platform than the one we detected, you may choose a different one by using the platform selector near the top of the page:  If the Platform Selector is not present, then the current page doesn't have any platform-specific content. If you have customized your Atom keymap, you can always see the keybinding you have mapped in the Command Palette or the Keybindings tab in the Settings View.  This search-driven menu can do just about any major task that is possible in Atom. Instead of clicking around all the application menus to look for something, you can press Cmd+Shift+PCtrl+Shift+P and search for the command.  Not only can you see and quickly search through thousands of possible commands, but you can also see if there is a keybinding associated with it. This is great because it means you can guess your way to doing interesting things while also learning the shortcut key strokes for doing it. For the rest of the book, we will try to be clear as to the text you can search for in the Command Palette in addition to the keybinding for different commands.  Settings and Preferences Atom has a number of settings and preferences you can modify in the Settings View.  This includes things like changing the theme, specifying how to handle wrapping, font settings, tab size, scroll speed and much more. You can also use this screen to install new packages and themes, which we'll cover in Atom Packages. To open the Settings View, you can:  Use the Atom &gt; PreferencesFile &gt; SettingsEdit &gt; Preferences menu item in the menu bar Search for settings-view:open in the Command Palette  Use the Cmd+,Ctrl+, keybinding   Changing the Theme The Settings View also lets you change the themes for Atom. Atom ships with 4 different UI themes, dark and light variants of the Atom and One theme, as well as 8 different syntax themes. You can modify the active theme by clicking on the Themes tab in the sidebar of the Settings View, or you can install new themes by clicking the Install tab.  The UI themes control the style of UI elements like the tabs and the tree view, while the syntax themes control the syntax highlighting of text you load into the editor. To change the syntax or UI theme, simply pick something different in the appropriate dropdown list. There are also dozens of themes on https://atom.io that you can choose from if you want something different. We will cover customizing a theme in Style Tweaks and creating your own theme in Creating a Theme.  Soft Wrap You can use the Settings View to specify your whitespace and wrapping preferences.  Enabling \"Soft Tabs\" will insert spaces instead of actual tab characters when you press the Tab key and the \"Tab Length\" setting specifies how many spaces to insert when you do so, or how many spaces are used to represent a tab if \"Soft Tabs\" is disabled. The \"Soft Wrap\" option will wrap lines that are too long to fit in your current window. If soft wrapping is disabled, the lines will simply run off the side of the screen and you will have to scroll the window to see the rest of the content. If \"Soft Wrap At Preferred Line Length\" is toggled, the lines will wrap at 80 characters instead of the end of the screen. You can also change the default line length to a value other than 80 on this screen. In Basic Customization we will see how to set different wrap preferences for different types of files (for example, if you want to wrap Markdown files but not other files).  Opening, Modifying, and Saving Files Now that your editor is looking and acting how you want, let's start opening up and editing files. This is a text editor after all, right?  Opening a File There are several ways to open a file in Atom. You can do it by choosing File &gt; Open from the menu bar or by pressing Cmd+OCtrl+O to choose a file from the standard dialog.  This is useful for opening a file that is not contained in the project you're currently in (more on that next), or if you're starting from a new window for some reason. Another way to open a file in Atom is from the command line using the atom command. The Atom menu bar has a command named \"Install Shell Commands\" which installs the atom and apm commands if Atom wasn't able to install them itself.The atom and apm commands are installed automatically as a part of Atom's installation process. You can run the atom command with one or more file paths to open up those files in Atom.  atom --help Atom Editor v1.8.0 Usage: atom [options] [path ...] One or more paths to files or folders may be specified. If there is an existing Atom window that contains all of the given folders, the paths will be opened in that window. Otherwise, they will be opened in a new window. ...  This is a great tool if you're used to the terminal or you work from the terminal a lot. Just fire off atom [files] and you're ready to start editing. You can even open a file at a certain line (and optionally column) so the cursor will be positioned exactly where you want. For example, you may search some keyword in a repository to find the line you want to edit:  git grep -n 'Opening a File$' content/getting-started/sections/atom-basics.md:84:##### Opening a File  and then jump to the beginning of that line by appending a colon and the line number to the file path:  atom content/getting-started/sections/atom-basics.md:84  Sometimes you may want the cursor to jump to the exact column position of the searched keyword. Just append another colon plus the column number:  git grep -n --column 'Windows Explorer' content/getting-started/sections/atom-basics.md:150:722 atom content/getting-started/sections/atom-basics.md:150:722   Editing and Saving a File Editing a file is pretty straightforward. You can click around and scroll with your mouse and type to change the content. There is no special editing mode or key commands. If you prefer editors with modes or more complex key commands, you should take a look at the Atom package list. There are a lot of packages that emulate popular styles. To save a file you can choose File &gt; Save from the menu bar or Cmd+SCtrl+S to save the file. If you choose File &gt; Save As or press Cmd+Shift+SCtrl+Shift+S then you can save the current content in your editor under a different file name. Finally, you can choose File &gt; Save All or press Alt+Cmd+S to save all the open files in Atom.  Opening Directories Atom doesn't just work with single files though; you will most likely spend most of your time working on projects with multiple files. To open a directory, choose the menu item File &gt; OpenFile &gt; Open Folder and select a directory from the dialog. You can also add more than one directory to your current Atom window, by choosing File &gt; Add Project Folder from the menu bar or pressing Cmd+Shift+OCtrl+Shift+A. You can open any number of directories from the command line by passing their paths to the atom command line tool. For example, you could run the command atom ./hopes ./dreams to open both the hopes and the dreams directories at the same time. When you open Atom with one or more directories, you will automatically get a Tree View on the side of your window.  The Tree View allows you to explore and modify the file and directory structure of your project. You can open, rename, delete and create new files from this view. You can also hide and show it with Cmd+\\Ctrl+\\ or the tree-view:toggle command from the Command Palette, and Ctrl+0Alt+\\ will focus it. When the Tree view has focus you can press A, M, or Delete to add, move or delete files and folders. You can also right-click on a file or folder in the Tree view to see many of the various options, including all of these plus showing the file in FinderWindows Exploreryour native filesystem or copying the file path to the clipboard.  Atom Packages Like many parts of Atom, the Tree View is not built directly into the editor, but is its own standalone package that is shipped with Atom by default. Packages that are bundled with Atom are referred to as Core packages. Ones that aren't bundled with Atom are referred to as Community packages. You can find the source code to the Tree View on GitHub at https://github.com/atom/tree-view. This is one of the interesting things about Atom. Many of its core features are actually just packages implemented the same way you would implement any other functionality. This means that if you don't like the Tree View for example, you could write your own implementation of that functionality and replace it entirely.   Opening a File in a Project Once you have a project open in Atom, you can easily find and open any file within that project. If you press Cmd+TCtrl+T or Cmd+PCtrl+P, the Fuzzy Finder will pop up. This will let you quickly search for any file in your project by typing parts of the path.  You can also search through only the files currently opened (rather than every file in your project) with Cmd+BCtrl+B. This searches through your \"buffers\" or open files. You can also limit this fuzzy search with Cmd+Shift+BCtrl+Shift+B, which searches only through the files which are new or have been modified since your last Git commit. The fuzzy finder uses the core.ignoredNames, fuzzy-finder.ignoredNames and core.excludeVCSIgnoredPaths configuration settings to filter out files and folders that will not be shown. If you have a project with tons of files you don't want it to search through, you can add patterns or paths to either of these config settings or your standard .gitignore files. We'll learn more about config settings in Global Configuration Settings, but for now you can easily set these in the Settings View under Core Settings. Both core.ignoredNames and fuzzy-finder.ignoredNames are interpreted as glob patterns as implemented by the minimatch Node module.  Configuration Setting Notation Sometimes you'll see us refer to configuration settings all spelled out like \"Ignored Names in Core Settings\". Other times you'll see us use the shorthand name like core.ignoredNames. Both of these refer to the same thing. The shorthand is the package name, then a dot ., followed by the \"camel-cased\" name of the setting. If you have a phrase you want to camel-case, follow these steps:  Lowercase the first word Capitalize the first letter in all other words Remove the spaces  So \"Ignored Names\" becomes \"ignoredNames\". ",
          "excerpt": " Atom Basics Now that Atom is installed on your system, let's fire it up, configure it and get acquainted with the editor. When you launch At…"
        },
      
    
      
        
        {
          "title": "Installing Atom",
          "category": "",
          "category_url": "",
          "url": "/getting-started/sections/installing-atom/",
          "body": " Installing Atom To get started with Atom, we'll need to get it on your system. This section will go over installing Atom on your system as well as the basics of how to build it from source. Installing Atom should be fairly simple. Generally, you can go to https://atom.io and you should see a download button as shown here:          The button or buttons should be specific to your platform and the download package should be easily installable. However, let's go over them here in a bit of detail.   Installing Atom on Mac Atom follows the standard Mac zip installation process. You can either press the download button from the https://atom.io site or you can go to the Atom releases page to download the atom-mac.zip file explicitly. Once you have that file, you can click on it to extract the application and then drag the new Atom application into your \"Applications\" folder. When you first open Atom, it will try to install the atom and apm commands for use in the terminal. In some cases, Atom might not be able to install these commands because it needs an administrator password. To check if Atom was able to install the atom command, for example, open a terminal window and type which atom. If the atom command has been installed, you'll see something like this:  which atom /usr/local/bin/atom $  If the atom command wasn't installed, the which command won't return anything:  which atom $  To install the atom and apm commands, run \"Window: Install Shell Commands\" from the Command Palette, which will prompt you for an administrator password.    Installing Atom on Windows Atom is available with Windows installers that can be downloaded from https://atom.io or from the Atom releases page. Use AtomSetup.exe for 32-bit systems and AtomSetup-x64.exe for 64-bit systems. This setup program will install Atom, add the atom and apm commands to your PATH, and create shortcuts on the desktop and in the start menu.  The context menu Open with Atom in File Explorer, and the option to make Atom available for file association using Open with..., is controlled by the System Settings panel as seen above. With Atom open, click on File &gt; Settings, and then the System tab on the left. Check the boxes next to Show in file context menus, as well as Show in folder context menus. And you’re all set.    Installing Atom on Linux You can install Atom on Linux using your distribution's package manager by configuring it to use one of our official package repositories. This will also enable you to update Atom when new releases are published.  Debian and Ubuntu (deb/apt) To install Atom on Debian, Ubuntu, or related distributions, add our official package repository to your system by running the following commands:  wget -qO - https://packagecloud.io/AtomEditor/atom/gpgkey | sudo apt-key add - sudo sh -c 'echo \"deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main\" &gt; /etc/apt/sources.list.d/atom.list' sudo apt-get update  You can now install Atom using apt-get (or apt on Ubuntu):  # Install Atom sudo apt-get install atom # Install Atom Beta sudo apt-get install atom-beta  Alternatively, you can download the Atom .deb package and install it directly:  # Install Atom sudo apt install ./atom-amd64.deb   Red Hat and CentOS (YUM), or Fedora (DNF) To install Atom on CentOS, Oracle Linux, Red Hat Enterprise Linux, Scientific Linux, Fedora, or related distributions that use the YUM or DNF package managers, add our official package repository to your system by running the following commands:  sudo rpm --import https://packagecloud.io/AtomEditor/atom/gpgkey sudo sh -c 'echo -e \"[Atom]\\nname=Atom Editor\\nbaseurl=https://packagecloud.io/AtomEditor/atom/el/7/\\$basearch\\nenabled=1\\ngpgcheck=0\\nrepo_gpgcheck=1\\ngpgkey=https://packagecloud.io/AtomEditor/atom/gpgkey\" &gt; /etc/yum.repos.d/atom.repo'  You can now install Atom using dnf (or yum depending on your distribution):  # Install Atom sudo dnf install atom # Install Atom Beta sudo dnf install atom-beta  Alternatively, you can download the Atom .rpm package and install it directly:  # On YUM-based distributions sudo yum install -y atom.x86_64.rpm # On DNF-based distributions sudo dnf install -y atom.x86_64.rpm   SUSE (zypp) To install Atom on openSUSE or other distributions that use the Zypp package manager, add our official package repository to your system by running the following commands:  sudo sh -c 'echo -e \"[Atom]\\nname=Atom Editor\\nbaseurl=https://packagecloud.io/AtomEditor/atom/el/7/\\$basearch\\nenabled=1\\ntype=rpm-md\\ngpgcheck=0\\nrepo_gpgcheck=1\\ngpgkey=https://packagecloud.io/AtomEditor/atom/gpgkey\" &gt; /etc/zypp/repos.d/atom.repo' sudo zypper --gpg-auto-import-keys refresh  You can now install Atom using zypper:  # Install Atom sudo zypper install atom # Install Atom Beta sudo zypper install atom-beta  Alternatively, you can download the Atom .rpm package and install it directly:  sudo zypper in -y atom.x86_64.rpm    Updating Atom You should consider updating Atom periodically for the latest improvements to the software. Additionally, When Atom receives hotfixes for security vulnerabilities you will want to update your version of Atom as soon as possible.  \"Automatically Update\" is enabled by default in Core Settings of the Settings View, which will allow Atom to check for updates automatically. If you disable this setting you can update Atom manually. To perform a manual update:  Click on the Atom &gt; Check for Update menu item in the menu bar. Search for Application: About in the Command Palette and click the Check now button.  Atom will begin to update if an update is available.   \"Automatically Update\" is enabled by default in Core Settings of the Settings View, which will allow Atom to check for updates automatically. If you disable this setting you can update Atom manually. To perform a manual update:  Click on the Help &gt; Check for Update menu item in the menu bar. Search for Application: About in the Command Palette and click the Check now button.  Atom will begin to update if an update is available.   If you are using Atom's official package repositories, use your distribution's package manager to update Atom. Otherwise, you will need to manually download and install the latest .rpm or .deb package from https://atom.io. For more details, see Installing Atom on Linux.   Portable Mode Atom stores configuration and state in a .atom directory usually located in your home directory (%userprofile% on Windows). You can however run Atom in portable mode where both the app and the configuration are stored together such as on a removable storage device. To setup Atom in portable mode download the zip/tar.gz package for your system and extract it to your removable storage.  Then create a .atom directory alongside the directory that contains atom.exe, for example: e:\\atom-1.14\\atom.exe e:\\.atom    Then create a .atom directory alongside the Atom.app application, for example: /MyUSB/Atom.app /MyUSB/.atom    Then create a .atom directory alongside the directory that contains the Atom binary, for example: /media/myusb/atom-1.14/atom /media/myusb/.atom    Portable Notes  The .atom directory must be writeable You can move an existing .atom directory to your portable device Atom can also store its Electron user data in your .atom directory - just create a subdirectory called electronUserData inside .atom  Alternatively you can set the ATOM_HOME environment variable to point wherever you want (you can write a .sh or .cmd script to temporarily set it and launch it from that) Portable mode installations will not automatically update   Building Atom from Source The Hacking on Atom Core section of the flight manual covers instructions on how to clone and build the source code if you prefer that option.  Proxy and Firewall Settings  Behind a Firewall? If you are behind a firewall and seeing SSL errors when installing packages you can disable strict SSL by running:  apm config set strict-ssl false   Using a Proxy? If you are using a HTTP(S) proxy you can configure apm to use it by running:  apm config set https-proxy YOUR_PROXY_ADDRESS  You can run apm config get https-proxy to verify it has been set correctly.",
          "excerpt": " Installing Atom To get started with Atom, we'll need to get it on your system. This section will go over installing Atom on your system as w…"
        },
      
    
      
        
        {
          "title": "Summary",
          "category": "",
          "category_url": "",
          "url": "/getting-started/sections/summary/",
          "body": " Summary You should now have a basic understanding of what Atom is and what you want to do with it. You should also have it installed on your system and be able to use it for the most basic text editing operations. Now you're ready to start digging into the fun stuff.",
          "excerpt": " Summary You should now have a basic understanding of what Atom is and what you want to do with it. You should also have it installed on your…"
        },
      
    
      
        
        {
          "title": "Why Atom?",
          "category": "",
          "category_url": "",
          "url": "/getting-started/sections/why-atom/",
          "body": " Why Atom? There are a lot of text editors out there; why should you spend your time learning about and using Atom? Editors like Sublime and TextMate offer convenience but only limited extensibility. On the other end of the spectrum, Emacs and Vim offer extreme flexibility, but they aren't very approachable and can only be customized with special-purpose scripting languages. We think we can do better. Our goal is a zero-compromise combination of hackability and usability: an editor that will be welcoming to an elementary school student on their first day learning to code, but also a tool they won't outgrow as they develop into seasoned hackers. As we've used Atom to build Atom, what began as an experiment has gradually matured into a tool we can't live without. On the surface, Atom is the modern desktop text editor you've come to expect. Pop the hood, however, and you'll discover a system begging to be hacked on.  The Nucleus of Atom The web is not without its faults, but two decades of development has forged it into an incredibly malleable and powerful platform. So when we set out to write a text editor that we ourselves would want to extend, web technology was the obvious choice. But first, we had to free it from its chains.  The Native Web Web browsers are great for browsing web pages, but writing code is a specialized activity that warrants dedicated tools. More importantly, the browser severely restricts access to the local system for security reasons, and for us, a text editor that couldn't write files or run local subprocesses was a non-starter. For this reason, we didn't build Atom as a traditional web application. Instead, Atom is a specialized variant of Chromium designed to be a text editor rather than a web browser. Every Atom window is essentially a locally-rendered web page. All the APIs available to a typical Node.js application are also available to the code running in each window's JavaScript context. This hybrid provides a unique client-side development experience. Since everything is local, you don't have to worry about asset pipelines, script concatenation, and asynchronous module definitions. If you want to load some code, just require it at the top of your file. Node's module system makes it easy to break the system down into lots of small, focused packages.  JavaScript, Meet C++ Interacting with native code is also really simple. For example, we wrote a wrapper around the Oniguruma regular expression engine for our TextMate grammar support. In a browser, that would have required adventures with NaCl or Esprima. Node integration made it easy. In addition to the Node APIs, we also expose APIs for native dialogs, adding application and context menu items, manipulating the window dimensions, etc.  Web Tech: The Fun Parts Another great benefit, that comes with writing code for Atom, is the guarantee that it's running on the newest version of Chromium. That means we can ignore issues like browser compatibility and polyfills. We can use all the web's shiny features of tomorrow, today. For example, the layout of our workspace and panes is based on flexbox. It's an emerging standard and has gone through a lot of change since we started using it, but none of that mattered as long as it worked. With the entire industry pushing web technology forward, we're confident that we're building Atom on fertile ground. Native UI technologies come and go, but the web is a standard that becomes more capable and ubiquitous with every passing year. We're excited to dig deeper into its toolbox.  An Open-Source Text Editor We see Atom as a perfect complement to GitHub's primary mission of building better software by working together. Atom is a long-term investment, and GitHub will continue to support its development with a dedicated team going forward. But we also know that we can't achieve our vision for Atom alone. As Emacs and Vim have demonstrated over the past three decades, if you want to build a thriving, long-lasting community around a text editor, it has to be open source. The entire Atom editor is free and open source and is available under the https://github.com/atom organization.",
          "excerpt": " Why Atom? There are a lot of text editors out there; why should you spend your time learning about and using Atom? Editors like Sublime and …"
        },
      
    
      
        
        {
          "title": "Autocomplete",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/autocomplete/",
          "body": " Autocomplete If you're still looking to save some typing time, Atom also ships with simple autocompletion functionality. The autocomplete system lets you view and insert possible completions in the editor using Tab or Enter.  By default, the autocomplete system will look through the current open file for strings that match what you're starting to type. If you want more options, in the Settings panel for the autocomplete-plus package you can toggle a setting to make autocomplete-plus look for text in all your open buffers rather than just the current file. The Autocomplete functionality is implemented in the autocomplete-plus package.",
          "excerpt": " Autocomplete If you're still looking to save some typing time, Atom also ships with simple autocompletion functionality. The autocomplete sy…"
        },
      
    
      
        
        {
          "title": "Moving in Atom",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/moving-in-atom/",
          "body": " Moving in Atom While it's pretty easy to move around Atom by clicking with the mouse or using the arrow keys, there are some keybindings that may help you keep your hands on the keyboard and navigate around a little faster.  Atom ships with many of the basic Emacs keybindings for navigating a document. To go up and down a single character, you can use Ctrl+P and Ctrl+N. To go left and right a single character, you can use Ctrl+B and Ctrl+F. These are the equivalent of using the arrow keys, though some people prefer not having to move their hands to where the arrow keys are located on their keyboard. In addition to single character movement, there are a number of other movement keybindings:   Atom has support for all the standard Windows cursor movement key combinations. To go up, down, left or right a single character you can use the arrow keys. In addition to single character movement, there are a number of other movement keybindings:   Atom has support for all the standard Linux cursor movement key combinations. To go up, down, left or right a single character you can use the arrow keys. In addition to single character movement, there are a number of other movement keybindings:    Alt+Left or Alt+BCtrl+Left - Move to the beginning of word  Alt+Right or Alt+FCtrl+Right - Move to the end of word  Cmd+Left or Ctrl+AHome - Move to the first character of the current line  Cmd+Right or Ctrl+EEnd - Move to the end of the line  Cmd+UpCtrl+Home - Move to the top of the file  Cmd+DownCtrl+End - Move to the bottom of the file  You can also move directly to a specific line (and column) number with Ctrl+G. This will bring up a dialog that asks which line you would like to jump to. You can also use the row:column syntax to jump to a character in that line as well.   Additional Movement and Selection Commands Atom also has a few movement and selection commands that don't have keybindings by default. You can access these commands from the Command Palette, but if you find yourself using commands that don't have a keybinding often, have no fear! You can easily add an entry to your keymap.cson to create a key combination. You can open keymap.cson file in an editor from the Atom &gt; KeymapFile &gt; KeymapEdit &gt; Keymap menu. For example, the command editor:move-to-beginning-of-screen-line is available in the command palette, but it's not bound to any key combination. To create a key combination you need to add an entry in your keymap.cson file. For editor:select-to-previous-word-boundary, you can add the following to your keymap.cson:  'atom-text-editor': 'cmd-shift-e': 'editor:select-to-previous-word-boundary'    'atom-text-editor': 'ctrl-shift-e': 'editor:select-to-previous-word-boundary'    'atom-text-editor': 'ctrl-shift-e': 'editor:select-to-previous-word-boundary'   This will bind the command editor:select-to-previous-word-boundary to Cmd+Shift+ECtrl+Shift+E. For more information on customizing your keybindings, see Customizing Keybindings. Here's a list of Movement and Selection Commands that do not have a keyboard shortcut by default:  editor:move-to-beginning-of-next-paragraph editor:move-to-beginning-of-previous-paragraph editor:move-to-beginning-of-screen-line editor:move-to-beginning-of-line editor:move-to-beginning-of-next-word editor:move-to-previous-word-boundary editor:move-to-next-word-boundary editor:select-to-beginning-of-next-paragraph editor:select-to-beginning-of-previous-paragraph editor:select-to-beginning-of-line editor:select-to-beginning-of-next-word editor:select-to-next-word-boundary editor:select-to-previous-word-boundary    editor:move-to-beginning-of-next-paragraph editor:move-to-beginning-of-previous-paragraph editor:move-to-beginning-of-screen-line editor:move-to-beginning-of-line editor:move-to-end-of-line editor:move-to-first-character-of-line editor:move-to-beginning-of-next-word editor:move-to-previous-word-boundary editor:move-to-next-word-boundary editor:select-to-beginning-of-next-paragraph editor:select-to-beginning-of-previous-paragraph editor:select-to-end-of-line editor:select-to-beginning-of-line editor:select-to-beginning-of-next-word editor:select-to-next-word-boundary editor:select-to-previous-word-boundary    editor:move-to-beginning-of-next-paragraph editor:move-to-beginning-of-previous-paragraph editor:move-to-beginning-of-screen-line editor:move-to-beginning-of-line editor:move-to-end-of-line editor:move-to-first-character-of-line editor:move-to-beginning-of-next-word editor:move-to-previous-word-boundary editor:move-to-next-word-boundary editor:select-to-beginning-of-next-paragraph editor:select-to-beginning-of-previous-paragraph editor:select-to-end-of-line editor:select-to-beginning-of-line editor:select-to-beginning-of-next-word editor:select-to-next-word-boundary editor:select-to-previous-word-boundary    Navigating by Symbols You can also jump around a little more informatively with the Symbols View. To jump to a symbol such as a method definition, press Cmd+RCtrl+R. This opens a list of all symbols in the current file, which you can fuzzy filter similarly to Cmd+TCtrl+T. You can also search for symbols across your project but it requires a tags file.  You can generate a tags file by using the ctags utility. Once it is installed, you can use it to generate a tags file by running a command to generate it. See the ctags documentation for details.  Once you have your tags file generated, you can use it to search for symbols across your project by pressing Cmd+Shift+R. This also enables you to use Alt+Cmd+Down to go to and Alt+Cmd+Up to return from the declaration of the symbol under the cursor.   Once you have your tags file generated, you can use it to search for symbols across your project by pressing Ctrl+Shift+R. This also enables you to use Alt+Ctrl+Down to go to and Alt+Ctrl+Up to return from the declaration of the symbol under the cursor.   Once you have your tags file generated, you can use it to search for symbols across your project by pressing Cmd+Shift+RCtrl+Shift+R.  You can customize how tags are generated by creating your own .ctags file in your home directory, ~/.ctags%USERPROFILE%\\.ctags. An example can be found here. The symbols navigation functionality is implemented in the symbols-view package.  Bookmarks Atom also has a great way to bookmark specific lines in your project so you can jump back to them quickly. If you press Cmd+F2Alt+Ctrl+F2Ctrl+Shift+F2, Atom will toggle a \"bookmark\" on the current line. You can set these throughout your project and use them to quickly find and jump to important lines of your project. A small bookmark symbol is added to the line gutter, like on line 22 of the image below. If you hit F2, Atom will jump to the next bookmark in the file you currently have focused. If you use Shift+F2 it will cycle backwards through them instead. You can also see a list of all your project's current bookmarks and quickly filter them and jump to any of them by hitting Ctrl+F2.   The bookmarks functionality is implemented in the bookmarks package.",
          "excerpt": " Moving in Atom While it's pretty easy to move around Atom by clicking with the mouse or using the arrow keys, there are some keybindings tha…"
        },
      
    
      
        
        {
          "title": "Basic Customization",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/basic-customization/",
          "body": " Basic Customization Now that we are feeling comfortable with just about everything built into Atom, let's look at how to tweak it. Perhaps there is a keybinding that you use a lot but feels wrong or a color that isn't quite right for you. Atom is amazingly flexible, so let's go over some of the simpler flexes it can do.  Configuring with CSON All of Atom's config files (with the exception of your style sheet and your Init Script) are written in CSON, short for CoffeeScript Object Notation. Just like its namesake JSON, JavaScript Object Notation, CSON is a text format for storing structured data in the form of simple objects made up of key-value pairs. key: key: value key: value key: [value, value]  Objects are the backbone of any CSON file, and are delineated by indentation (as in the above example). A key's value can either be a String, a Number, an Object, a Boolean, null, or an Array of any of these data types.  Just like the more common JSON, CSON's keys can only be repeated once per object. If there are duplicate keys, then the last usage of that key overwrites all others, as if they weren't there. The same holds true for Atom's config files. Don't do this: # Only the second snippet will be loaded '.source.js': 'console.log': 'prefix': 'log' 'body': 'console.log(${1:\"crash\"});$2' '.source.js': 'console.error': 'prefix': 'error' 'body': 'console.error(${1:\"crash\"});$2'  Use this instead: # Both snippets will be loaded '.source.js': 'console.log': 'prefix': 'log' 'body': 'console.log(${1:\"crash\"});$2' 'console.error': 'prefix': 'error' 'body': 'console.error(${1:\"crash\"});$2'    Style Tweaks If you want to apply quick-and-dirty personal styling changes without creating an entire theme that you intend to publish, you can add styles to the styles.less file in your ~/.atom%USERPROFILE%\\.atom directory. You can open this file in an editor from the Atom &gt; StylesheetFile &gt; StylesheetEdit &gt; Stylesheet menu.    For example, to change the colors of the Status Bar, you could add the following rule to your styles.less file: .status-bar { color: white; background-color: black; }  The easiest way to see what classes are available to style is to inspect the DOM manually via the Developer Tools. We'll go over the Developer Tools in great detail in the next chapter, but for now let's take a simple look. You can open the Developer Tools by pressing Alt+Cmd+ICtrl+Shift+I, which will bring up the Chromium Developer Tools panel.  With the Developer Tools, you can inspect all the elements in Atom. If you want to update the style of something, you can figure out what classes it has and add a Less rule to your stylesheet to modify it.  If you are unfamiliar with Less, it is a basic CSS preprocessor that makes some things in CSS a bit easier. You can learn more about it at lesscss.org. If you prefer to use CSS instead, you can do that in the same styles.less file, since CSS is also valid in Less.   Customizing Keybindings Atom keymaps work similarly to stylesheets. Just as stylesheets use selectors to apply styles to elements, Atom keymaps use selectors to associate key combinations with events in specific contexts. Here's a small example, excerpted from Atom's built-in keymap: 'atom-text-editor': 'enter': 'editor:newline' 'atom-text-editor[mini] input': 'enter': 'core:confirm'  This keymap defines the meaning of Enter in two different contexts. In a normal editor, pressing Enter triggers the editor:newline command, which causes the editor to insert a newline. But if the same keystroke occurs inside a select list's mini-editor, it instead triggers the core:confirm command based on the binding in the more-specific selector. By default, keymap.cson is loaded when Atom is started. It will always be loaded last, giving you the chance to override bindings that are defined by Atom's core keymaps or third-party packages. You can open this file in an editor from the Atom &gt; KeymapFile &gt; KeymapEdit &gt; Keymap menu. You can see all the keybindings that are currently configured in your installation of Atom in the Keybindings tab in the Settings View. If you run into problems with keybindings, the Keybinding Resolver is a huge help. It can be opened with the Cmd+.Ctrl+. key combination. It will show you what keys Atom saw you press and what command Atom executed because of that combination.  Global Configuration Settings Atom loads configuration settings from the config.cson file in your ~/.atom%USERPROFILE%\\.atom directory. '*': 'core': 'excludeVcsIgnoredPaths': true 'editor': 'fontSize': 18  The configuration is grouped into global settings under the * key and language-specific settings under scope named keys like .python.source or .html.text. Underneath that, you'll find configuration settings grouped by package name or one of the two core namespaces: core or editor. You can open this file in an editor from the Atom &gt; ConfigFile &gt; ConfigEdit &gt; Config menu.  Configuration Key Reference   core   customFileTypes: Associations of language scope to file extensions (see Customizing Language Recognition)  disabledPackages: An array of package names to disable  excludeVcsIgnoredPaths: Don't search within files specified by .gitignore   ignoredNames: File names to ignore across all of Atom  projectHome: The directory where projects are assumed to be located  themes: An array of theme names to load, in cascading order    editor   autoIndent: Enable/disable basic auto-indent (defaults to true)  nonWordCharacters: A string of non-word characters to define word boundaries  fontSize: The editor font size  fontFamily: The editor font family  invisibles: A hash of characters Atom will use to render whitespace characters. Keys are whitespace character types, values are rendered characters (use value false to turn off individual whitespace character types)   tab: Hard tab characters  cr: Carriage return (for Microsoft-style line endings)  eol: \\n characters  space: Leading and trailing space characters    lineHeight: Height of editor lines, as a multiplier of font size  preferredLineLength: Identifies the length of a line (defaults to 80)  showInvisibles: Whether to render placeholders for invisible characters (defaults to false)  showIndentGuide: Show/hide indent indicators within the editor  showLineNumbers: Show/hide line numbers within the gutter  softWrap: Enable/disable soft wrapping of text within the editor  softWrapAtPreferredLineLength: Enable/disable soft line wrapping at preferredLineLength   tabLength: Number of spaces within a tab (defaults to 2)    fuzzyFinder   ignoredNames: Files to ignore only in the fuzzy-finder    whitespace   ensureSingleTrailingNewline: Whether to reduce multiple newlines to one at the end of files  removeTrailingWhitespace: Enable/disable stripping of whitespace at the end of lines (defaults to true)    wrap-guide   columns: Array of hashes with a pattern and column key to match the path of the current editor to a column position.     Language Specific Configuration Settings You can also set several configuration settings differently for different file types. For example, you may want Atom to soft wrap markdown files, have two-space tabs for ruby files, and four-space tabs for python files. There are several settings now scoped to an editor's language. Here is the current list: editor.autoIndent editor.autoIndentOnPaste editor.invisibles editor.nonWordCharacters editor.preferredLineLength editor.scrollPastEnd editor.showIndentGuide editor.showInvisibles editor.softWrap editor.softWrapAtPreferredLineLength editor.softWrapHangingIndent editor.tabLength   Language-specific Settings in the Settings View You can edit these config settings in the Settings View on a per-language basis. Click on \"Packages\" tab in the navigation bar on the left, search for the language of your choice, select it, and edit away!   Language-specific Settings in your Config File You can also edit the config.cson directly. To open your configuration file via the Command Palette, press Cmd+Shift+PCtrl+Shift+P type open config, and press Enter. Global settings are under the * key, and each language can have its own top-level key. This key is the language's scope. Language-specific settings take precedence over anything set in the global section for that language only. '*': # all languages unless overridden 'editor': 'softWrap': false 'tabLength': 8 '.source.gfm': # markdown overrides 'editor': 'softWrap': true '.source.ruby': # ruby overrides 'editor': 'tabLength': 2 '.source.python': # python overrides 'editor': 'tabLength': 4   Finding a Language's Scope Name In order to write these overrides effectively, you'll need to know the scope name for the language. We've already done this for finding a scope for writing a snippet in Snippet Format, but we can quickly cover it again. The scope name is shown in the settings view for each language. Click on \"Packages\" in the navigation on the left, search for the language of your choice, select it, and you should see the scope name under the language name heading:  Another way to find the scope for a specific language is to open a file of its kind and press Alt+Cmd+Pchoose \"Editor: Log Cursor Scope\" in the Command Palette to show all scopes for the current position of the cursor. The scope mentioned top most is always the language for this kind of file, the scopes following are specific to the cursor position:  These scopes can be especially useful to style the editor, since they can also be used as class names in your stylesheet.  Customizing Language Recognition If you want Atom to always recognize certain file types as a specific grammar, you'll need to manually edit your config.cson file. You can open it using the Application: Open Your Config command from the Command Palette. For example, if you wanted to add the foo extension to the CoffeeScript language, you could add this to your configuration file under the *.core section: '*': core: customFileTypes: 'source.coffee': [ 'foo' ]  In the example above, source.coffee is the language's scope name (see Finding a Language's Scope Name for more information) and foo is the file extension to match without the period. Adding a period to the beginning of either of these will not work.  Controlling Where Customization is Stored to Simplify Your Workflow The CSON configuration files for Atom are stored on disk on your machine. The location for this storage is customizable. The default is to use the home directory of the user executing the application. The Atom Home directory will, by default, be called .atom and will be located in the root of the home directory of the user.  Custom home location with an environment variable An environment variable can be used to make Atom use a different location. This can be useful for several reasons. One of these may be that multiple user accounts on a machine want to use the same Atom Home. The environment variable used to specify an alternate location is called ATOM_HOME. If this environment variable exists, the location specified will be used to load and store Atom settings.  Taking your customization with you with Portable Mode In addition to using the ATOM_HOME environment variable, Atom can also be set to use \"Portable Mode\". Portable Mode is most useful for taking Atom with you, with all your custom setting and packages, from machine to machine. This may take the form of keeping Atom on a USB drive or a cloud storage platform that syncs folders to different machines, like Dropbox. Atom is in Portable Mode when there is a directory named .atom sibling to the directory in which the atom executable file lives. For example, the installed Atom directory can be placed into a Dropbox folder next to a .atom folder.  With such a setup, Atom will use the same Home directory with the same settings for any machine with this directory syncronized/plugged in.  Moving to Portable Mode Atom provides a command-line parameter option for setting Portable Mode.  atom --portable  Executing atom with the --portable option will take the .atom directory you have in the default location (~/.atom) and copy the relevant contents for your configuration to a new home directory in the Portable Mode location. This enables easily moving from the default location to a portable operation without losing the customization you have already set up.",
          "excerpt": " Basic Customization Now that we are feeling comfortable with just about everything built into Atom, let's look at how to tweak it. Perhaps t…"
        },
      
    
      
        
        {
          "title": "Version Control in Atom",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/version-control-in-atom/",
          "body": " Version Control in Atom Version control is an important aspect of any project and Atom comes with basic Git and GitHub integration built in. In order to use version control in Atom, the project root needs to contain the Git repository.  Checkout HEAD revision The Alt+Cmd+ZAlt+Ctrl+Z keybinding checks out the HEAD revision of the file in the editor. This is a quick way to discard any saved and staged changes you've made and restore the file to the version in the HEAD commit. This is essentially the same as running git checkout HEAD -- &lt;path&gt; and git reset HEAD -- &lt;path&gt; from the command line for that path.  This command goes onto the undo stack so you can use Cmd+ZCtrl+Z afterwards to restore the previous contents.  Git status list Atom ships with the fuzzy-finder package which provides Cmd+TCtrl+T to quickly open files in the project and Cmd+BCtrl+B to jump to any open editor. The package also provides Cmd+Shift+BCtrl+Shift+B which displays a list of all the untracked and modified files in the project. These will be the same files that you would see on the command line if you ran git status.  An icon will appear to the right of each file letting you know whether it is untracked or modified.  Commit editor Atom can be used as your Git commit editor and ships with the language-git package which adds syntax highlighting to edited commit, merge, and rebase messages.  You can configure Atom to be your Git commit editor with the following command:  git config --global core.editor \"atom --wait\"  The language-git package will help remind you to be brief by colorizing the first lines of commit messages when they're longer than 50 or 65 characters.  Status bar icons The status-bar package that ships with Atom includes several Git decorations that display on the right side of the status bar:  The currently checked out branch name is shown with the number of commits the branch is ahead of or behind its upstream branch. An icon is added if the file is untracked, modified, or ignored. The number of lines added and removed since the file was last committed will be displayed as well.  Line diffs The included git-diff package colorizes the gutter next to lines that have been added, edited, or removed.  This package also adds Alt+G Down and Alt+G Up keybindings that allow you to move the cursor to the next or previous diff in the current editor.  Open on GitHub If the project you're working on is on GitHub, there are also some very useful integrations you can use. Most of the commands will take the current file you're viewing and open a view of that file on GitHub - for instance, the blame or commit history of that file.   Alt+G O - Open file on GitHub  Alt+G B - Open Blame view of file on GitHub  Alt+G H - Open History view of file on GitHub  Alt+G C - Copy the URL of the current file on GitHub to the clipboard  Alt+G R - Branch compare on GitHub  The branch comparison shows you the commits that are on the branch you're currently working on locally that are not on the mainline branch. ",
          "excerpt": " Version Control in Atom Version control is an important aspect of any project and Atom comes with basic Git and GitHub integration built in.…"
        },
      
    
      
        
        {
          "title": "Atom Packages",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/atom-packages/",
          "body": " Atom Packages First we'll start with the Atom package system. As we mentioned previously, Atom itself is a very basic core of functionality that ships with a number of useful packages that add new features like the Tree View and the Settings View. In fact, there are more than 80 packages that comprise all of the functionality that is available in Atom by default. For example, the Welcome screen that you see when you first start Atom, the spell checker, the themes and the Fuzzy Finder are all packages that are separately maintained and all use the same APIs that you have access to, as we'll see in great detail in Hacking Atom. This means that packages can be incredibly powerful and can change everything from the very look and feel of the entire interface to the basic operation of even core functionality. In order to install a new package, you can use the Install tab in the now familiar Settings View. Open up the Settings View using Cmd+,Ctrl+,, click on the \"Install\" tab and type your search query into the box under Install Packages. The packages listed here have been published to https://atom.io/packages which is the official registry for Atom packages. Searching on the Settings View will go to the Atom package registry and pull in anything that matches your search terms.  All of the packages will come up with an \"Install\" button. Clicking that will download the package and install it. Your editor will now have the functionality that the package provides.  Package Settings Once a package is installed in Atom, it will show up in the Settings View under the \"Packages\" tab, along with all the preinstalled packages that come with Atom. To filter the list in order to find one, you can type into search box directly under the \"Installed Packages\" heading.  Clicking on the \"Settings\" button for a package will give you the settings screen for that package specifically. Here you have the option of changing some of the default variables for the package, seeing what all the command keybindings are, disabling the package temporarily, looking at the source code, seeing the current version of the package, reporting issues and uninstalling the package. If a new version of any of your packages is released, Atom will automatically detect it and you can upgrade the package from either this screen or from the \"Updates\" tab. This helps you easily keep all your installed packages up to date.  Atom Themes You can also find and install new themes for Atom from the Settings View. These can be either UI themes or syntax themes and you can search for them from the \"Install\" tab, just like searching for new packages. Make sure to press the \"Themes\" toggle next to the search box.  Clicking on the theme title will take you to a profile page for the theme on atom.io, which often has a screenshot of the theme. This way you can see what it looks like before installing it. Clicking on \"Install\" will install the theme and make it available in the Theme dropdowns as we saw in Changing the Theme.   Command Line You can also install packages or themes from the command line using apm.  Check that you have apm installed by running the following command in your terminal:  apm help install  You should see a message print out with details about the apm install command. If you do not, see the Installing Atom section for instructions on how to install the atom and apm commands for your system.  You can also install packages by using the apm install command:   apm install &lt;package_name&gt; to install the latest version.  apm install &lt;package_name&gt;@&lt;package_version&gt; to install a specific version.  For example apm install emmet@0.1.5 installs the 0.1.5 release of the Emmet package. You can also use apm to find new packages to install. If you run apm search, you can search the package registry for a search term.  apm search coffee Search Results For 'coffee' (29) ├── build-coffee Atom Build provider for coffee, compiles CoffeeScript (1160 downloads, 2 stars) ├── scallahan-coffee-syntax A coffee inspired theme from the guys over at S.CALLAHAN (183 downloads, 0 stars) ├── coffee-paste Copy/Paste As : Js ➤ Coffee / Coffee ➤ Js (902 downloads, 4 stars) ├── atom-coffee-repl Coffee REPL for Atom Editor (894 downloads, 2 stars) ├── coffee-navigator Code navigation panel for Coffee Script (3493 downloads, 22 stars) ... ├── language-iced-coffeescript Iced coffeescript for atom (202 downloads, 1 star) └── slontech-syntax Dark theme for web developers ( HTML, CSS/LESS, PHP, MYSQL, javascript, AJAX, coffee, JSON ) (2018 downloads, 3 stars)  You can use apm view to see more information about a specific package.  apm view build-coffee build-coffee ├── 0.6.4 ├── https://github.com/idleberg/atom-build-coffee ├── Atom Build provider for coffee, compiles CoffeeScript ├── 1152 downloads └── 2 stars &gt; Run `apm install build-coffee` to install this package. ",
          "excerpt": " Atom Packages First we'll start with the Atom package system. As we mentioned previously, Atom itself is a very basic core of functionality …"
        },
      
    
      
        
        {
          "title": "Grammar",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/grammar/",
          "body": " Grammar The \"grammar\" of a file is what language Atom has associated with that file. Types of grammars would include \"Java\" or \"GitHub-Flavored Markdown\". We looked at this a bit when we created some snippets in Snippets. When you load a file, Atom does a little work to try to figure out what type of file it is. Largely this is accomplished by looking at its file extension (.md is generally a Markdown file, etc), though sometimes it has to inspect the content a bit to figure it out. When you open a file and Atom can't determine a grammar for the file, it will default to \"Plain Text\", which is the simplest one. If it does default to \"Plain Text\", picks the wrong grammar for the file, or if for any reason you wish to change the selected grammar, you can pull up the Grammar Selector with Ctrl+Shift+L.  When the grammar of a file is changed, Atom will remember that for the current session. The Grammar Selector functionality is implemented in the grammar-selector package.",
          "excerpt": " Grammar The \"grammar\" of a file is what language Atom has associated with that file. Types of grammars would include \"Java\" or \"GitHub-…"
        },
      
    
      
        
        {
          "title": "Pending Pane Items",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/pending-pane-items/",
          "body": " Pending Pane Items \"Pending Pane Items\" were formerly referred to as \"Preview Tabs\" When you open a new file by single-clicking in the Tree View, it will open in a new tab with an italic title. This indicates that the file is \"pending\". When a file is pending, it will be replaced by the next pending file that is opened. This allows you to click through a bunch of files to find something without having to go back and close them all. You can confirm a pending file by doing any of the following:  Double-clicking the tab of the file Double-clicking the file in the tree view Editing the contents of the file Saving the file  You can also open a file already confirmed by double-clicking it in the tree view instead of single-clicking it.  Disabling Pending Pane Items  If you would prefer to not have files open in pending form, you can disable this behavior by unchecking \"Allow Pending Pane Items\" in the Core Settings section of the Settings View. With pending pane items disabled, single-clicking a file in the Tree View will select the file but not open it. You will have to double-click the file to open it.",
          "excerpt": " Pending Pane Items \"Pending Pane Items\" were formerly referred to as \"Preview Tabs\" When you open a new file by single-clicking in the T…"
        },
      
    
      
        
        {
          "title": "Folding",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/folding/",
          "body": " Folding If you want to see an overview of the structure of the code file you're working on, folding can be a helpful tool. Folding hides blocks of code such as functions or looping blocks in order to simplify what is on your screen. You can fold blocks of code by clicking the arrows that appear when you hover your mouse cursor over the gutter. You can also fold and unfold from the keyboard with the Alt+Cmd+[Alt+Ctrl+[ and Alt+Cmd+]Alt+Ctrl+] keybindings.  To fold everything, use Alt+Cmd+Shift+[Alt+Ctrl+Shift+[ and to unfold everything use Alt+Cmd+Shift+]Alt+Ctrl+Shift+]. You can also fold at a specific indentation level with Cmd+KCtrl+K Cmd+0-9Ctrl+0-9 where the number is the indentation depth. Finally, you can fold arbitrary sections of your code or text by making a selection and then typing Alt+Cmd+Ctrl+FAlt+Ctrl+F or choosing \"Fold Selection\" in the Command Palette.",
          "excerpt": " Folding If you want to see an overview of the structure of the code file you're working on, folding can be a helpful tool. Folding hides blo…"
        },
      
    
      
        
        {
          "title": "Panes",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/panes/",
          "body": " Panes You can split any editor pane horizontally or vertically by using Cmd+KCtrl+K Up/Down/Left/Right where the direction key is the direction to split the pane. Once you have a split pane, you can switch between them with Cmd+KCtrl+K Cmd+Up/Down/Left/RightCtrl+Up/Down/Left/Right where the direction is the direction the focus should move to.  Each pane has its own \"pane items\", which are represented by tabs. You can move the files from pane to pane by dragging them with the mouse and dropping them in the pane you want that file to be in.  If you don't like using tabs, you don't have to. You can disable the tabs package and each pane will still support multiple pane items. You just won't have tabs to use to click between them.  To close a pane, you can close all pane items with Cmd+WCtrl+W. You can configure whether panes auto-close when empty in the Settings View with the \"Remove Empty Panes\" setting under Core Settings.",
          "excerpt": " Panes You can split any editor pane horizontally or vertically by using Cmd+KCtrl+K Up/Down/Left/Right where the direction key is the direct…"
        },
      
    
      
        
        {
          "title": "GitHub package",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/github-package/",
          "body": " GitHub package The github package brings Git and GitHub integration right inside Atom.  Initialize Clone Branch Stage Discard Commit Amend and undo Publish and push Fetch and pull Resolve conflicts Create a Pull Request View Pull Requests Checkout a Pull Request Open any Issue or Pull Request View Pull Request review comments Navigate Pull Request review comments Respond to a Pull Request review comment  Most of the functionality lives within the Git and GitHub dock items.  There are different ways to access them, probably the most common way is through their keybindings:  Open the Git panel: Ctrl+9  Open the GitHub panel: Ctrl+8   Another way is from the menu: Packages -&gt; GitHub -&gt; Toggle Git Tab and Toggle GitHub Tab Or you can also toggle the Git panel from the Status Bar by clicking on the changed files icon:    Initialize repositories In case a project doesn't have a Git repository yet, you can create one from the Git panel.   Clone repositories To clone a repository, open the GitHub panel while you have no project folders open in Atom and click \"Clone an existing GitHub repository\". In the dialog, paste the URL of a repository and click \"Clone\". The new project will be added to the Tree View.   Alternately, run the GitHub: Clone command to open the Clone dialog any time.  Branch To open the branch tooltip, click the branch icon in the Status Bar. From there you can create or switch branches.   Stage After making some changes, stage anything you want to be part of the next commit. Choose between staging...   All changes: Click the \"Stage All\" button in the \"Unstaged Changes\" bar.  Files: Double-click a file or select a file and press Enter.  Hunk: Click on the \"Stage Hunk\" button or select a hunk and press Enter.  Lines: Click on a line (or drag on multiple lines) to select, then click on the \"Stage Selection\" button. Or use the Cmd-/Cmd-/ key to toggle from hunk mode to line mode, then press Cmd-EnterCtrl-Enter to stage just a single line.  Use the Cmd-LeftCtrl-Left or Cmd-RightCtrl-Right arrow key to switch between file list and the diff view. Unstaging can be done in the same way.   Discard changes If you no longer want to keep some changes, you can discard them. It's similar to staging, but accessible behind a context menu.   All changes: Click the ... menu in the \"Unstaged Changes\" header and choose \"Discard All Changes\".  Files: Right-click a file (or multiple) and choose \"Discard Changes\".  Hunk: Click on the trash icon in the top bar of a hunk.  Lines: Right-click on a line (or multiple) and choose \"Discard Selection\".    Commit Preview To double check all changes that are going into your next commit, click the \"See All Staged Changes\" button above the commit message box. It lets you see all of your staged changes in a single pane. This \"commit preview\" can also serve as an inspiration for writing the commit message.   Commit Once you've staged your changes, enter a commit message. Feel free to describe the commit in more detail after leaving an empty line. Finalize by clicking the Commit button. If you need more space, click the expand icon at the bottom right. It will open a commit editor in the center.  To add multiple co-authors to a commit, click the \"👤➕\" icon in the bottom left corner of the commit message editor. Now you can search by name, email or GitHub username to give credit to a co-author.   Amend and undo In case you forgot to commit a change and would like to add it to your previous commit, right-click on the last commit, then choose \"Amend\" from the context menu.  If you want to edit the commit message of your last commit, or add/remove changes, click on the \"Undo\" button. It will roll back to the state just before you clicked on the commit button.   View commits Once you've made some commits, click on a commit message in the recent commit list to see the full diff and commit message associated with each:   Publish and push When you're ready to share your changes with your team members, click the Publish button in the Status Bar. It will push your local branch to the remote repository. After making more commits, you can Push them as well from the Status Bar.   Fetch and pull From time to time it's a good idea to click on the Fetch button to see if any other team member pushed changes. If so, click on Pull to merge the changes into your local branch.  If you prefer to rebase when pulling, you can configure Git to make it the default behavior: git config --global --bool pull.rebase true  Learn more about merge vs. rebase.  Resolve conflicts Sometimes there can be conflicts when trying to merge. Files that have merge conflicts will show up in the \"Merge Conflicts\" list. Click on a file to open the editor. There you can resolve the conflict by picking a version or make further edits. Once done, stage the file and commit.   Create a Pull Request When your changes are ready to be reviewed by your team members, open the \"GitHub\" panel Ctrl+8 and click on Open new pull request. It will open the browser where you can continue creating a pull request. If commits haven't been pushed or the branch isn't published yet, the GitHub package will do that automatically for you.   View Pull Requests Once the pull request is created, it will appear under Current pull request at the top of the panel. Underneath is a list of Open pull requests. It lets you quickly find a pull request by avatar, title or PR number. It also lets you keep an eye on the CI status. Clicking on a pull request in the list opens a center pane with more details, the timeline and conversations.   Open any Issue or Pull Request You can open issues or pull requests from any repo on GitHub. To do so, run the GitHub: Open Issue Or Pull Request command and paste the URL from an issue or pull request. Then press the Open Issue or Pull Request button and it will open a center pane. This lets you keep an issue or pull request as a reference, when working in another repo.   Checkout a Pull Request To test a pull request locally, open it in the workspace center by clicking on the pull request in the \"open pull requests\" list from the GitHub tab, then click on the Checkout button. It will automatically create a local branch and pull all the changes. If you would like to contribute to that pull request, start making changes, commit and push. Your contribution is now part of that pull request.   View Pull Request review comments To view review comments on a Pull Request, open the Reviews Tab from the See Reviews button from the footer of a Pull Request Pane. Alternatively, if the pull request has already been checked out, Reviews Tab can also be open from the same button on GitHub Tab.   Navigate Pull Request review comments You can see all the review summaries and comments of a pull request in the Reviews Tab. The comment section has a progress bar to help you keep track of how close are you to finish addressing the Pull Request comments (i.e. marking all comment threads on a Pull Request as \"resolved\"). Comment threads are greyed out after they have been resolved.  After the pull request branch has been checked out, you can click Jump To File to open the commented on file and make changes as per the review comment right in the editor. If you would like to get the full context of the review comment, click Open Diff to open the diff view with line highlighting.  Conversely, in-editor comments are indicated by the comment icon in the gutter. Clicking the icon, either from within the editor or the diff view, will take you back to the Reviews Tab.   Respond to a Pull Request review comment To respond to a Pull Request review comment, type your message and click Comment; a single line comment will be created in the same thread as the comment you responded to. After addressing a Pull Request review comment, click Resolve conversation to mark the whole thread as \"resolved\". The progress bar in the \"Comments\" section will update accordingly. ",
          "excerpt": " GitHub package The github package brings Git and GitHub integration right inside Atom.  Initialize Clone Branch Stage Discard Commit Amend a…"
        },
      
    
      
        
        {
          "title": "Editing and Deleting Text",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/editing-and-deleting-text/",
          "body": " Editing and Deleting Text So far we've looked at a number of ways to move around and select regions of a file, so now let's actually change some of that text. Obviously you can type in order to insert characters, but there are also a number of ways to delete and manipulate text that could come in handy.  Basic Manipulation There are a handful of cool keybindings for basic text manipulation that might come in handy. These range from moving around lines of text and duplicating lines to changing the case.   Cmd+JCtrl+J - Join the next line to the end of the current line  Cmd+Ctrl+Up/DownCtrl+Up/Down - Move the current line up or down  Cmd+Shift+DCtrl+Shift+D - Duplicate the current line  Cmd+K Cmd+UCtrl+K Ctrl+U - Upper case the current word  Cmd+K Cmd+LCtrl+K Ctrl+L - Lower case the current word     Ctrl+T - Transpose characters. This swaps the two characters on either side of the cursor.   Atom also has built in functionality to re-flow a paragraph to hard-wrap at a given maximum line length. You can format the current selection to have lines no longer than 80 (or whatever number editor.preferredLineLength is set to) characters using Alt+Cmd+QAlt+Ctrl+Q. If nothing is selected, the current paragraph will be reflowed.  Deleting and Cutting You can also delete or cut text out of your buffer with some shortcuts. Be ruthless.   Ctrl+Shift+K - Delete current line  Alt+Backspace or Alt+HCtrl+Backspace - Delete to beginning of word  Alt+Delete or Alt+DCtrl+Delete - Delete to end of word     Cmd+Delete - Delete to end of line  Ctrl+K - Cut to end of line  Cmd+Backspace - Delete to beginning of line    Multiple Cursors and Selections One of the cool things that Atom can do out of the box is support multiple cursors. This can be incredibly helpful in manipulating long lists of text.   Cmd+ClickCtrl+Click - Add a new cursor at the clicked location  Ctrl+Shift+Up/DownAlt+Ctrl+Up/DownAlt+Shift+Up/Down - Add another cursor above/below the current cursor  Cmd+DCtrl+D - Select the next word in the document that is the same as the currently selected word  Cmd+Ctrl+GAlt+F3 - Select all words in the document that are the same as the currently selected word     Cmd+Shift+L - Convert a multi-line selection into multiple cursors   Using these commands you can place cursors in multiple places in your document and effectively execute the same commands in multiple places at once.  This can be incredibly helpful in doing many type of repetitive tasks such as renaming variables or changing the format of some text. You can use this with almost any plugin or command - for example, changing case and moving or duplicating lines. You can also use the mouse to select text with the CmdCtrl key pressed down to select multiple regions of your text simultaneously.  Whitespace Atom comes with several commands to help you manage the whitespace in your document. One very useful pair of commands converts leading spaces into tabs and converts leading tabs into spaces. If you're working with a document that has mixed whitespace, these commands are great for helping to normalize the file. There are no keybindings for the whitespace commands, so you will have to search your command palette for \"Convert Spaces to Tabs\" (or vice versa) to run one of these commands. The whitespace commands are implemented in the atom/whitespace package. The settings for the whitespace commands are managed on the page for the whitespace package.   The \"Remove Trailing Whitespace\" option is on by default. This means that every time you save any file opened in Atom, it will strip all trailing whitespace from the file. If you want to disable this, go to the whitespace package in your settings panel and uncheck that option.  Atom will also by default ensure that your file has a trailing newline. You can also disable this option on that screen.  Brackets Atom ships with intelligent and easy to use bracket handling. It will by default highlight [], (), and {} style brackets when your cursor is over them. It will also highlight matching XML and HTML tags. Atom will also automatically autocomplete [], (), and {}, \"\", '', “”, ‘’, «», ‹›, and backticks when you type the leading one. If you have a selection and you type any of these opening brackets or quotes, Atom will enclose the selection with the opening and closing brackets or quotes. There are a few other interesting bracket related commands that you can use.   Ctrl+M - Jump to the bracket matching the one adjacent to the cursor. It jumps to the nearest enclosing bracket when there's no adjacent bracket.  Cmd+Ctrl+MAlt+Ctrl+, - Select all the text inside the current brackets  Alt+Cmd+.Alt+Ctrl+. - Close the current XML/HTML tag  The brackets functionality is implemented in the bracket-matcher package. Like all of these packages, to change defaults related to bracket handling, or to disable it entirely, you can navigate to this package in the Settings view.  Encoding Atom also ships with some basic file encoding support should you find yourself working with non-UTF-8 encoded files, or should you wish to create one.   Ctrl+Shift+UAlt+U - Toggle menu to change file encoding  If you pull up the file encoding dialog, you can choose an alternate file encoding to save your file in. When you open a file, Atom will try to auto-detect the encoding. If Atom can't identify the encoding, the encoding will default to UTF-8, which is also the default encoding for new files.  If you pull up the encoding menu and change the active encoding to something else, the file will be written out in that encoding the next time you save the file. The encoding selector is implemented in the encoding-selector package.",
          "excerpt": " Editing and Deleting Text So far we've looked at a number of ways to move around and select regions of a file, so now let's actually change …"
        },
      
    
      
        
        {
          "title": "Writing in Atom",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/writing-in-atom/",
          "body": " Writing in Atom Though it is probably most common to use Atom to write software code, Atom can also be used to write prose quite effectively. Most often this is done in some sort of markup language such as Asciidoc or Markdown (in which this manual is written). Here we'll quickly cover a few of the tools Atom provides for helping you write prose. In these docs, we'll concentrate on writing in Markdown; however, other prose markup languages like Asciidoc have packages that provide similar functionality.  Spell Checking If you're working in text (which includes plain text files, GitHub markdown, and Git commit messages by default), Atom will automatically try to check your spelling. Any misspelled words will be highlighted (by default with a dashed red line beneath the word), and you can pull up a menu of possible corrections by hitting Cmd+Shift+;Ctrl+Shift+; (or by choosing \"Correct Spelling\" from the right-click context menu or from the Command Palette).  To add more types of files to the list of what Atom will try to spell check, go to the Spell Check package settings in your Settings view and add any grammars you want to spell check. The default grammars to spell check are text.plain, source.gfm, text.git-commit, source.asciidoc, source.rst, and text.restructuredtext but you can add other grammars if you wish to check those types of files too. The spell checking is implemented in the spell-check package.  Previews When writing prose in a markup language, it's often very useful to get an idea of what the content will look like when it's rendered. Atom ships with a package for previewing Markdown by default.   Ctrl+Shift+M - Will toggle Preview mode for Markdown.   As you edit the text, the preview will also update automatically. This makes it fairly easy to check your syntax as you type. You can also copy the rendered HTML from the preview pane into your system clipboard when the preview is focused and you press Cmd+CCtrl+CCtrl+Ins or if you right-click in the preview pane and choose \"Copy as HTML\". Markdown preview is implemented in the markdown-preview package.  Snippets There are also a number of great snippets available for writing Markdown quickly. If you type img and hit tab you get a Markdown-formatted image embed code like ![](). If you type table and hit tab you get a nice example table to fill out. | Header One | Header Two | | :------------- | :------------- | | Item One | Item Two |  Although there are only a handful of Markdown snippets (b for bold, i for italic, code for a code block, etc), they save you from having to look up the more obscure syntaxes. Again, you can easily see a list of all available snippets for the type of file you're currently in by choosing \"Snippets: Available\" in the Command Palette.",
          "excerpt": " Writing in Atom Though it is probably most common to use Atom to write software code, Atom can also be used to write prose quite effectively…"
        },
      
    
      
        
        {
          "title": "Snippets",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/snippets/",
          "body": " Snippets Snippets are an incredibly powerful way to quickly generate commonly needed code syntax from a shortcut. The idea is that you can type something like habtm and then press the Tab key and it will expand into has_and_belongs_to_many. Many Core and Community packages come bundled with their own snippets that are specific to it. For example, the language-html package that provides support for HTML syntax highlighting and grammar comes with dozens of snippets to create many of the various HTML tags you might want to use. If you create a new HTML file in Atom, you can type html and then press Tab and it will expand to: &lt;!DOCTYPE html&gt; &lt;html lang=\"en\" dir=\"ltr\"&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;/html&gt;  It will also position the cursor in the lang attribute value so you can edit it if necessary. Many snippets have multiple focus points that you can move through with the Tab key as well - for instance, in the case of this HTML snippet, after the cursor is placed in the lang attribute value, you can continue pressing Tab and the cursor will move to the dir attribute value, then to the middle of the title tag, then finally to the middle of the body tag. To see all the available snippets for the file type that you currently have open, choose \"Snippets: Available\" in the Command Palette.  You can also use fuzzy search to filter this list down by typing in the selection box. Selecting one of them will execute the snippet where your cursor is (or multiple cursors are).  Creating Your Own Snippets So that's pretty cool, but what if there is something the language package didn't include or something that is custom to the code you write? Luckily it's incredibly easy to add your own snippets. There is a text file in your ~/.atom%USERPROFILE%\\.atom directory called snippets.cson that contains all your custom snippets that are loaded when you launch Atom. You can also easily open up that file by selecting the Atom &gt; SnippetsEdit &gt; SnippetsFile &gt; Snippets menu.  Snippet Format So let's look at how to write a snippet. The basic snippet format looks like this: '.source.js': 'console.log': 'prefix': 'log' 'body': 'console.log(${1:\"crash\"});$2'  The leftmost keys are the selectors where these snippets should be active. The easiest way to determine what this should be is to go to the language package of the language you want to add a snippet for and look for the \"Scope\" string. For example, if we wanted to add a snippet that would work for Java files, we would look up the language-java package in our Settings view and we can see the Scope is source.java. Then the top level snippet key would be that prepended by a period (like a CSS class selector would do).  The next level of keys are the snippet names. These are used for describing the snippet in a more readable way in the snippet menu. You can name them whatever you want. Under each snippet name is a prefix that should trigger the snippet and a body to insert when the snippet is triggered. Each $ followed by a number is a tab stop. Tab stops are cycled through by pressing Tab once a snippet has been triggered. Tab stops with the same number will create multiple cursors. The above example adds a log snippet to JavaScript files that would expand to: console.log(\"crash\");  The string \"crash\" would be initially selected and pressing tab again would place the cursor after the ;  Snippet keys, unlike CSS selectors, can only be repeated once per level. If there are duplicate keys at the same level, then only the last one will be read. See Configuring with CSON for more information.   Multi-line Snippet Body You can also use CoffeeScript multi-line syntax using \"\"\" for larger templates: '.source.js': 'if, else if, else': 'prefix': 'ieie' 'body': \"\"\" if (${1:true}) { $2 } else if (${3:false}) { $4 } else { $5 } \"\"\"  As you might expect, there is a snippet to create snippets. If you open up a snippets file and type snip and then press Tab, you will get the following text inserted: '.source.js': 'Snippet Name': 'prefix': 'hello' 'body': 'Hello World!'   just fill that bad boy out and you have yourself a snippet. As soon as you save the file, Atom should reload the snippets and you will immediately be able to try it out.  Multiple Snippets per Source You can see below the format for including multiple snippets for the same scope in your snippets.cson file. Just include the snippet name, prefix, and body keys for additional snippets inside the scope key: '.source.gfm': 'Hello World': 'prefix': 'hewo' 'body': 'Hello World!' 'Github Hello': 'prefix': 'gihe' 'body': 'Octocat says Hi!' 'Octocat Image Link': 'prefix': 'octopic' 'body': '![GitHub Octocat](https://assets-cdn.github.com/images/modules/logos_page/Octocat.png)'  Again, see Configuring with CSON for more information on CSON key structure and non-repeatability.  More Info The snippets functionality is implemented in the snippets package. For more examples, see the snippets in the language-html and language-javascript packages.",
          "excerpt": " Snippets Snippets are an incredibly powerful way to quickly generate commonly needed code syntax from a shortcut. The idea is that you can t…"
        },
      
    
      
        
        {
          "title": "Find and Replace",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/find-and-replace/",
          "body": " Find and Replace Finding and replacing text in your file or project is quick and easy in Atom.   Cmd+FCtrl+F - Search within a buffer  Cmd+Shift+FCtrl+Shift+F - Search the entire project  If you launch either of those commands, you'll be greeted with the Find and Replace panel at the bottom of your screen.  To search within your current file you can press Cmd+FCtrl+F, type in a search string and press Enter (or Cmd+GF3 or the \"Find Next\" button) multiple times to cycle through all the matches in that file. Alt+Enter will find all occurences of the search string. The Find and Replace panel also contains buttons for toggling case sensitivity, performing regular expression matching, scoping the search to selections, and performing whole word search. If you type a string in the replacement text box, you can replace matches with a different string. For example, if you wanted to replace every instance of the string \"Scott\" with the string \"Dragon\", you would enter those values in the two text boxes and press the \"Replace All\" button to perform the replacements.  Note: Atom uses JavaScript regular expressions to perform regular expression searches. When doing a regular expression search, the replacement syntax to refer back to search groups is $1, $2, … $&amp;. Refer to JavaScript's guide to regular expressions to learn more about regular expression syntax you can use in Atom.  You can also find and replace throughout your entire project if you invoke the panel with Cmd+Shift+FCtrl+Shift+F.  This is a great way to find out where in your project a function is called, an anchor is linked to or a specific misspelling is located. Click on the matching line to jump to that location in that file. You can limit a search to a subset of the files in your project by entering a glob pattern into the \"File/Directory pattern\" text box. For example, the pattern src/*.js would restrict the search to JavaScript files in the src directory. The \"globstar\" pattern (**) can be used to match arbitrarily many subdirectories. For example, docs/**/*.md will match docs/a/foo.md, docs/a/b/foo.md, etc. You can enter multiple glob patterns separated by commas, which is useful for searching in multiple file types or subdirectories. When you have multiple project folders open, this feature can also be used to search in only one of those folders. For example, if you had the folders /path1/folder1 and /path2/folder2 open, you could enter a pattern starting with folder1 to search only in the first folder. Press Esc while focused on the Find and Replace panel to clear the pane from your workspace. The Find and Replace functionality is implemented in the find-and-replace package and uses the scandal Node module to do the actual searching.",
          "excerpt": " Find and Replace Finding and replacing text in your file or project is quick and easy in Atom.   Cmd+FCtrl+F - Search within a buffer  Cmd+S…"
        },
      
    
      
        
        {
          "title": "Atom Selections",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/atom-selections/",
          "body": " Atom Selections Text selections in Atom support a number of actions, such as scoping deletion, indentation and search actions, and marking text for actions such as quoting and bracketing. Selections mirror many of the movement commands. They're actually exactly the same keybindings as the movement commands, but with a Shift key added in.   Shift+Up or Ctrl+Shift+P - Select up  Shift+Down or Ctrl+Shift+N - Select down  Shift+Left or Ctrl+Shift+B - Select previous character  Shift+Right or Ctrl+Shift+F - Select next character  Alt+Shift+LeftCtrl+Shift+Left or Alt+Shift+B - Select to beginning of word  Alt+Shift+RightCtrl+Shift+Right or Alt+Shift+F - Select to end of word  Cmd+Shift+RightShift+End or Ctrl+Shift+E - Select to end of line  Cmd+Shift+LeftShift+Home or Ctrl+Shift+A - Select to first character of line  Cmd+Shift+UpCtrl+Shift+Home - Select to top of file  Cmd+Shift+DownCtrl+Shift+End - Select to bottom of file  In addition to the cursor movement selection commands, there are also a few commands that help with selecting specific areas of content.   Cmd+ACtrl+A - Select the entire contents of the file  Cmd+LCtrl+L - Select the entire line     Ctrl+Shift+W - Select the current word  ",
          "excerpt": " Atom Selections Text selections in Atom support a number of actions, such as scoping deletion, indentation and search actions, and marking t…"
        },
      
    
      
        
        {
          "title": "Summary",
          "category": "",
          "category_url": "",
          "url": "/using-atom/sections/summary/",
          "body": " Summary At this point you should be something of an Atom master user. You should be able to navigate and manipulate your text and files like a wizard. You should also be able to customize Atom backwards and forwards to make it look and act just how you want it to. In the next chapter, we're going to kick it up a notch: we'll take a look at changing and adding new functionality to the core of Atom itself. We're going to start creating packages for Atom. If you can dream it, you can build it.",
          "excerpt": " Summary At this point you should be something of an Atom master user. You should be able to navigate and manipulate your text and files like…"
        },
      
    
      
        
        {
          "title": "Glossary",
          "category": "",
          "category_url": "",
          "url": "/resources/sections/glossary/",
          "body": " Glossary Below is a list of some useful terms we use with regard to Atom.  Buffer A buffer is the text content of a file in Atom. It's basically the same as a file for most descriptions, but it's the version Atom has in memory. For instance, you can change the text of a buffer and it isn't written to its associated file until you save it.  Command A command is a bit of functionality in Atom that can be triggered by the user either through a keybinding or a menu item.  Dock Docks are collapsible pane containers that attach to the left, right, and bottom sides of the Atom window. Examples:  Tree View Git GitHub   Key Combination A key combination is some combination or sequence of keys that are pressed to perform a task. Examples:  A Ctrl+Enter  Ctrl+K Right    Key Sequence A key sequence is a special case of a key combination. It is a key combination that consists of keys that must be pressed and released in sequence. Ctrl+K Down is a key sequence. Alt+S is not a key sequence because it is two keys that are pressed and released together rather than in succession.  Keybinding A keybinding is the mapping of a key combination, such as Ctrl+Enter to an Atom command.  Keymap A keymap is a collection of keybindings. It can also refer to a file or files containing keybindings for an Atom package or Atom itself.  Package An Atom plugin. There is a bunch more information in the section on Atom Packages.  Pane A pane is a visual section of the editor space. Each pane can hold multiple pane items. There is always at least one pane in each Atom window.  Pane Container A section of the Atom UI that can contain multiple panes.  Pane Item Some item, often an editor, that is displayed within a pane. In the default configuration of Atom, pane items are represented by tabs at the top of each pane.  Note: The reason why we don't call them \"tabs\" is because you can disable the tabs package and then there aren't any tabs. For a similar reason, we don't call them files because some things can be shown in a pane that aren't files, like the Settings View.   Panel A piece of the Atom UI that is outside the editor space. Examples:  Find and Replace Keybinding Resolver ",
          "excerpt": " Glossary Below is a list of some useful terms we use with regard to Atom.  Buffer A buffer is the text content of a file in Atom. It's basic…"
        },
      
    
      
        
        {
          "title": "Creating a Fork of a Core Package in atom/atom",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/creating-a-fork-of-a-core-package-in-atom-atom/",
          "body": " Creating a Fork of a Core Package in atom/atom Several of Atom's core packages are maintained in the packages directory of the atom/atom repository. If you would like to use one of these packages as a starting point for your own package, please follow the steps below.  Tip: In most cases, we recommend generating a brand new package or a brand new theme as the starting point for your creation. The guide below applies only to situations where you want to create a package that closely resembles a core Atom package.   Creating Your New Package For the sake of this guide, let's assume that you want to start with the current code in the one-light-ui package, make some customizations to it, and publish your new package under the name \"one-light-ui-plus\".  Download the current contents of the atom/atom repository as a zip file Unzip the file to a temporary location (for example /tmp/atomC:\\TEMP\\atom)  Copy the contents of the desired package into a working directory for your fork  cp -R /tmp/atom/packages/one-light-ui ~/src/one-light-ui-plusxcopy C:\\TEMP\\atom\\packages\\one-light-ui C:\\src\\one-light-ui-plus /E /H /K    Create a local repository and commit the initial contents  cd ~/src/one-light-ui-plus git init git commit -am \"Import core Atom package\"   Update the name property in package.json to give your package a unique name Make the other customizations that you have in mind  Commit your changes  git commit -am \"Apply initial customizations\"   Create a public repository on github.com for your new package Follow the instructions in the github.com UI to push your code to your new online repository Follow the steps in the Publishing guide to publish your new package   Merging Upstream Changes into Your Package The code in the original package will continue to evolve over time, either to fix bugs or to add new enhancements. You may want to incorporate some or all of those updates into your package. To do so, you can follow these steps for merging upstream changes into your package.",
          "excerpt": " Creating a Fork of a Core Package in atom/atom Several of Atom's core packages are maintained in the packages directory of the atom/atom rep…"
        },
      
    
      
        
        {
          "title": "Maintaining a Fork of a Core Package in atom/atom",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/maintaining-a-fork-of-a-core-package-in-atom-atom/",
          "body": " Maintaining a Fork of a Core Package in atom/atom Originally, each of Atom's core packages resided in a separate repository. In 2018, in an effort to streamline the development of Atom by reducing overhead, the Atom team consolidated many core Atom packages into the atom/atom repository. For example, the one-light-ui package was originally maintained in the atom/one-light-ui repository, but it is now maintained in the packages/one-light-ui directory in the atom/atom repository. If you forked one of the core packages before it was moved into the atom/atom repository, and you want to continue merging upstream changes into your fork, please follow the steps below.  Step-by-step guide For the sake of this guide, let's assume that you forked the atom/one-light-ui repository, renamed your fork to one-light-ui-plus, and made some customizations.  Add atom/atom as a Remote Navigate to your local clone of your fork:  cd path/to/your/fork  Add the atom/atom repository as a git remote:  git remote add upstream https://github.com/atom/atom.git   Get the Latest Changes for the Core Package  Tip: Follow these steps each time you want to merge upstream changes into your fork.  Fetch the latest changes from the atom/atom repository:  git fetch upstream  Identify recent changes to the core package. For example, if you're maintaining a fork of the one-light-ui package, then you'll want to identify recent changes in the packages/one-light-ui directory:  git log upstream/master -- packages/one-light-ui 8ac9919a0 Bump up border size (Hugh Baht, 17 minutes ago) 3bf4d226e Remove obsolete build status link in one-light-ui README (Jason Rudolph, 3 days ago) 3edf64ad0 Merge pull request #42 from atom/sm-select-list (simurai, 2 weeks ago) ...  Look through the log and identify the commits that you want to merge into your fork.  Merge Upstream Changes into Your Fork For each commit that you want to bring into your fork, use git format-patch in conjunction with git am. For example, to merge commit 8ac9919a0 into your fork:  git format-patch -1 --stdout 8ac9919a0 | git am -p3  Repeat this step for each commit that you want to merge into your fork.",
          "excerpt": " Maintaining a Fork of a Core Package in atom/atom Originally, each of Atom's core packages resided in a separate repository. In 2018, in an …"
        },
      
    
      
        
        {
          "title": "The Init File",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/the-init-file/",
          "body": " The Init File When Atom finishes loading, it will evaluate init.coffee in your ~/.atom%USERPROFILE%\\.atom directory, giving you a chance to run CoffeeScript code to make customizations. Code in this file has full access to Atom's API. If customizations become extensive, consider creating a package, which we will cover in Package: Word Count. You can open the init.coffee file in an editor from the Atom &gt; Init ScriptFile &gt; Init ScriptEdit &gt; Init Script menu. This file can also be named init.js and contain JavaScript code. For example, if you have the Audio Beep configuration setting enabled, you could add the following code to your init.coffee file to have Atom greet you with an audio beep every time it loads: atom.beep()  Because init.coffee provides access to Atom's API, you can use it to implement useful commands without creating a new package or extending an existing one. Here's a command which uses the Selection API and Clipboard API to construct a Markdown link from the selected text and the clipboard contents as the URL: atom.commands.add 'atom-text-editor', 'markdown:paste-as-link', -&gt; return unless editor = atom.workspace.getActiveTextEditor() selection = editor.getLastSelection() clipboardText = atom.clipboard.read() selection.insertText(\"[#{selection.getText()}](#{clipboardText})\")  Now, reload Atom and use the Command Palette to execute the new command, \"Markdown: Paste As Link\", by name. And if you'd like to trigger the command via a keyboard shortcut, you can define a keybinding for the command.",
          "excerpt": " The Init File When Atom finishes loading, it will evaluate init.coffee in your ~/.atom%USERPROFILE%\\.atom directory, giving you a chance to…"
        },
      
    
      
        
        {
          "title": "Creating a Theme",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/creating-a-theme/",
          "body": " Creating a Theme Atom's interface is rendered using HTML, and it's styled via Less which is a superset of CSS. Don't worry if you haven't heard of Less before; it's just like CSS, but with a few handy extensions. Atom supports two types of themes: UI and Syntax. UI themes style elements such as the tree view, the tabs, drop-down lists, and the status bar. Syntax themes style the code, gutter and other elements inside the editor view.  Themes can be installed and changed from the Settings View which you can open by selecting the Atom &gt; PreferencesFile &gt; PreferencesEdit &gt; Preferences menu, and clicking the \"Install\" or \"Themes\" tab on the left hand navigation.  Getting Started Themes are pretty straightforward but it's still helpful to be familiar with a few things before starting:  Less is a superset of CSS, but it has some really handy features like variables. If you aren't familiar with its syntax, take a few minutes to familiarize yourself. You may also want to review the concept of a package.json (as covered in Atom package.json). This file is used to help distribute your theme to Atom users. Your theme's package.json must contain a theme key with a value of ui or syntax for Atom to recognize and load it as a theme. You can find existing themes to install or fork in the atom.io themes registry.   Creating a Syntax Theme Let's create your first theme. To get started, press Cmd+Shift+PCtrl+Shift+P and start typing \"Generate Syntax Theme\" to generate a new theme package. Select \"Generate Syntax Theme,\" and you'll be asked for the path where your theme will be created. Let's call ours motif-syntax.  Tip: Syntax themes should end with -syntax and UI themes should end with -ui.  Atom will display a new window, showing the motif-syntax theme, with a default set of folders and files created for us. If you open the Settings View with Cmd+,Ctrl+, and click the \"Themes\" tab on the left, you'll see the \"Motif\" theme listed in the \"Syntax Theme\" drop-down. Select it from the menu to activate it, now when you open an editor you should see your new motif-syntax theme in action. Open up styles/colors.less to change the various color variables which have already been defined. For example, turn @red into #f4c2c1. Then open styles/base.less and modify the various selectors that have already been defined. These selectors style different parts of code in the editor such as comments, strings and the line numbers in the gutter. As an example, let's make the .gutter background-color into @red. Reload Atom by pressing Alt+Cmd+Ctrl+LAlt+Ctrl+R to see the changes you made reflected in your Atom window. Pretty neat!  Tip: You can avoid reloading to see changes you make by opening an Atom window in Dev Mode. To open a Dev Mode Atom window run atom --dev . in the terminal, or use the View &gt; Developer &gt; Open in Dev Mode menu. When you edit your theme, changes will instantly be reflected!   Note: It's advised to not specify a font-family in your syntax theme because it will override the Font Family field in Atom's settings. If you still like to recommend a font that goes well with your theme, we suggest you do so in your README.   Creating a UI Theme To create a UI theme, do the following:  Fork the ui-theme-template  Clone the forked repository to the local filesystem Open a terminal in the forked theme's directory Open your new theme in a Dev Mode Atom window run atom --dev . in the terminal or use the View &gt; Developer &gt; Open in Dev Mode menu Change the name of the theme in the theme's package.json file Name your theme end with a -ui, for example super-white-ui  Run apm link --dev to symlink your repository to ~/.atom/dev/packages  Reload Atom using Alt+Cmd+Ctrl+LAlt+Ctrl+R  Enable the theme via the \"UI Theme\" drop-down in the \"Themes\" tab of the Settings View Make changes! Since you opened the theme in a Dev Mode window, changes will be instantly reflected in the editor without having to reload.   Tip: Because we used apm link --dev in the above instructions, if you break anything you can always close Atom and launch Atom normally to force Atom to the default theme. This allows you to continue working on your theme even if something goes catastrophically wrong.   Theme Variables UI themes must provide a ui-variables.less and Syntax themes a syntax-variables.less file. It contains predefined variables that packages use to make sure the look and feel matches. Here the variables with the default values:  ui-variables.less syntax-variables.less  These default values will be used as a fallback in case a theme doesn't define its own variables.  Use in Packages In any of your package's .less files, you can access the theme variables by importing the ui-variables or syntax-variables file from Atom. Your package should generally only specify structural styling, and these should come from the style guide. Your package shouldn't specify colors, padding sizes, or anything in absolute pixels. You should instead use the theme variables. If you follow this guideline, your package will look good out of the box with any theme! Here's an example .less file that a package can define using theme variables: @import \"ui-variables\"; .my-selector { background-color: @base-background-color; padding: @component-padding; }  @import \"syntax-variables\"; .my-selector { background-color: @syntax-background-color; }   Development workflow There are a few tools to help make theme development faster and easier.  Live Reload Reloading by pressing Alt+Cmd+Ctrl+LAlt+Ctrl+R after you make changes to your theme is less than ideal. Atom supports live updating of styles on Atom windows in Dev Mode. To launch a Dev Mode window:  Open your theme directory in a dev window by selecting the View &gt; Developer &gt; Open in Dev Mode menu item Or launch Atom from the terminal with atom --dev   If you'd like to reload all the styles at any time, you can use the shortcut Alt+Cmd+Ctrl+LAlt+Ctrl+R.  Developer Tools Atom is based on the Chrome browser, and supports Chrome's Developer Tools. You can open them by selecting the View &gt; Developer &gt; Toggle Developer Tools menu, or by using the Alt+Cmd+ICtrl+Shift+I shortcut. The dev tools allow you to inspect elements and take a look at their CSS properties.  Check out Google's extensive tutorial for a short introduction.  Atom Styleguide If you are creating an UI theme, you'll want a way to see how your theme changes affect all the components in the system. The Styleguide is a page that renders every component Atom supports. To open the Styleguide, open the command palette with Cmd+Shift+PCtrl+Shift+P and search for \"styleguide\", or use the shortcut Cmd+Ctrl+Shift+GCtrl+Shift+G.   Side by side Sometimes when creating a theme (or package) things can go wrong and the editor becomes un-usable. E.g. if the text and background have the same color or something gets pushed out of sight. To avoid having to open Atom in \"normal\" mode to fix the issue, it's advised to open two Atom windows. One for making changes and one in Dev Mode to see the changes getting applied.   Make changes on the left, see the changes getting applied in \"Dev Mode\" on the right.  Now if you mess up something, only the window in \"Dev Mode\" will be affected and you can easily correct the mistake in your \"normal\" window.  Publish your theme Once you're happy with your theme and would like to share it with other Atom users, it's time to publish it.  Follow the steps on the Publishing page. The example used is for the Word Count package, but publishing a theme works exactly the same.",
          "excerpt": " Creating a Theme Atom's interface is rendered using HTML, and it's styled via Less which is a superset of CSS. Don't worry if you haven't he…"
        },
      
    
      
        
        {
          "title": "Tools of the Trade",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/tools-of-the-trade/",
          "body": " Tools of the Trade To begin, there are a few things we'll assume you know, at least to some degree. Since all of Atom is implemented using web technologies, we have to assume you know web technologies such as JavaScript and CSS. Specifically, we'll be using Less, which is a preprocessor for CSS. While much of Atom has been converted to JavaScript, a lot of older code has been left implemented in CoffeeScript because changing it would have been too risky. Additionally, Atom's default configuration language is CSON, which is based on CoffeeScript. If you don't know CoffeeScript, but you are familiar with JavaScript, you shouldn't have too much trouble. Here is an example of some simple CoffeeScript code: MyPackageView = require './my-package-view' module.exports = myPackageView: null activate: (state) -&gt; @myPackageView = new MyPackageView(state.myPackageViewState) deactivate: -&gt; @myPackageView.destroy() serialize: -&gt; myPackageViewState: @myPackageView.serialize()  We'll go over examples like this in a bit, but this is what the language looks like. Just about everything you can do with CoffeeScript in Atom is also doable in JavaScript. You can brush up on CoffeeScript at coffeescript.org. Less is an even simpler transition from CSS. It adds a number of useful things like variables and functions to CSS. You can learn about Less at lesscss.org. Our usage of Less won't get too complex in this book however, so as long as you know basic CSS you should be fine.",
          "excerpt": " Tools of the Trade To begin, there are a few things we'll assume you know, at least to some degree. Since all of Atom is implemented using w…"
        },
      
    
      
        
        {
          "title": "Iconography",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/iconography/",
          "body": " Iconography Atom comes bundled with the Octicons 4.4.0 icon set. Use them to add icons to your packages.  NOTE: Some older icons from version 2.1.2 are still kept for backwards compatibility.   Overview In the Styleguide under the \"Icons\" section you'll find all the Octicons that are available.   Usage Octicons can be added with simple CSS classes in your markup. Prefix the icon names with icon icon-. As an example, to add a monitor icon (device-desktop), use the icon icon-device-desktop classes: &lt;span class=\"icon icon-device-desktop\"&gt;&lt;/span&gt;   Size Octicons look best with a font-size of 16px. It's already used as the default, so you don't need to worry about it. In case you prefer a different icon size, try to use multiples of 16 (32px, 48px etc.) for the sharpest result. Sizes in between are ok too, but might look a bit blurry for icons with straight lines.  Usability Although icons can make your UI visually appealing, when used without a text label, it can be hard to guess its meaning. In cases where space for a text label is insufficient, consider adding a tooltip that appears on hover. Or a more subtle title=\"label\" attribute would help as well.",
          "excerpt": " Iconography Atom comes bundled with the Octicons 4.4.0 icon set. Use them to add icons to your packages.  NOTE: Some older icons from versio…"
        },
      
    
      
        
        {
          "title": "Handling URIs",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/handling-uris/",
          "body": " Handling URIs Beginning in Atom 1.23, packages have the ability to handle special URIs triggered from the system; for example, a package named my-package can register itself to handle any URI starting with atom://my-package/.  Warning: Handling URIs triggered from other applications, like a web browser, is a powerful tool, but also one that can be jarring. You should shape your package's user experience to handle this well. In general, you should avoid taking direct action on behalf of a user. For example, a URI handler that immediately installs a package is too invasive, but a URI handler that shows the package's pane in the settings view is useful. A URI handler that begins to clone a repo is overly aggressive, but a URI handler that prompts the user to clone a repo is okay. Any package with a URI handler that we feel violates this guideline is subject to removal from the Atom package registry at our discretion.   Modifying your package.json  The first step to handling URIs from your package is to modify its package.json file. You should add a new key called uriHandler, and its value should be an object. The uriHandler object must contain a key called method with a string value that tells Atom which method in your package to call when a URI needs to be handled. The object can optionally include a key called deferActivation which can be set to the boolean false to prevent Atom from deferring activation of your package — see more below. For example, if we want our package my-package to handle URIs with a method on our package's main module called handleURI, we could add the following to our package.json: \"uriHandler\": { \"method\": \"handleURI\" }   Modifying your Main Module Now that we've told Atom that we want our package to handle URIs beginning with atom://my-package/ via our handleURI method, we need to actually write this method. Atom passes two arguments to your URI handler method; the first one is the fully-parsed URI plus query string, parsed with Node's url.parse(uri, true). The second argument is the raw, string URI; this is normally not needed since the first argument gives you structured information about the URI. Here's a sample package, written in JavaScript, that handles URIs with the package.json configuration we saw above. export default { activate () { // normal activation code here }, handleURI (parsedUri) { console.log(parsedUri) } }  When Atom handles, for example, the URI atom://my-package/my/test/url?value=42&amp;other=false, the package would log out something like the following: { protocol: 'atom:', slashes: true, auth: null, host: 'my-package', port: null, hostname: 'my-package', hash: null, search: '?value=true&amp;other=false', query: { value: '42', other: 'false' }, pathname: '/my/test/url', path: '/my/test/url?value=true&amp;other=false', href: 'atom://my-package/my/test/url?value=true&amp;other=false' }  Notice that the query string arguments are available in the query property, but are strings — you'll have to convert to other native types yourself.  Controlling Activation Deferral For performance reasons, adding a uriHandler entry to your package's package.json will enable deferred activation. This means that Atom will not activate your package until it has a URI for it to handle — it will then activate your package and then immediately call the URI handler method. If you want to disable the deferred activation, ensuring your package is activated upon startup, you can add \"deferActivation\": false to the URI handler config. For example, \"uriHandler\": { \"method\": \"handleURI\", \"deferActivation\": false }  Before doing this, make sure your package actually needs to be activated immediately — disabling deferred activation means Atom takes longer to start since it has to activate all packages without deferred activation.  Linux Support Because URI handling is different across operating systems and distributions, there is no built-in URI handler support for Atom on Linux. If you want to configure URI handling on your system yourself, then you should configure atom: protocol URI's to trigger atom with the --uri-handler flag; for example, the URI atom://test/uri should launch Atom via atom --uri-handler atom://test/uri.  Core URIs Atom provides a core URI to handle opening files with the syntax atom://core/open/file?filename=&lt;filepath&gt;&amp;line=&lt;line&gt;&amp;column=&lt;col&gt;",
          "excerpt": " Handling URIs Beginning in Atom 1.23, packages have the ability to handle special URIs triggered from the system; for example, a package nam…"
        },
      
    
      
        
        {
          "title": "Publishing",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/publishing/",
          "body": " Publishing Atom bundles a command line utility called apm which we first used back in Command Line to search for and install packages via the command line. The apm command can also be used to publish Atom packages to the public registry and update them.  Prepare Your Package There are a few things you should double check before publishing:  Your package.json file has name, description, and repository fields. Your package.json file has a version field with a value of \"0.0.0\". Your package.json file has an engines field that contains an entry for Atom such as: \"engines\": {\"atom\": \"&gt;=1.0.0 &lt;2.0.0\"}. Your package has a README.md file at the root. Your repository URL in the package.json file is the same as the URL of your repository. Your package is in a Git repository that has been pushed to GitHub. Follow this guide if your package isn't already on GitHub.   Publish Your Package Before you publish a package it is a good idea to check ahead of time if a package with the same name has already been published to the atom.io package registry. You can do that by visiting https://atom.io/packages/your-package-name to see if the package already exists. If it does, update your package's name to something that is available before proceeding. Now let's review what the apm publish command does:  Registers the package name on atom.io if it is being published for the first time. Updates the version field in the package.json file and commits it. Creates a new Git tag for the version being published. Pushes the tag and current branch up to GitHub. Updates atom.io with the new version being published.  Now run the following commands to publish your package:  cd path-to-your-package apm publish minor  If this is the first package you are publishing, the apm publish command may prompt you for your GitHub username and password. If you have two-factor authentication enabled, use a personal access token in lieu of a password. This is required to publish and you only need to enter this information the first time you publish. The credentials are stored securely in your keychain once you login. Your package is now published and available on atom.io. Head on over to https://atom.io/packages/your-package-name to see your package's page. With apm publish, you can bump the version and publish by using  apm publish version-type  where version-type can be major, minor and patch. The major option to the publish command tells apm to increment the first number of the version before publishing so the published version will be 1.0.0 and the Git tag created will be v1.0.0. The minor option to the publish command tells apm to increment the second number of the version before publishing so the published version will be 0.1.0 and the Git tag created will be v0.1.0. The patch option to the publish command tells apm to increment the third number of the version before publishing so the published version will be 0.0.1 and the Git tag created will be v0.0.1. Use major when you make a change that breaks backwards compatibility, like changing defaults or removing features. Use minor when adding new functionality or options, but without breaking backwards compatibility. Use patch when you've changed the implementation of existing features, but without changing the behaviour or options of your package. Check out semantic versioning to learn more about best practices for versioning your package releases. You can also run apm help publish to see all the available options and apm help to see all the other available commands.",
          "excerpt": " Publishing Atom bundles a command line utility called apm which we first used back in Command Line to search for and install packages via th…"
        },
      
    
      
        
        {
          "title": "Package: Active Editor Info",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/package-active-editor-info/",
          "body": " Package: Active Editor Info We saw in our Word Count package how we could show information in a modal panel. However, panels aren't the only way to extend Atom's UI—you can also add items to the workspace. These items can be dragged to new locations (for example, one of the docks on the edges of the window), and Atom will restore them the next time you open the project. This system is used by Atom's tree view, as well as by third party packages like Nuclide for its console, debugger, outline view, and diagnostics (linter results). For this package, we'll define a workspace item that tells us some information about our active text editor. The final package can be viewed at https://github.com/atom/active-editor-info.  Create the Package To begin, press Cmd+Shift+PCtrl+Shift+P to bring up the Command Palette. Type \"generate package\" and select the \"Package Generator: Generate Package\" command, just as we did in the section on package generation. Enter active-editor-info as the name of the package.  Add an Opener Now let's edit the package files to show our view in a workspace item instead of a modal panel. The way we do this is by registering an opener with Atom. Openers are just functions that accept a URI and return a view (if it's a URI that the opener knows about). When you call atom.workspace.open(), Atom will go through all of its openers until it finds one that can handle the URI you passed. Let's open lib/active-editor-info.js and edit our activate() method to register an opener: 'use babel'; import ActiveEditorInfoView from './active-editor-info-view'; import {CompositeDisposable, Disposable} from 'atom'; export default { subscriptions: null, activate(state) { this.subscriptions = new CompositeDisposable( // Add an opener for our view. atom.workspace.addOpener(uri =&gt; { if (uri === 'atom://active-editor-info') { return new ActiveEditorInfoView(); } }), // Register command that toggles this view atom.commands.add('atom-workspace', { 'active-editor-info:toggle': () =&gt; this.toggle() }), // Destroy any ActiveEditorInfoViews when the package is deactivated. new Disposable(() =&gt; { atom.workspace.getPaneItems().forEach(item =&gt; { if (item instanceof ActiveEditorInfoView) { item.destroy(); } }); }) ); }, deactivate() { this.subscriptions.dispose(); }, toggle() { console.log('Toggle it!') } };  You'll notice we also removed the activeEditorInfoView property and the serialize() method. That's because, with workspace items, it's possible to have more than one instance of a given view. Since each instance can have its own state, each should do its own serialization instead of relying on a package-level serialize() method. We'll come back to that later. You probably also noticed that our toggle() implementation just logs the text \"Toggle it!\" to the console. Let's make it actually toggle our view:  toggle() { atom.workspace.toggle('atom://active-editor-info'); }   Updating the View Atom uses the same view abstractions everywhere, so we can almost use the generated ActiveEditorInfoView class as-is. We just need to add two small methods:  getTitle() { // Used by Atom for tab text return 'Active Editor Info'; } getURI() { // Used by Atom to identify the view when toggling. return 'atom://active-editor-info'; }  Now reload the window and run the \"Active Editor Info: Toggle\" command from the command palette! Our view will appear in a new tab in the center of the workspace. If you want, you can drag it into one of the docks. Toggling it again will then hide that dock. If you close the tab and run the toggle command again, it will appear in the last place you had it.  We've repeated the same URI three times now. That's okay, but it's probably a good idea to define the URL in one place and then import it from that module wherever you need it.   Constraining Our Item's Locations The purpose of our view is to show information about the active text editor, so it doesn't really make sense to show our item in the center of the workspace (where the text editor will be). Let's add some methods to our view class to influence where its opened:  getDefaultLocation() { // This location will be used if the user hasn't overridden it by dragging the item elsewhere. // Valid values are \"left\", \"right\", \"bottom\", and \"center\" (the default). return 'right'; } getAllowedLocations() { // The locations into which the item can be moved. return ['left', 'right', 'bottom']; }  Now our item will appear in the right dock initially and users will only be able to drag it to one of the other docks.  Show Active Editor Info Now that we have our view all wired up, let's update it to show some information about the active text editor. Add this to the constructor: this.subscriptions = atom.workspace.getCenter().observeActivePaneItem(item =&gt; { if (!atom.workspace.isTextEditor(item)) { message.innerText = 'Open a file to see important information about it.'; return; } message.innerHTML = ` &lt;h2&gt;${item.getFileName() || 'untitled'}&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Soft Wrap:&lt;/b&gt; ${item.softWrapped}&lt;/li&gt; &lt;li&gt;&lt;b&gt;Tab Length:&lt;/b&gt; ${item.getTabLength()}&lt;/li&gt; &lt;li&gt;&lt;b&gt;Encoding:&lt;/b&gt; ${item.getEncoding()}&lt;/li&gt; &lt;li&gt;&lt;b&gt;Line Count:&lt;/b&gt; ${item.getLineCount()}&lt;/li&gt; &lt;/ul&gt; `; });  Now whenever you open a text editor in the center, the view will update with some information about it.  We use a template string here because it's simple and we have a lot of control over what's going into it, but this could easily result in the insertion of unwanted HTML if you're not careful. Sanitize your input and use the DOM API or a templating system when doing this for real.  Also, don't forget to clean up the subscription in the destroy() method: destroy() { this.element.remove(); this.subscriptions.dispose(); }   Serialization If you were to reload Atom now, you'd see that our item had disappeared. That's because we haven't told Atom how to serialize it yet. Let's do that now. The first step is to implement a serialize() method on our ActiveEditorInfoView class. Atom will call the serialize() method on every item in the workspace periodically to save its state.  serialize() { return { // This is used to look up the deserializer function. It can be any string, but it needs to be // unique across all packages! deserializer: 'active-editor-info/ActiveEditorInfoView' }; }   All of our view's state is derived from the active text editor so we only need the deserializer field. If we had other state that we wanted to preserve across reloads, we would just add things to the object we're returning. Just make sure that they're JSON serializable!  Next we need to register a deserializer function that Atom can use to recreate the real object when it starts up. The best way to do that is to add a \"deserializers\" object to our package.json file: { \"name\": \"active-editor-info\", ... \"deserializers\": { \"active-editor-info/ActiveEditorInfoView\": \"deserializeActiveEditorInfoView\" } }  Notice that the key (\"active-editor-info/ActiveEditorInfoView\") matches the string we used in our serialize() method above. The value (\"deserializeActiveEditorInfoView\") refers to a function in our main module, which we still need to add. Go back to active-editor-info.js and do that now:  deserializeActiveEditorInfoView(serialized) { return new ActiveEditorInfoView(); }  The value returned from our serialize() method will be passed to this function. Since our serialized object didn't include any state, we can just return a new ActiveEditorInfoView instance. Reload Atom and toggle the view with the \"Active Editor Info: Toggle\" command. Then reload Atom again. Your view should be just where you left it!  Summary In this section, we've made a toggleable workspace item whose placement can be controlled by the user. This could be helpful when creating all sorts of visual tools for working with code!",
          "excerpt": " Package: Active Editor Info We saw in our Word Count package how we could show information in a modal panel. However, panels aren't the only…"
        },
      
    
      
        
        {
          "title": "Contributing to Official Atom Packages",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/contributing-to-official-atom-packages/",
          "body": " Contributing to Official Atom Packages If you think you know which package is causing the issue you are reporting, feel free to open up the issue in that specific repository instead. When in doubt just open the issue on the atom/atom repository but be aware that it may get closed and reopened in the proper package's repository.  Hacking on Packages  Cloning The first step is creating your own clone. For some packages, you may also need to install the requirements necessary for building Atom in order to run apm install. For example, if you want to make changes to the tree-view package, fork the repo on your github account, then clone it:  git clone git@github.com:your-username/tree-view.git  Next install all the dependencies:  cd tree-view apm install Installing modules ✓  Now you can link it to development mode so when you run an Atom window with atom --dev, you will use your fork instead of the built in package:  apm link -d   Running in Development Mode Editing a package in Atom is a bit of a circular experience: you're using Atom to modify itself. What happens if you temporarily break something? You don't want the version of Atom you're using to edit to become useless in the process. For this reason, you'll only want to load packages in development mode while you are working on them. You'll perform your editing in stable mode, only switching to development mode to test your changes. To open a development mode window, use the \"Application: Open Dev\" command. You can also run dev mode from the command line with atom --dev. To load your package in development mode, create a symlink to it in ~/.atom/dev/packages. This occurs automatically when you clone the package with apm develop. You can also run apm link --dev and apm unlink --dev from the package directory to create and remove dev-mode symlinks.  Installing Dependencies You'll want to keep dependencies up to date by running apm update after pulling any upstream changes.",
          "excerpt": " Contributing to Official Atom Packages If you think you know which package is causing the issue you are reporting, feel free to open up the …"
        },
      
    
      
        
        {
          "title": "Creating a Grammar",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/creating-a-grammar/",
          "body": " Creating a Grammar Atom's syntax highlighting and code folding system is powered by Tree-sitter. Tree-sitter parsers create and maintain full syntax trees representing your code. This syntax tree gives Atom a comprehensive understanding of the structure of your code, which has several benefits:  Syntax highlighting will not break because of formatting changes. Code folding will work regardless of how your code is indented. Editor features can operate on the syntax tree. For instance, the Select Larger Syntax Node and Select Smaller Syntax Node allow you to select conceptually larger and smaller chunks of your code. Community packages can use the syntax tree to manipulate code intelligently.  Tree-sitter grammars are relatively new. Many languages in Atom are still supported by TextMate grammars, though we intend to phase these out over time. If you're adding support for a new language, you're in the right place!  Getting Started There are two components required to use Tree-sitter in Atom: a parser and a grammar file.  The Parser Tree-sitter generates parsers based on context-free grammars that are typically written in JavaScript. The generated parsers are C libraries that can be used in other applications as well as Atom. They can also be developed and tested at the command line, separately from Atom. Tree-sitter has its own documentation page on how to create these parsers. The Tree-sitter GitHub organization also contains a lot of example parsers that you can learn from, each in its own repository. Once you have created a parser, you need to publish it to the NPM registry to use it in Atom. To do this, make sure you have a name and version in your parser's package.json: { \"name\": \"tree-sitter-mylanguage\", \"version\": \"0.0.1\", // ... }  then run the command npm publish.  The Package Once you have a Tree-sitter parser that is available on npm, you can use it in your Atom package. Packages with grammars are, by convention, always named starting with language. You'll need a folder with a package.json, a grammars subdirectory, and a single json or cson file in the grammars directory, which can be named anything. language-mylanguage ├── LICENSE ├── README.md ├── grammars │ └── mylanguage.cson └── package.json   The Grammar File The mylanguage.cson file specifies how Atom should use the parser you created.  Basic Fields It starts with some required fields: name: 'My Language' scopeName: 'mylanguage' type: 'tree-sitter' parser: 'tree-sitter-mylanguage'    scopeName - A unique, stable identifier for the language. Atom users will use this in configuration files if they want to specify custom configuration based on the language.  name - A human readable name for the language.  parser - The name of the parser node module that will be used for parsing. This string will be passed directly to require() in order to load the parser.  type - This should have the value tree-sitter to indicate to Atom that this is a Tree-sitter grammar and not a TextMate grammar.   Language Recognition Next, the file should contain some fields that indicate to Atom when this language should be used. These fields are all optional.   fileTypes - An array of filename suffixes. The grammar will be used for files whose names end with one of these suffixes. Note that the suffix may be an entire filename.  firstLineRegex - A regex pattern that will be tested against the first line of the file. The grammar will be used if this regex matches.  contentRegex - A regex pattern that will be tested against the contents of the file in order to break ties in cases where multiple grammars matched the file using the above two criteria. If the contentRegex matches, this grammar will be preferred over another grammar with no contentRegex. If the contentRegex does not match, a grammar with no contentRegex will be preferred over this one.   Syntax Highlighting The HTML classes that Atom uses for syntax highlighting do not correspond directly to nodes in the syntax tree. Instead, Tree-sitter grammar files specify scope mappings that specify which classes should be applied to which syntax nodes. The scopes object controls these scope mappings. Its keys are CSS selectors that select nodes in the syntax tree. Its values can be of several different types. Here is a simple example: scopes: 'call_expression &gt; identifier': 'entity.name.function'  This entry means that, in the syntax tree, any identifier node whose parent is a call_expression should be highlighted using three classes: syntax--entity, syntax--name, and syntax--function. Note that in this selector, we're using the immediate child combinator (&gt;). Arbitrary descendant selectors without this combinator (for example 'call_expression identifier', which would match any identifier occurring anywhere within a call_expression) are currently not supported.  Advanced Selectors The keys of the scopes object can also contain multiple CSS selectors, separated by commas, similar to CSS files. The triple-quote syntax in CSON makes it convenient to write keys like this on multiple lines: scopes: ''' function_declaration &gt; identifier, call_expression &gt; identifier, call_expression &gt; field_expression &gt; field_identifier ''': 'entity.name.function'  You can use the :nth-child pseudo-class to select nodes based on their order within their parent. For example, this example selects identifier nodes which are the fourth (zero-indexed) child of a singleton_method node. scopes: 'singleton_method &gt; identifier:nth-child(3)': 'entity.name.function'  Finally, you can use double-quoted strings in the selectors to select anonymous tokens in the syntax tree, like ( and :. See the Tree-sitter documentation for more information about named vs anonymous tokens. scopes: ''' \"*\", \"/\", \"+\", \"-\" ''': 'keyword.operator'   Text-based Mappings You can also apply different classes to a syntax node based on its text. Here are some examples: scopes: # Apply the classes `syntax--builtin` and `syntax--variable` to all # `identifier` nodes whose text is `require`. 'identifier': {exact: 'require', scopes: 'builtin.variable'}, # Apply the classes `syntax--type` and `syntax--integer` to all # `primitive_type` nodes whose text starts with `int` or `uint`. 'primitive_type': {match: /^u?int/, scopes: 'type.integer'}, # Apply the classes `syntax--builtin`, `syntax--class`, and # `syntax--name` to `constant` nodes with the text `Array`, # `Hash` and `String`. For all other `constant` nodes, just # apply the classes `syntax--class` and `syntax--name`. 'constant': [ {match: '^(Array|Hash|String)$', scopes: 'builtin.class.name'}, 'class.name' ]  In total there are four types of values that can be associated with selectors in scopes:  Strings - Each class name in the dot-separated string will be prefixed with syntax-- and applied to the selected node. Objects with the keys exact and scopes - If the node's text equals the exact string, the scopes string will be used as described above. Objects with the keys match and scopes - If the node's text matches the match regex pattern, the scopes string will be used as described above. Arrays - The elements of the array will be processed from beginning to end. The first element that matches the selected node will be used as describe above.   Specificity If multiple selectors in the scopes object match a node, the node's classes will be decided based on the most specific selector. Note that the exact and match rules do not affect specificity, so you may need to supply the same exact or match rules for multiple selectors to ensure that they take precedence over other selectors. You can use the same selector multiple times in a scope mapping, within different comma-separated keys: scopes: 'call_expression &gt; identifier': 'entity.name.function' # If we did not include the second selector here, then this rule # would not apply to identifiers inside of call_expressions, # because the selector `call_expression &gt; identifier` is more # specific than the selector `identifier`. 'identifier, call_expression &gt; identifier': [ {exact: 'require', scopes: 'builtin.variable'}, {match: '^[A-Z]', scopes: 'constructor'}, ]   Language Injection Sometimes, a source file can contain code written in several different languages. Tree-sitter grammars support this situation using a two-part process called language injection. First, an 'outer' language must define an injection point - a set of syntax nodes whose text can be parsed using a different language, along with some logic for guessing the name of the other language that should be used. Second, an 'inner' language must define an injectionRegex - a regex pattern that will be tested against the language name provided by the injection point. For example, in JavaScript, tagged template literals sometimes contain code written in a different language, and the name of the language is often used in the 'tag' function, as shown in this example: // HTML in a template literal const htmlContent = html `&lt;div&gt;Hello ${name}&lt;/div&gt;`  The tree-sitter-javascript parser parses this tagged template literal as a call_expression with two children: an identifier and a template_literal: (call_expression (identifier) (template_literal (interpolation (identifier))))  Here is an injection point that would allow syntax highlighting inside of template literals: atom.grammars.addInjectionPoint('source.js', { type: 'call_expression', language (callExpression) { const {firstChild} = callExpression if (firstChild.type === 'identifier') { return firstChild.text } }, content (callExpression) { const {lastChild} = callExpression if (lastChild.type === 'template_string') { return lastChild } } })  The language callback would then be called with every call_expression node in the syntax tree. In the example above, it would retrieve the first child of the call_expression, which is an identifier with the name \"html\". The callback would then return the string \"html\". The content callback would then be called with the same call_expression node and return the template_string node within the call_expression node. In order to parse the HTML within the template string, the HTML grammar file would need to specify an injectionRegex: injectionRegex: 'html|HTML'   Code Folding The next field in the grammar file, folds, controls code folding. Its value is an array of fold pattern objects. Fold patterns are used to decide whether or not a syntax node can be folded, and if so, where the fold should start and end. Here are some example fold patterns: folds: [ # All `comment` nodes are foldable. By default, the fold starts at # the end of the node's first line, and ends at the beginning # of the node's last line. { type: 'comment' } # `if_statement` nodes are foldable if they contain an anonymous # \"then\" token and either an `elif_clause` or `else_clause` node. # The fold starts at the end of the \"then\" token and ends at the # `elif_clause` or `else_clause`. { type: 'if_statement', start: {type: '\"then\"'} end: {type: ['elif_clause', 'else_clause']} } # Any node that starts with an anonymous \"(\" token and ends with # an anonymous \")\" token is foldable. The fold starts after the # \"(\" and ends before the \")\". { start: {type: '\"(\"', index: 0}, end: {type: '\")\"', index: -1} } ]  Fold patterns can have one or more of the following fields:   type - A string or array of strings. In order to be foldable according to this pattern, a syntax node's type must match one of these strings.  start - An object that is used to identify a child node after which the fold should start. The object can have one or both of the following fields:   type - A string or array of strings. To start a fold, a child node's type must match one of these strings.  index - a number that's used to select a specific child according to its index. Negative values are interpreted as indices relative the last child, so that -1 means the last child.    end - An object that is used to identify a child node before which the fold should end. It has the same structure as the start object.   Comments The last field in the grammar file, comments, controls the behavior of Atom's Editor: Toggle Line Comments command. Its value is an object with a start field and an optional end field. The start field is a string that should be prepended to or removed from lines in order to comment or un-comment them. In JavaScript, it looks like this: comments: start: '// '  The end field should be used for languages that only support block comments, not line comments. If present, it will be appended to or removed from the end of the last selected line in order to comment or un-comment the selection. In CSS, it would look like this: comments: start: '/* ' end: ' */'   Example Packages More examples of all of these features can be found in the Tree-sitter grammars bundled with Atom:  Bash C Go HTML JavaScript Python Ruby TypeScript ",
          "excerpt": " Creating a Grammar Atom's syntax highlighting and code folding system is powered by Tree-sitter. Tree-sitter parsers create and maintain ful…"
        },
      
    
      
        
        {
          "title": "Converting from TextMate",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/converting-from-textmate/",
          "body": " Converting from TextMate It's possible that you have themes or grammars from TextMate that you like and use and would like to convert to Atom. If so, you're in luck because there are tools to help with the conversion.  Converting a TextMate Grammar Bundle Converting a TextMate bundle will allow you to use its editor preferences, snippets, and colorization inside Atom. Let's convert the TextMate bundle for the R programming language. You can find other existing TextMate bundles on GitHub. You can convert the R bundle with the following command:  apm init --package language-r --convert https://github.com/textmate/r.tmbundle  You can now change directory into language-r to see the converted bundle. Once you link your package with the apm link command, your new package is ready to use. Launch Atom and open a .r file in the editor to see it in action!  Converting a TextMate Syntax Theme This section will go over how to convert a TextMate theme to an Atom theme.  Differences TextMate themes use plist files while Atom themes use CSS or Less to style the UI and syntax in the editor. The utility that converts the theme first parses the theme's plist file and then creates comparable CSS rules and properties that will style Atom similarly.  Convert the Theme Download the theme you wish to convert, you can browse existing TextMate themes on the TextMate website. Now, let's say you've downloaded the theme to ~/Downloads/MyTheme.tmTheme, you can convert the theme with the following command:  apm init --theme my-theme --convert ~/Downloads/MyTheme.tmTheme  You can then change directory to my-theme to see the converted theme.  Activate the Theme Once your theme is installed you can enable it by launching Atom and opening the Settings View with the Atom &gt; PreferencesFile &gt; PreferencesEdit &gt; Preferences menu item. Then select the \"Themes\" tab on the left side navigation. Finally, choose \"My Theme\" from the \"Syntax Theme\" dropdown menu to enable your new theme. Your theme is now enabled, open an editor to see it in action!",
          "excerpt": " Converting from TextMate It's possible that you have themes or grammars from TextMate that you like and use and would like to convert to Ato…"
        },
      
    
      
        
        {
          "title": "Cross-Platform Compatibility",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/cross-platform-compatibility/",
          "body": " Cross-Platform Compatibility Atom runs on a number of platforms and while Electron and Node take care of many of the details there are still some considerations to ensure your package works on other operating systems.  Symlinks File symlinks can be used on Windows by non-Administrators by specifying 'junction' as the type (this argument is ignored on macOS &amp; Linux). Also consider:   Symlinks committed to Git will not checkout correctly on Windows - dynamically create what you need with fs.symlink instead   Symlinked directories are only available to Administrators on Windows - avoid a dependency on them    Filenames   Reserved filenames on Windows are com1-com9, lpt1-lpt9, con, nul, aux and prn (regardless of extension, e.g. prn.txt is disallowed)  Reserved characters on Windows are ? \\ / &lt; &gt; ? % | : \" so avoid where possible   Names with spaces when passed to the command line;  Windows requires you surround the path with double quotes e.g. \"c:\\my test\"  macOS and Linux require a backslash before each space e.g. /my\\ test      File paths  Windows uses \\ although some tools and PowerShell allow / too macOS and Linux use /   You can dynamically find out what your platform uses with path.sep or better yet use the node path library functions such as join and normalize which automatically take care of this. Windows supports up to 250 characters for a path - avoid deeply nested directory structures  Paths are not URLs URL parsing routines should not be used on file paths. While they initially look like a relative path it will fail in a number of scenarios on all platforms.  Various characters are misinterpreted, e.g. ? as query string, # as a fragment identifier  Windows drive specifiers are incorrectly parsed as a protocol  If you need to use a path for a URL use the file: protocol with an absolute path instead to ensure drive letters and slashes are appropriately addressed, e.g. file:///c|/test/pic.png  fs.stat on directories The fs.stat function does not return the size of the contents of a directory but rather the allocation size of the directory itself. This returns 0 on Windows and 1024 on macOS and so should not be relied upon.  path.relative can't traverse drives  On a macOS or Linux system path.relative can be used to calculate a relative path to traverse between any two given paths. On Windows this is not always possible as it can contain multiple absolute roots, e.g. c:\\ and d:\\    Rapid file operations Creation and deletion operations may take a few milliseconds to complete. If you need to remove many files and folders consider RimRAF which has built-in retry logic for this.  Line endings  Windows uses CRLF  macOS and Linux use LF  Git on Windows often has autocrlf set which automatically converts between the two  If you are writing specs that use text file fixtures consider that this will interfere with file lengths, hash codes and direct text comparisons. It will also change the Atom selection length by 1 character per line. If you have spec fixtures that are text files you may want to tell Git to force LF, CRLF or not convert them by specifying the paths in .gitattributes e.g. spec/fixtures/always-crlf.txt eol=crlf spec/fixtures/always-lf.txt eol=lf spec/fixtures/leave-as-is.txt -text ",
          "excerpt": " Cross-Platform Compatibility Atom runs on a number of platforms and while Electron and Node take care of many of the details there are still…"
        },
      
    
      
        
        {
          "title": "Debugging",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/debugging/",
          "body": " Debugging Atom provides several tools to help you understand unexpected behavior and debug problems. This guide describes some of those tools and a few approaches to help you debug and provide more helpful information when submitting issues:  Update to the Latest Version You might be running into an issue which was already fixed in a more recent version of Atom than the one you're using. If you're using a released version, check which version of Atom you're using:  atom --version Atom : 1.8.0 Electron: 0.36.8 Chrome : 47.0.2526.110 Node : 5.1.1  Then check for the latest Stable version.  If there is a more recent release available, you can update to the most recent release with the auto-update functionality built in to Atom and the about package. You can open the About View by using the Atom &gt; About menu option to see whether Atom is up-to-date, downloading a new update or click the button to \"Restart and Install Update\".   If there is a more recent release available, you can update to the most recent release with the auto-update functionality built in to Atom and the about package. You can open the About View by using the Help &gt; About menu option to see whether Atom is up-to-date, downloading a new update or click the button to \"Restart and Install Update\".   To update to the latest version, you can download it from the atom.io website or the latest release on GitHub and follow the Installation instructions for Atom on Linux.  If you're building Atom from source, pull down the latest version of master and re-build.  Using Safe Mode A large part of Atom's functionality comes from packages you can install. Atom will also execute the code in your init script on startup. In some cases, these packages and the code in the init script might be causing unexpected behavior, problems, or performance issues. To determine if that is happening, start Atom from the terminal in safe mode:  atom --safe  This starts Atom, but does not load packages from ~/.atom/packages or ~/.atom/dev/packages and disables loading of your init script. If you can no longer reproduce the problem in safe mode, it's likely it was caused by one of the packages or the init script. If removing or commenting out all content from the init script and starting Atom normally still produces the error, then try figuring out which package is causing trouble. Start Atom normally again and open the Settings View with Cmd+,Ctrl+,. Since the Settings View allows you to disable each installed package, you can disable packages one by one until you can no longer reproduce the issue. Restart Atom or reload Atom with Alt+Cmd+Ctrl+LCtrl+Shift+F5 after you disable each package to make sure it's completely gone. When you find the problematic package, you can disable or uninstall the package. We strongly recommend creating an issue on the package's GitHub repository.  Clearing Saved State Atom saves a number of things about your environment when you exit in order to restore Atom to the same configuration when you next launch the program. In some cases the state that gets saved can be something undesirable that prevents Atom from working properly. In these cases, you may want to clear the state that Atom has saved.   Danger: Clearing the saved state permanently destroys any state that Atom has saved across all projects. This includes unsaved changes to files you may have been editing in all projects. This is a destructive action.  Clearing the saved state can be done by opening a terminal and executing:  atom --clear-window-state   Reset to Factory Defaults In some cases, you may want to reset Atom to \"factory defaults\", in other words clear all of your configuration and remove all packages. This can easily be done by opening a terminal and executing:   mv ~/.atom ~/.atom-backup     mv ~/.atom ~/.atom-backup     rename %USERPROFILE%\\.atom .atom-backup   Once that is complete, you can launch Atom as normal. Everything will be just as if you first installed Atom.  Tip: The command given above doesn't delete the old configuration, just puts it somewhere that Atom can't find it. If there are pieces of the old configuration you want to retrieve, you can find them in the ~/.atom-backup%USERPROFILE%\\.atom-backup directory.   Check for Linked Packages If you develop or contribute to Atom packages, there may be left-over packages linked to your ~/.atom/packages or ~/.atom/dev/packages directories. You can use the apm links command to list all linked packages:  apm links /Users/octocat/.atom/dev/packages (0) └── (no links) /Users/octocat/.atom/packages (1) └── color-picker -&gt; /Users/octocat/github/color-picker  You can remove links using the apm unlink command:  apm unlink color-picker Unlinking /Users/octocat/.atom/packages/color-picker ✓  See apm links --help and apm unlink --help for more information on these commands.  Tip: You can also use apm unlink --all to easily unlink all packages and themes.   Check for Incompatible Packages If you have packages installed that use native Node modules, when you upgrade to a new version of Atom, they might need to be rebuilt. Atom detects this and through the incompatible-packages package displays an indicator in the status bar when this happens.  If you see this indicator, click it and follow the instructions.  Check Atom and Package Settings In some cases, unexpected behavior might be caused by settings in Atom or in one of the packages. Open Atom's Settings View with Cmd+,Ctrl+,, the Atom &gt; PreferencesFile &gt; PreferencesEdit &gt; Preferences menu option, or the \"Settings View: Open\" command from the Command Palette.  Check Atom's settings in the Settings View, there's a description of most configuration options in the Basic Customization section. For example, if you want Atom to hide the invisible symbols representing whitespace characters, disable the \"Show Invisibles\" option. Some of these options are also available on a per-language basis which means that they may be different for specific languages, for example JavaScript or Python. To check the per-language settings, open the settings for the language package under the Packages tab in the Settings View, for example the language-javascript or language-python package. Since Atom ships with a set of packages and you can also install additional packages yourself, check the list of packages and their settings. For instance, if you'd like to get rid of the vertical line in the middle of the editor, disable the Wrap Guide package. And if you don't like it when Atom strips trailing whitespace or ensures that there's a single trailing newline in the file, you can configure that in the whitespace package's settings.   Check Your Configuration You might have defined some custom styles, keymaps or snippets in one of your configuration files. In some situations, these personal hacks might be causing the unexpected behavior you're observing so try clearing those files and restarting Atom.  Check Your Keybindings If a command is not executing when you press a key combination or the wrong command is executing, there might be an issue with the keybinding for that combination. Atom ships with the Keybinding Resolver, a neat package which helps you understand what key Atom saw you press and the command that was triggered because of it. Show the keybinding resolver with Cmd+.Ctrl+. or with \"Keybinding Resolver: Show\" from the Command palette. With the Keybinding Resolver shown, press a key combination:  The Keybinding Resolver shows you a list of keybindings that exist for the key combination, where each item in the list has the following:  the command for the keybinding the CSS selector used to define the context in which the keybinding is valid the file in which the keybinding is defined  The keybindings are listed in two colors. All the keybindings that are matched but not executed are shown in gray. The one that is executed, if any, is shown in green. If the command you wanted to trigger isn't listed, then a keybinding for that command hasn't been loaded. If multiple keybindings are matched, Atom determines which keybinding will be executed based on the specificity of the selectors and the order in which they were loaded. If the command you wanted to trigger is listed in the Keybinding Resolver, but wasn't the one that was executed, this is normally explained by one of two causes:   The key combination was not used in the context defined by the keybinding's selector For example, you can't trigger the keybinding for the tree-view:add-file command if the Tree View is not focused.   There is another keybinding that took precedence This often happens when you install a package which defines keybindings that conflict with existing keybindings. If the package's keybindings have selectors with higher specificity or were loaded later, they'll have priority over existing ones.   Atom loads core Atom keybindings and package keybindings first, and user-defined keybindings last. Since user-defined keybindings are loaded last, you can use your keymap.cson file to tweak the keybindings and sort out problems like these. See the Keymaps in Depth section for more information. If you notice that a package's keybindings are taking precedence over core Atom keybindings, it might be a good idea to report the issue on that package's GitHub repository. You can contact atom maintainers on Atom's github discussions  Check Font Rendering Issues You can determine which fonts are being used to render a specific piece of text by using the Developer Tools. To open the Developer Tools press Alt+Cmd+ICtrl+Shift+I. Once the Developer Tools are open, click the \"Elements\" tab. Use the standard tools for finding the element containing the text you want to check. Once you have selected the element, you can click the \"Computed\" tab in the styles pane and scroll to the bottom. The list of fonts being used will be shown there:   Check for Errors in the Developer Tools When an unexpected error occurs in Atom, you will normally see a red notification which provides details about the error and allows you to create an issue on the right repository:  Not all errors are logged with a notification so if you suspect you're experiencing an error but there's no notification, you can also look for errors in the developer tools Console tab. To access the Console tab, press Alt-Cmd-ICtrl-Shift-I to open developer tools and then click the Console tab:  If there are multiple errors, you can scroll down to the bottom of the panel to see the most recent error. Or while reproducing an error, you can right click in the Console tab panel, select Clear console to remove all Console output, and then reproduce the error to see what errors are logged to the Console tab.  Note: When running in Dev Mode, the developer tools are automatically shown with the error logged in the Console tab.   Find Crash Logs  When Atom crashes, you will find a crash dump in Console.app. You can launch Console.app using Spotlight or you can find it in /Applications/Utilities/Console.app. Once you have launched the program, you can find the latest crash dump by following these instructions:  Click \"User Reports\" in the left-most column Find the latest entry in the middle column that starts with Atom and ends with .crash   Once you have the crash dump, you can save it to send in later if it is needed for debugging.   When Atom crashes, you will find a crash dump inside your %TEMP%\\Atom Crashes directory. It will be the newest file with the .dmp extension. Once you have the crash dump, you can save it to send in later if it is needed for debugging.   When Atom crashes, it should write a core dump if system settings permit. In order to find whether the core dump is written and to where, consult the documentation for your distribution of Linux. Once you have the core dump, you can save it to send in later if it is needed for debugging.   Diagnose Startup Performance If Atom is taking a long time to start, you can use the Timecop package to get insight into where Atom spends time while loading.  Timecop displays the following information:  Atom startup times File compilation times Package loading and activation times Theme loading and activation times  If a specific package has high load or activation times, you might consider reporting an Issue to the maintainers. You can also disable the package to potentially improve future startup times.  Diagnose Runtime Performance If you're experiencing performance problems in a particular situation, your Issue reports will be more valuable if you include a saved profile from Chrome's CPU profiler that gives some insight into what is slow. To run a profile, open the Developer Tools with Alt+Cmd+ICtrl+Shift+I. From there:  Click the Profiles tab Select \"Collect JavaScript CPU Profile\" Click \"Start\"   Once that is done, then perform the slow action to capture a recording. When finished, click \"Stop\". Switch to the \"Chart\" view, and a graph of the recorded actions will appear. You can save and post the profile data by clicking \"Save\" next to the profile's name in the left panel.  To learn more, check out the Chrome documentation on CPU profiling.  Profiling Startup Performance If the time for loading the window looks high, you can create a CPU profile for that period using the --profile-startup command line flag when starting Atom:  atom --profile-startup .  This will automatically capture a CPU profile as Atom is loading and open the Developer Tools once Atom loads. From there:  Click the Profiles tab in the Developer Tools Select the \"startup\" profile Click the \"Save\" link for the startup profile  You can then include the startup profile in any Issue you report.  Check Your Build Tools If you are having issues installing a package using apm install, this could be because the package has dependencies on libraries that contain native code. This means you will need to have a C++ compiler and Python installed to be able to install it. You can run apm install --check to see if the Atom package manager can build native code on your machine. Check out the pre-requisites in the build instructions for your platform for more details.  Check if your GPU is causing the problem If you encounter flickering or other rendering issues, you can stop Atom from using your Graphics Processing Unit (GPU) with the --disable-gpu Chromium flag to see if the fault lies with your GPU:  atom --disable-gpu  Chromium (and thus Atom) normally uses the GPU to accelerate drawing parts of the interface. --disable-gpu tells Atom to not even attempt to do this, and just use the CPU for rendering everything. This means that the parts of the interface that would normally be accelerated using the GPU will instead take slightly longer and render on the CPU. This likely won't make a noticeable difference, but does slightly increase the battery usage as the CPU has to work harder to do the things the GPU is optimized for. Two other Chromium flags that are useful for debugging are --enable-gpu-rasterization and --force-gpu-rasterization:  atom --enable-gpu-rasterization --force-gpu-rasterization  --enable-gpu-rasterization allows other commands to determine how a layer tile (graphics) should be drawn and --force-gpu-rasterization determines that the Skia GPU backend should be used for drawing layer tiles (only valid with GPU accelerated compositing). Be sure to use Chromium flags at the end of the terminal call if you want to use other Atom flags as they will not be executed after the Chromium flags e.g.:  atom --safe --enable-gpu-rasterization --force-gpu-rasterization ",
          "excerpt": " Debugging Atom provides several tools to help you understand unexpected behavior and debug problems. This guide describes some of those tool…"
        },
      
    
      
        
        {
          "title": "Hacking on Atom Core",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/hacking-on-atom-core/",
          "body": " Hacking on Atom Core If you're hitting a bug in Atom or just want to experiment with adding a feature to the core of the system, you'll want to run Atom in Dev Mode with access to a local copy of the Atom source.  Fork the atom/atom repository Follow the GitHub Help instructions on how to fork a repo.  Cloning and bootstrapping Once you've set up your fork of the atom/atom repository, you can clone it to your local machine:  git clone git@github.com:your-username/atom.git  From there, you can navigate into the directory where you've cloned the Atom source code and run the bootstrap script to install all the required dependencies:   cd where-you-cloned-atom script/bootstrap     cd where-you-cloned-atom script/bootstrap     cd where-you-cloned-atom script\\bootstrap    Running in Development Mode Once you have a local copy of Atom cloned and bootstrapped, you can then run Atom in Development Mode. But first, if you cloned Atom to somewhere other than ~/github/atom%USERPROFILE%\\github\\atom you will need to set the ATOM_DEV_RESOURCE_PATH environment variable to point to the folder in which you cloned Atom. To run Atom in Dev Mode, use the --dev parameter from the terminal:  atom --dev path-to-open   Note: If the atom command does not respond in the terminal, then try atom-dev or atom-beta. The suffix depends upon the particular source code that was cloned.  There are a couple benefits of running Atom in Dev Mode:  When the ATOM_DEV_RESOURCE_PATH environment variable is set correctly, Atom is run using the source code from your local atom/atom repository. This means that you don't have to run script/buildscript\\build every time you change code. Just restart Atom 👍 Packages that exist in ~/.atom/dev/packages%USERPROFILE%\\.atom\\dev\\packages are loaded instead of packages of the same name normally loaded from other locations. This means that you can have development versions of packages you use loaded but easily go back to the stable versions by launching without Dev Mode. Packages that contain stylesheets, such as syntax themes, will have those stylesheets automatically reloaded by the dev-live-reload package. This does not live reload JavaScript or CoffeeScript files — you'll need to reload the window (window:reload) to see changes to those.   Running Atom Core Tests Locally In order to run Atom Core tests from the terminal, first be certain to set the ATOM_DEV_RESOURCE_PATH environment variable as mentioned above and then:  cd path-to-your-local-atom-repo atom --test spec   Building In order to build Atom from source, you need to have a number of other requirements and take additional steps.   Requirements  macOS 10.9 or later Node.js 10.12 or later (we recommend installing it via nvm) npm 6.12 or later (run npm install -g npm) Python v2.6.x, v2.7.x or v3.5+ Command Line Tools for Xcode (run xcode-select --install to install)     Node.js 10.12 or later (the architecture of node available to the build system will determine whether you build 32-bit or 64-bit Atom) npm 6.12 or later (run npm install -g npm) Python v2.6.x, v2.7.x, or v3.5+   Get Python from the Microsoft Store, or Download Python from https://www.python.org/downloads/.  For Python 2, be sure to install in the default location, or check \"Add Python 2.x to PATH\" before installing. For Python 3, check \"Add Python 3.x to PATH\", or change the install path to [Your_Drive_Letter]:\\Python37 e.g. C:\\Python37, (even if your version of Python 3 isn't 3.7, that's one place where the scripts will look.)  If python isn't found by the bootstrap script, create a symbolic link to the directory containing python.exe using e.g.: mklink /d %SystemDrive%\\Python27 D:\\elsewhere\\Python27(Links should be set at either %SystemDrive%\\Python27 or %SystemDrive%\\Python37, regardless of what version of Python you actually have.)      C++ build tools:   Option 1: windows-build-tools - From an elevated Powershell window (right click and \"run as Administrator\") do: npm install --global windows-build-tools@4 to install  Option 2: Visual C++ Build Tools 2015 or 2017   Option 3: Visual Studio 2015 or 2017 (Community Edition or better)  Also ensure that:  The default installation folder is chosen so the build tools can find it If using Visual Studio make sure Visual C++ support is selected/installed If using Visual C++ Build Tools make sure a Windows SDK (Windows 8 SDK or Windows 10 SDK) is selected/installed A git command is in your path Set the GYP_MSVS_VERSION environment variable to the Visual Studio/Build Tools version (2015 or 2017.) e.g. [Environment]::SetEnvironmentVariable(\"GYP_MSVS_VERSION\", \"2015\", \"User\") in PowerShell (or set it in Windows advanced system settings).      Ubuntu LTS 16.04 64-bit is the recommended platform.  Requirements  OS with 64-bit or 32-bit architecture C++11 toolchain Git Node.js 10.12 or later (we recommend installing it via nvm) npm 6.12 or later (run npm install -g npm) Python 2.6.x, 2.7.x or 3.5+ Development headers for libsecret.  For more details, scroll down to find how to setup a specific Linux distro.  Ubuntu / Debian   Install GNOME headers and other basic prerequisites:  sudo apt-get install build-essential git libsecret-1-dev fakeroot rpm libx11-dev libxkbfile-dev    If script/build exits with an error, you may need to install a newer C++ compiler with C++11:  sudo add-apt-repository ppa:ubuntu-toolchain-r/test sudo apt-get update sudo apt-get install gcc-5 g++-5 sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 80 --slave /usr/bin/g++ g++ /usr/bin/g++-5 sudo update-alternatives --config gcc # choose gcc-5 from the list     Fedora 22+  sudo dnf --assumeyes install make gcc gcc-c++ glibc-devel git-core libsecret-devel rpmdevtools libX11-devel libxkbfile-devel   Fedora 21 / CentOS / RHEL  sudo yum install -y make gcc gcc-c++ glibc-devel git-core libsecret-devel rpmdevtools   Arch  sudo pacman -S --needed gconf base-devel git nodejs npm libsecret python libx11 libxkbfile   Slackware  sbopkg -k -i node -i atom   openSUSE  sudo zypper install nodejs nodejs-devel make gcc gcc-c++ glibc-devel git-core libsecret-devel rpmdevtools libX11-devel libxkbfile-devel    Instructions   script/build  To also install the newly built application, use script/build --install.    script\\build  To also install the newly built application, use script\\build --create-windows-installer and launch one of the generated installers.    script/build  To also install the newly built application, use the --create-debian-package or --create-rpm-package option and then install the generated package via the system package manager.    script/build Options   --code-sign: signs the application with the GitHub certificate specified in $ATOM_MAC_CODE_SIGNING_CERT_DOWNLOAD_URL.  --compress-artifacts: zips the generated application as out/atom-mac.zip.  --install[=dir]: installs the application at ${dir}/Atom.app for dev and stable versions or at ${dir}/Atom-Beta.app for beta versions; ${dir} defaults to /Applications.     script\\build Options   --code-sign: signs the application with the GitHub certificate specified in $WIN_P12KEY_URL.  --compress-artifacts: zips the generated application as out\\atom-windows.zip.  --create-windows-installer: creates an .exe and two .nupkg packages in the out directory.  --install[=dir]: installs the application in ${dir}\\Atom\\app-dev; ${dir} defaults to %LOCALAPPDATA%.     script/build Options   --compress-artifacts: zips the generated application as out/atom-{arch}.tar.gz.  --create-debian-package: creates a .deb package as out/atom-{arch}.deb   --create-rpm-package: creates a .rpm package as out/atom-{arch}.rpm   --install[=dir]: installs the application in ${dir}; ${dir} defaults to /usr/local.    Troubleshooting  Use this search to get a list of reports about build errors on macOS.    Common Errors   node is not recognized  If you just installed Node.js, you'll need to restart Command Prompt before the node command is available on your path.    msbuild.exe failed with exit code: 1  If using Visual Studio, ensure you have the Visual C++ component installed. Go into Add/Remove Programs, select Visual Studio, press Modify, and then check the Visual C++ box. If using Visual C++ Build Tools, ensure you have the Windows 8 SDK or Windows 10 SDK component installed. Go into Add/Remove Programs, select Visual C++ Build Tools, press Modify and then check the \"Windows 8 SDK\" or \"Windows 10 SDK\" box.    script\\build stops with no error or warning shortly after displaying the versions of node, npm and Python  Make sure that the path where you have checked out Atom does not include a space. For example, use C:\\atom instead of C:\\my stuff\\atom. Try moving the repository to C:\\atom. Most likely, the path is too long. See issue #2200.    error MSB4025: The project file could not be loaded. Invalid character in the given encoding.  This can occur because your home directory (%USERPROFILE%) has non-ASCII characters in it. This is a bug in gyp which is used to build native Node.js modules and there is no known workaround.  https://github.com/TooTallNate/node-gyp/issues/297 https://bugs.chromium.org/p/gyp/issues/detail?id=393      'node_modules\\.bin\\npm' is not recognized as an internal or external command, operable program or batch file.  This occurs if the previous build left things in a bad state. Run script\\clean and then script\\build again.    script\\build stops at installing runas with Failed at the runas@x.y.z install script.  See the next item.    error MSB8020: The build tools for Visual Studio 201? (Platform Toolset = 'v1?0') cannot be found.  Try setting the GYP_MSVS_VERSION environment variable to 2015 or 2017 depending on what version of Visual Studio/Build Tools is installed and then script\\clean followed by script\\build (re-open the Command Prompt if you set the variable using the GUI).    'node-gyp' is not recognized as an internal or external command, operable program or batch file.  Try running npm install -g node-gyp, and run script\\build again.    Other node-gyp errors on first build attempt, even though the right Node.js and Python versions are installed.  Do try the build command one more time as experience shows it often works on second try in many cases.     Windows build error reports  If all else fails, use this search to get a list of reports about build errors on Windows, and see if yours has already been reported. If it hasn't, please open a new issue with your Windows version, architecture (x86 or x64), and a text dump of your build output, including the Node.js and Python versions.     TypeError: Unable to watch path If you get following error with a big traceback right after Atom starts: TypeError: Unable to watch path  you have to increase number of watched files by inotify. For testing if this is the reason for this error you can execute:  sudo sysctl fs.inotify.max_user_watches=32768  then restart Atom. If Atom now works fine, you can make this setting permanent:  echo 32768 | sudo tee -a /proc/sys/fs/inotify/max_user_watches  See also #2082.  /usr/bin/env: node: No such file or directory If you get this notice when attempting to run any script, you either do not have Node.js installed, or node isn't identified as Node.js on your machine. If it's the latter, this might be caused by installing Node.js via the distro package manager and not nvm, so entering sudo ln -s /usr/bin/nodejs /usr/bin/node into your terminal may fix the issue. On some variants (mostly Debian based distros) you can use update-alternatives too:  sudo update-alternatives --install /usr/bin/node node /usr/bin/nodejs 1 --slave /usr/bin/js js /usr/bin/nodejs   AttributeError: 'module' object has no attribute 'script_main' If you get following error with a big traceback while building Atom: sys.exit(gyp.script_main()) AttributeError: 'module' object has no attribute 'script_main' gyp ERR!  you need to uninstall the system version of gyp. On Fedora you would do the following:  sudo yum remove gyp   Linux build error reports Use this search to get a list of reports about build errors on Linux. ",
          "excerpt": " Hacking on Atom Core If you're hitting a bug in Atom or just want to experiment with adding a feature to the core of the system, you'll want…"
        },
      
    
      
        
        {
          "title": "Package: Modifying Text",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/package-modifying-text/",
          "body": " Package: Modifying Text Now that we have our first package written, let's go through examples of other types of packages we can make. This section will guide you though creating a simple command that replaces the selected text with ascii art. When you run our new command with the word \"cool\" selected, it will be replaced with:  o888 ooooooo ooooooo ooooooo 888 888 888 888 888 888 888 888 888 888 888 888 888 888 88ooo888 88ooo88 88ooo88 o888o  This should demonstrate how to do basic text manipulation in the current text buffer and how to deal with selections. The final package can be viewed at https://github.com/atom/ascii-art.  Basic Text Insertion To begin, press Cmd+Shift+PCtrl+Shift+P to bring up the Command Palette. Type \"generate package\" and select the \"Package Generator: Generate Package\" command, just as we did in the section on package generation. Enter ascii-art as the name of the package. Now let's edit the package files to make our ASCII Art package do something interesting. Since this package doesn't need any UI, we can remove all view-related code so go ahead and delete lib/ascii-art-view.js, spec/ascii-art-view-spec.js, and styles/. Next, open up lib/ascii-art.js and remove all view code, so it looks like this: const {CompositeDisposable} = require('atom') module.exports = { subscriptions: null, activate () { this.subscriptions = new CompositeDisposable() this.subscriptions.add(atom.commands.add('atom-workspace', {'ascii-art:convert': () =&gt; this.convert()}) ) }, deactivate () { this.subscriptions.dispose() }, convert() { console.log('Convert text!') } }   Create a Command Now let's add a command. You should namespace your commands with the package name followed by a : and then the name of the command. As you can see in the code, we called our command ascii-art:convert and we will define it to call the convert() method when it's executed. So far, that will simply log to the console. Let's start by making it insert something into the text buffer. convert() { const editor = atom.workspace.getActiveTextEditor() if (editor) { editor.insertText('Hello, World!') } }  As in Counting Words, we're using atom.workspace.getActiveTextEditor() to get the object that represents the active text editor. If this convert() method is called when not focused on a text editor, nothing will happen. Next we insert a string into the current text editor with the insertText() method. This will insert the text wherever the cursor currently is in the current editor. If there are selections, it will replace all selections with the \"Hello, World!\" text.  Reload the Package Before we can trigger ascii-art:convert, we need to load the latest code for our package by reloading the window. Run the command \"Window: Reload\" from the Command Palette or by pressing Alt+Cmd+Ctrl+LCtrl+Shift+F5.  Trigger the Command Now open the Command Palette and search for the \"Ascii Art: Convert\" command. But it's not there! To fix this, open package.json and find the property called activationCommands. Activation commands make Atom launch faster by allowing Atom to delay a package's activation until it's needed. So remove the existing command and use ascii-art:convert in activationCommands: \"activationCommands\": { \"atom-workspace\": \"ascii-art:convert\" }  First, reload the window by running the command \"Window: Reload\" from the command palette. Now when you run the \"Ascii Art: Convert\" command it will insert \"Hello, World!\" into the active editor, if any.  Add a Key Binding Now let's add a key binding to trigger the ascii-art:convert command. Open keymaps/ascii-art.json and add a key binding linking Alt+Ctrl+A to the ascii-art:convert command. You can delete the pre-existing key binding since you won't need it anymore. When finished, the file should look like this: { \"atom-text-editor\": { \"ctrl-alt-a\": \"ascii-art:convert\" } }  Now reload the window and verify that the key binding works.  Warning: The Atom keymap system is case-sensitive. This means that there is a distinction between a and A when creating keybindings. a means that you want to trigger the keybinding when you press A. But A means that you want to trigger the keybinding when you press Shift+A. You can also write shift-a when you want to trigger the keybinding when you press Shift+A. We strongly recommend always using lowercase and explicitly spelling out when you want to include Shift in your keybindings.   Add the ASCII Art Now we need to convert the selected text to ASCII art. To do this we will use the figlet Node module from npm. Open package.json and add the latest version of figlet to the dependencies: \"dependencies\": { \"figlet\": \"1.0.8\" }  After saving the file, run the command \"Update Package Dependencies: Update\" from the Command Palette. This will install the package's node module dependencies, only figlet in this case. You will need to run \"Update Package Dependencies: Update\" whenever you update the dependencies field in your package.json file. If for some reason this doesn't work, you'll see a message saying \"Failed to update package dependencies\" and you will find a new npm-debug.log file in your directory. That file should give you some idea as to what went wrong. Now require the figlet node module in lib/ascii-art.js and instead of inserting \"Hello, World!\", convert the selected text to ASCII art. convert () { const editor = atom.workspace.getActiveTextEditor() if (editor) { const selection = editor.getSelectedText() const figlet = require('figlet') const font = 'o8' figlet(selection, {font}, function (error, art) { if (error) { console.error(error) } else { editor.insertText(`\\n${art}\\n`) } }) } }  Now reload the editor, select some text in an editor window and press Alt+Ctrl+A. It should be replaced with a ridiculous ASCII art version instead. There are a couple of new things in this example we should look at quickly. The first is the editor.getSelectedText() which, as you might guess, returns the text that is currently selected. We then call the Figlet code to convert that into something else and replace the current selection with it with the editor.insertText() call.  Summary In this section, we've made a UI-less package that takes selected text and replaces it with a processed version. This could be helpful in creating linters or checkers for your code.",
          "excerpt": " Package: Modifying Text Now that we have our first package written, let's go through examples of other types of packages we can make. This s…"
        },
      
    
      
        
        {
          "title": "Creating a Legacy TextMate Grammar",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/creating-a-legacy-textmate-grammar/",
          "body": " Creating a Legacy TextMate Grammar Atom's syntax highlighting can be powered by two types of grammars. If you're adding support for a new language, the preferred way is to create a Tree-sitter grammar. Tree-sitter grammars have better performance and provide support for more editor features, such as the Select Larger Syntax Node command. This section describes the Atom's legacy support for TextMate grammars. TextMate grammars are supported by several popular text editors. They provide a set of regex (regular expression) patterns which are assigned scopes. These scopes are then turned into the CSS classes that you can target in syntax themes.  Note: This tutorial is a work in progress.   Getting Started TextMate Grammars depend heavily on regexes, and you should be comfortable with interpreting and writing regexes before continuing. Note that Atom uses the Oniguruma engine, which is very similar to the PCRE or Perl regex engines. Here are some resources to help you out:   https://www.regular-expressions.info/tutorial.html provides a comprehensive regex tutorial  https://www.rexegg.com/regex-quickstart.html contains a cheat sheet for various regex expressions  https://regex101.com/ or https://regexr.com/ allows live prototyping  https://github.com/kkos/oniguruma/blob/master/doc/RE the docs for the Oniguruma regex engine  Grammar files are written in the CSON or JSON format. Whichever one you decide to use is up to you, but this tutorial will be written in CSON.  Create the Package To get started, press Cmd+Shift+PCtrl+Shift+P and start typing \"Generate Package\" to generate a new grammar package. Select \"Package Generator: Generate Package,\" and you'll be asked for the path where your package will be created. Let's call ours language-flight-manual.  Tip: Grammar packages should start with language-.  The default package template creates a lot of folders that aren't needed for grammar packages. Go ahead and delete the keymaps, lib, menus, and styles folders. Furthermore, in package.json, remove the activationCommands section. Now create a new folder called grammars, and inside that a file called flight-manual.cson. This is the main file that we will be working with - start by populating it with a boilerplate template. Now let's go over what each key means. scopeName is the root scope of your package. This should generally describe what language your grammar package is highlighting; for example, language-javascript's scopeName is source.js and language-html's is text.html.basic. Name it source.flight-manual for now. name is the user-friendly name that is displayed in places like the status bar or the grammar selector. Again, this name should describe what the grammar package is highlighting. Rename it to Flight Manual. fileTypes is an array of filetypes that language-flight-manual should highlight. We're interested in highlighting the Flight Manual's Markdown files, so add the md extension to the list and remove the others. patterns contains the array of regex patterns that will determine how the file is tokenized.  Adding Patterns To start, let's add a basic pattern to tokenize the words Flight Manual whenever they show up. Your regex should look like \\bFlight Manual\\b. Here's what your patterns block should look like: 'patterns': [ { 'match': '\\\\bFlight Manual\\\\b' 'name': 'entity.other.flight-manual' } ]  match is where your regex is contained, and name is the scope name that is to be applied to the entirety of the match. More information about scope names can be found in Section 12.4 of the TextMate Manual.  Tip: All scopes should end with the portion of the root scopeName after the leading source or text. In our case, all scopes should end with flight-manual.   Note: Astute readers may have noticed that the \\b was changed to \\\\b with two backslashes and not one. This is because CSON processes the regex string before handing it to Oniguruma, so all backslashes need to be escaped twice.  But what if we wanted to apply different scopes to Flight and Manual? This is possible by adding capture groups to the regex and then referencing those capture groups in a new capture property. For example: 'match': '\\\\b(Flight) (Manual)\\\\b' 'name': 'entity.other.flight-manual' 'captures': '1': 'name': 'keyword.other.flight.flight-manual' '2': 'name': 'keyword.other.manual.flight-manual'  This will assign the scope keyword.other.flight.flight-manual to Flight, keyword.other.manual.flight-manual to Manual, and entity.other.flight-manual to the overarching Flight Manual.  Begin/End Patterns Now let's say we want to tokenize the {{#note}} blocks that occur in Flight Manual files. Our previous two examples used match, but one limit of match is that it can only match single lines. {{#note}} blocks, on the other hand, can span multiple lines. For these cases, you can use the begin/end keys. Once the regex in the begin key is matched, tokenization will continue until the end pattern is reached. 'begin': '({{)(#note)(}})' 'beginCaptures': '0': # The 0 capture contains the entire match 'name': 'meta.block.start.flight-manual' '1': 'name': 'punctuation.definition.block.flight-manual' '2': 'name': 'keyword.note.flight-manual' '3': 'name': 'punctuation.definition.block.flight-manual' 'end': '({{)(/note)(}})' 'endCaptures': '0': 'name': 'meta.block.end.flight-manual' '1': 'name': 'punctuation.definition.block.flight-manual' '2': 'name': 'keyword.note.flight-manual' '3': 'name': 'punctuation.definition.block.flight-manual' 'name': 'meta.block.note.flight-manual'   Tip: Get into the habit of providing punctuation scopes early on. It's much less effort than having to go back and rewriting all your patterns to support punctuation scopes when your grammar starts to get a bit longer!  Awesome, we have our first multiline pattern! However, if you've been following along and playing around in your own .md file, you may have noticed that Flight Manual doesn't receive any scopes inside a note block. A begin/end block is essentially a subgrammar of its own: once it starts matching, it will only match its own subpatterns until the end pattern is reached. Since we haven't defined any subpatterns, then clearly nothing will be matched inside of a note block. Let's fix that! 'begin': '({{)(#note)(}})' 'beginCaptures': '0': # The 0 capture contains the entire match 'name': 'meta.block.start.flight-manual' '1': 'name': 'punctuation.definition.block.flight-manual' '2': 'name': 'keyword.note.flight-manual' '3': 'name': 'punctuation.definition.block.flight-manual' 'end': '({{)(/note)(}})' 'endCaptures': '0': 'name': 'meta.block.end.flight-manual' '1': 'name': 'punctuation.definition.block.flight-manual' '2': 'name': 'keyword.note.flight-manual' '3': 'name': 'punctuation.definition.block.flight-manual' 'name': 'meta.block.note.flight-manual' 'patterns': [ { 'match': '\\\\b(Flight) (Manual)\\\\b' 'name': 'entity.other.flight-manual' 'captures': '1': 'name': 'keyword.other.flight.flight-manual' '2': 'name': 'keyword.other.manual.flight-manual' } ]  There. With the patterns block, Flight Manual should now receive the proper scopes.  Repositories and the Include keyword, or how to avoid duplication At this point, note blocks are looking pretty nice, as is the Flight Manual keyword, but the rest of the file is noticeably lacking any form of Markdown syntax highlighting. Is there a way to include the GitHub-Flavored Markdown grammar without copying and pasting everything over? This is where the include keyword comes in. include allows you to include other patterns, even from other grammars! language-gfm's scopeName is source.gfm, so let's include that. Our patterns block should now look like the following: 'patterns': [ { 'include': 'source.gfm' } { # Flight Manual pattern } { # Note begin/end pattern } ]  However, including source.gfm has led to another problem: note blocks still don't have any Markdown highlighting! The quick fix would be to add the include pattern to the note's pattern block as well, but now we're duplicating two patterns. You can imagine that as this grammar grows it'll quickly become inefficient to keep copying each new global pattern over to the note pattern as well. Therefore, include helpfully recognizes the special $self scope. $self automatically includes all the top-level patterns of the current grammar. The note block can then be simplified to the following: 'begin': '({{)(#note)(}})' # beginCaptures 'end': '({{)(/note)(}})' # endCaptures 'name': 'meta.block.note.flight-manual' 'patterns': [ { 'include': '$self' } ]   Where to Go from Here There are several good resources out there that help when writing a grammar. The following is a list of some particularly useful ones (some have been linked to in the sections above as well).   DamnedScholar's Gist. Provides a template of most keys, each with a short comment explaining their function.  Aerijo's Gist. [Work in Progress] Another guide that attempts to fully explain making a grammar package for users of all levels.  http://www.apeth.com/nonblog/stories/textmatebundle.html. A blog of a programmer's experience writing a grammar package for TextMate.  Oniguruma docs. The documentation for the regex engine Atom uses.  TextMate Section 12. Atom uses the same principles as laid out here, including the list of acceptable scopes.  first-mate. Not necessary to write a grammar, but a good technical reference for what Atom is doing behind the scenes. Look at any existing packages, such as the ones for Python, JavaScript, HTML, and more.  ",
          "excerpt": " Creating a Legacy TextMate Grammar Atom's syntax highlighting can be powered by two types of grammars. If you're adding support for a new la…"
        },
      
    
      
        
        {
          "title": "Package: Word Count",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/package-word-count/",
          "body": " Package: Word Count Let's get started by writing a very simple package and looking at some of the tools needed to develop one effectively. We'll start by writing a package that tells you how many words are in the current buffer and display it in a small modal window.  Package Generator The simplest way to start a package is to use the built-in package generator that ships with Atom. As you might expect by now, this generator is itself a separate package implemented in package-generator. You can run the generator by invoking the command palette and searching for \"Generate Package\". A dialog will appear asking you to name your new project. Name it your-name-word-count. Atom will then create that directory and fill it out with a skeleton project and link it into your ~/.atom/packages%USERPROFILE%\\.atom\\packages directory so it's loaded when you launch your editor next time.  Note: You may encounter a situation where your package is not loaded. That is because a new package using the same name as an actual package hosted on atom.io (e.g. \"wordcount\" and \"word-count\") is not being loaded as you expected. If you follow our suggestion above of using the your-name-word-count package name, you should be safe    You can see that Atom has created about a dozen files that make up the package. Let's take a look at each of them to get an idea of how a package is structured, then we can modify them to get our word count functionality. The basic package layout is as follows: my-package/ ├─ grammars/ ├─ keymaps/ ├─ lib/ ├─ menus/ ├─ spec/ ├─ snippets/ ├─ styles/ ├─ index.js └─ package.json  Not every package will have (or need) all of these directories and the package generator doesn't create snippets or grammars. Let's see what some of these are so we can start messing with them.  package.json  Similar to Node modules, Atom packages contain a package.json file in their top-level directory. This file contains metadata about the package, such as the path to its \"main\" module, library dependencies, and manifests specifying the order in which its resources should be loaded. In addition to some of the regular Node package.json keys available, Atom package.json files have their own additions.   main: the path to the JavaScript file that's the entry point to your package. If this is missing, Atom will default to looking for an index.coffee or index.js.  styles: an Array of Strings identifying the order of the style sheets your package needs to load. If not specified, style sheets in the styles directory are added alphabetically.  keymaps: an Array of Strings identifying the order of the key mappings your package needs to load. If not specified, mappings in the keymaps directory are added alphabetically.  menus: an Array of Strings identifying the order of the menu mappings your package needs to load. If not specified, mappings in the menus directory are added alphabetically.  snippets: an Array of Strings identifying the order of the snippets your package needs to load. If not specified, snippets in the snippets directory are added alphabetically.  activationCommands: an Object identifying commands that trigger your package's activation. The keys are CSS selectors, the values are Arrays of Strings identifying the command. The loading of your package is delayed until one of these events is triggered within the associated scope defined by the CSS selector. If not specified, the activate() method of your main export will be called when your package is loaded.  activationHooks: an Array of Strings identifying hooks that trigger your package's activation. The loading of your package is delayed until one of these hooks are triggered. Currently, there are three activation hooks:   core:loaded-shell-environment for when Atom has finished loading the shell environment variables  scope.name:root-scope-used for when a file is opened from the specified language (e.g. source.ruby:root-scope-used)  language-package-name:grammar-used for when a specific language package is used (e.g., my-special-language-javascript:grammar-used)    workspaceOpeners: An Array of Strings identifying URIs that trigger your package's activation. For example, say your package registers a custom opener for atom://my-custom-panel. By including that string in workspaceOpeners, your package will defer its activation until that URI is opened.  The package.json in the package we've just generated looks like this currently: { \"name\": \"your-name-word-count\", \"main\": \"./lib/your-name-word-count\", \"version\": \"0.0.0\", \"description\": \"A short description of your package\", \"activationCommands\": { \"atom-workspace\": \"your-name-word-count:toggle\" }, \"repository\": \"https://github.com/atom/your-name-word-count\", \"license\": \"MIT\", \"engines\": { \"atom\": \"&gt;=1.0.0 &lt;2.0.0\" }, \"dependencies\": { } }  If you wanted to use activationHooks, you might have: { \"name\": \"your-name-word-count\", \"main\": \"./lib/your-name-word-count\", \"version\": \"0.0.0\", \"description\": \"A short description of your package\", \"activationHooks\": [\"language-javascript:grammar-used\", \"language-coffee-script:grammar-used\"], \"repository\": \"https://github.com/atom/your-name-word-count\", \"license\": \"MIT\", \"engines\": { \"atom\": \"&gt;=1.0.0 &lt;2.0.0\" }, \"dependencies\": { } }  One of the first things you should do is ensure that this information is filled out. The name, description, repository URL the project will be at, and the license can all be filled out immediately. The other information we'll get into more detail on as we go.  Warning: Do not forget to update the repository URL. The one generated for you is invalid by design and will prevent you from publishing your package until updated.   Source Code If you want to extend Atom's behavior, your package should contain a single top-level module, which you export from whichever file is indicated by the main key in your package.json file. In the package we just generated, the main package file is lib/your-name-word-count.js. The remainder of your code should be placed in the lib directory, and required from your top-level file. If the main key is not in your package.json file, it will look for index.js or index.coffee as the main entry point. Your package's top-level module is a singleton object that manages the lifecycle of your extensions to Atom. Even if your package creates ten different views and appends them to different parts of the DOM, it's all managed from your top-level object. Your package's top-level module can implement the following basic methods:   activate(state): This optional method is called when your package is activated. It is passed the state data from the last time the window was serialized if your module implements the serialize() method. Use this to do initialization work when your package is started (like setting up DOM elements or binding events). If this method returns a promise the package will be considered loading until the promise resolves (or rejects).  initialize(state): (Available in Atom 1.14 and above) This optional method is similar to activate() but is called earlier. Whereas activation occurs after the workspace has been deserialized (and can therefore happen after your package's deserializers have been called), initialize() is guaranteed to be called before everything. Use activate() if you want to be sure that the workspace is ready; use initialize() if you need to do some setup prior to your deserializers or view providers being invoked.  serialize(): This optional method is called when the window is shutting down, allowing you to return JSON to represent the state of your component. When the window is later restored, the data you returned is passed to your module's activate method so you can restore your view to where the user left off.  deactivate(): This optional method is called when the window is shutting down and when the package is disabled. If your package is watching any files or holding external resources in any other way, release them here. You should also dispose of all subscriptions you're holding on to.   Style Sheets Style sheets for your package should be placed in the styles directory. Any style sheets in this directory will be loaded and attached to the DOM when your package is activated. Style sheets can be written as CSS or Less, but Less is recommended. Ideally, you won't need much in the way of styling. Atom provides a standard set of components which define both the colors and UI elements for any package that fits into Atom seamlessly. You can view all of Atom's UI components by opening the styleguide: open the command palette Cmd+Shift+PCtrl+Shift+P and search for styleguide, or type Cmd+Ctrl+Shift+GCtrl+Shift+G. If you do need special styling, try to keep only structural styles in the package style sheets. If you must specify colors and sizing, these should be taken from the active theme's ui-variables.less. An optional styleSheets array in your package.json can list the style sheets by name to specify a loading order; otherwise, style sheets are loaded alphabetically.  Keymaps You can provide key bindings for commonly used actions for your extension, especially if you're also adding a new command. In our new package, we have a keymap filled in for us already in the keymaps/your-name-word-count.json file: { \"atom-workspace\": { \"ctrl-alt-o\": \"your-name-word-count:toggle\" } }  This means that if you press Alt+Ctrl+O, our package will run the your-name-word-count:toggle command. We'll look at that code next, but if you want to change the default key mapping, you can do that in this file. Keymaps are placed in the keymaps subdirectory. By default, all keymaps are loaded in alphabetical order. An optional keymaps array in your package.json can specify which keymaps to load and in what order. Keybindings are executed by determining which element the keypress occurred on. In the example above, the your-name-word-count:toggle command is executed when pressing Alt+Ctrl+O on the atom-workspace element. Because the atom-workspace element is the parent of the entire Atom UI, this means the key combination will work anywhere in the application. We'll cover more advanced keybinding stuff a bit later in Keymaps in Depth.  Menus Menus are placed in the menus subdirectory. This defines menu elements like what pops up when you right click a context-menu or would go in the application menu to trigger functionality in your plugin. By default, all menus are loaded in alphabetical order. An optional menus array in your package.json can specify which menus to load and in what order.  Application Menu It's recommended that you create an application menu item under the Packages menu for common actions with your package that aren't tied to a specific element. If we look in the menus/your-name-word-count.json file that was generated for us, we'll see a section that looks like this:  \"menu\": [ { \"label\": \"Packages\", \"submenu\": [ { \"label\": \"Word Count\", \"submenu\": [ { \"label\": \"Toggle\", \"command\": \"your-name-word-count:toggle\" } ] } ] } ]  This section puts a \"Toggle\" menu item under a menu group named \"Your Name Word Count\" in the \"Packages\" menu.  When you select that menu item, it will run the your-name-word-count:toggle command, which we'll look at in a bit. The menu templates you specify are merged with all other templates provided by other packages in the order which they were loaded.  Context Menu It's recommended to specify a context menu item for commands that are linked to specific parts of the interface. In our menus/your-name-word-count.json file, we can see an auto-generated section that looks like this: \"context-menu\": { \"atom-text-editor\": [ { \"label\": \"Toggle your-name-word-count\", \"command\": \"your-name-word-count:toggle\" } ] }  This adds a \"Toggle Word Count\" menu option to the menu that pops up when you right-click in an Atom text editor pane.  When you click that it will again run the your-name-word-count:toggle method in your code. Context menus are created by determining which element was selected and then adding all of the menu items whose selectors match that element (in the order which they were loaded). The process is then repeated for the elements until reaching the top of the DOM tree. You can also add separators and submenus to your context menus. To add a submenu, provide a submenu key instead of a command. To add a separator, add an item with a single type: 'separator' key/value pair. For instance, you could do something like this: { \"context-menu\": { \"atom-workspace\": [ { \"label\": \"Text\", \"submenu\": [ { \"label\": \"Inspect Element\", \"command\": \"core:inspect\" }, { \"type\": \"separator\" }, { \"label\": \"Selector All\", \"command\": \"core:select-all\" }, { \"type\": \"separator\" }, { \"label\": \"Deleted Selected Text\", \"command\": \"core:delete\" } ] } ] } }   Developing Our Package Currently with the generated package we have, if we run that your-name-word-count:toggle command through the menu or the command palette, we'll get a dialog that says \"The YourNameWordCount package is Alive! It's ALIVE!\".   Understanding the Generated Code Let's take a look at the code in our lib directory and see what is happening. There are two files in our lib directory. One is the main file (lib/your-name-word-count.js), which is pointed to in the package.json file as the main file to execute for this package. This file handles the logic of the whole plugin. The second file is a View class, lib/your-name-word-count-view.js, which handles the UI elements of the package. Let's look at this file first, since it's pretty simple. export default class YourNameWordCountView { constructor(serializedState) { // Create root element this.element = document.createElement('div'); this.element.classList.add('your-name-word-count'); // Create message element const message = document.createElement('div'); message.textContent = 'The YourNameWordCount package is Alive! It\\'s ALIVE!'; message.classList.add('message'); this.element.appendChild(message); } // Returns an object that can be retrieved when package is activated serialize() {} // Tear down any state and detach destroy() { this.element.remove(); } getElement() { return this.element; } }  Basically the only thing happening here is that when the View class is created, it creates a simple div element and adds the your-name-word-count class to it (so we can find or style it later) and then adds the \"Your Name Word Count package is Alive!\" text to it. There is also a getElement method which returns that div. The serialize and destroy methods don't do anything and we won't have to worry about that until another example. Notice that we're simply using the basic browser DOM methods: createElement() and appendChild(). The second file we have is the main entry point to the package. Again, because it's referenced in the package.json file. Let's take a look at that file. import YourNameWordCountView from './your-name-word-count-view'; import { CompositeDisposable } from 'atom'; export default { yourNameWordCountView: null, modalPanel: null, subscriptions: null, activate(state) { this.yourNameWordCountView = new YourNameWordCountView(state.yourNameWordCountViewState); this.modalPanel = atom.workspace.addModalPanel({ item: this.yourNameWordCountView.getElement(), visible: false }); // Events subscribed to in atom's system can be easily cleaned up with a CompositeDisposable this.subscriptions = new CompositeDisposable(); // Register command that toggles this view this.subscriptions.add(atom.commands.add('atom-workspace', { 'your-name-word-count:toggle': () =&gt; this.toggle() })); }, deactivate() { this.modalPanel.destroy(); this.subscriptions.dispose(); this.yourNameWordCountView.destroy(); }, serialize() { return { yourNameWordCountViewState: this.yourNameWordCountView.serialize() }; }, toggle() { console.log('YourNameWordCount was toggled!'); return ( this.modalPanel.isVisible() ? this.modalPanel.hide() : this.modalPanel.show() ); } };  There is a bit more going on here. First of all we can see that we are defining four methods. The only required one is activate. The deactivate and serialize methods are expected by Atom but optional. The toggle method is one Atom is not looking for, so we'll have to invoke it somewhere for it to be called, which you may recall we do both in the activationCommands section of the package.json file and in the action we have in the menu file. The deactivate method simply destroys the various class instances we've created and the serialize method simply passes on the serialization to the View class. Nothing too exciting here. The activate command does a number of things. For one, it is not called automatically when Atom starts up, it is first called when one of the activationCommands as defined in the package.json file are called. In this case, activate is only called the first time the toggle command is called. If nobody ever invokes the menu item or hotkey, this code is never called. This method does two things. The first is that it creates an instance of the View class we have and adds the element that it creates to a hidden modal panel in the Atom workspace. this.yourNameWordCountView = new YourNameWordCountView(state.yourNameWordCountViewState); this.modalPanel = atom.workspace.addModalPanel({ item: this.yourNameWordCountView.getElement(), visible: false });  We'll ignore the state stuff for now, since it's not important for this simple plugin. The rest should be fairly straightforward. The next thing this method does is create an instance of the CompositeDisposable class so it can register all the commands that can be called from the plugin so other plugins could subscribe to these events. // Events subscribed to in atom's system can be easily cleaned up with a CompositeDisposable this.subscriptions = new CompositeDisposable(); // Register command that toggles this view this.subscriptions.add(atom.commands.add('atom-workspace', { 'your-name-word-count:toggle': () =&gt; this.toggle() }));  Next we have the toggle method. This method simply toggles the visibility of the modal panel that we created in the activate method. toggle() { console.log('YourNameWordCount was toggled!'); return ( this.modalPanel.isVisible() ? this.modalPanel.hide() : this.modalPanel.show() ); }  This should be fairly simple to understand. We're looking to see if the modal element is visible and hiding or showing it depending on its current state.  The Flow So, let's review the actual flow in this package.  Atom starts up Atom starts loading packages Atom reads your package.json  Atom loads keymaps, menus, styles and the main module Atom finishes loading packages At some point, the user executes your package command your-name-word-count:toggle  Atom executes the activate method in your main module which sets up the UI by creating the hidden modal view Atom executes the package command your-name-word-count:toggle which reveals the hidden modal view At some point, the user executes the your-name-word-count:toggle command again Atom executes the command which hides the modal view Eventually, Atom is shut down which can trigger any serializations that your package has defined   Tip: Keep in mind that the flow will be slightly different if you choose not to use activationCommands in your package.   Counting the Words So now that we understand what is happening, let's modify the code so that our little modal box shows us the current word count instead of static text. We'll do this in a very simple way. When the dialog is toggled, we'll count the words right before displaying the modal. So let's do this in the toggle command. If we add some code to count the words and ask the view to update itself, we'll have something like this: toggle() { if (this.modalPanel.isVisible()) { this.modalPanel.hide(); } else { const editor = atom.workspace.getActiveTextEditor(); const words = editor.getText().split(/\\s+/).length; this.yourNameWordCountView.setCount(words); this.modalPanel.show(); } }  Let's look at the 3 lines we've added. First we get an instance of the current editor object (where our text to count is) by calling atom.workspace.getActiveTextEditor(). Next we get the number of words by calling getText() on our new editor object, then splitting that text on whitespace with a regular expression and then getting the length of that array. Finally, we tell our view to update the word count it displays by calling the setCount() method on our view and then showing the modal again. Since that method doesn't yet exist, let's create it now. We can add this code to the end of our your-name-word-count-view.js file: setCount(count) { const displayText = `There are ${count} words.`; this.element.children[0].textContent = displayText; }  Pretty simple! We take the count number that was passed in and place it into a string that we then stick into the element that our view is controlling.  Note: To see your changes, you'll need to reload the code. You can do this by reloading the window (The window:reload command in the Command Palette). A common practice is to have two Atom windows, one for developing your package, and one for testing and reloading.    Basic Debugging You'll notice a few console.log statements in the code. One of the cool things about Atom being built on Chromium is that you can use some of the same debugging tools available to you that you have when doing web development. To open up the Developer Console, press Alt+Cmd+ICtrl+Shift+I, or choose the menu option View &gt; Developer &gt; Toggle Developer Tools.  From here you can inspect objects, run code and view console output just as though you were debugging a web site.  Testing Your package should have tests, and if they're placed in the spec directory, they can be run by Atom. Under the hood, Jasmine v1.3 executes your tests, so you can assume that any DSL available there is also available to your package.  Running Tests Once you've got your test suite written, you can run it by pressing Alt+Cmd+Ctrl+PAlt+Ctrl+P or via the View &gt; Developer &gt; Run Package Specs menu. Our generated package comes with an example test suite, so you can run this right now to see what happens.  You can also use the atom --test spec command to run them from the command line. It prints the test output and results to the console and returns the proper status code depending on whether the tests passed or failed.  Summary We've now generated, customized and tested our first plugin for Atom. Congratulations! Now let's go ahead and publish it so it's available to the world.",
          "excerpt": " Package: Word Count Let's get started by writing a very simple package and looking at some of the tools needed to develop one effectively. W…"
        },
      
    
      
        
        {
          "title": "Writing specs",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/writing-specs/",
          "body": " Writing Specs We've looked at and written a few specs through the examples already. Now it's time to take a closer look at the spec framework itself. How exactly do you write tests in Atom? Atom uses Jasmine as its spec framework. Any new functionality should have specs to guard against regressions.  Create a New Spec Atom specs and package specs are added to their respective spec directory. The example below creates a spec for Atom core.  Create a Spec File Spec files must end with -spec so add sample-spec.coffee to the spec directory.  Add One or More describe Methods The describe method takes two arguments, a description and a function. If the description explains a behavior it typically begins with when; if it is more like a unit test it begins with the method name. describe(\"when a test is written\", function() { // contents })  or describe(\"Editor::moveUp\", function() { // contents })   Add One or More it Methods The it method also takes two arguments, a description and a function. Try and make the description flow with the it method. For example, a description of \"this should work\" doesn't read well as \"it this should work\". But a description of \"should work\" sounds great as \"it should work\". describe(\"when a test is written\", function() { it(\"has some expectations that should pass\", function() { // Expectations }) })   Add One or More Expectations The best way to learn about expectations is to read the Jasmine documentation about them. Below is a simple example. describe(\"when a test is written\", function() { it(\"has some expectations that should pass\", function() { expect(\"apples\").toEqual(\"apples\") expect(\"oranges\").not.toEqual(\"apples\") }) })   Custom Matchers In addition to the Jasmine's built-in matchers, Atom includes the following:  jasmine-jquery The toBeInstanceOf matcher is for the instanceof operator The toHaveLength matcher compares against the .length property The toExistOnDisk matcher checks if the file exists in the filesystem The toHaveFocus matcher checks if the element currently has focus The toShow matcher tests if the element is visible in the dom  These are defined in spec/spec-helper.coffee.  Asynchronous Specs Writing Asynchronous specs can be tricky at first. Some examples.  Promises Working with promises is rather easy in Atom. You can use our waitsForPromise function. describe(\"when we open a file\", function() { it(\"should be opened in an editor\", function() { waitsForPromise(function() { atom.workspace.open('c.coffee').then(editor =&gt; expect(editor.getPath()).toContain('c.coffee')) }) }) })  This method can be used in the describe, it, beforeEach and afterEach functions. describe(\"when we open a file\", function() { beforeEach(function() { waitsForPromise(() =&gt; atom.workspace.open('c.coffee')) }) it(\"should be opened in an editor\", function() { expect(atom.workspace.getActiveTextEditor().getPath()).toContain('c.coffee') }) })  If you need to wait for multiple promises use a new waitsForPromise function for each promise. (Caution: Without beforeEach this example will fail!) describe(\"waiting for the packages to load\", function() { beforeEach(function() { waitsForPromise(() =&gt; atom.workspace.open('sample.js')) waitsForPromise(() =&gt; atom.packages.activatePackage('tabs')) waitsForPromise(() =&gt; atom.packages.activatePackage('tree-view')) }); it('should have waited long enough', function() { expect(atom.packages.isPackageActive('tabs')).toBe(true) expect(atom.packages.isPackageActive('tree-view')).toBe(true) }) })  waitsForPromise can take an additional object argument before the function. The object can have the following properties:   shouldReject Whether the promise should reject or resolve (default: false)  timeout The amount of time (in ms) to wait for the promise to be resolved or rejected (default: process.env.CI ? 60000 : 5000)  label The label to display if promise times out (default: 'promise to be resolved or rejected')  describe(\"when we open a file\", function() { it(\"should be opened in an editor\", function() { waitsForPromise({ shouldReject: false, timeout: 5000, label: 'promise to be resolved or rejected' }, () =&gt; atom.workspace.open('c.coffee').then(editor =&gt; expect(editor.getPath()).toContain('c.coffee')) ) }) })   Asynchronous Functions with Callbacks Specs for asynchronous functions can be done using the waitsFor and runs functions. A simple example. describe(\"fs.readdir(path, cb)\", function() { it(\"is async\", function() { const spy = jasmine.createSpy('fs.readdirSpy') fs.readdir('/tmp/example', spy) waitsFor(() =&gt; spy.callCount &gt; 0) runs(function() { const exp = [null, ['example.coffee']] expect(spy.mostRecentCall.args).toEqual(exp) expect(spy).toHaveBeenCalledWith(null, ['example.coffee']) }) }) })  For a more detailed documentation on asynchronous tests please visit the Jasmine documentation.  Running Specs Most of the time you'll want to run specs by triggering the window:run-package-specs command. This command is not only to run package specs, it can also be used to run Atom core specs when working on Atom itself. This will run all the specs in the current project's spec directory. To run a limited subset of specs use the fdescribe or fit methods. You can use those to focus a single spec or several specs. Modified from the example above, focusing an individual spec looks like this: describe(\"when a test is written\", function() { fit(\"has some expectations that should pass\", function() { expect(\"apples\").toEqual(\"apples\") expect(\"oranges\").not.toEqual(\"apples\") }) })   Running on CI It is now easy to run the specs in a CI environment like Travis and AppVeyor. See the Travis CI For Your Packages and AppVeyor CI For Your Packages posts for more details.  Running via the Command Line To run tests on the command line, run Atom with the --test flag followed by one or more paths to test files or directories. You can also specify a --timeout option, which will force-terminate your tests after a certain number of seconds have passed.  atom --test --timeout 60 ./test/test-1.js ./test/test-2.js   Customizing your test runner  Warning: This API is available as of 1.2.0-beta0, and it is experimental and subject to change. Test runner authors should be prepared to test their code against future beta releases until it stabilizes.  By default, package tests are run with Jasmine 1.3, which is outdated but can't be changed for compatibility reasons. You can specify your own custom test runner by including an atomTestRunner field in your package.json. Atom will require whatever module you specify in this field, so you can use a relative path or the name of a module in your package's dependencies. Your test runner module must export a single function, which Atom will call within a new window to run your package's tests. Your function will be called with the following parameters:   testPaths An array of paths to tests to run. Could be paths to files or directories.  buildAtomEnvironment A function that can be called to construct an instance of the atom global. No atom global will be explicitly assigned, but you can assign one in your runner if desired. This function should be called with the following parameters:   applicationDelegate An object responsible for Atom's interaction with the browser process and host OS. Use buildDefaultApplicationDelegate for a default instance. You can override specific methods on this object to prevent or test these interactions.  window A window global.  document A document global.  configDirPath A path to the configuration directory (usually ~/.atom).  enablePersistence A boolean indicating whether the Atom environment should save or load state from the file system. You probably want this to be false.    buildDefaultApplicationDelegate A function that builds a default instance of the application delegate, suitable to be passed as the applicationDelegate parameter to buildAtomEnvironment.  logFile An optional path to a log file to which test output should be logged.  headless A boolean indicating whether or not the tests are being run from the command line via atom --test.  legacyTestRunner This function can be invoked to run the legacy Jasmine runner, giving your package a chance to transition to a new test runner while maintaining a subset of its tests in the old environment.  Your function should return a promise that resolves to an exit code when your tests are finish running. This exit code will be returned when running your tests via the command line.",
          "excerpt": " Writing Specs We've looked at and written a few specs through the examples already. Now it's time to take a closer look at the spec framewor…"
        },
      
    
      
        
        {
          "title": "Summary",
          "category": "",
          "category_url": "",
          "url": "/hacking-atom/sections/summary/",
          "body": " Summary If you finished this chapter, you should be an Atom-hacking master. We've discussed how you should work with CoffeeScript, and how to put it to good use in creating packages. You should also be able to do this in your own created theme now. Even when something goes wrong, you should be able to debug this easily. But also fewer things should go wrong, because you are capable of writing great specs for Atom. In the next chapter, we’ll go into more of a deep dive on individual internal APIs and systems of Atom, even looking at some Atom source to see how things are really getting done.",
          "excerpt": " Summary If you finished this chapter, you should be an Atom-hacking master. We've discussed how you should work with CoffeeScript, and how t…"
        },
      
    
      
        
        {
          "title": "Atom package server API",
          "category": "",
          "category_url": "",
          "url": "/atom-server-side-apis/sections/atom-package-server-api/",
          "body": " Atom package server API This guide describes the web API used by apm and Atom. The vast majority of use cases are met by the apm command-line tool, which does other useful things like incrementing your version in package.json and making sure you have pushed your git tag. In fact, Atom itself shells out to apm rather than hitting the API directly. If you're curious about how Atom uses apm, see the PackageManager class in the settings-view package.  Warning: This API should be considered pre-release and is subject to change.   Authorization For calls to the API that require authentication, provide a valid token from your atom.io account page in the Authorization header.  Media type All requests that take parameters require application/json.  API Resources  Packages  Listing packages  GET /api/packages Parameters:   page (optional)  sort (optional) - One of downloads, created_at, updated_at, stars. Defaults to downloads   direction (optional) - asc or desc. Defaults to desc. stars can only be ordered desc   Returns a list of all packages in the following format:  [ { \"releases\": { \"latest\": \"0.6.0\" }, \"name\": \"thedaniel-test-package\", \"repository\": { \"type\": \"git\", \"url\": \"https://github.com/thedaniel/test-package\" } }, ... ]  Results are paginated 30 at a time, and links to the next and last pages are provided in the Link header: Link: &lt;https://www.atom.io/api/packages?page=1&gt;; rel=\"self\", &lt;https://www.atom.io/api/packages?page=41&gt;; rel=\"last\", &lt;https://www.atom.io/api/packages?page=2&gt;; rel=\"next\"  By default, results are sorted by download count, descending.  Searching packages  GET /api/packages/search Parameters:   q (required) - Search query  page (optional)  sort (optional) - One of downloads, created_at, updated_at, stars. Defaults to the relevance of the search query.  direction (optional) - asc or desc. Defaults to desc.  Returns results in the same format as listing packages.  Showing package details  GET /api/packages/:package_name Returns package details and versions for a single package Parameters:   engine (optional) - Only show packages with versions compatible with this Atom version. Must be valid SemVer.  Returns:  { \"releases\": { \"latest\": \"0.6.0\" }, \"name\": \"thedaniel-test-package\", \"repository\": { \"type\": \"git\", \"url\": \"https://github.com/thedaniel/test-package\" }, \"versions\": [ (see single version output below) ..., ] }   Creating a package  POST /api/packages Create a new package; requires authentication. The name and version will be fetched from the package.json file in the specified repository. The authenticating user must have access to the indicated repository. Parameters:   repository - String. The repository containing the plugin, in the form \"owner/repo\"  Returns:   201 - Successfully created, returns created package.  400 - Repository is inaccessible, nonexistent, not an atom package. Possible error messages include:  That repo does not exist, isn't an atom package, or atombot does not have access The package.json at owner/repo isn't valid    409 - A package by that name already exists   Deleting a package  DELETE /api/packages/:package_name Delete a package; requires authentication. Returns:   204 - Success  400 - Repository is inaccessible  401 - Unauthorized   Renaming a package Packages are renamed by publishing a new version with the name changed in package.json. See Creating a new package version for details. Requests made to the previous name will forward to the new name.  Package Versions  GET /api/packages/:package_name/versions/:version_name Returns package.json with dist key added for e.g. tarball download:  { \"bugs\": { \"url\": \"https://github.com/thedaniel/test-package/issues\" }, \"dependencies\": { \"async\": \"~0.2.6\", \"pegjs\": \"~0.7.0\", \"season\": \"~0.13.0\" }, \"description\": \"Expand snippets matching the current prefix with `tab`.\", \"dist\": { \"tarball\": \"https://codeload.github.com/...\" }, \"engines\": { \"atom\": \"*\" }, \"main\": \"./lib/snippets\", \"name\": \"thedaniel-test-package\", \"publishConfig\": { \"registry\": \"https://...\", }, \"repository\": { \"type\": \"git\", \"url\": \"https://github.com/thedaniel/test-package.git\" }, \"version\": \"0.6.0\" }   Creating a new package version  POST /api/packages/:package_name/versions Creates a new package version from a git tag; requires authentication. If rename is not true, the name field in package.json must match the current package name. Parameters:   tag - A git tag for the version you'd like to create. It's important to note that the version name will not be taken from the tag, but from the version key in the package.json file at that ref. The authenticating user must have access to the package repository.  rename - Boolean indicating whether this version contains a new name for the package.  Returns:   201 - Successfully created. Returns created version.  400 - Git tag not found / Repository inaccessible / package.json invalid  409 - Version exists   Deleting a version  DELETE /api/packages/:package_name/versions/:version_name Deletes a package version; requires authentication. Note that a version cannot be republished with a different tag if it is deleted. If you need to delete the latest version of a package for example for security reasons, you'll need to increment the version when republishing. Returns 204 No Content  Stars  Listing user stars  GET /api/users/:login/stars List a user's starred packages. Return value is similar to GET /api/packages  GET /api/stars List the authenticated user's starred packages; requires authentication. Return value is similar to GET /api/packages  Starring a package  POST /api/packages/:name/star Star a package; requires authentication. Returns a package.  Unstarring a package  DELETE /api/packages/:name/star Unstar a package; requires authentication. Returns 204 No Content.  Listing a package's stargazers  GET /api/packages/:name/stargazers List the users that have starred a package. Returns a list of user objects: [ {\"login\":\"aperson\"}, {\"login\":\"anotherperson\"}, ] ",
          "excerpt": " Atom package server API This guide describes the web API used by apm and Atom. The vast majority of use cases are met by the apm command-lin…"
        },
      
    
      
        
        {
          "title": "Atom update server API",
          "category": "",
          "category_url": "",
          "url": "/atom-server-side-apis/sections/atom-update-server-api/",
          "body": " Atom update server API  Warning: This API should be considered pre-release and is subject to change.   Atom updates  Listing Atom updates  GET /api/updates Atom update feed, following the format expected by Squirrel. Returns: { \"name\": \"0.96.0\", \"notes\": \"[HTML release notes]\", \"pub_date\": \"2014-05-19T15:52:06.000Z\", \"url\": \"https://www.atom.io/api/updates/download\" } ",
          "excerpt": " Atom update server API  Warning: This API should be considered pre-release and is subject to change.   Atom updates  Listing Atom updates  G…"
        },
      
    
      
        
        {
          "title": "How do I make Atom recognize a file with extension X as language Y?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/how-do-i-make-atom-recognize-a-file-with-extension-x-as-language-y/",
          "body": " How do I make Atom recognize a file with extension X as language Y? Atom includes a feature called \"custom file types\" which you can use by adding some entries into your config.cson that look like this: core: customFileTypes: 'source.ruby': [ 'Cheffile' 'this-is-also-ruby' ] 'source.cpp': [ 'h' ]  The key (for example source.ruby in the above snippet) is the language's scope name. The value is an array of file extensions, without the period, to match to that scope name.",
          "excerpt": " How do I make Atom recognize a file with extension X as language Y? Atom includes a feature called \"custom file types\" which you can use b…"
        },
      
    
      
        
        {
          "title": "What is this line on the right in the editor view?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/what-is-this-line-on-the-right-in-the-editor-view/",
          "body": " What is this line on the right in the editor view?  That's the wrap guide. It is a visual indicator of when your lines of code are getting too long. It defaults to the column that your Preferred Line Length is set to. If you want to turn it off, you can disable the wrap-guide package in the Settings View.",
          "excerpt": " What is this line on the right in the editor view?  That's the wrap guide. It is a visual indicator of when your lines of code are getting t…"
        },
      
    
      
        
        {
          "title": "How do I uninstall Atom on macOS?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/how-do-i-uninstall-atom-on-macos/",
          "body": " How do I uninstall Atom on macOS? To uninstall Atom on macOS, run the following commands from the command line:  rm -rf ~/.atom rm -rf /usr/local/bin/atom rm -rf /usr/local/bin/apm rm -rf /Applications/Atom.app rm -rf ~/Library/Preferences/com.github.atom.plist rm -rf \"~/Library/Application Support/com.github.atom.ShipIt\" rm -rf \"~/Library/Application Support/Atom\" rm -rf \"~/Library/Saved Application State/com.github.atom.savedState\" rm -rf ~/Library/Caches/com.github.atom rm -rf ~/Library/Caches/Atom ",
          "excerpt": " How do I uninstall Atom on macOS? To uninstall Atom on macOS, run the following commands from the command line:  rm -rf ~/.atom rm -rf /usr/…"
        },
      
    
      
        
        {
          "title": "What's the difference between an IDE and an editor?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/what-s-the-difference-between-an-ide-and-an-editor/",
          "body": " What's the difference between an IDE and an editor? The term \"IDE\" comes from Integrated Development Environment. It is intended as a set of tools that all work together: text editor, compiler, build or make integration, debugging, etc. Virtually all IDEs are tied specifically to a language or framework or tightly collected set of languages or frameworks. Some examples: Visual Studio for .NET and other Microsoft languages, RubyMine for Ruby, IntelliJ for Java, XCode for Apple technologies. An editor is simply that, a tool that is designed to edit text. Typically they are optimized for programming languages though many programmer's text editors are branching out and adding features for non-programming text like Markdown or Org Mode. The key here is that text editors are designed to work with whatever language or framework you choose. The tradeoff here is that while you can generally get off the ground faster if you're working within the realm of a given IDE, over the long term you spend a bunch of time retraining yourself when you inevitably change from one language or toolchain to the next. If you use an editor, you can continue to use the same workflows that you always have. Tools that you've built into your editor can be carried over to the next language and framework. Your editor becomes more powerful and more customized to how you want to work not just over years but potentially decades. Just ask people who use vim or Emacs ... both of which have been available for over 25 years! So, if you want something that you can just jump into and be productive right away in a specific technology, perhaps an IDE is what you're looking for. If you want a tool that you can shape and customize into exactly what you want out of it even if it costs you some time up front configuring things, then an editor is probably more your speed ",
          "excerpt": " What's the difference between an IDE and an editor? The term \"IDE\" comes from Integrated Development Environment. It is intended as a set …"
        },
      
    
      
        
        {
          "title": "MacOS Mojave font rendering change",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/macos-mojave-font-rendering-change/",
          "body": " MacOS Mojave font rendering change In macOS Mojave v10.14.x, Apple disabled subpixel antialiasing on all monitors by default. Previous to Mojave, subpixel antialiasing was disabled only on Retina displays or on all displays if the \"LCD font smoothing\" option was disabled in System Preferences. With this change in Mojave, some users have reported that their fonts in Atom appear \"thinner\" or \"dimmer\" than they did previously. It can look better or worse depending on your font and theme selections, but in all cases this is completely a side-effect of the change that Apple made to their font rendering and is outside Atom's and Electron's control. If this change is something that you dislike, there are a couple workarounds that the community has identified.  Change the OS defaults  Execute at the Terminal: defaults write -g CGFontRenderingFontSmoothingDisabled -bool NO  Completely exit Atom Start Atom again  This appears to re-enable the old \"LCD font smoothing\" option that was removed in Mojave. It is important to note that this is an OS-wide change.  Change your font weight Add the following to your stylesheet: atom-text-editor { font-weight: bold; }  This has the benefit of being a change local to Atom only if the rest of the OS looks fine to you.",
          "excerpt": " MacOS Mojave font rendering change In macOS Mojave v10.14.x, Apple disabled subpixel antialiasing on all monitors by default. Previous to Mo…"
        },
      
    
      
        
        {
          "title": "How do I turn on line wrap?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/how-do-i-turn-on-line-wrap/",
          "body": " How do I turn on line wrap?  Open the Settings View using Cmd+, on macOS or Ctrl+, on other platforms Click the “Editor” tab on the left of the settings view Put a check in the “Soft Wrap” setting  For more details about soft wrap, see: https://flight-manual.atom.io/getting-started/sections/atom-basics/#soft-wrap.",
          "excerpt": " How do I turn on line wrap?  Open the Settings View using Cmd+, on macOS or Ctrl+, on other platforms Click the “Editor” tab on the left of …"
        },
      
    
      
        
        {
          "title": "I’m trying to change my syntax colors from styles.less, but it isn’t working!",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/i-m-trying-to-change-my-syntax-colors-from-styles-less-but-it-isn-t-working/",
          "body": " I’m trying to change my syntax colors from styles.less, but it isn’t working! The best way to tweak the syntax is to wrap your syntax style rules with atom-text-editor and then prepend every scope with syntax--. If you want your comments to be blue, for example, you would do the following: atom-text-editor { .syntax--comment { color: blue; } } ",
          "excerpt": " I’m trying to change my syntax colors from styles.less, but it isn’t working! The best way to tweak the syntax is to wrap your syntax style …"
        },
      
    
      
        
        {
          "title": "I’m using an international keyboard and keys that use AltGr or Ctrl+Alt aren’t working",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/i-m-using-an-international-keyboard-and-keys-that-use-altgr-or-ctrl-alt-aren-t-working/",
          "body": " I’m using an international keyboard and keys that use AltGr or Ctrl+Alt aren’t working As of Atom v1.12, a fix is available for this. See the blog post \"The Wonderful World of Keyboards\" for more information.",
          "excerpt": " I’m using an international keyboard and keys that use AltGr or Ctrl+Alt aren’t working As of Atom v1.12, a fix is available for this. See th…"
        },
      
    
      
        
        {
          "title": "What platforms does Atom run on?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/what-platforms-does-atom-run-on/",
          "body": " What platforms does Atom run on? Prebuilt versions of Atom are available for OS X 10.10 or later, Windows 7 or later, RedHat Linux, and Ubuntu Linux. If you would like to build from source on Windows, Linux, or OS X, see the Atom README for more information.",
          "excerpt": " What platforms does Atom run on? Prebuilt versions of Atom are available for OS X 10.10 or later, Windows 7 or later, RedHat Linux, and Ubun…"
        },
      
    
      
        
        {
          "title": "Atom in the cloud?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/atom-in-the-cloud/",
          "body": " Atom in the cloud? The Atom team has no plans to make a cloud- or server-based version of Atom. For discussion of the idea, see the Atom message board.",
          "excerpt": " Atom in the cloud? The Atom team has no plans to make a cloud- or server-based version of Atom. For discussion of the idea, see the Atom mes…"
        },
      
    
      
        
        {
          "title": "Is Atom open source?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/is-atom-open-source/",
          "body": " Is Atom open source? Yes, Atom is licensed under the MIT license.",
          "excerpt": " Is Atom open source? Yes, Atom is licensed under the MIT license.…"
        },
      
    
      
        
        {
          "title": "How can I tell if subpixel antialiasing is working?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/how-can-i-tell-if-subpixel-antialiasing-is-working/",
          "body": " How can I tell if subpixel antialiasing is working? If you take a screenshot and blow it up you'll see something like this:  The text of lines 34-36 are subpixel antialiased. Line 37 is not. You can tell it is subpixel antialiased because one side of the characters will be shifted red and the other side will be shifted blue. The direction of the shift is dependent on the monitor being used. You can find more information on subpixel rendering on Wikipedia.",
          "excerpt": " How can I tell if subpixel antialiasing is working? If you take a screenshot and blow it up you'll see something like this:  The text of lin…"
        },
      
    
      
        
        {
          "title": "I have a question about a specific Atom community package. Where is the best place to ask it?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/i-have-a-question-about-a-specific-atom-community-package-where-is-the-best-place-to-ask-it/",
          "body": " I have a question about a specific Atom community package. Where is the best place to ask it? The best place to get a question answered quickly is probably the Issues list for that specific package. You can find the Issues list for a package by going to that package's page on https://atom.io and clicking the Bugs button:  And you can always ask Atom-related questions in the official Atom message board. Someone here may know the answer! It's just with over 3,500 packages (as of early February 2016), the forum members may not know all answers for all packages ",
          "excerpt": " I have a question about a specific Atom community package. Where is the best place to ask it? The best place to get a question answered quic…"
        },
      
    
      
        
        {
          "title": "Why is Atom deleting trailing whitespace? Why is there a newline at the end of the file?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/why-is-atom-deleting-trailing-whitespace-why-is-there-a-newline-at-the-end-of-the-file/",
          "body": " Why is Atom deleting trailing whitespace? Why is there a newline at the end of the file? Atom ships with the whitespace package, which by default strips trailing whitespace from lines in your file, and inserts a final trailing newline to indicate end-of-file as per the POSIX standard. You can disable this feature by going to the Packages list in the Settings View and finding the whitespace package:  Take a look at the Whitespace section for more information.",
          "excerpt": " Why is Atom deleting trailing whitespace? Why is there a newline at the end of the file? Atom ships with the whitespace package, which by de…"
        },
      
    
      
        
        {
          "title": "How do I preview web page changes automatically?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/how-do-i-preview-web-page-changes-automatically/",
          "body": " How do I preview web page changes automatically? There are a couple different approaches, for example:   browser-plus gives a reasonably full browser implementation within Atom  livereload gives you a preview in any browser, but requires you to save the file first.  Other packages may be available now, you can search for Atom packages on the packages site.",
          "excerpt": " How do I preview web page changes automatically? There are a couple different approaches, for example:   browser-plus gives a reasonably ful…"
        },
      
    
      
        
        {
          "title": "I’m having a problem with PlatformIO! What do I do?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/i-m-having-a-problem-with-platformio-what-do-i-do/",
          "body": " I’m having a problem with PlatformIO! What do I do? PlatformIO is a development environment built on top of Atom but has enough separate customizations that they have their own message board. If your question has to do with PlatformIO specifically, you may have better luck getting your answer there.",
          "excerpt": " I’m having a problem with PlatformIO! What do I do? PlatformIO is a development environment built on top of Atom but has enough separate cus…"
        },
      
    
      
        
        {
          "title": "Why does macOS say that Atom wants to access my calendar, contacts, photos, etc.?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/why-does-macos-say-that-atom-wants-to-access-my-calendar-contacts-photos-etc/",
          "body": " Why does macOS say that Atom wants to access my calendar, contacts, photos, etc.? With macOS 10.14 Mojave, Apple introduced new privacy protections similar to the existing protections found in iOS. Whenever an application attempts to access the files inside certain newly-protected directories, macOS asks the user whether they want to allow the application to access the content in those directories. These new privacy protections apply to the directories that contain your calendars, contacts, photos, mail, messages, and Time Machine backups. Applications trigger these new macOS prompts when attempting to access these directories in any way. Simply attempting to list the files in one of these directories is enough to trigger these prompts. These protections even apply to Apple's own applications. For example, if you open Terminal.app and try to list the files in ~/Library/Calendars, macOS shows a prompt saying, '\"Terminal\" would like access to your calendar.'   Why does Atom need access to my calendar, contacts, photos, etc.? Atom doesn't need access to these items, but you might unintentionally cause Atom to try to access these items. This commonly occurs when you open your home directory (~) inside Atom and run a command that examines all files and directories beneath your home directory. For example, when you open the fuzzy-finder, it indexes the currently-open directory so that it can show you the available files:  Similarly, using find-and-replace across the entire home directory will cause Atom to scan all files under your home directory. In addition to containing the files you're intending to edit inside Atom, your home directory also contains your files that have new OS-level protections in Mojave:  Calendar files (~/Library/Calendars) Contacts files (~/Library/Application\\ Support/AddressBook  Mail files (~/Library/Mail) Photos files (~/Pictures/Photos\\ Library.photoslibrary)  Before letting Atom read these files, Mojave is understandably asking whether you want Atom to be able to access this personal data.  What should I do when I see these prompts? Most people don't use Atom to view or edit their calendar files, contact files, photo library, etc. If you don't intend to use Atom to view/edit these files, then Atom doesn't need access to them. If you see a prompt from macOS saying that Atom would like to access these items, simply click Don't Allow.  What happens if I allow Atom to access my calendar, contacts, photos, etc.? To Atom, these items are just files on disk. Atom treats them exactly like any other file you would view in Atom. Therefore, if you allow Atom to access these items, you'll be able to use Atom to browse the directories that contain these items, and you'll be able to view the files in those directories. That's it. Nothing more.  You'll only be prompted once Fortunately, macOS will only prompt you once for each type of personal data. In other words, you might see a prompt asking you whether Atom can access your calendar, and you might see a prompt asking you whether Atom can access your contacts, but once you make those decisions, you won't see those prompts again.  What if I change my mind? At any time, you can change your choices via System Preferences. Inside System Preferences, go to Security and Privacy, click the Privacy tab, and then click on Calendars to manage which apps can access your Calendars. The same goes for Contacts, Photos, etc.:   What if I never want to see these prompts? Many people understandably expect their text editor to be able to open any file on disk. And that's exactly how things worked prior to macOS Mojave. If you would like to restore that behavior, you can proactively instruct macOS to allow you to access all files with Atom. To do so:  Open your Applications folder in the Finder Open System Preferences, click the Security and Privacy icon, click the Privacy tab, and then click on Full Disk Access in the left-hand sidebar Click the lock icon to unlock System Preferences Drag Atom into Full Disk Access as shown below  ",
          "excerpt": " Why does macOS say that Atom wants to access my calendar, contacts, photos, etc.? With macOS 10.14 Mojave, Apple introduced new privacy prot…"
        },
      
    
      
        
        {
          "title": "Why does Atom collect usage data?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/why-does-atom-collect-usage-data/",
          "body": " Why does Atom collect usage data? In the same way that aggregate usage information is important when developing a web application, we've found that it's just as important for desktop applications. By knowing which Atom features are being used the most, and how the editor is performing, we can focus our development efforts in the right place. For details on what data Atom is sending or to learn how to disable metrics gathering, visit https://github.com/atom/metrics.",
          "excerpt": " Why does Atom collect usage data? In the same way that aggregate usage information is important when developing a web application, we've fou…"
        },
      
    
      
        
        {
          "title": "The menu bar disappeared, how do I get it back?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/the-menu-bar-disappeared-how-do-i-get-it-back/",
          "body": " The menu bar disappeared, how do I get it back? If you're running Windows or Linux and you don't see the menu bar, it may have been accidentally toggled it off. You can bring it back from the Command Palette with Window: Toggle Menu Bar or by pressing Alt. You can disable hiding the menu bar with Alt by unchecking Settings &gt; Core &gt; Auto Hide Menu Bar.",
          "excerpt": " The menu bar disappeared, how do I get it back? If you're running Windows or Linux and you don't see the menu bar, it may have been accident…"
        },
      
    
      
        
        {
          "title": "How do I build or execute code I've written in Atom?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/how-do-i-build-or-execute-code-i-ve-written-in-atom/",
          "body": " How do I build or execute code I've written in Atom? Atom doesn't have built-in support for building any type of code nor does it have built-in support for executing any kind of code other than JavaScript. Atom has a JavaScript interactive command-line (also known as a REPL) available through the Developer Tools. You can access the JavaScript REPL by using the following steps:  Launch Atom Select the menu View &gt; Developer &gt; Toggle Developer Tools  Click the \"Console\" tab  If you're looking for a JavaScript execution environment beyond a REPL, Atom doesn't come with anything built-in for that purpose. If you want to build code or execute scripts from within Atom there are a number of packages available including:  build script   Resources on getting started with languages that are commonly asked about:  Python ",
          "excerpt": " How do I build or execute code I've written in Atom? Atom doesn't have built-in support for building any type of code nor does it have built…"
        },
      
    
      
        
        {
          "title": "What does Safe Mode do?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/what-does-safe-mode-do/",
          "body": " What does Safe Mode do? Atom's Safe Mode, which can be activated by completely exiting all instances of Atom and launching it again using the command atom --safe from the command line, does the following:  Does not load any packages from ~/.atom/packages or ~/.atom/dev/packages  Does not run your init.coffee  Loads only default-installed themes  The intent of Safe Mode is to determine if a problem is being caused by a community package or is caused by built-in functionality of Atom. Disabling the init script was added because people tend to use the init script as a mini-package of sorts by adding code, commands and other functionality that would normally be in a package. For more information on Safe Mode, check the debugging section.",
          "excerpt": " What does Safe Mode do? Atom's Safe Mode, which can be activated by completely exiting all instances of Atom and launching it again using th…"
        },
      
    
      
        
        {
          "title": "How do I use a newline in the result of find and replace?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/how-do-i-use-a-newline-in-the-result-of-find-and-replace/",
          "body": " How do I use a newline in the result of find and replace? To use a newline in the result of find and replace, enable the Use Regex option and use \"\\n\" in your replacement text. For example, given this text: hello, world, goodbye  If you'd like to replace the \", \" with a newline so you end up with this text: hello world goodbye  In the find and replace settings, enable Use Regex, enter \", \" as the find text, and enter \"\\n\" as the replace text:  Then click Find All and finally, click Replace All.",
          "excerpt": " How do I use a newline in the result of find and replace? To use a newline in the result of find and replace, enable the Use Regex option an…"
        },
      
    
      
        
        {
          "title": "I am unable to update to the latest version of Atom on macOS. How do I fix this?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/i-am-unable-to-update-to-the-latest-version-of-atom-on-macos-how-do-i-fix-this/",
          "body": " I am unable to update to the latest version of Atom on macOS. How do I fix this? Atom shows there is a new version available but the version fails to install. You might have an error message showing a permissions error for example:  or it will say downloading but forever loops without restarting or updating. You need to fix one or more of the following directories:  /Applications/Atom.app/ ~/Library/Caches/com.github.atom.ShipIt ~/Library/Application Support/com.github.atom.ShipIt  Do the following:  Completely exit Atom Open a terminal Execute: whoami  Write down the result of the above command, this is your user name  And then execute these steps for each directory listed above in order:  Execute: stat -f \"%Su\" [directory]  It should output either your username or root  If it says root then execute: sudo chown -R $(whoami) [directory]   Once you've done the above for both directories, start Atom normally and attempt to update ",
          "excerpt": " I am unable to update to the latest version of Atom on macOS. How do I fix this? Atom shows there is a new version available but the version…"
        },
      
    
      
        
        {
          "title": "How do I accept input from my program or script when using the script package?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/how-do-i-accept-input-from-my-program-or-script-when-using-the-script-package/",
          "body": " How do I accept input from my program or script when using the script package? The script package doesn't support accepting input from the user in the scripts it runs. The option with the best chance of success is to run the script or program from the terminal that comes with your operating system. If that isn't something you want to do, you could try one of the many terminal packages that are available. See rgbkrk/atom-script#743 for details.",
          "excerpt": " How do I accept input from my program or script when using the script package? The script package doesn't support accepting input from the u…"
        },
      
    
      
        
        {
          "title": "How can I contribute to Atom?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/how-can-i-contribute-to-atom/",
          "body": " How can I contribute to Atom? You can contribute by creating a package that adds something awesome to Atom! Also, if you’d like to contribute to the core editor, one of the bundled packages, or one of the libraries that power Atom, just go to github.com/atom. You should also read the contributing guide before getting started.",
          "excerpt": " How can I contribute to Atom? You can contribute by creating a package that adds something awesome to Atom! Also, if you’d like to contribut…"
        },
      
    
      
        
        {
          "title": "What does Atom cost?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/what-does-atom-cost/",
          "body": " What does Atom cost? Since the 6th of May, 2014, Atom has been available for download free of charge for everyone. This includes business and enterprise use.",
          "excerpt": " What does Atom cost? Since the 6th of May, 2014, Atom has been available for download free of charge for everyone. This includes business an…"
        },
      
    
      
        
        {
          "title": "How do I make the Welcome screen stop showing up?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/how-do-i-make-the-welcome-screen-stop-showing-up/",
          "body": " How do I make the Welcome screen stop showing up? You can make the Welcome screen stop showing up by unchecking this box in the welcome screen itself: ",
          "excerpt": " How do I make the Welcome screen stop showing up? You can make the Welcome screen stop showing up by unchecking this box in the welcome scre…"
        },
      
    
      
        
        {
          "title": "I’m getting an error about a “self-signed certificate”. What do I do?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/i-m-getting-an-error-about-a-self-signed-certificate-what-do-i-do/",
          "body": " I’m getting an error about a “self-signed certificate”. What do I do? This means that there is a proxy between you and our servers where someone (typically your employer) has installed a \"self-signed\" security certificate in the proxy. A self-signed certificate is one that isn't trusted by anyone but the person who created the certificate. Most security certificates are backed by known, trusted and certified companies. So Atom is warning you that your connection to our servers can be snooped and even hacked by whoever created the self-signed certificate. Since it is self-signed, Atom has no way of knowing who that is. If you decide that unsecured connections to our servers is acceptable to you, you can use the following instructions.   Danger: If you decide that unsecured connections to our servers is acceptable to you, you can use the following command:  apm config set strict-ssl false  ",
          "excerpt": " I’m getting an error about a “self-signed certificate”. What do I do? This means that there is a proxy between you and our servers where som…"
        },
      
    
      
        
        {
          "title": "I’m having a problem with Julia! What do I do?",
          "category": "",
          "category_url": "",
          "url": "/faq/sections/i-m-having-a-problem-with-julia-what-do-i-do/",
          "body": " I’m having a problem with Julia! What do I do? Juno is a development environment built on top of Atom but has enough separate customizations that they have their own message board. You will probably have better luck asking your question there.",
          "excerpt": " I’m having a problem with Julia! What do I do? Juno is a development environment built on top of Atom but has enough separate customizations…"
        },
      
    
      
        
        {
          "title": "Developing Node Modules",
          "category": "",
          "category_url": "",
          "url": "/behind-atom/sections/developing-node-modules/",
          "body": " Developing Node Modules Atom contains a number of packages that are Node modules instead of Atom packages. If you want to make changes to the Node modules, for instance atom-keymap, you have to link them into the development environment differently than you would a normal Atom package.  Linking a Node Module Into Your Atom Dev Environment Here are the steps to run a local version of a Node module within Atom. We're using atom-keymap as an example:   git clone https://github.com/atom/atom-keymap.git cd atom-keymap npm install npm link cd WHERE YOU CLONED ATOM npm link atom-keymap # This is the special step, it makes the Node module work with Atom's version of Node apm rebuild # If you have cloned Atom in a different location than %USERPROFILE%\\github\\atom # you need to set the following environment variable setx ATOM_DEV_RESOURCE_PATH=WHERE YOU CLONED ATOM # Should work! atom --dev .     git clone https://github.com/atom/atom-keymap.git cd atom-keymap npm install npm link cd WHERE YOU CLONED ATOM npm link atom-keymap # This is the special step, it makes the Node module work with Atom's version of Node apm rebuild # If you have cloned Atom in a different location than ~/github/atom # you need to set the following environment variable export ATOM_DEV_RESOURCE_PATH=WHERE YOU CLONED ATOM # Should work! atom --dev .     git clone https://github.com/atom/atom-keymap.git cd atom-keymap npm install npm link cd WHERE YOU CLONED ATOM npm link atom-keymap # This is the special step, it makes the Node module work with Atom's version of Node apm rebuild # If you have cloned Atom in a different location than ~/github/atom # you need to set the following environment variable export ATOM_DEV_RESOURCE_PATH=WHERE YOU CLONED ATOM # Should work! atom --dev .   After you get the Node module linked and working, every time you make a change to the Node module's code, you will have to exit Atom and do the following:  cd WHERE YOU CLONED THE NODE MODULE npm install cd WHERE YOU CLONED ATOM apm rebuild atom --dev . ",
          "excerpt": " Developing Node Modules Atom contains a number of packages that are Node modules instead of Atom packages. If you want to make changes to th…"
        },
      
    
      
        
        {
          "title": "Serialization in Atom",
          "category": "",
          "category_url": "",
          "url": "/behind-atom/sections/serialization-in-atom/",
          "body": " Serialization in Atom When a window is refreshed or restored from a previous session, the view and its associated objects are deserialized from a JSON representation that was stored during the window's previous shutdown. For your own views and objects to be compatible with refreshing, you'll need to make them play nicely with the serializing and deserializing.  Package Serialization Hook Your package's main module can optionally include a serialize method, which will be called before your package is deactivated. You should return a JSON-serializable object, which will be handed back to you as an object argument to activate next time it is called. In the following example, the package keeps an instance of MyObject in the same state across refreshes. module.exports = { activate(state) { this.myObject = state ? atom.deserializers.deserialize(state) : new MyObject(\"Hello\") }, serialize() { return this.myObject.serialize() } }   Serialization Methods class MyObject { constructor(data) { this.data = data } serialize() { return { deserializer: 'MyObject', data: this.data } } }   serialize()  Objects that you want to serialize should implement .serialize(). This method should return a serializable object, and it must contain a key named deserializer whose value is the name of a registered deserializer that can convert the rest of the data to an object. It's usually just the name of the class itself.  Registering Deserializers The other side of the coin is deserializers, whose job is to convert a state object returned from a previous call to serialize back into a genuine object.  deserializers in package.json  The preferred way to register deserializers is via your package's package.json file: { \"name\": \"wordcount\", ... \"deserializers\": { \"MyObject\": \"deserializeMyObject\" } }  Here, the key (\"MyObject\") is the name of the deserializer—the same string used by the deserializer field in the object returned by your serialize() method. The value (\"deserializeMyObject\") is the name of a function in your main module that'll be passed the serialized data and will return a genuine object. For example, your main module might look like this: module.exports = { deserializeMyObject({data}) { return new MyObject(data) } }  Now you can call the global deserialize method with state returned from serialize, and your class's deserialize method will be selected automatically.  atom.deserializers.add(klass) An alternative is to use the atom.deserializers.add method with your class in order to make it available to the deserialization system. Usually this is used in conjunction with a class-level deserialize method: class MyObject { static initClass() { atom.deserializers.add(this) } static deserialize({data}) { return new MyObject(data) } constructor(data) { this.data = data; } serialize() { return { deserializer: 'MyObject', data: this.data } } } MyObject.initClass()  While this used to be the standard method of registering a deserializer, the package.json method is now preferred since it allows Atom to defer loading and executing your code until it's actually needed.  Versioning class MyObject { static initClass() { atom.deserializers.add(this); this.version = 2; } static deserialize(state) { // ... } serialize() { return { version: this.constructor.version, // ... } } } MyObject.initClass();  Your serializable class can optionally have a class-level @version property and include a version key in its serialized state. When deserializing, Atom will only attempt to call deserialize if the two versions match, and otherwise return undefined. We plan on implementing a migration system in the future, but this at least protects you from improperly deserializing old state.",
          "excerpt": " Serialization in Atom When a window is refreshed or restored from a previous session, the view and its associated objects are deserialized f…"
        },
      
    
      
        
        {
          "title": "Keymaps In-Depth",
          "category": "",
          "category_url": "",
          "url": "/behind-atom/sections/keymaps-in-depth/",
          "body": " Keymaps In-Depth  Structure of a Keymap File Keymap files are encoded as JSON or CSON files containing nested hashes. They work much like style sheets, but instead of applying style properties to elements matching the selector, they specify the meaning of keystrokes on elements matching the selector. Here is an example of some bindings that apply when keystrokes pass through atom-text-editor elements:  'atom-text-editor': 'cmd-delete': 'editor:delete-to-beginning-of-line' 'alt-backspace': 'editor:delete-to-beginning-of-word' 'ctrl-A': 'editor:select-to-first-character-of-line' 'ctrl-shift-e': 'editor:select-to-end-of-line' 'cmd-left': 'editor:move-to-first-character-of-line' 'atom-text-editor:not([mini])': 'cmd-alt-[': 'editor:fold-current-row' 'cmd-alt-]': 'editor:unfold-current-row'    'atom-text-editor': 'ctrl-left': 'editor:move-to-beginning-of-word' 'ctrl-right': 'editor:move-to-end-of-word' 'ctrl-shift-left': 'editor:select-to-beginning-of-word' 'ctrl-shift-right': 'editor:select-to-end-of-word' 'ctrl-backspace': 'editor:delete-to-beginning-of-word' 'ctrl-delete': 'editor:delete-to-end-of-word' 'atom-text-editor:not([mini])': 'ctrl-alt-[': 'editor:fold-current-row' 'ctrl-alt-]': 'editor:unfold-current-row'    'atom-text-editor': 'ctrl-left': 'editor:move-to-beginning-of-word' 'ctrl-right': 'editor:move-to-end-of-word' 'ctrl-shift-left': 'editor:select-to-beginning-of-word' 'ctrl-shift-right': 'editor:select-to-end-of-word' 'ctrl-backspace': 'editor:delete-to-beginning-of-word' 'ctrl-delete': 'editor:delete-to-end-of-word' 'atom-text-editor:not([mini])': 'ctrl-alt-[': 'editor:fold-current-row' 'ctrl-alt-]': 'editor:unfold-current-row'   Beneath the first selector are several keybindings, mapping specific key combinations to commands. When an element with the atom-text-editor class is focused and Alt+BackspaceCtrl+Backspace is pressed, a custom DOM event called editor:delete-to-beginning-of-word is emitted on the atom-text-editor element. The second selector group also targets editors, but only if they don't have the mini attribute. In this example, the commands for code folding don't really make sense on mini-editors, so the selector restricts them to regular editors.  Key Combinations Key combinations express one or more keys combined with optional modifier keys. For example: ctrl-w v, or cmd-shift-up. A key combination is composed of the following symbols, separated by a -. A key sequence can be expressed as key combinations separated by spaces.    Type Examples     Character literals  a 4 $    Modifier keys  cmd ctrl alt shift    Special keys  enter escape backspace delete tab home end pageup pagedown left right up down space      Commands Commands are custom DOM events that are triggered when a key combination or sequence matches a binding. This allows user interface code to listen for named commands without specifying the specific keybinding that triggers it. For example, the following code creates a command to insert the current date in an editor: atom.commands.add('atom-text-editor', { 'user:insert-date': function (event) { const editor = this.getModel(); return editor.insertText(new Date().toLocaleString()); } });  atom.commands refers to the global CommandRegistry instance where all commands are set and consequently picked up by the command palette. When you are looking to bind new keys, it is often useful to use the Command Palette (Cmd+Shift+PCtrl+Shift+P) to discover what commands are being listened for in a given focus context. Commands are \"humanized\" following a simple algorithm, so a command like editor:fold-current-row would appear as \"Editor: Fold Current Row\".  \"Composed\" Commands A common question is, \"How do I make a single keybinding execute two or more commands?\" There isn't any direct support for this in Atom, but it can be achieved by creating a custom command that performs the multiple actions you desire and then creating a keybinding for that command. For example, let's say I want to create a \"composed\" command that performs a Select Line followed by Cut. You could add the following to your init.coffee: atom.commands.add('atom-text-editor', 'custom:cut-line', function () { const editor = this.getModel(); editor.selectLinesContainingCursors(); editor.cutSelectedText(); });  Then let's say we want to map this custom command to alt-ctrl-z, you could add the following to your keymap: 'atom-text-editor': 'alt-ctrl-z': 'custom:cut-line'   Specificity and Cascade Order As is the case with CSS applying styles, when multiple bindings match for a single element, the conflict is resolved by choosing the most specific selector. If two matching selectors have the same specificity, the binding for the selector appearing later in the cascade takes precedence. Currently, there's no way to specify selector ordering within a single keymap, because JSON objects do not preserve order. We handle cases where selector ordering is critical by breaking the keymap into separate files, such as snippets-1.cson and snippets-2.cson.  Selectors and Custom Packages If a keybinding should only apply to a specific grammar, you can limit bindings to that grammar using the data-grammar attribute on the atom-text-editor element: \"atom-text-editor[data-grammar='source example']\": 'ctrl-.': 'custom:custom-command'  While selectors can be applied to the entire editor by what grammar is associated with it, they cannot be applied to scopes defined within the grammar or to sub-elements of atom-text-editor.  Removing Bindings When the keymap system encounters a binding with the unset! directive as its command, it will treat the current element as if it had no key bindings matching the current keystroke sequence and continue searching from its parent. For example, the following code removes the keybinding for a in the Tree View, which is normally used to trigger the tree-view:add-file command: '.tree-view': 'a': 'unset!'   But if some element above the Tree View had a keybinding for a, that keybinding would still execute even when the focus is inside the Tree View. When the keymap system encounters a binding with the abort! directive as its command, it will stop searching for a keybinding. For example, the following code removes the keybinding for Cmd+OCtrl+O when the selection is inside an editor pane:  'atom-text-editor': 'cmd-o': 'abort!'    'atom-text-editor': 'ctrl-o': 'abort!'    'atom-text-editor': 'ctrl-o': 'abort!'   But if you click inside the Tree View and press Cmd+OCtrl+O, it will work.  Forcing Chromium's Native Keystroke Handling If you want to force the native browser behavior for a given keystroke, use the native! directive as the command of a binding. This can be useful to enable the correct behavior in native input elements. If you apply the .native-key-bindings class to an element, all the keystrokes typically handled by the browser will be assigned the native! directive.  Tip: Components and input elements may not correctly handle backspace and arrow keys without forcing this behavior. If your backspace isn't working correctly inside of a component, add either the directive or the .native-key-bindings class.   Overloading Key Bindings Occasionally, it makes sense to layer multiple actions on top of the same key binding. An example of this is the snippets package. Snippets are inserted by typing a snippet prefix such as for and then pressing Tab. Every time Tab is pressed, we want to execute code attempting to expand a snippet if one exists for the text preceding the cursor. If a snippet doesn't exist, we want Tab to actually insert whitespace. To achieve this, the snippets package makes use of the .abortKeyBinding() method on the event object representing the snippets:expand command. // pseudo-code editor.command('snippets:expand', e =&gt; { if (this.cursorFollowsValidPrefix()) { this.expandSnippet(); } else { e.abortKeyBinding(); } });  When the event handler observes that the cursor does not follow a valid prefix, it calls e.abortKeyBinding(), telling the keymap system to continue searching for another matching binding.  Step-by-Step: How Keydown Events are Mapped to Commands  A keydown event occurs on a focused element. Starting at the focused element, the keymap walks upward towards the root of the document, searching for the most specific CSS selector that matches the current DOM element and also contains a keystroke pattern matching the keydown event. When a matching keystroke pattern is found, the search is terminated and the pattern's corresponding command is triggered on the current element. If .abortKeyBinding() is called on the triggered event object, the search is resumed, triggering a binding on the next-most-specific CSS selector for the same element or continuing upward to parent elements. If no bindings are found, the event is handled by Chromium normally.   Overriding Atom's Keyboard Layout Recognition Sometimes the problem isn't mapping the command to a key combination, the problem is that Atom doesn't recognize properly what keys you're pressing. This is due to some limitations in how Chromium reports keyboard events. But even this can be customized now. You can add the following to your init.coffee to send Ctrl+@ when you press Ctrl+Alt+G: atom.keymaps.addKeystrokeResolver ({event}) -&gt; if event.code is 'KeyG' and event.altKey and event.ctrlKey and event.type isnt 'keyup' return 'ctrl-@'  Or if you've converted your init script to JavaScript: atom.keymaps.addKeystrokeResolver(({event}) =&gt; { if (event.code === 'KeyG' &amp;&amp; event.altKey &amp;&amp; event.ctrlKey &amp;&amp; event.type !== 'keyup') { return 'ctrl-@'; } });  If you want to know the event for the keystroke you pressed you can paste the following script to your developer tools console document.addEventListener('keydown', e =&gt; console.log(e), true);  This will print every keypress event in Atom to the console so you can inspect KeyboardEvent.key and KeyboardEvent.code.",
          "excerpt": " Keymaps In-Depth  Structure of a Keymap File Keymap files are encoded as JSON or CSON files containing nested hashes. They work much like st…"
        },
      
    
      
        
        {
          "title": "Configuration API",
          "category": "",
          "category_url": "",
          "url": "/behind-atom/sections/configuration-api/",
          "body": " Configuration API  Reading Config Settings If you are writing a package that you want to make configurable, you'll need to read config settings via the atom.config global. You can read the current value of a namespaced config key with atom.config.get: // read a value with `config.get` if (atom.config.get(\"editor.showInvisibles\")) { this.showInvisibles() }  Or you can subscribe via atom.config.observe to track changes from any view object. const {View} = require('space-pen') class MyView extends View { function attached() { this.fontSizeObserveSubscription = atom.config.observe('editor.fontSize', (newValue, {previous}) =&gt; { this.adjustFontSize(newValue) }) } function detached() { this.fontSizeObserveSubscription.dispose() } }  The atom.config.observe method will call the given callback immediately with the current value for the specified key path, and it will also call it in the future whenever the value of that key path changes. If you only want to invoke the callback the next time the value changes, use atom.config.onDidChange instead. Subscription methods return Disposable objects that can be used to unsubscribe. Note in the example above how we save the subscription to the @fontSizeObserveSubscription instance variable and dispose of it when the view is detached. To group multiple subscriptions together, you can add them all to a CompositeDisposable that you dispose when the view is detached.  Writing Config Settings The atom.config database is populated on startup from ~/.atom/config.cson%USERPROFILE%\\.atom\\config.cson, but you can programmatically write to it with atom.config.set: // basic key update atom.config.set(\"core.showInvisibles\", true)  If you're exposing package configuration via specific key paths, you'll want to associate them with a schema in your package's main module. Read more about schemas in the Config API documentation.",
          "excerpt": " Configuration API  Reading Config Settings If you are writing a package that you want to make configurable, you'll need to read config setti…"
        },
      
    
      
        
        {
          "title": "Scoped Settings, Scopes and Scope Descriptors",
          "category": "",
          "category_url": "",
          "url": "/behind-atom/sections/scoped-settings-scopes-and-scope-descriptors/",
          "body": " Scoped Settings, Scopes and Scope Descriptors Atom supports language-specific settings. You can soft wrap only Markdown files, or set the tab length to 4 in Python files. Language-specific settings are a subset of something more general we call \"scoped settings\". Scoped settings allow targeting down to a specific syntax token type. For example, you could conceivably set a setting to target only Ruby comments, only code inside Markdown files, or even only JavaScript function names.  Scope Names in Syntax Tokens Each token in the editor has a collection of scope names. For example, the aforementioned JavaScript function name might have the scope names function and name. An open paren might have the scope names punctuation, parameters, begin. Scope names work just like CSS classes. In fact, in the editor, scope names are attached to a token's DOM node as CSS classes. Take this piece of JavaScript: function functionName() { console.log('Log it out'); }  In the dev tools, the first line's markup looks like this.  All the class names on the spans are scope names. Any scope name can be used to target a setting's value.  Scope Selectors Scope selectors allow you to target specific tokens just like a CSS selector targets specific nodes in the DOM. Some examples: '.source.js' # selects all javascript tokens '.source.js .function.name' # selects all javascript function names '.function.name' # selects all function names in any language  Config::set accepts a scopeSelector. If you'd like to set a setting for JavaScript function names, you can give it the JavaScript function name scopeSelector: atom.config.set('my-package.my-setting', 'special value', {scopeSelector: '.source.js .function.name'})   Scope Descriptors A scope descriptor is an Object that wraps an Array of Strings. The Array describes a path from the root of the syntax tree to a token including all scope names for the entire path. In our JavaScript example above, a scope descriptor for the function name token would be: ['source.js', 'meta.function.js', 'entity.name.function.js']  Config::get accepts a scopeDescriptor. You can get the value for your setting scoped to JavaScript function names via: const scopeDescriptor = ['source.js', 'meta.function.js', 'entity.name.function.js'] const value = atom.config.get('my-package.my-setting', {scope: scopeDescriptor})  But, you do not need to generate scope descriptors by hand. There are a couple methods available to get the scope descriptor from the editor:   Editor::getRootScopeDescriptor to get the language's descriptor. For example: [\".source.js\"]   Editor::scopeDescriptorForBufferPosition to get the descriptor at a specific position in the buffer.  Cursor::getScopeDescriptor to get a cursor's descriptor based on position. eg. if the cursor were in the name of the method in our example it would return [\"source.js\", \"meta.function.js\", \"entity.name.function.js\"]   Let's revisit our example using these methods: const editor = atom.workspace.getActiveTextEditor() const cursor = editor.getLastCursor() const valueAtCursor = atom.config.get('my-package.my-setting', {scope: cursor.getScopeDescriptor()}) const valueForLanguage = atom.config.get('my-package.my-setting', {scope: editor.getRootScopeDescriptor()}) ",
          "excerpt": " Scoped Settings, Scopes and Scope Descriptors Atom supports language-specific settings. You can soft wrap only Markdown files, or set the ta…"
        },
      
    
      
        
        {
          "title": "Interacting With Other Packages Via Services",
          "category": "",
          "category_url": "",
          "url": "/behind-atom/sections/interacting-with-other-packages-via-services/",
          "body": " Interacting With Other Packages Via Services Atom packages can interact with each other through versioned APIs called services. To provide a service, in your package.json, specify one or more version numbers, each paired with the name of a method on your package's main module: { \"providedServices\": { \"my-service\": { \"description\": \"Does a useful thing\", \"versions\": { \"1.2.3\": \"provideMyServiceV1\", \"2.3.4\": \"provideMyServiceV2\" } } } }  In your package's main module, implement the methods named above. These methods will be called any time a package is activated that consumes their corresponding service. They should return a value that implements the service's API. module.exports = { activate() { // ... }, provideMyServiceV1() { return adaptToLegacyAPI(myService) }, provideMyServiceV2() { return myService } }  Similarly, to consume a service, specify one or more version ranges, each paired with the name of a method on the package's main module: { \"consumedServices\": { \"another-service\": { \"versions\": { \"^1.2.3\": \"consumeAnotherServiceV1\", \"&gt;=2.3.4 &lt;2.5\": \"consumeAnotherServiceV2\" } } } }  These methods will be called any time a package is activated that provides their corresponding service. They will receive the service object as an argument. You will usually need to perform some kind of cleanup in the event that the package providing the service is deactivated. To do this, return a Disposable from your service-consuming method: const {Disposable} = require('atom'); module.exports = { activate() { // ... }, consumeAnotherServiceV1(service) { useService(adaptServiceFromLegacyAPI(service)); return new Disposable(() =&gt; stopUsingService(service)) }, consumeAnotherServiceV2(service) { useService(service) return new Disposable(() =&gt; stopUsingService(service)) } } ",
          "excerpt": " Interacting With Other Packages Via Services Atom packages can interact with each other through versioned APIs called services. To provide a…"
        },
      
    
      
        
        {
          "title": "Maintaining Your Packages",
          "category": "",
          "category_url": "",
          "url": "/behind-atom/sections/maintaining-your-packages/",
          "body": " Maintaining Your Packages While publishing is, by far, the most common action you will perform when working with the packages you provide, there are other things you may need to do.  Publishing a Package Manually  Danger:  Publishing a package manually is not a recommended practice and is only for the advanced user who has published packages before. If you perform the steps wrong, you may be unable to publish the new version of your package and may have to completely unpublish your package in order to correct the faulty state. You have been warned.  Some people prefer to control every aspect of the package publishing process. Normally, the apm tool manages certain details during publishing to keep things consistent and make everything work smoothly. If you're one of those people that prefers to do things manually, there are certain steps you'll have to take in order to make things work just as smoothly as if apm has taken care of things for you.  Note: The apm tool will only publish and https://atom.io will only list packages that are hosted on GitHub, regardless of what process is used to publish them.  When you have completed the changes that you want to publish and are ready to start the publishing process, you must perform the following steps on the master branch:  Update the version number in your package's package.json. The version number must match the regular expression: ^\\d+\\.\\d+\\.\\d+  Commit the version number change Create a Git tag referencing the above commit. The tag must match the regular expression ^v\\d+\\.\\d+\\.\\d+ and the part after the v must match the full text of the version number in the package.json  Execute git push --follow-tags  Execute apm publish --tag tagname where tagname must match the name of the tag created in the above step   Adding a Collaborator Some packages get too big for one person. Sometimes priorities change and someone else wants to help out. You can let others help or create co-owners by adding them as a collaborator on the GitHub repository for your package. Note: Anyone that has push access to your repository will have the ability to publish new versions of the package that belongs to that repository. You can also have packages that are owned by a GitHub organization. Anyone who is a member of an organization's team which has push access to the package's repository will be able to publish new versions of the package.  Transferring Ownership  Danger:  This is a permanent change. There is no going back!   If you want to hand off support of your package to someone else, you can do that by transferring the package's repository to the new owner. Once you do that, they can publish a new version with the updated repository information in the package.json.  Unpublish Your Package If you no longer want to support your package and cannot find anyone to take it over, you can unpublish your package from https://atom.io. For example, if your package is named package-name then the command you would execute is:  apm unpublish package-name  This will remove your package from the https://atom.io package registry. Anyone who has already downloaded a copy of your package will still have it and be able to use it, but it will no longer be available for installation by others.  Unpublish a Specific Version If you mistakenly published a version of your package or perhaps you find a glaring bug or security hole, you may want to unpublish just that version of your package. For example, if your package is named package-name and the bad version of your package is v1.2.3 then the command you would execute is:  apm unpublish package-name@1.2.3  This will remove just this particular version from the https://atom.io package registry.  Rename Your Package If you need to rename your package for any reason, you can do so with one simple command – apm publish --rename changes the name field in your package's package.json, pushes a new commit and tag, and publishes your renamed package. Requests made to the previous name will be forwarded to the new name.  apm publish --rename new-package-name   Tip: Once a package name has been used, it cannot be re-used by another package even if the original package is unpublished. ",
          "excerpt": " Maintaining Your Packages While publishing is, by far, the most common action you will perform when working with the packages you provide, t…"
        },
      
    
      
        
        {
          "title": "How Atom Uses Chromium Snapshots",
          "category": "",
          "category_url": "",
          "url": "/behind-atom/sections/how-atom-uses-chromium-snapshots/",
          "body": " How Atom Uses Chromium Snapshots In order to improve startup time, when Atom is built we create a V8 snapshot in which we preload core services and packages. Then, at runtime, we finish loading Atom by supplying all the information we didn't have during the compilation phase (e.g. loading third party packages, custom style sheets, configuration, etc.). electron-link is the tool that powers snapshots, as it enables us to traverse the entire require graph (starting at the entry point) and replace all the forbidden require calls (e.g. require calls to native modules, node core modules or other modules that can't be accessed in the snapshot V8 context) with a function that will be called at runtime. When adding new code to Atom, we always try to put it inside the snapshot by, for example, deferring the usage of DOM APIs or native node modules to a later moment in time when those facilities are available. If that is not possible, we will add the unsupported code paths to the list of files that get excluded from the snapshot, ensuring we only exclude those ones that are not supported as opposed to skipping an entire Node module. The output of electron-link is a single script containing the code for all the modules reachable from the entry point, which we then supply to mksnapshot to generate a snapshot blob. The generated blob is finally copied into the application bundle and will be automatically loaded by Electron when running Atom.",
          "excerpt": " How Atom Uses Chromium Snapshots In order to improve startup time, when Atom is built we create a V8 snapshot in which we preload core servi…"
        },
      
    
      
        
        {
          "title": "Summary",
          "category": "",
          "category_url": "",
          "url": "/behind-atom/sections/summary/",
          "body": " Summary You should now have a better understanding of some of the core Atom APIs and systems.",
          "excerpt": " Summary You should now have a better understanding of some of the core Atom APIs and systems.…"
        },
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    

    
      
      

      {
        "title": "DisplayMarkerLayer",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/DisplayMarkerLayer",
        "body": "*Experimental:* A container for a related set of markers at the {DisplayLayer} level. Wraps an underlying {MarkerLayer} on the {TextBuffer}. This API is experimental and subject to change on any release.",
        "excerpt": "*Experimental:* A container for a related set of markers at the {DisplayLayer} level. Wraps an underlying {MarkerLayer} on the {TextBuffer}. ..."
      },

      

      
      
        
        {
          "title": "DisplayMarkerLayer::destroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-destroy",
          "body": "Destroy this layer.",
          "excerpt": "Destroy this layer...."
        },
      
        
        {
          "title": "DisplayMarkerLayer::isDestroyed",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-isDestroyed",
          "body": "Determine whether this layer has been destroyed.",
          "excerpt": "Determine whether this layer has been destroyed...."
        },
      
        
        {
          "title": "DisplayMarkerLayer::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-onDidDestroy",
          "body": "Subscribe to be notified synchronously when this layer is destroyed.",
          "excerpt": "Subscribe to be notified synchronously when this layer is destroyed...."
        },
      
        
        {
          "title": "DisplayMarkerLayer::onDidUpdate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-onDidUpdate",
          "body": "Subscribe to be notified asynchronously whenever markers are created, updated, or destroyed on this layer. *Prefer this method for optimal performance when interacting with layers that could contain large numbers of markers.* Subscribers are notified once, asynchronously when any number of changes occur in a given tick of the event loop. You should re-query the layer to determine the state of markers in which you're interested in. It may be counter-intuitive, but this is much more efficient than subscribing to events on individual markers, which are expensive to deliver.",
          "excerpt": "Subscribe to be notified asynchronously whenever markers are created, updated, or destroyed on this layer. *Prefer this method for optimal pe..."
        },
      
        
        {
          "title": "DisplayMarkerLayer::onDidCreateMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-onDidCreateMarker",
          "body": "Subscribe to be notified synchronously whenever markers are created on this layer. *Avoid this method for optimal performance when interacting with layers that could contain large numbers of markers.* You should prefer {onDidUpdate} when synchronous notifications aren't absolutely necessary.",
          "excerpt": "Subscribe to be notified synchronously whenever markers are created on this layer. *Avoid this method for optimal performance when interactin..."
        },
      
        
        {
          "title": "DisplayMarkerLayer::markScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-markScreenRange",
          "body": "Create a marker with the given screen range.",
          "excerpt": "Create a marker with the given screen range...."
        },
      
        
        {
          "title": "DisplayMarkerLayer::markScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-markScreenPosition",
          "body": "Create a marker on this layer with its head at the given screen position and no tail.",
          "excerpt": "Create a marker on this layer with its head at the given screen position and no tail...."
        },
      
        
        {
          "title": "DisplayMarkerLayer::markBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-markBufferRange",
          "body": "Create a marker with the given buffer range.",
          "excerpt": "Create a marker with the given buffer range...."
        },
      
        
        {
          "title": "DisplayMarkerLayer::markBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-markBufferPosition",
          "body": "Create a marker on this layer with its head at the given buffer position and no tail.",
          "excerpt": "Create a marker on this layer with its head at the given buffer position and no tail...."
        },
      
        
        {
          "title": "DisplayMarkerLayer::getMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-getMarker",
          "body": "Get an existing marker by its id.",
          "excerpt": "Get an existing marker by its id...."
        },
      
        
        {
          "title": "DisplayMarkerLayer::getMarkers",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-getMarkers",
          "body": "Get all markers in the layer.",
          "excerpt": "Get all markers in the layer...."
        },
      
        
        {
          "title": "DisplayMarkerLayer::getMarkerCount",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-getMarkerCount",
          "body": "Get the number of markers in the marker layer.",
          "excerpt": "Get the number of markers in the marker layer...."
        },
      
        
        {
          "title": "DisplayMarkerLayer::findMarkers",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarkerLayer/#instance-findMarkers",
          "body": "Find markers in the layer conforming to the given parameters. This method finds markers based on the given properties. Markers can be associated with custom properties that will be compared with basic equality. In addition, there are several special properties that will be compared with the range of the markers rather than their properties.",
          "excerpt": "Find markers in the layer conforming to the given parameters. This method finds markers based on the given properties. Markers can be associa..."
        },
      
    
      
      

      {
        "title": "Decoration",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Decoration",
        "body": "Represents a decoration that follows a {DisplayMarker}. A decoration is basically a visual representation of a marker. It allows you to add CSS classes to line numbers in the gutter, lines, and add selection-line regions around marked ranges of text. {Decoration} objects are not meant to be created directly, but created with {TextEditor::decorateMarker}. eg. ```coffee range = editor.getSelectedBufferRange() # any range you like marker = editor.markBufferRange(range) decoration = editor.decorateMarker(marker, {type: 'line', class: 'my-line-class'}) ``` Best practice for destroying the decoration is by destroying the {DisplayMarker}. ```coffee marker.destroy() ``` You should only use {Decoration::destroy} when you still need or do not own the marker.",
        "excerpt": "Represents a decoration that follows a {DisplayMarker}. A decoration is basically a visual representation of a marker. It allows you to add C..."
      },

      

      
      
        
        {
          "title": "Decoration::destroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Decoration/#instance-destroy",
          "body": "Destroy this marker decoration. You can also destroy the marker if you own it, which will destroy this decoration.",
          "excerpt": "Destroy this marker decoration. You can also destroy the marker if you own it, which will destroy this decoration...."
        },
      
        
        {
          "title": "Decoration::onDidChangeProperties",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Decoration/#instance-onDidChangeProperties",
          "body": "When the {Decoration} is updated via {Decoration::update}.",
          "excerpt": "When the {Decoration} is updated via {Decoration::update}...."
        },
      
        
        {
          "title": "Decoration::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Decoration/#instance-onDidDestroy",
          "body": "Invoke the given callback when the {Decoration} is destroyed",
          "excerpt": "Invoke the given callback when the {Decoration} is destroyed..."
        },
      
        
        {
          "title": "Decoration::getId",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Decoration/#instance-getId",
          "body": "An id unique across all {Decoration} objects",
          "excerpt": "An id unique across all {Decoration} objects..."
        },
      
        
        {
          "title": "Decoration::getMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Decoration/#instance-getMarker",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Decoration::getProperties",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Decoration/#instance-getProperties",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Decoration::setProperties",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Decoration/#instance-setProperties",
          "body": "Update the marker with new Properties. Allows you to change the decoration's class.",
          "excerpt": "Update the marker with new Properties. Allows you to change the decoration's class...."
        },
      
    
      
      

      {
        "title": "Gutter",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Gutter",
        "body": "Represents a gutter within a {TextEditor}. See {TextEditor::addGutter} for information on creating a gutter.",
        "excerpt": "Represents a gutter within a {TextEditor}. See {TextEditor::addGutter} for information on creating a gutter...."
      },

      

      
      
        
        {
          "title": "Gutter::destroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Gutter/#instance-destroy",
          "body": "Destroys the gutter.",
          "excerpt": "Destroys the gutter...."
        },
      
        
        {
          "title": "Gutter::onDidChangeVisible",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Gutter/#instance-onDidChangeVisible",
          "body": "Calls your `callback` when the gutter's visibility changes.",
          "excerpt": "Calls your `callback` when the gutter's visibility changes...."
        },
      
        
        {
          "title": "Gutter::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Gutter/#instance-onDidDestroy",
          "body": "Calls your `callback` when the gutter is destroyed.",
          "excerpt": "Calls your `callback` when the gutter is destroyed...."
        },
      
        
        {
          "title": "Gutter::hide",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Gutter/#instance-hide",
          "body": "Hide the gutter.",
          "excerpt": "Hide the gutter...."
        },
      
        
        {
          "title": "Gutter::show",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Gutter/#instance-show",
          "body": "Show the gutter.",
          "excerpt": "Show the gutter...."
        },
      
        
        {
          "title": "Gutter::isVisible",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Gutter/#instance-isVisible",
          "body": "Determine whether the gutter is visible.",
          "excerpt": "Determine whether the gutter is visible...."
        },
      
        
        {
          "title": "Gutter::decorateMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Gutter/#instance-decorateMarker",
          "body": "Add a decoration that tracks a {DisplayMarker}. When the marker moves, is invalidated, or is destroyed, the decoration will be updated to reflect the marker's state.",
          "excerpt": "Add a decoration that tracks a {DisplayMarker}. When the marker moves, is invalidated, or is destroyed, the decoration will be updated to ref..."
        },
      
    
      
      

      {
        "title": "KeymapManager",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/KeymapManager",
        "body": "Allows commands to be associated with keystrokes in a context-sensitive way. In Atom, you can access a global instance of this object via `atom.keymaps`. Key bindings are plain JavaScript objects containing **CSS selectors** as their top level keys, then **keystroke patterns** mapped to commands. ```cson '.workspace': 'ctrl-l': 'package:do-something' 'ctrl-z': 'package:do-something-else' '.mini.editor': 'enter': 'core:confirm' ``` When a keystroke sequence matches a binding in a given context, a custom DOM event with a type based on the command is dispatched on the target of the keyboard event. To match a keystroke sequence, the keymap starts at the target element for the keyboard event. It looks for key bindings associated with selectors that match the target element. If multiple match, the most specific is selected. If there is a tie in specificity, the most recently added binding wins. If no bindings are found for the events target, the search is repeated again for the target's parent node and so on recursively until a binding is found or we traverse off the top of the document. When a binding is found, its command event is always dispatched on the original target of the keyboard event, even if the matching element is higher up in the DOM. In addition, `.preventDefault()` is called on the keyboard event to prevent the browser from taking action. `.preventDefault` is only called if a matching binding is found. Command event objects have a non-standard method called `.abortKeyBinding()`. If your command handler is invoked but you programmatically determine that no action can be taken and you want to allow other bindings to be matched, call `.abortKeyBinding()` on the event object. An example of where this is useful is binding snippet expansion to `tab`. If `snippets:expand` is invoked when the cursor does not follow a valid snippet prefix, we abort the binding and allow `tab` to be handled by the default handler, which inserts whitespace. Multi-keystroke bindings are possible. If a sequence of one or more keystrokes *partially* matches a multi-keystroke binding, the keymap enters a pending state. The pending state is terminated on the next keystroke, or after {::partialMatchTimeout} milliseconds has elapsed. When the pending state is terminated via a timeout or a keystroke that leads to no matches, the longest ambiguous bindings that caused the pending state are temporarily disabled and the previous keystrokes are replayed. If there is ambiguity again during the replay, the next longest bindings are disabled and the keystrokes are replayed again.",
        "excerpt": "Allows commands to be associated with keystrokes in a context-sensitive way. In Atom, you can access a global instance of this object via `at..."
      },

      
        
        {
          "title": "KeymapManager::buildKeydownEvent",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#buildKeydownEvent",
          "body": "Create a keydown DOM event for testing purposes.",
          "excerpt": "Create a keydown DOM event for testing purposes...."
        },
      

      
      
        
        {
          "title": "KeymapManager::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-constructor",
          "body": "Create a new KeymapManager.",
          "excerpt": "Create a new KeymapManager...."
        },
      
        
        {
          "title": "KeymapManager::clear",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-clear",
          "body": "Clear all registered key bindings and enqueued keystrokes. For use in tests.",
          "excerpt": "Clear all registered key bindings and enqueued keystrokes. For use in tests...."
        },
      
        
        {
          "title": "KeymapManager::destroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-destroy",
          "body": "Unwatch all watched paths.",
          "excerpt": "Unwatch all watched paths...."
        },
      
        
        {
          "title": "KeymapManager::onDidMatchBinding",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-onDidMatchBinding",
          "body": "Invoke the given callback when one or more keystrokes completely match a key binding.",
          "excerpt": "Invoke the given callback when one or more keystrokes completely match a key binding...."
        },
      
        
        {
          "title": "KeymapManager::onDidPartiallyMatchBindings",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-onDidPartiallyMatchBindings",
          "body": "Invoke the given callback when one or more keystrokes partially match a binding.",
          "excerpt": "Invoke the given callback when one or more keystrokes partially match a binding...."
        },
      
        
        {
          "title": "KeymapManager::onDidFailToMatchBinding",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-onDidFailToMatchBinding",
          "body": "Invoke the given callback when one or more keystrokes fail to match any bindings.",
          "excerpt": "Invoke the given callback when one or more keystrokes fail to match any bindings...."
        },
      
        
        {
          "title": "KeymapManager::onDidFailToReadFile",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-onDidFailToReadFile",
          "body": "Invoke the given callback when a keymap file not able to be loaded.",
          "excerpt": "Invoke the given callback when a keymap file not able to be loaded...."
        },
      
        
        {
          "title": "KeymapManager::add",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-add",
          "body": "Add sets of key bindings grouped by CSS selector.",
          "excerpt": "Add sets of key bindings grouped by CSS selector...."
        },
      
        
        {
          "title": "KeymapManager::getKeyBindings",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-getKeyBindings",
          "body": "Get all current key bindings.",
          "excerpt": "Get all current key bindings...."
        },
      
        
        {
          "title": "KeymapManager::findKeyBindings",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-findKeyBindings",
          "body": "Get the key bindings for a given command and optional target.",
          "excerpt": "Get the key bindings for a given command and optional target...."
        },
      
        
        {
          "title": "KeymapManager::loadKeymap",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-loadKeymap",
          "body": "Load the key bindings from the given path.",
          "excerpt": "Load the key bindings from the given path...."
        },
      
        
        {
          "title": "KeymapManager::watchKeymap",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-watchKeymap",
          "body": "Cause the keymap to reload the key bindings file at the given path whenever it changes. This method doesn't perform the initial load of the key bindings file. If that's what you're looking for, call {::loadKeymap} with `watch: true`.",
          "excerpt": "Cause the keymap to reload the key bindings file at the given path whenever it changes. This method doesn't perform the initial load of the k..."
        },
      
        
        {
          "title": "KeymapManager::handleKeyboardEvent",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-handleKeyboardEvent",
          "body": "Dispatch a custom event associated with the matching key binding for the given `KeyboardEvent` if one can be found. If a matching binding is found on the event's target or one of its ancestors, `.preventDefault()` is called on the keyboard event and the binding's command is emitted as a custom event on the matching element. If the matching binding's command is 'native!', the method will terminate without calling `.preventDefault()` on the keyboard event, allowing the browser to handle it as normal. If the matching binding's command is 'unset!', the search will continue from the current element's parent. If the matching binding's command is 'abort!', the search will terminate without dispatching a command event. If the event's target is `document.body`, it will be treated as if its target is `.defaultTarget` if that property is assigned on the keymap.",
          "excerpt": "Dispatch a custom event associated with the matching key binding for the given `KeyboardEvent` if one can be found. If a matching binding is ..."
        },
      
        
        {
          "title": "KeymapManager::keystrokeForKeyboardEvent",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-keystrokeForKeyboardEvent",
          "body": "Translate a keydown event to a keystroke string.",
          "excerpt": "Translate a keydown event to a keystroke string...."
        },
      
        
        {
          "title": "KeymapManager::getPartialMatchTimeout",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/KeymapManager/#instance-getPartialMatchTimeout",
          "body": "Get the number of milliseconds allowed before pending states caused by partial matches of multi-keystroke bindings are terminated.",
          "excerpt": "Get the number of milliseconds allowed before pending states caused by partial matches of multi-keystroke bindings are terminated...."
        },
      
    
      
      

      {
        "title": "Grammar",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Grammar",
        "body": "Grammar that tokenizes lines of text. This class should not be instantiated directly but instead obtained from a {GrammarRegistry} by calling {GrammarRegistry::loadGrammar}.",
        "excerpt": "Grammar that tokenizes lines of text. This class should not be instantiated directly but instead obtained from a {GrammarRegistry} by calling..."
      },

      

      
      
        
        {
          "title": "Grammar::onDidUpdate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Grammar/#instance-onDidUpdate",
          "body": "Invoke the given callback when this grammar is updated due to a grammar it depends on being added or removed from the registry.",
          "excerpt": "Invoke the given callback when this grammar is updated due to a grammar it depends on being added or removed from the registry...."
        },
      
        
        {
          "title": "Grammar::tokenizeLines",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Grammar/#instance-tokenizeLines",
          "body": "Tokenize all lines in the given text.",
          "excerpt": "Tokenize all lines in the given text...."
        },
      
        
        {
          "title": "Grammar::tokenizeLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Grammar/#instance-tokenizeLine",
          "body": "Tokenize the line of text.",
          "excerpt": "Tokenize the line of text...."
        },
      
    
      
      

      {
        "title": "GitRepository",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/GitRepository",
        "body": "Represents the underlying git operations performed by Atom. This class shouldn't be instantiated directly but instead by accessing the `atom.project` global and calling `getRepositories()`. Note that this will only be available when the project is backed by a Git repository. This class handles submodules automatically by taking a `path` argument to many of the methods. This `path` argument will determine which underlying repository is used. For a repository with submodules this would have the following outcome: ```coffee repo = atom.project.getRepositories()[0] repo.getShortHead() # 'master' repo.getShortHead('vendor/path/to/a/submodule') # 'dead1234' ```",
        "excerpt": "Represents the underlying git operations performed by Atom. This class shouldn't be instantiated directly but instead by accessing the `atom...."
      },

      
        
        {
          "title": "GitRepository::open",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#open",
          "body": "Creates a new GitRepository instance.",
          "excerpt": "Creates a new GitRepository instance...."
        },
      

      
      
        
        {
          "title": "GitRepository::destroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-destroy",
          "body": "Destroy this {GitRepository} object. This destroys any tasks and subscriptions and releases the underlying libgit2 repository handle. This method is idempotent.",
          "excerpt": "Destroy this {GitRepository} object. This destroys any tasks and subscriptions and releases the underlying libgit2 repository handle. This me..."
        },
      
        
        {
          "title": "GitRepository::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-onDidDestroy",
          "body": "Invoke the given callback when this GitRepository's destroy() method is invoked.",
          "excerpt": "Invoke the given callback when this GitRepository's destroy() method is invoked...."
        },
      
        
        {
          "title": "GitRepository::onDidChangeStatus",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-onDidChangeStatus",
          "body": "Invoke the given callback when a specific file's status has changed. When a file is updated, reloaded, etc, and the status changes, this will be fired.",
          "excerpt": "Invoke the given callback when a specific file's status has changed. When a file is updated, reloaded, etc, and the status changes, this will..."
        },
      
        
        {
          "title": "GitRepository::onDidChangeStatuses",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-onDidChangeStatuses",
          "body": "Invoke the given callback when a multiple files' statuses have changed. For example, on window focus, the status of all the paths in the repo is checked. If any of them have changed, this will be fired. Call {::getPathStatus(path)} to get the status for your path of choice.",
          "excerpt": "Invoke the given callback when a multiple files' statuses have changed. For example, on window focus, the status of all the paths in the repo..."
        },
      
        
        {
          "title": "GitRepository::getType",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getType",
          "body": "A {String} indicating the type of version control system used by this repository.",
          "excerpt": "A {String} indicating the type of version control system used by this repository...."
        },
      
        
        {
          "title": "GitRepository::getPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getPath",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::getWorkingDirectory",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getWorkingDirectory",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::isProjectAtRoot",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-isProjectAtRoot",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::relativize",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-relativize",
          "body": "Makes a path relative to the repository's working directory.",
          "excerpt": "Makes a path relative to the repository's working directory...."
        },
      
        
        {
          "title": "GitRepository::hasBranch",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-hasBranch",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::getShortHead",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getShortHead",
          "body": "Retrieves a shortened version of the HEAD reference value. This removes the leading segments of `refs/heads`, `refs/tags`, or `refs/remotes`. It also shortens the SHA-1 of a detached `HEAD` to 7 characters.",
          "excerpt": "Retrieves a shortened version of the HEAD reference value. This removes the leading segments of `refs/heads`, `refs/tags`, or `refs/remotes`...."
        },
      
        
        {
          "title": "GitRepository::isSubmodule",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-isSubmodule",
          "body": "Is the given path a submodule in the repository?",
          "excerpt": "Is the given path a submodule in the repository?..."
        },
      
        
        {
          "title": "GitRepository::getAheadBehindCount",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getAheadBehindCount",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::getCachedUpstreamAheadBehindCount",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getCachedUpstreamAheadBehindCount",
          "body": "Get the cached ahead/behind commit counts for the current branch's upstream branch.",
          "excerpt": "Get the cached ahead/behind commit counts for the current branch's upstream branch...."
        },
      
        
        {
          "title": "GitRepository::getConfigValue",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getConfigValue",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::getOriginURL",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getOriginURL",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::getUpstreamBranch",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getUpstreamBranch",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::getReferences",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getReferences",
          "body": "Gets all the local and remote references.",
          "excerpt": "Gets all the local and remote references...."
        },
      
        
        {
          "title": "GitRepository::getReferenceTarget",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getReferenceTarget",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::isPathModified",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-isPathModified",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::isPathNew",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-isPathNew",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::isPathIgnored",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-isPathIgnored",
          "body": "Is the given path ignored?",
          "excerpt": "Is the given path ignored?..."
        },
      
        
        {
          "title": "GitRepository::getDirectoryStatus",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getDirectoryStatus",
          "body": "Get the status of a directory in the repository's working directory.",
          "excerpt": "Get the status of a directory in the repository's working directory...."
        },
      
        
        {
          "title": "GitRepository::getPathStatus",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getPathStatus",
          "body": "Get the status of a single path in the repository. `path` A {String} repository-relative path.",
          "excerpt": "Get the status of a single path in the repository. `path` A {String} repository-relative path...."
        },
      
        
        {
          "title": "GitRepository::getCachedPathStatus",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getCachedPathStatus",
          "body": "Get the cached status for the given path.",
          "excerpt": "Get the cached status for the given path...."
        },
      
        
        {
          "title": "GitRepository::isStatusModified",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-isStatusModified",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::isStatusNew",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-isStatusNew",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "GitRepository::getDiffStats",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getDiffStats",
          "body": "Retrieves the number of lines added and removed to a path. This compares the working directory contents of the path to the `HEAD` version.",
          "excerpt": "Retrieves the number of lines added and removed to a path. This compares the working directory contents of the path to the `HEAD` version...."
        },
      
        
        {
          "title": "GitRepository::getLineDiffs",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-getLineDiffs",
          "body": "Retrieves the line diffs comparing the `HEAD` version of the given path and the given text.",
          "excerpt": "Retrieves the line diffs comparing the `HEAD` version of the given path and the given text...."
        },
      
        
        {
          "title": "GitRepository::checkoutHead",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-checkoutHead",
          "body": "Restore the contents of a path in the working directory and index to the version at `HEAD`. This is essentially the same as running: ```sh git reset HEAD --  git checkout HEAD --  ```",
          "excerpt": "Restore the contents of a path in the working directory and index to the version at `HEAD`. This is essentially the same as running: ```sh gi..."
        },
      
        
        {
          "title": "GitRepository::checkoutReference",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GitRepository/#instance-checkoutReference",
          "body": "Checks out a branch in your repository.",
          "excerpt": "Checks out a branch in your repository...."
        },
      
    
      
      

      {
        "title": "ViewRegistry",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/ViewRegistry",
        "body": "`ViewRegistry` handles the association between model and view types in Atom. We call this association a View Provider. As in, for a given model, this class can provide a view via {::getView}, as long as the model/view association was registered via {::addViewProvider} If you're adding your own kind of pane item, a good strategy for all but the simplest items is to separate the model and the view. The model handles application logic and is the primary point of API interaction. The view just handles presentation. View providers inform the workspace how your model objects should be presented in the DOM. A view provider must always return a DOM node, which makes [HTML 5 custom elements](http://www.html5rocks.com/en/tutorials/webcomponents/customelements/) an ideal tool for implementing views in Atom. You can access the `ViewRegistry` object via `atom.views`.",
        "excerpt": "`ViewRegistry` handles the association between model and view types in Atom. We call this association a View Provider. As in, for a given mod..."
      },

      

      
      
        
        {
          "title": "ViewRegistry::addViewProvider",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ViewRegistry/#instance-addViewProvider",
          "body": "Add a provider that will be used to construct views in the workspace's view layer based on model objects in its model layer.",
          "excerpt": "Add a provider that will be used to construct views in the workspace's view layer based on model objects in its model layer...."
        },
      
        
        {
          "title": "ViewRegistry::getView",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ViewRegistry/#instance-getView",
          "body": "Get the view associated with an object in the workspace. If you're just *using* the workspace, you shouldn't need to access the view layer, but view layer access may be necessary if you want to perform DOM manipulation that isn't supported via the model API. ## View Resolution Algorithm The view associated with the object is resolved using the following sequence 1. Is the object an instance of `HTMLElement`? If true, return the object. 1. Does the object have a property named `element` with a value which is an instance of `HTMLElement`? If true, return the property value. 1. Is the object a jQuery object, indicated by the presence of a `jquery` property? If true, return the root DOM element (i.e. `object[0]`). 1. Has a view provider been registered for the object? If true, use the provider to create a view associated with the object, and return the view. If no associated view is returned by the sequence an error is thrown.",
          "excerpt": "Get the view associated with an object in the workspace. If you're just *using* the workspace, you shouldn't need to access the view layer, b..."
        },
      
    
      
      

      {
        "title": "AtomEnvironment",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/AtomEnvironment",
        "body": "Atom global for dealing with packages, themes, menus, and the window. An instance of this class is always available as the `atom` global.",
        "excerpt": "Atom global for dealing with packages, themes, menus, and the window. An instance of this class is always available as the `atom` global...."
      },

      

      
      
        
        {
          "title": "AtomEnvironment::commands",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-commands",
          "body": "A {CommandRegistry} instance",
          "excerpt": "A {CommandRegistry} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::config",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-config",
          "body": "A {Config} instance",
          "excerpt": "A {Config} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::clipboard",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-clipboard",
          "body": "A {Clipboard} instance",
          "excerpt": "A {Clipboard} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::contextMenu",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-contextMenu",
          "body": "A {ContextMenuManager} instance",
          "excerpt": "A {ContextMenuManager} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::menu",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-menu",
          "body": "A {MenuManager} instance",
          "excerpt": "A {MenuManager} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::keymaps",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-keymaps",
          "body": "A {KeymapManager} instance",
          "excerpt": "A {KeymapManager} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::tooltips",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-tooltips",
          "body": "A {TooltipManager} instance",
          "excerpt": "A {TooltipManager} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::notifications",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-notifications",
          "body": "A {NotificationManager} instance",
          "excerpt": "A {NotificationManager} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::project",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-project",
          "body": "A {Project} instance",
          "excerpt": "A {Project} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::grammars",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-grammars",
          "body": "A {GrammarRegistry} instance",
          "excerpt": "A {GrammarRegistry} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::packages",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-packages",
          "body": "A {PackageManager} instance",
          "excerpt": "A {PackageManager} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::themes",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-themes",
          "body": "A {ThemeManager} instance",
          "excerpt": "A {ThemeManager} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::styles",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-styles",
          "body": "A {StyleManager} instance",
          "excerpt": "A {StyleManager} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::deserializers",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-deserializers",
          "body": "A {DeserializerManager} instance",
          "excerpt": "A {DeserializerManager} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::views",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-views",
          "body": "A {ViewRegistry} instance",
          "excerpt": "A {ViewRegistry} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::workspace",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-workspace",
          "body": "A {Workspace} instance",
          "excerpt": "A {Workspace} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::textEditors",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-textEditors",
          "body": "A {TextEditorRegistry} instance",
          "excerpt": "A {TextEditorRegistry} instance..."
        },
      
        
        {
          "title": "AtomEnvironment::onDidBeep",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-onDidBeep",
          "body": "Invoke the given callback whenever {::beep} is called.",
          "excerpt": "Invoke the given callback whenever {::beep} is called...."
        },
      
        
        {
          "title": "AtomEnvironment::onWillThrowError",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-onWillThrowError",
          "body": "Invoke the given callback when there is an unhandled error, but before the devtools pop open",
          "excerpt": "Invoke the given callback when there is an unhandled error, but before the devtools pop open..."
        },
      
        
        {
          "title": "AtomEnvironment::onDidThrowError",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-onDidThrowError",
          "body": "Invoke the given callback whenever there is an unhandled error.",
          "excerpt": "Invoke the given callback whenever there is an unhandled error...."
        },
      
        
        {
          "title": "AtomEnvironment::inDevMode",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-inDevMode",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "AtomEnvironment::inSafeMode",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-inSafeMode",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "AtomEnvironment::inSpecMode",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-inSpecMode",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "AtomEnvironment::getVersion",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-getVersion",
          "body": "Get the version of the Atom application.",
          "excerpt": "Get the version of the Atom application...."
        },
      
        
        {
          "title": "AtomEnvironment::isReleasedVersion",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-isReleasedVersion",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "AtomEnvironment::getWindowLoadTime",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-getWindowLoadTime",
          "body": "Get the time taken to completely load the current window. This time include things like loading and activating packages, creating DOM elements for the editor, and reading the config.",
          "excerpt": "Get the time taken to completely load the current window. This time include things like loading and activating packages, creating DOM element..."
        },
      
        
        {
          "title": "AtomEnvironment::getLoadSettings",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-getLoadSettings",
          "body": "Get the load settings for the current window.",
          "excerpt": "Get the load settings for the current window...."
        },
      
        
        {
          "title": "AtomEnvironment::open",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-open",
          "body": "Open a new Atom window using the given options. Calling this method without an options parameter will open a prompt to pick a file/folder to open in the new window.",
          "excerpt": "Open a new Atom window using the given options. Calling this method without an options parameter will open a prompt to pick a file/folder to ..."
        },
      
        
        {
          "title": "AtomEnvironment::pickFolder",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-pickFolder",
          "body": "Prompt the user to select one or more folders.",
          "excerpt": "Prompt the user to select one or more folders...."
        },
      
        
        {
          "title": "AtomEnvironment::close",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-close",
          "body": "Close the current window.",
          "excerpt": "Close the current window...."
        },
      
        
        {
          "title": "AtomEnvironment::getSize",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-getSize",
          "body": "Get the size of current window.",
          "excerpt": "Get the size of current window...."
        },
      
        
        {
          "title": "AtomEnvironment::setSize",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-setSize",
          "body": "Set the size of current window.",
          "excerpt": "Set the size of current window...."
        },
      
        
        {
          "title": "AtomEnvironment::getPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-getPosition",
          "body": "Get the position of current window.",
          "excerpt": "Get the position of current window...."
        },
      
        
        {
          "title": "AtomEnvironment::setPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-setPosition",
          "body": "Set the position of current window.",
          "excerpt": "Set the position of current window...."
        },
      
        
        {
          "title": "AtomEnvironment::getCurrentWindow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-getCurrentWindow",
          "body": "Get the current window",
          "excerpt": "Get the current window..."
        },
      
        
        {
          "title": "AtomEnvironment::center",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-center",
          "body": "Move current window to the center of the screen.",
          "excerpt": "Move current window to the center of the screen...."
        },
      
        
        {
          "title": "AtomEnvironment::focus",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-focus",
          "body": "Focus the current window.",
          "excerpt": "Focus the current window...."
        },
      
        
        {
          "title": "AtomEnvironment::show",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-show",
          "body": "Show the current window.",
          "excerpt": "Show the current window...."
        },
      
        
        {
          "title": "AtomEnvironment::hide",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-hide",
          "body": "Hide the current window.",
          "excerpt": "Hide the current window...."
        },
      
        
        {
          "title": "AtomEnvironment::reload",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-reload",
          "body": "Reload the current window.",
          "excerpt": "Reload the current window...."
        },
      
        
        {
          "title": "AtomEnvironment::isMaximized",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-isMaximized",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "AtomEnvironment::isFullScreen",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-isFullScreen",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "AtomEnvironment::setFullScreen",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-setFullScreen",
          "body": "Set the full screen state of the current window.",
          "excerpt": "Set the full screen state of the current window...."
        },
      
        
        {
          "title": "AtomEnvironment::toggleFullScreen",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-toggleFullScreen",
          "body": "Toggle the full screen state of the current window.",
          "excerpt": "Toggle the full screen state of the current window...."
        },
      
        
        {
          "title": "AtomEnvironment::beep",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-beep",
          "body": "Visually and audibly trigger a beep.",
          "excerpt": "Visually and audibly trigger a beep...."
        },
      
        
        {
          "title": "AtomEnvironment::confirm",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-confirm",
          "body": "A flexible way to open a dialog akin to an alert dialog.",
          "excerpt": "A flexible way to open a dialog akin to an alert dialog...."
        },
      
        
        {
          "title": "AtomEnvironment::openDevTools",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-openDevTools",
          "body": "Open the dev tools for the current window.",
          "excerpt": "Open the dev tools for the current window...."
        },
      
        
        {
          "title": "AtomEnvironment::toggleDevTools",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-toggleDevTools",
          "body": "Toggle the visibility of the dev tools for the current window.",
          "excerpt": "Toggle the visibility of the dev tools for the current window...."
        },
      
        
        {
          "title": "AtomEnvironment::executeJavaScriptInDevTools",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/AtomEnvironment/#instance-executeJavaScriptInDevTools",
          "body": "Execute code in dev tools.",
          "excerpt": "Execute code in dev tools...."
        },
      
    
      
      

      {
        "title": "GrammarRegistry",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/GrammarRegistry",
        "body": "Registry containing one or more grammars.",
        "excerpt": "Registry containing one or more grammars...."
      },

      

      
      
        
        {
          "title": "GrammarRegistry::onDidAddGrammar",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GrammarRegistry/#instance-onDidAddGrammar",
          "body": "Invoke the given callback when a grammar is added to the registry.",
          "excerpt": "Invoke the given callback when a grammar is added to the registry...."
        },
      
        
        {
          "title": "GrammarRegistry::onDidUpdateGrammar",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GrammarRegistry/#instance-onDidUpdateGrammar",
          "body": "Invoke the given callback when a grammar is updated due to a grammar it depends on being added or removed from the registry.",
          "excerpt": "Invoke the given callback when a grammar is updated due to a grammar it depends on being added or removed from the registry...."
        },
      
        
        {
          "title": "GrammarRegistry::getGrammars",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GrammarRegistry/#instance-getGrammars",
          "body": "Get all the grammars in this registry.",
          "excerpt": "Get all the grammars in this registry...."
        },
      
        
        {
          "title": "GrammarRegistry::grammarForScopeName",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GrammarRegistry/#instance-grammarForScopeName",
          "body": "Get a grammar with the given scope name.",
          "excerpt": "Get a grammar with the given scope name...."
        },
      
        
        {
          "title": "GrammarRegistry::addGrammar",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GrammarRegistry/#instance-addGrammar",
          "body": "Add a grammar to this registry. A 'grammar-added' event is emitted after the grammar is added.",
          "excerpt": "Add a grammar to this registry. A 'grammar-added' event is emitted after the grammar is added...."
        },
      
        
        {
          "title": "GrammarRegistry::removeGrammarForScopeName",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GrammarRegistry/#instance-removeGrammarForScopeName",
          "body": "Remove the grammar with the given scope name.",
          "excerpt": "Remove the grammar with the given scope name...."
        },
      
        
        {
          "title": "GrammarRegistry::readGrammarSync",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GrammarRegistry/#instance-readGrammarSync",
          "body": "Read a grammar synchronously but don't add it to the registry.",
          "excerpt": "Read a grammar synchronously but don't add it to the registry...."
        },
      
        
        {
          "title": "GrammarRegistry::readGrammar",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GrammarRegistry/#instance-readGrammar",
          "body": "Read a grammar asynchronously but don't add it to the registry.",
          "excerpt": "Read a grammar asynchronously but don't add it to the registry...."
        },
      
        
        {
          "title": "GrammarRegistry::loadGrammarSync",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GrammarRegistry/#instance-loadGrammarSync",
          "body": "Read a grammar synchronously and add it to this registry.",
          "excerpt": "Read a grammar synchronously and add it to this registry...."
        },
      
        
        {
          "title": "GrammarRegistry::loadGrammar",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/GrammarRegistry/#instance-loadGrammar",
          "body": "Read a grammar asynchronously and add it to the registry.",
          "excerpt": "Read a grammar asynchronously and add it to the registry...."
        },
      
    
      
      

      {
        "title": "Directory",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Directory",
        "body": "Represents a directory on disk that can be watched for changes.",
        "excerpt": "Represents a directory on disk that can be watched for changes...."
      },

      

      
      
        
        {
          "title": "Directory::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-constructor",
          "body": "Configures a new Directory instance, no files are accessed.",
          "excerpt": "Configures a new Directory instance, no files are accessed...."
        },
      
        
        {
          "title": "Directory::create",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-create",
          "body": "Creates the directory on disk that corresponds to `::getPath()` if no such directory already exists.",
          "excerpt": "Creates the directory on disk that corresponds to `::getPath()` if no such directory already exists...."
        },
      
        
        {
          "title": "Directory::onDidChange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-onDidChange",
          "body": "Invoke the given callback when the directory's contents change.",
          "excerpt": "Invoke the given callback when the directory's contents change...."
        },
      
        
        {
          "title": "Directory::isFile",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-isFile",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Directory::isDirectory",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-isDirectory",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Directory::isSymbolicLink",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-isSymbolicLink",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Directory::exists",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-exists",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Directory::existsSync",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-existsSync",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Directory::isRoot",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-isRoot",
          "body": "Return a {Boolean}, true if this {Directory} is the root directory of the filesystem, or false if it isn't.",
          "excerpt": "Return a {Boolean}, true if this {Directory} is the root directory of the filesystem, or false if it isn't...."
        },
      
        
        {
          "title": "Directory::getPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-getPath",
          "body": "This may include unfollowed symlinks or relative directory entries. Or it may be fully resolved, it depends on what you give it.",
          "excerpt": "This may include unfollowed symlinks or relative directory entries. Or it may be fully resolved, it depends on what you give it...."
        },
      
        
        {
          "title": "Directory::getRealPathSync",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-getRealPathSync",
          "body": "All relative directory entries are removed and symlinks are resolved to their final destination.",
          "excerpt": "All relative directory entries are removed and symlinks are resolved to their final destination...."
        },
      
        
        {
          "title": "Directory::getBaseName",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-getBaseName",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Directory::relativize",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-relativize",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Directory::getParent",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-getParent",
          "body": "Traverse to the parent directory.",
          "excerpt": "Traverse to the parent directory...."
        },
      
        
        {
          "title": "Directory::getFile",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-getFile",
          "body": "Traverse within this Directory to a child File. This method doesn't actually check to see if the File exists, it just creates the File object.",
          "excerpt": "Traverse within this Directory to a child File. This method doesn't actually check to see if the File exists, it just creates the File object..."
        },
      
        
        {
          "title": "Directory::getSubdirectory",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-getSubdirectory",
          "body": "Traverse within this a Directory to a child Directory. This method doesn't actually check to see if the Directory exists, it just creates the Directory object.",
          "excerpt": "Traverse within this a Directory to a child Directory. This method doesn't actually check to see if the Directory exists, it just creates the..."
        },
      
        
        {
          "title": "Directory::getEntriesSync",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-getEntriesSync",
          "body": "Reads file entries in this directory from disk synchronously.",
          "excerpt": "Reads file entries in this directory from disk synchronously...."
        },
      
        
        {
          "title": "Directory::getEntries",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-getEntries",
          "body": "Reads file entries in this directory from disk asynchronously.",
          "excerpt": "Reads file entries in this directory from disk asynchronously...."
        },
      
        
        {
          "title": "Directory::contains",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Directory/#instance-contains",
          "body": "Determines if the given path (real or symbolic) is inside this directory. This method does not actually check if the path exists, it just checks if the path is under this directory.",
          "excerpt": "Determines if the given path (real or symbolic) is inside this directory. This method does not actually check if the path exists, it just che..."
        },
      
    
      
      

      {
        "title": "BufferedNodeProcess",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/BufferedNodeProcess",
        "body": "Like {BufferedProcess}, but accepts a Node script as the command to run. This is necessary on Windows since it doesn't support shebang `#!` lines.",
        "excerpt": "Like {BufferedProcess}, but accepts a Node script as the command to run. This is necessary on Windows since it doesn't support shebang `#!` l..."
      },

      

      
      
        
        {
          "title": "BufferedNodeProcess::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/BufferedNodeProcess/#instance-constructor",
          "body": "Runs the given Node script by spawning a new child process.",
          "excerpt": "Runs the given Node script by spawning a new child process...."
        },
      
    
      
      

      {
        "title": "Notification",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Notification",
        "body": "A notification to the user containing a message and type.",
        "excerpt": "A notification to the user containing a message and type...."
      },

      

      
      
        
        {
          "title": "Notification::onDidDismiss",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Notification/#instance-onDidDismiss",
          "body": "Invoke the given callback when the notification is dismissed.",
          "excerpt": "Invoke the given callback when the notification is dismissed...."
        },
      
        
        {
          "title": "Notification::onDidDisplay",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Notification/#instance-onDidDisplay",
          "body": "Invoke the given callback when the notification is displayed.",
          "excerpt": "Invoke the given callback when the notification is displayed...."
        },
      
        
        {
          "title": "Notification::getType",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Notification/#instance-getType",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Notification::getMessage",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Notification/#instance-getMessage",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Notification::dismiss",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Notification/#instance-dismiss",
          "body": "Dismisses the notification, removing it from the UI. Calling this programmatically will call all callbacks added via `onDidDismiss`.",
          "excerpt": "Dismisses the notification, removing it from the UI. Calling this programmatically will call all callbacks added via `onDidDismiss`...."
        },
      
    
      
      

      {
        "title": "File",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/File",
        "body": "Represents an individual file that can be watched, read from, and written to.",
        "excerpt": "Represents an individual file that can be watched, read from, and written to...."
      },

      

      
      
        
        {
          "title": "File::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-constructor",
          "body": "Configures a new File instance, no files are accessed.",
          "excerpt": "Configures a new File instance, no files are accessed...."
        },
      
        
        {
          "title": "File::create",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-create",
          "body": "Creates the file on disk that corresponds to `::getPath()` if no such file already exists.",
          "excerpt": "Creates the file on disk that corresponds to `::getPath()` if no such file already exists...."
        },
      
        
        {
          "title": "File::onDidChange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-onDidChange",
          "body": "Invoke the given callback when the file's contents change.",
          "excerpt": "Invoke the given callback when the file's contents change...."
        },
      
        
        {
          "title": "File::onDidRename",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-onDidRename",
          "body": "Invoke the given callback when the file's path changes.",
          "excerpt": "Invoke the given callback when the file's path changes...."
        },
      
        
        {
          "title": "File::onDidDelete",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-onDidDelete",
          "body": "Invoke the given callback when the file is deleted.",
          "excerpt": "Invoke the given callback when the file is deleted...."
        },
      
        
        {
          "title": "File::onWillThrowWatchError",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-onWillThrowWatchError",
          "body": "Invoke the given callback when there is an error with the watch. When your callback has been invoked, the file will have unsubscribed from the file watches.",
          "excerpt": "Invoke the given callback when there is an error with the watch. When your callback has been invoked, the file will have unsubscribed from th..."
        },
      
        
        {
          "title": "File::isFile",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-isFile",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::isDirectory",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-isDirectory",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::isSymbolicLink",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-isSymbolicLink",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::exists",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-exists",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::existsSync",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-existsSync",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::getDigest",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-getDigest",
          "body": "Get the SHA-1 digest of this file",
          "excerpt": "Get the SHA-1 digest of this file..."
        },
      
        
        {
          "title": "File::getDigestSync",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-getDigestSync",
          "body": "Get the SHA-1 digest of this file",
          "excerpt": "Get the SHA-1 digest of this file..."
        },
      
        
        {
          "title": "File::setEncoding",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-setEncoding",
          "body": "Sets the file's character set encoding name.",
          "excerpt": "Sets the file's character set encoding name...."
        },
      
        
        {
          "title": "File::getEncoding",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-getEncoding",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::getPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-getPath",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::getRealPathSync",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-getRealPathSync",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::getRealPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-getRealPath",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::getBaseName",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-getBaseName",
          "body": "Return the {String} filename without any directory information.",
          "excerpt": "Return the {String} filename without any directory information...."
        },
      
        
        {
          "title": "File::getParent",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-getParent",
          "body": "Return the {Directory} that contains this file.",
          "excerpt": "Return the {Directory} that contains this file...."
        },
      
        
        {
          "title": "File::read",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-read",
          "body": "Reads the contents of the file.",
          "excerpt": "Reads the contents of the file...."
        },
      
        
        {
          "title": "File::createReadStream",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-createReadStream",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::write",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-write",
          "body": "Overwrites the file with the given text.",
          "excerpt": "Overwrites the file with the given text...."
        },
      
        
        {
          "title": "File::createWriteStream",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-createWriteStream",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "File::writeSync",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/File/#instance-writeSync",
          "body": "Overwrites the file with the given text.",
          "excerpt": "Overwrites the file with the given text...."
        },
      
    
      
      

      {
        "title": "Point",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Point",
        "body": "Represents a point in a buffer in row/column coordinates. Every public method that takes a point also accepts a *point-compatible* {Array}. This means a 2-element array containing {Number}s representing the row and column. So the following are equivalent: ```coffee new Point(1, 2) [1, 2] # Point compatible Array ```",
        "excerpt": "Represents a point in a buffer in row/column coordinates. Every public method that takes a point also accepts a *point-compatible* {Array}. T..."
      },

      
        
        {
          "title": "Point::fromObject",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#fromObject",
          "body": "Convert any point-compatible object to a {Point}.",
          "excerpt": "Convert any point-compatible object to a {Point}...."
        },
      
        
        {
          "title": "Point::min",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#min",
          "body": "",
          "excerpt": "..."
        },
      

      
      
        
        {
          "title": "Point::row",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-row",
          "body": "A zero-indexed {Number} representing the row of the {Point}.",
          "excerpt": "A zero-indexed {Number} representing the row of the {Point}...."
        },
      
        
        {
          "title": "Point::column",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-column",
          "body": "A zero-indexed {Number} representing the column of the {Point}.",
          "excerpt": "A zero-indexed {Number} representing the column of the {Point}...."
        },
      
        
        {
          "title": "Point::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-constructor",
          "body": "Construct a {Point} object",
          "excerpt": "Construct a {Point} object..."
        },
      
        
        {
          "title": "Point::copy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-copy",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Point::negate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-negate",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Point::freeze",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-freeze",
          "body": "Makes this point immutable and returns itself.",
          "excerpt": "Makes this point immutable and returns itself...."
        },
      
        
        {
          "title": "Point::translate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-translate",
          "body": "Build and return a new point by adding the rows and columns of the given point.",
          "excerpt": "Build and return a new point by adding the rows and columns of the given point...."
        },
      
        
        {
          "title": "Point::traverse",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-traverse",
          "body": "Build and return a new {Point} by traversing the rows and columns specified by the given point. This method differs from the direct, vector-style addition offered by {::translate}. Rather than adding the rows and columns directly, it derives the new point from traversing in \"typewriter space\". At the end of every row traversed, a carriage return occurs that returns the columns to 0 before continuing the traversal.",
          "excerpt": "Build and return a new {Point} by traversing the rows and columns specified by the given point. This method differs from the direct, vector-s..."
        },
      
        
        {
          "title": "Point::compare",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-compare",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Point::isEqual",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-isEqual",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Point::isLessThan",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-isLessThan",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Point::isLessThanOrEqual",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-isLessThanOrEqual",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Point::isGreaterThan",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-isGreaterThan",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Point::isGreaterThanOrEqual",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-isGreaterThanOrEqual",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Point::toArray",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-toArray",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Point::serialize",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-serialize",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Point::toString",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Point/#instance-toString",
          "body": "",
          "excerpt": "..."
        },
      
    
      
      

      {
        "title": "TextEditor",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/TextEditor",
        "body": "This class represents all essential editing state for a single {TextBuffer}, including cursor and selection positions, folds, and soft wraps. If you're manipulating the state of an editor, use this class. If you're interested in the visual appearance of editors, use {TextEditorElement} instead. A single {TextBuffer} can belong to multiple editors. For example, if the same file is open in two different panes, Atom creates a separate editor for each pane. If the buffer is manipulated the changes are reflected in both editors, but each maintains its own cursor position, folded lines, etc. ## Accessing TextEditor Instances The easiest way to get hold of `TextEditor` objects is by registering a callback with `::observeTextEditors` on the `atom.workspace` global. Your callback will then be called with all current editor instances and also when any editor is created in the future. ```coffee atom.workspace.observeTextEditors (editor) -> editor.insertText('Hello World') ``` ## Buffer vs. Screen Coordinates Because editors support folds and soft-wrapping, the lines on screen don't always match the lines in the buffer. For example, a long line that soft wraps twice renders as three lines on screen, but only represents one line in the buffer. Similarly, if rows 5-10 are folded, then row 6 on screen corresponds to row 11 in the buffer. Your choice of coordinates systems will depend on what you're trying to achieve. For example, if you're writing a command that jumps the cursor up or down by 10 lines, you'll want to use screen coordinates because the user probably wants to skip lines *on screen*. However, if you're writing a package that jumps between method definitions, you'll want to work in buffer coordinates. **When in doubt, just default to buffer coordinates**, then experiment with soft wraps and folds to ensure your code interacts with them correctly.",
        "excerpt": "This class represents all essential editing state for a single {TextBuffer}, including cursor and selection positions, folds, and soft wraps...."
      },

      

      
      
        
        {
          "title": "TextEditor::onDidChangeTitle",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidChangeTitle",
          "body": "Calls your `callback` when the buffer's title has changed.",
          "excerpt": "Calls your `callback` when the buffer's title has changed...."
        },
      
        
        {
          "title": "TextEditor::onDidChangePath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidChangePath",
          "body": "Calls your `callback` when the buffer's path, and therefore title, has changed.",
          "excerpt": "Calls your `callback` when the buffer's path, and therefore title, has changed...."
        },
      
        
        {
          "title": "TextEditor::onDidChange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidChange",
          "body": "Invoke the given callback synchronously when the content of the buffer changes. Because observers are invoked synchronously, it's important not to perform any expensive operations via this method. Consider {::onDidStopChanging} to delay expensive operations until after changes stop occurring.",
          "excerpt": "Invoke the given callback synchronously when the content of the buffer changes. Because observers are invoked synchronously, it's important n..."
        },
      
        
        {
          "title": "TextEditor::onDidStopChanging",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidStopChanging",
          "body": "Invoke `callback` when the buffer's contents change. It is emit asynchronously 300ms after the last buffer change. This is a good place to handle changes to the buffer without compromising typing performance.",
          "excerpt": "Invoke `callback` when the buffer's contents change. It is emit asynchronously 300ms after the last buffer change. This is a good place to ha..."
        },
      
        
        {
          "title": "TextEditor::onDidChangeCursorPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidChangeCursorPosition",
          "body": "Calls your `callback` when a {Cursor} is moved. If there are multiple cursors, your callback will be called for each cursor.",
          "excerpt": "Calls your `callback` when a {Cursor} is moved. If there are multiple cursors, your callback will be called for each cursor...."
        },
      
        
        {
          "title": "TextEditor::onDidChangeSelectionRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidChangeSelectionRange",
          "body": "Calls your `callback` when a selection's screen range changes.",
          "excerpt": "Calls your `callback` when a selection's screen range changes...."
        },
      
        
        {
          "title": "TextEditor::onDidChangeSoftWrapped",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidChangeSoftWrapped",
          "body": "Calls your `callback` when soft wrap was enabled or disabled.",
          "excerpt": "Calls your `callback` when soft wrap was enabled or disabled...."
        },
      
        
        {
          "title": "TextEditor::onDidChangeEncoding",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidChangeEncoding",
          "body": "Calls your `callback` when the buffer's encoding has changed.",
          "excerpt": "Calls your `callback` when the buffer's encoding has changed...."
        },
      
        
        {
          "title": "TextEditor::observeGrammar",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-observeGrammar",
          "body": "Calls your `callback` when the grammar that interprets and colorizes the text has been changed. Immediately calls your callback with the current grammar.",
          "excerpt": "Calls your `callback` when the grammar that interprets and colorizes the text has been changed. Immediately calls your callback with the curr..."
        },
      
        
        {
          "title": "TextEditor::onDidChangeGrammar",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidChangeGrammar",
          "body": "Calls your `callback` when the grammar that interprets and colorizes the text has been changed.",
          "excerpt": "Calls your `callback` when the grammar that interprets and colorizes the text has been changed...."
        },
      
        
        {
          "title": "TextEditor::onDidChangeModified",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidChangeModified",
          "body": "Calls your `callback` when the result of {::isModified} changes.",
          "excerpt": "Calls your `callback` when the result of {::isModified} changes...."
        },
      
        
        {
          "title": "TextEditor::onDidConflict",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidConflict",
          "body": "Calls your `callback` when the buffer's underlying file changes on disk at a moment when the result of {::isModified} is true.",
          "excerpt": "Calls your `callback` when the buffer's underlying file changes on disk at a moment when the result of {::isModified} is true...."
        },
      
        
        {
          "title": "TextEditor::onWillInsertText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onWillInsertText",
          "body": "Calls your `callback` before text has been inserted.",
          "excerpt": "Calls your `callback` before text has been inserted...."
        },
      
        
        {
          "title": "TextEditor::onDidInsertText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidInsertText",
          "body": "Calls your `callback` after text has been inserted.",
          "excerpt": "Calls your `callback` after text has been inserted...."
        },
      
        
        {
          "title": "TextEditor::onDidSave",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidSave",
          "body": "Invoke the given callback after the buffer is saved to disk.",
          "excerpt": "Invoke the given callback after the buffer is saved to disk...."
        },
      
        
        {
          "title": "TextEditor::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidDestroy",
          "body": "Invoke the given callback when the editor is destroyed.",
          "excerpt": "Invoke the given callback when the editor is destroyed...."
        },
      
        
        {
          "title": "TextEditor::observeCursors",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-observeCursors",
          "body": "Calls your `callback` when a {Cursor} is added to the editor. Immediately calls your callback for each existing cursor.",
          "excerpt": "Calls your `callback` when a {Cursor} is added to the editor. Immediately calls your callback for each existing cursor...."
        },
      
        
        {
          "title": "TextEditor::onDidAddCursor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidAddCursor",
          "body": "Calls your `callback` when a {Cursor} is added to the editor.",
          "excerpt": "Calls your `callback` when a {Cursor} is added to the editor...."
        },
      
        
        {
          "title": "TextEditor::onDidRemoveCursor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidRemoveCursor",
          "body": "Calls your `callback` when a {Cursor} is removed from the editor.",
          "excerpt": "Calls your `callback` when a {Cursor} is removed from the editor...."
        },
      
        
        {
          "title": "TextEditor::observeSelections",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-observeSelections",
          "body": "Calls your `callback` when a {Selection} is added to the editor. Immediately calls your callback for each existing selection.",
          "excerpt": "Calls your `callback` when a {Selection} is added to the editor. Immediately calls your callback for each existing selection...."
        },
      
        
        {
          "title": "TextEditor::onDidAddSelection",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidAddSelection",
          "body": "Calls your `callback` when a {Selection} is added to the editor.",
          "excerpt": "Calls your `callback` when a {Selection} is added to the editor...."
        },
      
        
        {
          "title": "TextEditor::onDidRemoveSelection",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidRemoveSelection",
          "body": "Calls your `callback` when a {Selection} is removed from the editor.",
          "excerpt": "Calls your `callback` when a {Selection} is removed from the editor...."
        },
      
        
        {
          "title": "TextEditor::observeDecorations",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-observeDecorations",
          "body": "Calls your `callback` with each {Decoration} added to the editor. Calls your `callback` immediately for any existing decorations.",
          "excerpt": "Calls your `callback` with each {Decoration} added to the editor. Calls your `callback` immediately for any existing decorations...."
        },
      
        
        {
          "title": "TextEditor::onDidAddDecoration",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidAddDecoration",
          "body": "Calls your `callback` when a {Decoration} is added to the editor.",
          "excerpt": "Calls your `callback` when a {Decoration} is added to the editor...."
        },
      
        
        {
          "title": "TextEditor::onDidRemoveDecoration",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidRemoveDecoration",
          "body": "Calls your `callback` when a {Decoration} is removed from the editor.",
          "excerpt": "Calls your `callback` when a {Decoration} is removed from the editor...."
        },
      
        
        {
          "title": "TextEditor::onDidChangePlaceholderText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidChangePlaceholderText",
          "body": "Calls your `callback` when the placeholder text is changed.",
          "excerpt": "Calls your `callback` when the placeholder text is changed...."
        },
      
        
        {
          "title": "TextEditor::getBuffer",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getBuffer",
          "body": "Retrieves the current {TextBuffer}.",
          "excerpt": "Retrieves the current {TextBuffer}...."
        },
      
        
        {
          "title": "TextEditor::observeGutters",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-observeGutters",
          "body": "Calls your `callback` when a {Gutter} is added to the editor. Immediately calls your callback for each existing gutter.",
          "excerpt": "Calls your `callback` when a {Gutter} is added to the editor. Immediately calls your callback for each existing gutter...."
        },
      
        
        {
          "title": "TextEditor::onDidAddGutter",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidAddGutter",
          "body": "Calls your `callback` when a {Gutter} is added to the editor.",
          "excerpt": "Calls your `callback` when a {Gutter} is added to the editor...."
        },
      
        
        {
          "title": "TextEditor::onDidRemoveGutter",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-onDidRemoveGutter",
          "body": "Calls your `callback` when a {Gutter} is removed from the editor.",
          "excerpt": "Calls your `callback` when a {Gutter} is removed from the editor...."
        },
      
        
        {
          "title": "TextEditor::getTitle",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getTitle",
          "body": "Get the editor's title for display in other parts of the UI such as the tabs. If the editor's buffer is saved, its title is the file name. If it is unsaved, its title is \"untitled\".",
          "excerpt": "Get the editor's title for display in other parts of the UI such as the tabs. If the editor's buffer is saved, its title is the file name. If..."
        },
      
        
        {
          "title": "TextEditor::getLongTitle",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getLongTitle",
          "body": "Get unique title for display in other parts of the UI, such as the window title. If the editor's buffer is unsaved, its title is \"untitled\" If the editor's buffer is saved, its unique title is formatted as one of the following, * \"\" when it is the only editing buffer with this file name. * \" — \" when other buffers have this file name.",
          "excerpt": "Get unique title for display in other parts of the UI, such as the window title. If the editor's buffer is unsaved, its title is \"untitled\"..."
        },
      
        
        {
          "title": "TextEditor::getPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getPath",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::getEncoding",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getEncoding",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::setEncoding",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setEncoding",
          "body": "Set the character set encoding to use in this editor's text buffer.",
          "excerpt": "Set the character set encoding to use in this editor's text buffer...."
        },
      
        
        {
          "title": "TextEditor::isModified",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-isModified",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::isEmpty",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-isEmpty",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::save",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-save",
          "body": "Saves the editor's text buffer. See {TextBuffer::save} for more details.",
          "excerpt": "Saves the editor's text buffer. See {TextBuffer::save} for more details...."
        },
      
        
        {
          "title": "TextEditor::saveAs",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-saveAs",
          "body": "Saves the editor's text buffer as the given path. See {TextBuffer::saveAs} for more details.",
          "excerpt": "Saves the editor's text buffer as the given path. See {TextBuffer::saveAs} for more details...."
        },
      
        
        {
          "title": "TextEditor::getText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getText",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::getTextInBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getTextInBufferRange",
          "body": "Get the text in the given {Range} in buffer coordinates.",
          "excerpt": "Get the text in the given {Range} in buffer coordinates...."
        },
      
        
        {
          "title": "TextEditor::getLineCount",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getLineCount",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::getScreenLineCount",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getScreenLineCount",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::getLastBufferRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getLastBufferRow",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::getLastScreenRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getLastScreenRow",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::lineTextForBufferRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-lineTextForBufferRow",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::lineTextForScreenRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-lineTextForScreenRow",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::getCurrentParagraphBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getCurrentParagraphBufferRange",
          "body": "Get the {Range} of the paragraph surrounding the most recently added cursor.",
          "excerpt": "Get the {Range} of the paragraph surrounding the most recently added cursor...."
        },
      
        
        {
          "title": "TextEditor::setText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setText",
          "body": "Replaces the entire contents of the buffer with the given {String}.",
          "excerpt": "Replaces the entire contents of the buffer with the given {String}...."
        },
      
        
        {
          "title": "TextEditor::setTextInBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setTextInBufferRange",
          "body": "Set the text in the given {Range} in buffer coordinates.",
          "excerpt": "Set the text in the given {Range} in buffer coordinates...."
        },
      
        
        {
          "title": "TextEditor::insertText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-insertText",
          "body": "For each selection, replace the selected text with the given text.",
          "excerpt": "For each selection, replace the selected text with the given text...."
        },
      
        
        {
          "title": "TextEditor::insertNewline",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-insertNewline",
          "body": "For each selection, replace the selected text with a newline.",
          "excerpt": "For each selection, replace the selected text with a newline...."
        },
      
        
        {
          "title": "TextEditor::delete",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-delete",
          "body": "For each selection, if the selection is empty, delete the character following the cursor. Otherwise delete the selected text.",
          "excerpt": "For each selection, if the selection is empty, delete the character following the cursor. Otherwise delete the selected text...."
        },
      
        
        {
          "title": "TextEditor::backspace",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-backspace",
          "body": "For each selection, if the selection is empty, delete the character preceding the cursor. Otherwise delete the selected text.",
          "excerpt": "For each selection, if the selection is empty, delete the character preceding the cursor. Otherwise delete the selected text...."
        },
      
        
        {
          "title": "TextEditor::mutateSelectedText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-mutateSelectedText",
          "body": "Mutate the text of all the selections in a single transaction. All the changes made inside the given {Function} can be reverted with a single call to {::undo}.",
          "excerpt": "Mutate the text of all the selections in a single transaction. All the changes made inside the given {Function} can be reverted with a single..."
        },
      
        
        {
          "title": "TextEditor::transpose",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-transpose",
          "body": "For each selection, transpose the selected text. If the selection is empty, the characters preceding and following the cursor are swapped. Otherwise, the selected characters are reversed.",
          "excerpt": "For each selection, transpose the selected text. If the selection is empty, the characters preceding and following the cursor are swapped. Ot..."
        },
      
        
        {
          "title": "TextEditor::upperCase",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-upperCase",
          "body": "Convert the selected text to upper case. For each selection, if the selection is empty, converts the containing word to upper case. Otherwise convert the selected text to upper case.",
          "excerpt": "Convert the selected text to upper case. For each selection, if the selection is empty, converts the containing word to upper case. Otherwise..."
        },
      
        
        {
          "title": "TextEditor::lowerCase",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-lowerCase",
          "body": "Convert the selected text to lower case. For each selection, if the selection is empty, converts the containing word to upper case. Otherwise convert the selected text to upper case.",
          "excerpt": "Convert the selected text to lower case. For each selection, if the selection is empty, converts the containing word to upper case. Otherwise..."
        },
      
        
        {
          "title": "TextEditor::toggleLineCommentsInSelection",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-toggleLineCommentsInSelection",
          "body": "Toggle line comments for rows intersecting selections. If the current grammar doesn't support comments, does nothing.",
          "excerpt": "Toggle line comments for rows intersecting selections. If the current grammar doesn't support comments, does nothing...."
        },
      
        
        {
          "title": "TextEditor::insertNewlineBelow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-insertNewlineBelow",
          "body": "For each cursor, insert a newline at beginning the following line.",
          "excerpt": "For each cursor, insert a newline at beginning the following line...."
        },
      
        
        {
          "title": "TextEditor::insertNewlineAbove",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-insertNewlineAbove",
          "body": "For each cursor, insert a newline at the end of the preceding line.",
          "excerpt": "For each cursor, insert a newline at the end of the preceding line...."
        },
      
        
        {
          "title": "TextEditor::deleteToBeginningOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-deleteToBeginningOfWord",
          "body": "For each selection, if the selection is empty, delete all characters of the containing word that precede the cursor. Otherwise delete the selected text.",
          "excerpt": "For each selection, if the selection is empty, delete all characters of the containing word that precede the cursor. Otherwise delete the sel..."
        },
      
        
        {
          "title": "TextEditor::deleteToPreviousWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-deleteToPreviousWordBoundary",
          "body": "Similar to {::deleteToBeginningOfWord}, but deletes only back to the previous word boundary.",
          "excerpt": "Similar to {::deleteToBeginningOfWord}, but deletes only back to the previous word boundary...."
        },
      
        
        {
          "title": "TextEditor::deleteToNextWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-deleteToNextWordBoundary",
          "body": "Similar to {::deleteToEndOfWord}, but deletes only up to the next word boundary.",
          "excerpt": "Similar to {::deleteToEndOfWord}, but deletes only up to the next word boundary...."
        },
      
        
        {
          "title": "TextEditor::deleteToBeginningOfSubword",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-deleteToBeginningOfSubword",
          "body": "For each selection, if the selection is empty, delete all characters of the containing subword following the cursor. Otherwise delete the selected text.",
          "excerpt": "For each selection, if the selection is empty, delete all characters of the containing subword following the cursor. Otherwise delete the sel..."
        },
      
        
        {
          "title": "TextEditor::deleteToEndOfSubword",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-deleteToEndOfSubword",
          "body": "For each selection, if the selection is empty, delete all characters of the containing subword following the cursor. Otherwise delete the selected text.",
          "excerpt": "For each selection, if the selection is empty, delete all characters of the containing subword following the cursor. Otherwise delete the sel..."
        },
      
        
        {
          "title": "TextEditor::deleteToBeginningOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-deleteToBeginningOfLine",
          "body": "For each selection, if the selection is empty, delete all characters of the containing line that precede the cursor. Otherwise delete the selected text.",
          "excerpt": "For each selection, if the selection is empty, delete all characters of the containing line that precede the cursor. Otherwise delete the sel..."
        },
      
        
        {
          "title": "TextEditor::deleteToEndOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-deleteToEndOfLine",
          "body": "For each selection, if the selection is not empty, deletes the selection; otherwise, deletes all characters of the containing line following the cursor. If the cursor is already at the end of the line, deletes the following newline.",
          "excerpt": "For each selection, if the selection is not empty, deletes the selection; otherwise, deletes all characters of the containing line following ..."
        },
      
        
        {
          "title": "TextEditor::deleteToEndOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-deleteToEndOfWord",
          "body": "For each selection, if the selection is empty, delete all characters of the containing word following the cursor. Otherwise delete the selected text.",
          "excerpt": "For each selection, if the selection is empty, delete all characters of the containing word following the cursor. Otherwise delete the select..."
        },
      
        
        {
          "title": "TextEditor::deleteLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-deleteLine",
          "body": "Delete all lines intersecting selections.",
          "excerpt": "Delete all lines intersecting selections...."
        },
      
        
        {
          "title": "TextEditor::undo",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-undo",
          "body": "Undo the last change.",
          "excerpt": "Undo the last change...."
        },
      
        
        {
          "title": "TextEditor::redo",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-redo",
          "body": "Redo the last change.",
          "excerpt": "Redo the last change...."
        },
      
        
        {
          "title": "TextEditor::transact",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-transact",
          "body": "Batch multiple operations as a single undo/redo step. Any group of operations that are logically grouped from the perspective of undoing and redoing should be performed in a transaction. If you want to abort the transaction, call {::abortTransaction} to terminate the function's execution and revert any changes performed up to the abortion.",
          "excerpt": "Batch multiple operations as a single undo/redo step. Any group of operations that are logically grouped from the perspective of undoing and ..."
        },
      
        
        {
          "title": "TextEditor::abortTransaction",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-abortTransaction",
          "body": "Abort an open transaction, undoing any operations performed so far within the transaction.",
          "excerpt": "Abort an open transaction, undoing any operations performed so far within the transaction...."
        },
      
        
        {
          "title": "TextEditor::createCheckpoint",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-createCheckpoint",
          "body": "Create a pointer to the current state of the buffer for use with {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.",
          "excerpt": "Create a pointer to the current state of the buffer for use with {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}...."
        },
      
        
        {
          "title": "TextEditor::revertToCheckpoint",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-revertToCheckpoint",
          "body": "Revert the buffer to the state it was in when the given checkpoint was created. The redo stack will be empty following this operation, so changes since the checkpoint will be lost. If the given checkpoint is no longer present in the undo history, no changes will be made to the buffer and this method will return `false`.",
          "excerpt": "Revert the buffer to the state it was in when the given checkpoint was created. The redo stack will be empty following this operation, so cha..."
        },
      
        
        {
          "title": "TextEditor::groupChangesSinceCheckpoint",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-groupChangesSinceCheckpoint",
          "body": "Group all changes since the given checkpoint into a single transaction for purposes of undo/redo. If the given checkpoint is no longer present in the undo history, no grouping will be performed and this method will return `false`.",
          "excerpt": "Group all changes since the given checkpoint into a single transaction for purposes of undo/redo. If the given checkpoint is no longer presen..."
        },
      
        
        {
          "title": "TextEditor::screenPositionForBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-screenPositionForBufferPosition",
          "body": "Convert a position in buffer-coordinates to screen-coordinates. The position is clipped via {::clipBufferPosition} prior to the conversion. The position is also clipped via {::clipScreenPosition} following the conversion, which only makes a difference when `options` are supplied.",
          "excerpt": "Convert a position in buffer-coordinates to screen-coordinates. The position is clipped via {::clipBufferPosition} prior to the conversion. T..."
        },
      
        
        {
          "title": "TextEditor::bufferPositionForScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-bufferPositionForScreenPosition",
          "body": "Convert a position in screen-coordinates to buffer-coordinates. The position is clipped via {::clipScreenPosition} prior to the conversion.",
          "excerpt": "Convert a position in screen-coordinates to buffer-coordinates. The position is clipped via {::clipScreenPosition} prior to the conversion...."
        },
      
        
        {
          "title": "TextEditor::screenRangeForBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-screenRangeForBufferRange",
          "body": "Convert a range in buffer-coordinates to screen-coordinates.",
          "excerpt": "Convert a range in buffer-coordinates to screen-coordinates...."
        },
      
        
        {
          "title": "TextEditor::bufferRangeForScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-bufferRangeForScreenRange",
          "body": "Convert a range in screen-coordinates to buffer-coordinates.",
          "excerpt": "Convert a range in screen-coordinates to buffer-coordinates...."
        },
      
        
        {
          "title": "TextEditor::clipBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-clipBufferPosition",
          "body": "Clip the given {Point} to a valid position in the buffer. If the given {Point} describes a position that is actually reachable by the cursor based on the current contents of the buffer, it is returned unchanged. If the {Point} does not describe a valid position, the closest valid position is returned instead.",
          "excerpt": "Clip the given {Point} to a valid position in the buffer. If the given {Point} describes a position that is actually reachable by the cursor ..."
        },
      
        
        {
          "title": "TextEditor::clipBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-clipBufferRange",
          "body": "Clip the start and end of the given range to valid positions in the buffer. See {::clipBufferPosition} for more information.",
          "excerpt": "Clip the start and end of the given range to valid positions in the buffer. See {::clipBufferPosition} for more information...."
        },
      
        
        {
          "title": "TextEditor::clipScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-clipScreenPosition",
          "body": "Clip the given {Point} to a valid position on screen. If the given {Point} describes a position that is actually reachable by the cursor based on the current contents of the screen, it is returned unchanged. If the {Point} does not describe a valid position, the closest valid position is returned instead.",
          "excerpt": "Clip the given {Point} to a valid position on screen. If the given {Point} describes a position that is actually reachable by the cursor base..."
        },
      
        
        {
          "title": "TextEditor::clipScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-clipScreenRange",
          "body": "Clip the start and end of the given range to valid positions on screen. See {::clipScreenPosition} for more information.",
          "excerpt": "Clip the start and end of the given range to valid positions on screen. See {::clipScreenPosition} for more information...."
        },
      
        
        {
          "title": "TextEditor::decorateMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-decorateMarker",
          "body": "Add a decoration that tracks a {DisplayMarker}. When the marker moves, is invalidated, or is destroyed, the decoration will be updated to reflect the marker's state. The following are the supported decorations types: * __line__: Adds your CSS `class` to the line nodes within the range marked by the marker * __line-number__: Adds your CSS `class` to the line number nodes within the range marked by the marker * __highlight__: Adds a new highlight div to the editor surrounding the range marked by the marker. When the user selects text, the selection is visualized with a highlight decoration internally. The structure of this highlight will be ```html \">    ``` * __overlay__: Positions the view associated with the given item at the head or tail of the given `DisplayMarker`. * __gutter__: A decoration that tracks a {DisplayMarker} in a {Gutter}. Gutter decorations are created by calling {Gutter::decorateMarker} on the desired `Gutter` instance. * __block__: Positions the view associated with the given item before or after the row of the given `TextEditorMarker`.",
          "excerpt": "Add a decoration that tracks a {DisplayMarker}. When the marker moves, is invalidated, or is destroyed, the decoration will be updated to ref..."
        },
      
        
        {
          "title": "TextEditor::decorateMarkerLayer",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-decorateMarkerLayer",
          "body": "Add a decoration to every marker in the given marker layer. Can be used to decorate a large number of markers without having to create and manage many individual decorations.",
          "excerpt": "Add a decoration to every marker in the given marker layer. Can be used to decorate a large number of markers without having to create and ma..."
        },
      
        
        {
          "title": "TextEditor::getDecorations",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getDecorations",
          "body": "Get all decorations.",
          "excerpt": "Get all decorations...."
        },
      
        
        {
          "title": "TextEditor::getLineDecorations",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getLineDecorations",
          "body": "Get all decorations of type 'line'.",
          "excerpt": "Get all decorations of type 'line'...."
        },
      
        
        {
          "title": "TextEditor::getLineNumberDecorations",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getLineNumberDecorations",
          "body": "Get all decorations of type 'line-number'.",
          "excerpt": "Get all decorations of type 'line-number'...."
        },
      
        
        {
          "title": "TextEditor::getHighlightDecorations",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getHighlightDecorations",
          "body": "Get all decorations of type 'highlight'.",
          "excerpt": "Get all decorations of type 'highlight'...."
        },
      
        
        {
          "title": "TextEditor::getOverlayDecorations",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getOverlayDecorations",
          "body": "Get all decorations of type 'overlay'.",
          "excerpt": "Get all decorations of type 'overlay'...."
        },
      
        
        {
          "title": "TextEditor::markBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-markBufferRange",
          "body": "Create a marker on the default marker layer with the given range in buffer coordinates. This marker will maintain its logical location as the buffer is changed, so if you mark a particular word, the marker will remain over that word even if the word's location in the buffer changes.",
          "excerpt": "Create a marker on the default marker layer with the given range in buffer coordinates. This marker will maintain its logical location as the..."
        },
      
        
        {
          "title": "TextEditor::markScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-markScreenRange",
          "body": "Create a marker on the default marker layer with the given range in screen coordinates. This marker will maintain its logical location as the buffer is changed, so if you mark a particular word, the marker will remain over that word even if the word's location in the buffer changes.",
          "excerpt": "Create a marker on the default marker layer with the given range in screen coordinates. This marker will maintain its logical location as the..."
        },
      
        
        {
          "title": "TextEditor::markBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-markBufferPosition",
          "body": "Create a marker on the default marker layer with the given buffer position and no tail. To group multiple markers together in their own private layer, see {::addMarkerLayer}.",
          "excerpt": "Create a marker on the default marker layer with the given buffer position and no tail. To group multiple markers together in their own priva..."
        },
      
        
        {
          "title": "TextEditor::markScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-markScreenPosition",
          "body": "Create a marker on the default marker layer with the given screen position and no tail. To group multiple markers together in their own private layer, see {::addMarkerLayer}.",
          "excerpt": "Create a marker on the default marker layer with the given screen position and no tail. To group multiple markers together in their own priva..."
        },
      
        
        {
          "title": "TextEditor::findMarkers",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-findMarkers",
          "body": "Find all {DisplayMarker}s on the default marker layer that match the given properties. This method finds markers based on the given properties. Markers can be associated with custom properties that will be compared with basic equality. In addition, there are several special properties that will be compared with the range of the markers rather than their properties.",
          "excerpt": "Find all {DisplayMarker}s on the default marker layer that match the given properties. This method finds markers based on the given propertie..."
        },
      
        
        {
          "title": "TextEditor::getMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getMarker",
          "body": "Get the {DisplayMarker} on the default layer for the given marker id.",
          "excerpt": "Get the {DisplayMarker} on the default layer for the given marker id...."
        },
      
        
        {
          "title": "TextEditor::getMarkers",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getMarkers",
          "body": "Get all {DisplayMarker}s on the default marker layer. Consider using {::findMarkers}",
          "excerpt": "Get all {DisplayMarker}s on the default marker layer. Consider using {::findMarkers}..."
        },
      
        
        {
          "title": "TextEditor::getMarkerCount",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getMarkerCount",
          "body": "Get the number of markers in the default marker layer.",
          "excerpt": "Get the number of markers in the default marker layer...."
        },
      
        
        {
          "title": "TextEditor::addMarkerLayer",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-addMarkerLayer",
          "body": "Create a marker layer to group related markers.",
          "excerpt": "Create a marker layer to group related markers...."
        },
      
        
        {
          "title": "TextEditor::getMarkerLayer",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getMarkerLayer",
          "body": "Get a {DisplayMarkerLayer} by id.",
          "excerpt": "Get a {DisplayMarkerLayer} by id...."
        },
      
        
        {
          "title": "TextEditor::getDefaultMarkerLayer",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getDefaultMarkerLayer",
          "body": "Get the default {DisplayMarkerLayer}. All marker APIs not tied to an explicit layer interact with this default layer.",
          "excerpt": "Get the default {DisplayMarkerLayer}. All marker APIs not tied to an explicit layer interact with this default layer...."
        },
      
        
        {
          "title": "TextEditor::getCursorBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getCursorBufferPosition",
          "body": "Get the position of the most recently added cursor in buffer coordinates.",
          "excerpt": "Get the position of the most recently added cursor in buffer coordinates...."
        },
      
        
        {
          "title": "TextEditor::getCursorBufferPositions",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getCursorBufferPositions",
          "body": "Get the position of all the cursor positions in buffer coordinates.",
          "excerpt": "Get the position of all the cursor positions in buffer coordinates...."
        },
      
        
        {
          "title": "TextEditor::setCursorBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setCursorBufferPosition",
          "body": "Move the cursor to the given position in buffer coordinates. If there are multiple cursors, they will be consolidated to a single cursor.",
          "excerpt": "Move the cursor to the given position in buffer coordinates. If there are multiple cursors, they will be consolidated to a single cursor...."
        },
      
        
        {
          "title": "TextEditor::getCursorAtScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getCursorAtScreenPosition",
          "body": "Get a {Cursor} at given screen coordinates {Point}",
          "excerpt": "Get a {Cursor} at given screen coordinates {Point}..."
        },
      
        
        {
          "title": "TextEditor::getCursorScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getCursorScreenPosition",
          "body": "Get the position of the most recently added cursor in screen coordinates.",
          "excerpt": "Get the position of the most recently added cursor in screen coordinates...."
        },
      
        
        {
          "title": "TextEditor::getCursorScreenPositions",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getCursorScreenPositions",
          "body": "Get the position of all the cursor positions in screen coordinates.",
          "excerpt": "Get the position of all the cursor positions in screen coordinates...."
        },
      
        
        {
          "title": "TextEditor::setCursorScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setCursorScreenPosition",
          "body": "Move the cursor to the given position in screen coordinates. If there are multiple cursors, they will be consolidated to a single cursor.",
          "excerpt": "Move the cursor to the given position in screen coordinates. If there are multiple cursors, they will be consolidated to a single cursor...."
        },
      
        
        {
          "title": "TextEditor::addCursorAtBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-addCursorAtBufferPosition",
          "body": "Add a cursor at the given position in buffer coordinates.",
          "excerpt": "Add a cursor at the given position in buffer coordinates...."
        },
      
        
        {
          "title": "TextEditor::addCursorAtScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-addCursorAtScreenPosition",
          "body": "Add a cursor at the position in screen coordinates.",
          "excerpt": "Add a cursor at the position in screen coordinates...."
        },
      
        
        {
          "title": "TextEditor::hasMultipleCursors",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-hasMultipleCursors",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::moveUp",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveUp",
          "body": "Move every cursor up one row in screen coordinates.",
          "excerpt": "Move every cursor up one row in screen coordinates...."
        },
      
        
        {
          "title": "TextEditor::moveDown",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveDown",
          "body": "Move every cursor down one row in screen coordinates.",
          "excerpt": "Move every cursor down one row in screen coordinates...."
        },
      
        
        {
          "title": "TextEditor::moveLeft",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveLeft",
          "body": "Move every cursor left one column.",
          "excerpt": "Move every cursor left one column...."
        },
      
        
        {
          "title": "TextEditor::moveRight",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveRight",
          "body": "Move every cursor right one column.",
          "excerpt": "Move every cursor right one column...."
        },
      
        
        {
          "title": "TextEditor::moveToBeginningOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToBeginningOfLine",
          "body": "Move every cursor to the beginning of its line in buffer coordinates.",
          "excerpt": "Move every cursor to the beginning of its line in buffer coordinates...."
        },
      
        
        {
          "title": "TextEditor::moveToBeginningOfScreenLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToBeginningOfScreenLine",
          "body": "Move every cursor to the beginning of its line in screen coordinates.",
          "excerpt": "Move every cursor to the beginning of its line in screen coordinates...."
        },
      
        
        {
          "title": "TextEditor::moveToFirstCharacterOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToFirstCharacterOfLine",
          "body": "Move every cursor to the first non-whitespace character of its line.",
          "excerpt": "Move every cursor to the first non-whitespace character of its line...."
        },
      
        
        {
          "title": "TextEditor::moveToEndOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToEndOfLine",
          "body": "Move every cursor to the end of its line in buffer coordinates.",
          "excerpt": "Move every cursor to the end of its line in buffer coordinates...."
        },
      
        
        {
          "title": "TextEditor::moveToEndOfScreenLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToEndOfScreenLine",
          "body": "Move every cursor to the end of its line in screen coordinates.",
          "excerpt": "Move every cursor to the end of its line in screen coordinates...."
        },
      
        
        {
          "title": "TextEditor::moveToBeginningOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToBeginningOfWord",
          "body": "Move every cursor to the beginning of its surrounding word.",
          "excerpt": "Move every cursor to the beginning of its surrounding word...."
        },
      
        
        {
          "title": "TextEditor::moveToEndOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToEndOfWord",
          "body": "Move every cursor to the end of its surrounding word.",
          "excerpt": "Move every cursor to the end of its surrounding word...."
        },
      
        
        {
          "title": "TextEditor::moveToTop",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToTop",
          "body": "Move every cursor to the top of the buffer. If there are multiple cursors, they will be merged into a single cursor.",
          "excerpt": "Move every cursor to the top of the buffer. If there are multiple cursors, they will be merged into a single cursor...."
        },
      
        
        {
          "title": "TextEditor::moveToBottom",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToBottom",
          "body": "Move every cursor to the bottom of the buffer. If there are multiple cursors, they will be merged into a single cursor.",
          "excerpt": "Move every cursor to the bottom of the buffer. If there are multiple cursors, they will be merged into a single cursor...."
        },
      
        
        {
          "title": "TextEditor::moveToBeginningOfNextWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToBeginningOfNextWord",
          "body": "Move every cursor to the beginning of the next word.",
          "excerpt": "Move every cursor to the beginning of the next word...."
        },
      
        
        {
          "title": "TextEditor::moveToPreviousWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToPreviousWordBoundary",
          "body": "Move every cursor to the previous word boundary.",
          "excerpt": "Move every cursor to the previous word boundary...."
        },
      
        
        {
          "title": "TextEditor::moveToNextWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToNextWordBoundary",
          "body": "Move every cursor to the next word boundary.",
          "excerpt": "Move every cursor to the next word boundary...."
        },
      
        
        {
          "title": "TextEditor::moveToPreviousSubwordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToPreviousSubwordBoundary",
          "body": "Move every cursor to the previous subword boundary.",
          "excerpt": "Move every cursor to the previous subword boundary...."
        },
      
        
        {
          "title": "TextEditor::moveToNextSubwordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToNextSubwordBoundary",
          "body": "Move every cursor to the next subword boundary.",
          "excerpt": "Move every cursor to the next subword boundary...."
        },
      
        
        {
          "title": "TextEditor::moveToBeginningOfNextParagraph",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToBeginningOfNextParagraph",
          "body": "Move every cursor to the beginning of the next paragraph.",
          "excerpt": "Move every cursor to the beginning of the next paragraph...."
        },
      
        
        {
          "title": "TextEditor::moveToBeginningOfPreviousParagraph",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-moveToBeginningOfPreviousParagraph",
          "body": "Move every cursor to the beginning of the previous paragraph.",
          "excerpt": "Move every cursor to the beginning of the previous paragraph...."
        },
      
        
        {
          "title": "TextEditor::getLastCursor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getLastCursor",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::getWordUnderCursor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getWordUnderCursor",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::getCursors",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getCursors",
          "body": "Get an Array of all {Cursor}s.",
          "excerpt": "Get an Array of all {Cursor}s...."
        },
      
        
        {
          "title": "TextEditor::getCursorsOrderedByBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getCursorsOrderedByBufferPosition",
          "body": "Get all {Cursors}s, ordered by their position in the buffer instead of the order in which they were added.",
          "excerpt": "Get all {Cursors}s, ordered by their position in the buffer instead of the order in which they were added...."
        },
      
        
        {
          "title": "TextEditor::getSelectedText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getSelectedText",
          "body": "Get the selected text of the most recently added selection.",
          "excerpt": "Get the selected text of the most recently added selection...."
        },
      
        
        {
          "title": "TextEditor::getSelectedBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getSelectedBufferRange",
          "body": "Get the {Range} of the most recently added selection in buffer coordinates.",
          "excerpt": "Get the {Range} of the most recently added selection in buffer coordinates...."
        },
      
        
        {
          "title": "TextEditor::getSelectedBufferRanges",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getSelectedBufferRanges",
          "body": "Get the {Range}s of all selections in buffer coordinates. The ranges are sorted by when the selections were added. Most recent at the end.",
          "excerpt": "Get the {Range}s of all selections in buffer coordinates. The ranges are sorted by when the selections were added. Most recent at the end...."
        },
      
        
        {
          "title": "TextEditor::setSelectedBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setSelectedBufferRange",
          "body": "Set the selected range in buffer coordinates. If there are multiple selections, they are reduced to a single selection with the given range.",
          "excerpt": "Set the selected range in buffer coordinates. If there are multiple selections, they are reduced to a single selection with the given range...."
        },
      
        
        {
          "title": "TextEditor::setSelectedBufferRanges",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setSelectedBufferRanges",
          "body": "Set the selected ranges in buffer coordinates. If there are multiple selections, they are replaced by new selections with the given ranges.",
          "excerpt": "Set the selected ranges in buffer coordinates. If there are multiple selections, they are replaced by new selections with the given ranges...."
        },
      
        
        {
          "title": "TextEditor::getSelectedScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getSelectedScreenRange",
          "body": "Get the {Range} of the most recently added selection in screen coordinates.",
          "excerpt": "Get the {Range} of the most recently added selection in screen coordinates...."
        },
      
        
        {
          "title": "TextEditor::getSelectedScreenRanges",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getSelectedScreenRanges",
          "body": "Get the {Range}s of all selections in screen coordinates. The ranges are sorted by when the selections were added. Most recent at the end.",
          "excerpt": "Get the {Range}s of all selections in screen coordinates. The ranges are sorted by when the selections were added. Most recent at the end...."
        },
      
        
        {
          "title": "TextEditor::setSelectedScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setSelectedScreenRange",
          "body": "Set the selected range in screen coordinates. If there are multiple selections, they are reduced to a single selection with the given range.",
          "excerpt": "Set the selected range in screen coordinates. If there are multiple selections, they are reduced to a single selection with the given range...."
        },
      
        
        {
          "title": "TextEditor::setSelectedScreenRanges",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setSelectedScreenRanges",
          "body": "Set the selected ranges in screen coordinates. If there are multiple selections, they are replaced by new selections with the given ranges.",
          "excerpt": "Set the selected ranges in screen coordinates. If there are multiple selections, they are replaced by new selections with the given ranges...."
        },
      
        
        {
          "title": "TextEditor::addSelectionForBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-addSelectionForBufferRange",
          "body": "Add a selection for the given range in buffer coordinates.",
          "excerpt": "Add a selection for the given range in buffer coordinates...."
        },
      
        
        {
          "title": "TextEditor::addSelectionForScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-addSelectionForScreenRange",
          "body": "Add a selection for the given range in screen coordinates.",
          "excerpt": "Add a selection for the given range in screen coordinates...."
        },
      
        
        {
          "title": "TextEditor::selectToBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToBufferPosition",
          "body": "Select from the current cursor position to the given position in buffer coordinates. This method may merge selections that end up intesecting.",
          "excerpt": "Select from the current cursor position to the given position in buffer coordinates. This method may merge selections that end up intesecting..."
        },
      
        
        {
          "title": "TextEditor::selectToScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToScreenPosition",
          "body": "Select from the current cursor position to the given position in screen coordinates. This method may merge selections that end up intesecting.",
          "excerpt": "Select from the current cursor position to the given position in screen coordinates. This method may merge selections that end up intesecting..."
        },
      
        
        {
          "title": "TextEditor::selectUp",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectUp",
          "body": "Move the cursor of each selection one character upward while preserving the selection's tail position. This method may merge selections that end up intesecting.",
          "excerpt": "Move the cursor of each selection one character upward while preserving the selection's tail position. This method may merge selections that ..."
        },
      
        
        {
          "title": "TextEditor::selectDown",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectDown",
          "body": "Move the cursor of each selection one character downward while preserving the selection's tail position. This method may merge selections that end up intesecting.",
          "excerpt": "Move the cursor of each selection one character downward while preserving the selection's tail position. This method may merge selections tha..."
        },
      
        
        {
          "title": "TextEditor::selectLeft",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectLeft",
          "body": "Move the cursor of each selection one character leftward while preserving the selection's tail position. This method may merge selections that end up intesecting.",
          "excerpt": "Move the cursor of each selection one character leftward while preserving the selection's tail position. This method may merge selections tha..."
        },
      
        
        {
          "title": "TextEditor::selectRight",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectRight",
          "body": "Move the cursor of each selection one character rightward while preserving the selection's tail position. This method may merge selections that end up intesecting.",
          "excerpt": "Move the cursor of each selection one character rightward while preserving the selection's tail position. This method may merge selections th..."
        },
      
        
        {
          "title": "TextEditor::selectToTop",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToTop",
          "body": "Select from the top of the buffer to the end of the last selection in the buffer. This method merges multiple selections into a single selection.",
          "excerpt": "Select from the top of the buffer to the end of the last selection in the buffer. This method merges multiple selections into a single select..."
        },
      
        
        {
          "title": "TextEditor::selectToBottom",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToBottom",
          "body": "Selects from the top of the first selection in the buffer to the end of the buffer. This method merges multiple selections into a single selection.",
          "excerpt": "Selects from the top of the first selection in the buffer to the end of the buffer. This method merges multiple selections into a single sele..."
        },
      
        
        {
          "title": "TextEditor::selectAll",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectAll",
          "body": "Select all text in the buffer. This method merges multiple selections into a single selection.",
          "excerpt": "Select all text in the buffer. This method merges multiple selections into a single selection...."
        },
      
        
        {
          "title": "TextEditor::selectToBeginningOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToBeginningOfLine",
          "body": "Move the cursor of each selection to the beginning of its line while preserving the selection's tail position. This method may merge selections that end up intesecting.",
          "excerpt": "Move the cursor of each selection to the beginning of its line while preserving the selection's tail position. This method may merge selectio..."
        },
      
        
        {
          "title": "TextEditor::selectToFirstCharacterOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToFirstCharacterOfLine",
          "body": "Move the cursor of each selection to the first non-whitespace character of its line while preserving the selection's tail position. If the cursor is already on the first character of the line, move it to the beginning of the line. This method may merge selections that end up intersecting.",
          "excerpt": "Move the cursor of each selection to the first non-whitespace character of its line while preserving the selection's tail position. If the cu..."
        },
      
        
        {
          "title": "TextEditor::selectToEndOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToEndOfLine",
          "body": "Move the cursor of each selection to the end of its line while preserving the selection's tail position. This method may merge selections that end up intersecting.",
          "excerpt": "Move the cursor of each selection to the end of its line while preserving the selection's tail position. This method may merge selections tha..."
        },
      
        
        {
          "title": "TextEditor::selectToBeginningOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToBeginningOfWord",
          "body": "Expand selections to the beginning of their containing word. Operates on all selections. Moves the cursor to the beginning of the containing word while preserving the selection's tail position.",
          "excerpt": "Expand selections to the beginning of their containing word. Operates on all selections. Moves the cursor to the beginning of the containing ..."
        },
      
        
        {
          "title": "TextEditor::selectToEndOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToEndOfWord",
          "body": "Expand selections to the end of their containing word. Operates on all selections. Moves the cursor to the end of the containing word while preserving the selection's tail position.",
          "excerpt": "Expand selections to the end of their containing word. Operates on all selections. Moves the cursor to the end of the containing word while p..."
        },
      
        
        {
          "title": "TextEditor::selectToPreviousSubwordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToPreviousSubwordBoundary",
          "body": "For each selection, move its cursor to the preceding subword boundary while maintaining the selection's tail position. This method may merge selections that end up intersecting.",
          "excerpt": "For each selection, move its cursor to the preceding subword boundary while maintaining the selection's tail position. This method may merge ..."
        },
      
        
        {
          "title": "TextEditor::selectToNextSubwordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToNextSubwordBoundary",
          "body": "For each selection, move its cursor to the next subword boundary while maintaining the selection's tail position. This method may merge selections that end up intersecting.",
          "excerpt": "For each selection, move its cursor to the next subword boundary while maintaining the selection's tail position. This method may merge selec..."
        },
      
        
        {
          "title": "TextEditor::selectLinesContainingCursors",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectLinesContainingCursors",
          "body": "For each cursor, select the containing line. This method merges selections on successive lines.",
          "excerpt": "For each cursor, select the containing line. This method merges selections on successive lines...."
        },
      
        
        {
          "title": "TextEditor::selectWordsContainingCursors",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectWordsContainingCursors",
          "body": "Select the word surrounding each cursor.",
          "excerpt": "Select the word surrounding each cursor...."
        },
      
        
        {
          "title": "TextEditor::selectToPreviousWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToPreviousWordBoundary",
          "body": "For each selection, move its cursor to the preceding word boundary while maintaining the selection's tail position. This method may merge selections that end up intersecting.",
          "excerpt": "For each selection, move its cursor to the preceding word boundary while maintaining the selection's tail position. This method may merge sel..."
        },
      
        
        {
          "title": "TextEditor::selectToNextWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToNextWordBoundary",
          "body": "For each selection, move its cursor to the next word boundary while maintaining the selection's tail position. This method may merge selections that end up intersecting.",
          "excerpt": "For each selection, move its cursor to the next word boundary while maintaining the selection's tail position. This method may merge selectio..."
        },
      
        
        {
          "title": "TextEditor::selectToBeginningOfNextWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToBeginningOfNextWord",
          "body": "Expand selections to the beginning of the next word. Operates on all selections. Moves the cursor to the beginning of the next word while preserving the selection's tail position.",
          "excerpt": "Expand selections to the beginning of the next word. Operates on all selections. Moves the cursor to the beginning of the next word while pre..."
        },
      
        
        {
          "title": "TextEditor::selectToBeginningOfNextParagraph",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToBeginningOfNextParagraph",
          "body": "Expand selections to the beginning of the next paragraph. Operates on all selections. Moves the cursor to the beginning of the next paragraph while preserving the selection's tail position.",
          "excerpt": "Expand selections to the beginning of the next paragraph. Operates on all selections. Moves the cursor to the beginning of the next paragraph..."
        },
      
        
        {
          "title": "TextEditor::selectToBeginningOfPreviousParagraph",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectToBeginningOfPreviousParagraph",
          "body": "Expand selections to the beginning of the next paragraph. Operates on all selections. Moves the cursor to the beginning of the next paragraph while preserving the selection's tail position.",
          "excerpt": "Expand selections to the beginning of the next paragraph. Operates on all selections. Moves the cursor to the beginning of the next paragraph..."
        },
      
        
        {
          "title": "TextEditor::selectMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectMarker",
          "body": "Select the range of the given marker if it is valid.",
          "excerpt": "Select the range of the given marker if it is valid...."
        },
      
        
        {
          "title": "TextEditor::getLastSelection",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getLastSelection",
          "body": "Get the most recently added {Selection}.",
          "excerpt": "Get the most recently added {Selection}...."
        },
      
        
        {
          "title": "TextEditor::getSelections",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getSelections",
          "body": "Get current {Selection}s.",
          "excerpt": "Get current {Selection}s...."
        },
      
        
        {
          "title": "TextEditor::getSelectionsOrderedByBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getSelectionsOrderedByBufferPosition",
          "body": "Get all {Selection}s, ordered by their position in the buffer instead of the order in which they were added.",
          "excerpt": "Get all {Selection}s, ordered by their position in the buffer instead of the order in which they were added...."
        },
      
        
        {
          "title": "TextEditor::selectionIntersectsBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-selectionIntersectsBufferRange",
          "body": "Determine if a given range in buffer coordinates intersects a selection.",
          "excerpt": "Determine if a given range in buffer coordinates intersects a selection...."
        },
      
        
        {
          "title": "TextEditor::scan",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-scan",
          "body": "Scan regular expression matches in the entire buffer, calling the given iterator function on each match. `::scan` functions as the replace method as well via the `replace` If you're programmatically modifying the results, you may want to try {::backwardsScanInBufferRange} to avoid tripping over your own changes.",
          "excerpt": "Scan regular expression matches in the entire buffer, calling the given iterator function on each match. `::scan` functions as the replace me..."
        },
      
        
        {
          "title": "TextEditor::scanInBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-scanInBufferRange",
          "body": "Scan regular expression matches in a given range, calling the given iterator function on each match.",
          "excerpt": "Scan regular expression matches in a given range, calling the given iterator function on each match...."
        },
      
        
        {
          "title": "TextEditor::backwardsScanInBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-backwardsScanInBufferRange",
          "body": "Scan regular expression matches in a given range in reverse order, calling the given iterator function on each match.",
          "excerpt": "Scan regular expression matches in a given range in reverse order, calling the given iterator function on each match...."
        },
      
        
        {
          "title": "TextEditor::getSoftTabs",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getSoftTabs",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::setSoftTabs",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setSoftTabs",
          "body": "Enable or disable soft tabs for this editor.",
          "excerpt": "Enable or disable soft tabs for this editor...."
        },
      
        
        {
          "title": "TextEditor::toggleSoftTabs",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-toggleSoftTabs",
          "body": "Toggle soft tabs for this editor",
          "excerpt": "Toggle soft tabs for this editor..."
        },
      
        
        {
          "title": "TextEditor::getTabLength",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getTabLength",
          "body": "Get the on-screen length of tab characters.",
          "excerpt": "Get the on-screen length of tab characters...."
        },
      
        
        {
          "title": "TextEditor::setTabLength",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setTabLength",
          "body": "Set the on-screen length of tab characters. Setting this to a {Number} This will override the `editor.tabLength` setting.",
          "excerpt": "Set the on-screen length of tab characters. Setting this to a {Number} This will override the `editor.tabLength` setting...."
        },
      
        
        {
          "title": "TextEditor::usesSoftTabs",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-usesSoftTabs",
          "body": "Determine if the buffer uses hard or soft tabs.",
          "excerpt": "Determine if the buffer uses hard or soft tabs...."
        },
      
        
        {
          "title": "TextEditor::getTabText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getTabText",
          "body": "Get the text representing a single level of indent. If soft tabs are enabled, the text is composed of N spaces, where N is the tab length. Otherwise the text is a tab character (`\\t`).",
          "excerpt": "Get the text representing a single level of indent. If soft tabs are enabled, the text is composed of N spaces, where N is the tab length. Ot..."
        },
      
        
        {
          "title": "TextEditor::isSoftWrapped",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-isSoftWrapped",
          "body": "Determine whether lines in this editor are soft-wrapped.",
          "excerpt": "Determine whether lines in this editor are soft-wrapped...."
        },
      
        
        {
          "title": "TextEditor::setSoftWrapped",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setSoftWrapped",
          "body": "Enable or disable soft wrapping for this editor.",
          "excerpt": "Enable or disable soft wrapping for this editor...."
        },
      
        
        {
          "title": "TextEditor::toggleSoftWrapped",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-toggleSoftWrapped",
          "body": "Toggle soft wrapping for this editor",
          "excerpt": "Toggle soft wrapping for this editor..."
        },
      
        
        {
          "title": "TextEditor::getSoftWrapColumn",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getSoftWrapColumn",
          "body": "Gets the column at which column will soft wrap",
          "excerpt": "Gets the column at which column will soft wrap..."
        },
      
        
        {
          "title": "TextEditor::indentationForBufferRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-indentationForBufferRow",
          "body": "Get the indentation level of the given a buffer row.",
          "excerpt": "Get the indentation level of the given a buffer row...."
        },
      
        
        {
          "title": "TextEditor::setIndentationForBufferRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setIndentationForBufferRow",
          "body": "Set the indentation level for the given buffer row. Inserts or removes hard tabs or spaces based on the soft tabs and tab length settings of this editor in order to bring it to the given indentation level. Note that if soft tabs are enabled and the tab length is 2, a row with 4 leading spaces would have an indentation level of 2.",
          "excerpt": "Set the indentation level for the given buffer row. Inserts or removes hard tabs or spaces based on the soft tabs and tab length settings of ..."
        },
      
        
        {
          "title": "TextEditor::indentSelectedRows",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-indentSelectedRows",
          "body": "Indent rows intersecting selections by one level.",
          "excerpt": "Indent rows intersecting selections by one level...."
        },
      
        
        {
          "title": "TextEditor::outdentSelectedRows",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-outdentSelectedRows",
          "body": "Outdent rows intersecting selections by one level.",
          "excerpt": "Outdent rows intersecting selections by one level...."
        },
      
        
        {
          "title": "TextEditor::indentLevelForLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-indentLevelForLine",
          "body": "Get the indentation level of the given line of text.",
          "excerpt": "Get the indentation level of the given line of text...."
        },
      
        
        {
          "title": "TextEditor::autoIndentSelectedRows",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-autoIndentSelectedRows",
          "body": "Indent rows intersecting selections based on the grammar's suggested indent level.",
          "excerpt": "Indent rows intersecting selections based on the grammar's suggested indent level...."
        },
      
        
        {
          "title": "TextEditor::getGrammar",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getGrammar",
          "body": "Get the current {Grammar} of this editor.",
          "excerpt": "Get the current {Grammar} of this editor...."
        },
      
        
        {
          "title": "TextEditor::setGrammar",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setGrammar",
          "body": "Set the current {Grammar} of this editor. Assigning a grammar will cause the editor to re-tokenize based on the new grammar.",
          "excerpt": "Set the current {Grammar} of this editor. Assigning a grammar will cause the editor to re-tokenize based on the new grammar...."
        },
      
        
        {
          "title": "TextEditor::getRootScopeDescriptor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getRootScopeDescriptor",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextEditor::scopeDescriptorForBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-scopeDescriptorForBufferPosition",
          "body": "Get the syntactic scopeDescriptor for the given position in buffer coordinates. Useful with {Config::get}. For example, if called with a position inside the parameter list of an anonymous CoffeeScript function, the method returns the following array: `[\"source.coffee\", \"meta.inline.function.coffee\", \"variable.parameter.function.coffee\"]`",
          "excerpt": "Get the syntactic scopeDescriptor for the given position in buffer coordinates. Useful with {Config::get}. For example, if called with a posi..."
        },
      
        
        {
          "title": "TextEditor::bufferRangeForScopeAtCursor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-bufferRangeForScopeAtCursor",
          "body": "Get the range in buffer coordinates of all tokens surrounding the cursor that match the given scope selector. For example, if you wanted to find the string surrounding the cursor, you could call `editor.bufferRangeForScopeAtCursor(\".string.quoted\")`.",
          "excerpt": "Get the range in buffer coordinates of all tokens surrounding the cursor that match the given scope selector. For example, if you wanted to f..."
        },
      
        
        {
          "title": "TextEditor::isBufferRowCommented",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-isBufferRowCommented",
          "body": "Determine if the given row is entirely a comment",
          "excerpt": "Determine if the given row is entirely a comment..."
        },
      
        
        {
          "title": "TextEditor::copySelectedText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-copySelectedText",
          "body": "For each selection, copy the selected text.",
          "excerpt": "For each selection, copy the selected text...."
        },
      
        
        {
          "title": "TextEditor::cutSelectedText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-cutSelectedText",
          "body": "For each selection, cut the selected text.",
          "excerpt": "For each selection, cut the selected text...."
        },
      
        
        {
          "title": "TextEditor::pasteText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-pasteText",
          "body": "For each selection, replace the selected text with the contents of the clipboard. If the clipboard contains the same number of selections as the current editor, each selection will be replaced with the content of the corresponding clipboard selection text.",
          "excerpt": "For each selection, replace the selected text with the contents of the clipboard. If the clipboard contains the same number of selections as ..."
        },
      
        
        {
          "title": "TextEditor::cutToEndOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-cutToEndOfLine",
          "body": "For each selection, if the selection is empty, cut all characters of the containing screen line following the cursor. Otherwise cut the selected text.",
          "excerpt": "For each selection, if the selection is empty, cut all characters of the containing screen line following the cursor. Otherwise cut the selec..."
        },
      
        
        {
          "title": "TextEditor::cutToEndOfBufferLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-cutToEndOfBufferLine",
          "body": "For each selection, if the selection is empty, cut all characters of the containing buffer line following the cursor. Otherwise cut the selected text.",
          "excerpt": "For each selection, if the selection is empty, cut all characters of the containing buffer line following the cursor. Otherwise cut the selec..."
        },
      
        
        {
          "title": "TextEditor::foldCurrentRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-foldCurrentRow",
          "body": "Fold the most recent cursor's row based on its indentation level. The fold will extend from the nearest preceding line with a lower indentation level up to the nearest following row with a lower indentation level.",
          "excerpt": "Fold the most recent cursor's row based on its indentation level. The fold will extend from the nearest preceding line with a lower indentati..."
        },
      
        
        {
          "title": "TextEditor::unfoldCurrentRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-unfoldCurrentRow",
          "body": "Unfold the most recent cursor's row by one level.",
          "excerpt": "Unfold the most recent cursor's row by one level...."
        },
      
        
        {
          "title": "TextEditor::foldBufferRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-foldBufferRow",
          "body": "Fold the given row in buffer coordinates based on its indentation level. If the given row is foldable, the fold will begin there. Otherwise, it will begin at the first foldable row preceding the given row.",
          "excerpt": "Fold the given row in buffer coordinates based on its indentation level. If the given row is foldable, the fold will begin there. Otherwise, ..."
        },
      
        
        {
          "title": "TextEditor::unfoldBufferRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-unfoldBufferRow",
          "body": "Unfold all folds containing the given row in buffer coordinates.",
          "excerpt": "Unfold all folds containing the given row in buffer coordinates...."
        },
      
        
        {
          "title": "TextEditor::foldSelectedLines",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-foldSelectedLines",
          "body": "For each selection, fold the rows it intersects.",
          "excerpt": "For each selection, fold the rows it intersects...."
        },
      
        
        {
          "title": "TextEditor::foldAll",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-foldAll",
          "body": "Fold all foldable lines.",
          "excerpt": "Fold all foldable lines...."
        },
      
        
        {
          "title": "TextEditor::unfoldAll",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-unfoldAll",
          "body": "Unfold all existing folds.",
          "excerpt": "Unfold all existing folds...."
        },
      
        
        {
          "title": "TextEditor::foldAllAtIndentLevel",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-foldAllAtIndentLevel",
          "body": "Fold all foldable lines at the given indent level.",
          "excerpt": "Fold all foldable lines at the given indent level...."
        },
      
        
        {
          "title": "TextEditor::isFoldableAtBufferRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-isFoldableAtBufferRow",
          "body": "Determine whether the given row in buffer coordinates is foldable. A *foldable* row is a row that *starts* a row range that can be folded.",
          "excerpt": "Determine whether the given row in buffer coordinates is foldable. A *foldable* row is a row that *starts* a row range that can be folded...."
        },
      
        
        {
          "title": "TextEditor::isFoldableAtScreenRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-isFoldableAtScreenRow",
          "body": "Determine whether the given row in screen coordinates is foldable. A *foldable* row is a row that *starts* a row range that can be folded.",
          "excerpt": "Determine whether the given row in screen coordinates is foldable. A *foldable* row is a row that *starts* a row range that can be folded...."
        },
      
        
        {
          "title": "TextEditor::toggleFoldAtBufferRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-toggleFoldAtBufferRow",
          "body": "Fold the given buffer row if it isn't currently folded, and unfold it otherwise.",
          "excerpt": "Fold the given buffer row if it isn't currently folded, and unfold it otherwise...."
        },
      
        
        {
          "title": "TextEditor::isFoldedAtCursorRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-isFoldedAtCursorRow",
          "body": "Determine whether the most recently added cursor's row is folded.",
          "excerpt": "Determine whether the most recently added cursor's row is folded...."
        },
      
        
        {
          "title": "TextEditor::isFoldedAtBufferRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-isFoldedAtBufferRow",
          "body": "Determine whether the given row in buffer coordinates is folded.",
          "excerpt": "Determine whether the given row in buffer coordinates is folded...."
        },
      
        
        {
          "title": "TextEditor::isFoldedAtScreenRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-isFoldedAtScreenRow",
          "body": "Determine whether the given row in screen coordinates is folded.",
          "excerpt": "Determine whether the given row in screen coordinates is folded...."
        },
      
        
        {
          "title": "TextEditor::addGutter",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-addGutter",
          "body": "Add a custom {Gutter}.",
          "excerpt": "Add a custom {Gutter}...."
        },
      
        
        {
          "title": "TextEditor::getGutters",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getGutters",
          "body": "Get this editor's gutters.",
          "excerpt": "Get this editor's gutters...."
        },
      
        
        {
          "title": "TextEditor::gutterWithName",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-gutterWithName",
          "body": "Get the gutter with the given name.",
          "excerpt": "Get the gutter with the given name...."
        },
      
        
        {
          "title": "TextEditor::scrollToCursorPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-scrollToCursorPosition",
          "body": "Scroll the editor to reveal the most recently added cursor if it is off-screen.",
          "excerpt": "Scroll the editor to reveal the most recently added cursor if it is off-screen...."
        },
      
        
        {
          "title": "TextEditor::scrollToBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-scrollToBufferPosition",
          "body": "Scrolls the editor to the given buffer position.",
          "excerpt": "Scrolls the editor to the given buffer position...."
        },
      
        
        {
          "title": "TextEditor::scrollToScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-scrollToScreenPosition",
          "body": "Scrolls the editor to the given screen position.",
          "excerpt": "Scrolls the editor to the given screen position...."
        },
      
        
        {
          "title": "TextEditor::getPlaceholderText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-getPlaceholderText",
          "body": "Retrieves the greyed out placeholder of a mini editor.",
          "excerpt": "Retrieves the greyed out placeholder of a mini editor...."
        },
      
        
        {
          "title": "TextEditor::setPlaceholderText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextEditor/#instance-setPlaceholderText",
          "body": "Set the greyed out placeholder of a mini editor. Placeholder text will be displayed when the editor has no content.",
          "excerpt": "Set the greyed out placeholder of a mini editor. Placeholder text will be displayed when the editor has no content...."
        },
      
    
      
      

      {
        "title": "StyleManager",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/StyleManager",
        "body": "A singleton instance of this class available via `atom.styles`, which you can use to globally query and observe the set of active style sheets. The `StyleManager` doesn't add any style elements to the DOM on its own, but is instead subscribed to by individual `` elements, which clone and attach style elements in different contexts.",
        "excerpt": "A singleton instance of this class available via `atom.styles`, which you can use to globally query and observe the set of active style sheet..."
      },

      

      
      
        
        {
          "title": "StyleManager::observeStyleElements",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/StyleManager/#instance-observeStyleElements",
          "body": "Invoke `callback` for all current and future style elements.",
          "excerpt": "Invoke `callback` for all current and future style elements...."
        },
      
        
        {
          "title": "StyleManager::onDidAddStyleElement",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/StyleManager/#instance-onDidAddStyleElement",
          "body": "Invoke `callback` when a style element is added.",
          "excerpt": "Invoke `callback` when a style element is added...."
        },
      
        
        {
          "title": "StyleManager::onDidRemoveStyleElement",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/StyleManager/#instance-onDidRemoveStyleElement",
          "body": "Invoke `callback` when a style element is removed.",
          "excerpt": "Invoke `callback` when a style element is removed...."
        },
      
        
        {
          "title": "StyleManager::onDidUpdateStyleElement",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/StyleManager/#instance-onDidUpdateStyleElement",
          "body": "Invoke `callback` when an existing style element is updated.",
          "excerpt": "Invoke `callback` when an existing style element is updated...."
        },
      
        
        {
          "title": "StyleManager::getStyleElements",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/StyleManager/#instance-getStyleElements",
          "body": "Get all loaded style elements.",
          "excerpt": "Get all loaded style elements...."
        },
      
        
        {
          "title": "StyleManager::getUserStyleSheetPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/StyleManager/#instance-getUserStyleSheetPath",
          "body": "Get the path of the user style sheet in `~/.atom`.",
          "excerpt": "Get the path of the user style sheet in `~/.atom`...."
        },
      
    
      
      

      {
        "title": "PackageManager",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/PackageManager",
        "body": "Package manager for coordinating the lifecycle of Atom packages. An instance of this class is always available as the `atom.packages` global. Packages can be loaded, activated, and deactivated, and unloaded: * Loading a package reads and parses the package's metadata and resources such as keymaps, menus, stylesheets, etc. * Activating a package registers the loaded resources and calls `activate()` on the package's main module. * Deactivating a package unregisters the package's resources and calls `deactivate()` on the package's main module. * Unloading a package removes it completely from the package manager. Packages can be enabled/disabled via the `core.disabledPackages` config settings and also by calling `enablePackage()/disablePackage()`.",
        "excerpt": "Package manager for coordinating the lifecycle of Atom packages. An instance of this class is always available as the `atom.packages` global...."
      },

      

      
      
        
        {
          "title": "PackageManager::onDidLoadInitialPackages",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-onDidLoadInitialPackages",
          "body": "Invoke the given callback when all packages have been loaded.",
          "excerpt": "Invoke the given callback when all packages have been loaded...."
        },
      
        
        {
          "title": "PackageManager::onDidActivateInitialPackages",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-onDidActivateInitialPackages",
          "body": "Invoke the given callback when all packages have been activated.",
          "excerpt": "Invoke the given callback when all packages have been activated...."
        },
      
        
        {
          "title": "PackageManager::onDidActivatePackage",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-onDidActivatePackage",
          "body": "Invoke the given callback when a package is activated.",
          "excerpt": "Invoke the given callback when a package is activated...."
        },
      
        
        {
          "title": "PackageManager::onDidDeactivatePackage",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-onDidDeactivatePackage",
          "body": "Invoke the given callback when a package is deactivated.",
          "excerpt": "Invoke the given callback when a package is deactivated...."
        },
      
        
        {
          "title": "PackageManager::onDidLoadPackage",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-onDidLoadPackage",
          "body": "Invoke the given callback when a package is loaded.",
          "excerpt": "Invoke the given callback when a package is loaded...."
        },
      
        
        {
          "title": "PackageManager::onDidUnloadPackage",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-onDidUnloadPackage",
          "body": "Invoke the given callback when a package is unloaded.",
          "excerpt": "Invoke the given callback when a package is unloaded...."
        },
      
        
        {
          "title": "PackageManager::getApmPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-getApmPath",
          "body": "Get the path to the apm command. Uses the value of the `core.apmPath` config setting if it exists. Return a {String} file path to apm.",
          "excerpt": "Get the path to the apm command. Uses the value of the `core.apmPath` config setting if it exists. Return a {String} file path to apm...."
        },
      
        
        {
          "title": "PackageManager::getPackageDirPaths",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-getPackageDirPaths",
          "body": "Get the paths being used to look for packages.",
          "excerpt": "Get the paths being used to look for packages...."
        },
      
        
        {
          "title": "PackageManager::resolvePackagePath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-resolvePackagePath",
          "body": "Resolve the given package name to a path on disk. Return a {String} folder path or undefined if it could not be resolved.",
          "excerpt": "Resolve the given package name to a path on disk. Return a {String} folder path or undefined if it could not be resolved...."
        },
      
        
        {
          "title": "PackageManager::isBundledPackage",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-isBundledPackage",
          "body": "Is the package with the given name bundled with Atom?",
          "excerpt": "Is the package with the given name bundled with Atom?..."
        },
      
        
        {
          "title": "PackageManager::enablePackage",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-enablePackage",
          "body": "Enable the package with the given name.",
          "excerpt": "Enable the package with the given name...."
        },
      
        
        {
          "title": "PackageManager::disablePackage",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-disablePackage",
          "body": "Disable the package with the given name.",
          "excerpt": "Disable the package with the given name...."
        },
      
        
        {
          "title": "PackageManager::isPackageDisabled",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-isPackageDisabled",
          "body": "Is the package with the given name disabled?",
          "excerpt": "Is the package with the given name disabled?..."
        },
      
        
        {
          "title": "PackageManager::getActivePackages",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-getActivePackages",
          "body": "Get an {Array} of all the active {Package}s.",
          "excerpt": "Get an {Array} of all the active {Package}s...."
        },
      
        
        {
          "title": "PackageManager::getActivePackage",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-getActivePackage",
          "body": "Get the active {Package} with the given name.",
          "excerpt": "Get the active {Package} with the given name...."
        },
      
        
        {
          "title": "PackageManager::isPackageActive",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-isPackageActive",
          "body": "Is the {Package} with the given name active?",
          "excerpt": "Is the {Package} with the given name active?..."
        },
      
        
        {
          "title": "PackageManager::getLoadedPackages",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-getLoadedPackages",
          "body": "Get an {Array} of all the loaded {Package}s",
          "excerpt": "Get an {Array} of all the loaded {Package}s..."
        },
      
        
        {
          "title": "PackageManager::getLoadedPackage",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-getLoadedPackage",
          "body": "Get the loaded {Package} with the given name.",
          "excerpt": "Get the loaded {Package} with the given name...."
        },
      
        
        {
          "title": "PackageManager::isPackageLoaded",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-isPackageLoaded",
          "body": "Is the package with the given name loaded?",
          "excerpt": "Is the package with the given name loaded?..."
        },
      
        
        {
          "title": "PackageManager::getAvailablePackagePaths",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-getAvailablePackagePaths",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "PackageManager::getAvailablePackageNames",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-getAvailablePackageNames",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "PackageManager::getAvailablePackageMetadata",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/PackageManager/#instance-getAvailablePackageMetadata",
          "body": "",
          "excerpt": "..."
        },
      
    
      
      

      {
        "title": "TooltipManager",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/TooltipManager",
        "body": "Associates tooltips with HTML elements or selectors. You can get the `TooltipManager` via `atom.tooltips`.",
        "excerpt": "Associates tooltips with HTML elements or selectors. You can get the `TooltipManager` via `atom.tooltips`...."
      },

      

      
      
        
        {
          "title": "TooltipManager::add",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TooltipManager/#instance-add",
          "body": "Add a tooltip to the given element.",
          "excerpt": "Add a tooltip to the given element...."
        },
      
    
      
      

      {
        "title": "LayerDecoration",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/LayerDecoration",
        "body": "Represents a decoration that applies to every marker on a given layer. Created via {TextEditor::decorateMarkerLayer}.",
        "excerpt": "Represents a decoration that applies to every marker on a given layer. Created via {TextEditor::decorateMarkerLayer}...."
      },

      

      
      
        
        {
          "title": "LayerDecoration::destroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/LayerDecoration/#instance-destroy",
          "body": "Destroys the decoration.",
          "excerpt": "Destroys the decoration...."
        },
      
        
        {
          "title": "LayerDecoration::isDestroyed",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/LayerDecoration/#instance-isDestroyed",
          "body": "Determine whether this decoration is destroyed.",
          "excerpt": "Determine whether this decoration is destroyed...."
        },
      
        
        {
          "title": "LayerDecoration::getProperties",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/LayerDecoration/#instance-getProperties",
          "body": "Get this decoration's properties.",
          "excerpt": "Get this decoration's properties...."
        },
      
        
        {
          "title": "LayerDecoration::setProperties",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/LayerDecoration/#instance-setProperties",
          "body": "Set this decoration's properties.",
          "excerpt": "Set this decoration's properties...."
        },
      
        
        {
          "title": "LayerDecoration::setPropertiesForMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/LayerDecoration/#instance-setPropertiesForMarker",
          "body": "Override the decoration properties for a specific marker.",
          "excerpt": "Override the decoration properties for a specific marker...."
        },
      
    
      
      

      {
        "title": "Cursor",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Cursor",
        "body": "The `Cursor` class represents the little blinking line identifying where text can be inserted. Cursors belong to {TextEditor}s and have some metadata attached in the form of a {DisplayMarker}.",
        "excerpt": "The `Cursor` class represents the little blinking line identifying where text can be inserted. Cursors belong to {TextEditor}s and have some ..."
      },

      

      
      
        
        {
          "title": "Cursor::onDidChangePosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-onDidChangePosition",
          "body": "Calls your `callback` when the cursor has been moved.",
          "excerpt": "Calls your `callback` when the cursor has been moved...."
        },
      
        
        {
          "title": "Cursor::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-onDidDestroy",
          "body": "Calls your `callback` when the cursor is destroyed",
          "excerpt": "Calls your `callback` when the cursor is destroyed..."
        },
      
        
        {
          "title": "Cursor::onDidChangeVisibility",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-onDidChangeVisibility",
          "body": "Calls your `callback` when the cursor's visibility has changed",
          "excerpt": "Calls your `callback` when the cursor's visibility has changed..."
        },
      
        
        {
          "title": "Cursor::setScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-setScreenPosition",
          "body": "Moves a cursor to a given screen position.",
          "excerpt": "Moves a cursor to a given screen position...."
        },
      
        
        {
          "title": "Cursor::getScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getScreenPosition",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::setBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-setBufferPosition",
          "body": "Moves a cursor to a given buffer position.",
          "excerpt": "Moves a cursor to a given buffer position...."
        },
      
        
        {
          "title": "Cursor::getBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getBufferPosition",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getScreenRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getScreenRow",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getScreenColumn",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getScreenColumn",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getBufferRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getBufferRow",
          "body": "Retrieves the cursor's current buffer row.",
          "excerpt": "Retrieves the cursor's current buffer row...."
        },
      
        
        {
          "title": "Cursor::getBufferColumn",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getBufferColumn",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getCurrentBufferLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getCurrentBufferLine",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::isAtBeginningOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-isAtBeginningOfLine",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::isAtEndOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-isAtEndOfLine",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getMarker",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::isSurroundedByWhitespace",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-isSurroundedByWhitespace",
          "body": "Identifies if the cursor is surrounded by whitespace. \"Surrounded\" here means that the character directly before and after the cursor are both whitespace.",
          "excerpt": "Identifies if the cursor is surrounded by whitespace. \"Surrounded\" here means that the character directly before and after the cursor are b..."
        },
      
        
        {
          "title": "Cursor::isBetweenWordAndNonWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-isBetweenWordAndNonWord",
          "body": "This method returns false if the character before or after the cursor is whitespace.",
          "excerpt": "This method returns false if the character before or after the cursor is whitespace...."
        },
      
        
        {
          "title": "Cursor::isInsideWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-isInsideWord",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getIndentLevel",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getIndentLevel",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getScopeDescriptor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getScopeDescriptor",
          "body": "Retrieves the scope descriptor for the cursor's current position.",
          "excerpt": "Retrieves the scope descriptor for the cursor's current position...."
        },
      
        
        {
          "title": "Cursor::hasPrecedingCharactersOnLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-hasPrecedingCharactersOnLine",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::isLastCursor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-isLastCursor",
          "body": "Identifies if this cursor is the last in the {TextEditor}. \"Last\" is defined as the most recently added cursor.",
          "excerpt": "Identifies if this cursor is the last in the {TextEditor}. \"Last\" is defined as the most recently added cursor...."
        },
      
        
        {
          "title": "Cursor::moveUp",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveUp",
          "body": "Moves the cursor up one screen row.",
          "excerpt": "Moves the cursor up one screen row...."
        },
      
        
        {
          "title": "Cursor::moveDown",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveDown",
          "body": "Moves the cursor down one screen row.",
          "excerpt": "Moves the cursor down one screen row...."
        },
      
        
        {
          "title": "Cursor::moveLeft",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveLeft",
          "body": "Moves the cursor left one screen column.",
          "excerpt": "Moves the cursor left one screen column...."
        },
      
        
        {
          "title": "Cursor::moveRight",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveRight",
          "body": "Moves the cursor right one screen column.",
          "excerpt": "Moves the cursor right one screen column...."
        },
      
        
        {
          "title": "Cursor::moveToTop",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToTop",
          "body": "Moves the cursor to the top of the buffer.",
          "excerpt": "Moves the cursor to the top of the buffer...."
        },
      
        
        {
          "title": "Cursor::moveToBottom",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToBottom",
          "body": "Moves the cursor to the bottom of the buffer.",
          "excerpt": "Moves the cursor to the bottom of the buffer...."
        },
      
        
        {
          "title": "Cursor::moveToBeginningOfScreenLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToBeginningOfScreenLine",
          "body": "Moves the cursor to the beginning of the line.",
          "excerpt": "Moves the cursor to the beginning of the line...."
        },
      
        
        {
          "title": "Cursor::moveToBeginningOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToBeginningOfLine",
          "body": "Moves the cursor to the beginning of the buffer line.",
          "excerpt": "Moves the cursor to the beginning of the buffer line...."
        },
      
        
        {
          "title": "Cursor::moveToFirstCharacterOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToFirstCharacterOfLine",
          "body": "Moves the cursor to the beginning of the first character in the line.",
          "excerpt": "Moves the cursor to the beginning of the first character in the line...."
        },
      
        
        {
          "title": "Cursor::moveToEndOfScreenLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToEndOfScreenLine",
          "body": "Moves the cursor to the end of the line.",
          "excerpt": "Moves the cursor to the end of the line...."
        },
      
        
        {
          "title": "Cursor::moveToEndOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToEndOfLine",
          "body": "Moves the cursor to the end of the buffer line.",
          "excerpt": "Moves the cursor to the end of the buffer line...."
        },
      
        
        {
          "title": "Cursor::moveToBeginningOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToBeginningOfWord",
          "body": "Moves the cursor to the beginning of the word.",
          "excerpt": "Moves the cursor to the beginning of the word...."
        },
      
        
        {
          "title": "Cursor::moveToEndOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToEndOfWord",
          "body": "Moves the cursor to the end of the word.",
          "excerpt": "Moves the cursor to the end of the word...."
        },
      
        
        {
          "title": "Cursor::moveToBeginningOfNextWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToBeginningOfNextWord",
          "body": "Moves the cursor to the beginning of the next word.",
          "excerpt": "Moves the cursor to the beginning of the next word...."
        },
      
        
        {
          "title": "Cursor::moveToPreviousWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToPreviousWordBoundary",
          "body": "Moves the cursor to the previous word boundary.",
          "excerpt": "Moves the cursor to the previous word boundary...."
        },
      
        
        {
          "title": "Cursor::moveToNextWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToNextWordBoundary",
          "body": "Moves the cursor to the next word boundary.",
          "excerpt": "Moves the cursor to the next word boundary...."
        },
      
        
        {
          "title": "Cursor::moveToPreviousSubwordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToPreviousSubwordBoundary",
          "body": "Moves the cursor to the previous subword boundary.",
          "excerpt": "Moves the cursor to the previous subword boundary...."
        },
      
        
        {
          "title": "Cursor::moveToNextSubwordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToNextSubwordBoundary",
          "body": "Moves the cursor to the next subword boundary.",
          "excerpt": "Moves the cursor to the next subword boundary...."
        },
      
        
        {
          "title": "Cursor::skipLeadingWhitespace",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-skipLeadingWhitespace",
          "body": "Moves the cursor to the beginning of the buffer line, skipping all whitespace.",
          "excerpt": "Moves the cursor to the beginning of the buffer line, skipping all whitespace...."
        },
      
        
        {
          "title": "Cursor::moveToBeginningOfNextParagraph",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToBeginningOfNextParagraph",
          "body": "Moves the cursor to the beginning of the next paragraph",
          "excerpt": "Moves the cursor to the beginning of the next paragraph..."
        },
      
        
        {
          "title": "Cursor::moveToBeginningOfPreviousParagraph",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-moveToBeginningOfPreviousParagraph",
          "body": "Moves the cursor to the beginning of the previous paragraph",
          "excerpt": "Moves the cursor to the beginning of the previous paragraph..."
        },
      
        
        {
          "title": "Cursor::getPreviousWordBoundaryBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getPreviousWordBoundaryBufferPosition",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getNextWordBoundaryBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getNextWordBoundaryBufferPosition",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getBeginningOfCurrentWordBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getBeginningOfCurrentWordBufferPosition",
          "body": "Retrieves the buffer position of where the current word starts.",
          "excerpt": "Retrieves the buffer position of where the current word starts...."
        },
      
        
        {
          "title": "Cursor::getEndOfCurrentWordBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getEndOfCurrentWordBufferPosition",
          "body": "Retrieves the buffer position of where the current word ends.",
          "excerpt": "Retrieves the buffer position of where the current word ends...."
        },
      
        
        {
          "title": "Cursor::getBeginningOfNextWordBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getBeginningOfNextWordBufferPosition",
          "body": "Retrieves the buffer position of where the next word starts.",
          "excerpt": "Retrieves the buffer position of where the next word starts...."
        },
      
        
        {
          "title": "Cursor::getCurrentWordBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getCurrentWordBufferRange",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getCurrentLineBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getCurrentLineBufferRange",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::getCurrentParagraphBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getCurrentParagraphBufferRange",
          "body": "Retrieves the range for the current paragraph. A paragraph is defined as a block of text surrounded by empty lines or comments.",
          "excerpt": "Retrieves the range for the current paragraph. A paragraph is defined as a block of text surrounded by empty lines or comments...."
        },
      
        
        {
          "title": "Cursor::getCurrentWordPrefix",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-getCurrentWordPrefix",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::setVisible",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-setVisible",
          "body": "Sets whether the cursor is visible.",
          "excerpt": "Sets whether the cursor is visible...."
        },
      
        
        {
          "title": "Cursor::isVisible",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-isVisible",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Cursor::compare",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-compare",
          "body": "Compare this cursor's buffer position to another cursor's buffer position. See {Point::compare} for more details.",
          "excerpt": "Compare this cursor's buffer position to another cursor's buffer position. See {Point::compare} for more details...."
        },
      
        
        {
          "title": "Cursor::clearAutoscroll",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-clearAutoscroll",
          "body": "Prevents this cursor from causing scrolling.",
          "excerpt": "Prevents this cursor from causing scrolling...."
        },
      
        
        {
          "title": "Cursor::clearSelection",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-clearSelection",
          "body": "Deselects the current selection.",
          "excerpt": "Deselects the current selection...."
        },
      
        
        {
          "title": "Cursor::wordRegExp",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-wordRegExp",
          "body": "Get the RegExp used by the cursor to determine what a \"word\" is.",
          "excerpt": "Get the RegExp used by the cursor to determine what a \"word\" is...."
        },
      
        
        {
          "title": "Cursor::subwordRegExp",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Cursor/#instance-subwordRegExp",
          "body": "Get the RegExp used by the cursor to determine what a \"subword\" is.",
          "excerpt": "Get the RegExp used by the cursor to determine what a \"subword\" is...."
        },
      
    
      
      

      {
        "title": "CommandRegistry",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/CommandRegistry",
        "body": "Associates listener functions with commands in a context-sensitive way using CSS selectors. You can access a global instance of this class via `atom.commands`, and commands registered there will be presented in the command palette. The global command registry facilitates a style of event handling known as *event delegation* that was popularized by jQuery. Atom commands are expressed as custom DOM events that can be invoked on the currently focused element via a key binding or manually via the command palette. Rather than binding listeners for command events directly to DOM nodes, you instead register command event listeners globally on `atom.commands` and constrain them to specific kinds of elements with CSS selectors. Command names must follow the `namespace:action` pattern, where `namespace` will typically be the name of your package, and `action` describes the behavior of your command. If either part consists of multiple words, these must be separated by hyphens. E.g. `awesome-package:turn-it-up-to-eleven`. All words should be lowercased. As the event bubbles upward through the DOM, all registered event listeners with matching selectors are invoked in order of specificity. In the event of a specificity tie, the most recently registered listener is invoked first. This mirrors the \"cascade\" semantics of CSS. Event listeners are invoked in the context of the current DOM node, meaning `this` always points at `event.currentTarget`. As is normally the case with DOM events, `stopPropagation` and `stopImmediatePropagation` can be used to terminate the bubbling process and prevent invocation of additional listeners. ## Example Here is a command that inserts the current date in an editor: ```coffee atom.commands.add 'atom-text-editor', 'user:insert-date': (event) -> editor = @getModel() editor.insertText(new Date().toLocaleString()) ```",
        "excerpt": "Associates listener functions with commands in a context-sensitive way using CSS selectors. You can access a global instance of this class vi..."
      },

      

      
      
        
        {
          "title": "CommandRegistry::add",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/CommandRegistry/#instance-add",
          "body": "Add one or more command listeners associated with a selector.",
          "excerpt": "Add one or more command listeners associated with a selector...."
        },
      
        
        {
          "title": "CommandRegistry::findCommands",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/CommandRegistry/#instance-findCommands",
          "body": "Find all registered commands matching a query.",
          "excerpt": "Find all registered commands matching a query...."
        },
      
        
        {
          "title": "CommandRegistry::dispatch",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/CommandRegistry/#instance-dispatch",
          "body": "Simulate the dispatch of a command on a DOM node. This can be useful for testing when you want to simulate the invocation of a command on a detached DOM node. Otherwise, the DOM node in question needs to be attached to the document so the event bubbles up to the root node to be processed.",
          "excerpt": "Simulate the dispatch of a command on a DOM node. This can be useful for testing when you want to simulate the invocation of a command on a d..."
        },
      
        
        {
          "title": "CommandRegistry::onWillDispatch",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/CommandRegistry/#instance-onWillDispatch",
          "body": "Invoke the given callback before dispatching a command event.",
          "excerpt": "Invoke the given callback before dispatching a command event...."
        },
      
        
        {
          "title": "CommandRegistry::onDidDispatch",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/CommandRegistry/#instance-onDidDispatch",
          "body": "Invoke the given callback after dispatching a command event.",
          "excerpt": "Invoke the given callback after dispatching a command event...."
        },
      
    
      
      

      {
        "title": "NotificationManager",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/NotificationManager",
        "body": "A notification manager used to create {Notification}s to be shown to the user. An instance of this class is always available as the `atom.notifications` global.",
        "excerpt": "A notification manager used to create {Notification}s to be shown to the user. An instance of this class is always available as the `atom.not..."
      },

      

      
      
        
        {
          "title": "NotificationManager::onDidAddNotification",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/NotificationManager/#instance-onDidAddNotification",
          "body": "Invoke the given callback after a notification has been added.",
          "excerpt": "Invoke the given callback after a notification has been added...."
        },
      
        
        {
          "title": "NotificationManager::addSuccess",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/NotificationManager/#instance-addSuccess",
          "body": "Add a success notification.",
          "excerpt": "Add a success notification...."
        },
      
        
        {
          "title": "NotificationManager::addInfo",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/NotificationManager/#instance-addInfo",
          "body": "Add an informational notification.",
          "excerpt": "Add an informational notification...."
        },
      
        
        {
          "title": "NotificationManager::addWarning",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/NotificationManager/#instance-addWarning",
          "body": "Add a warning notification.",
          "excerpt": "Add a warning notification...."
        },
      
        
        {
          "title": "NotificationManager::addError",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/NotificationManager/#instance-addError",
          "body": "Add an error notification.",
          "excerpt": "Add an error notification...."
        },
      
        
        {
          "title": "NotificationManager::addFatalError",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/NotificationManager/#instance-addFatalError",
          "body": "Add a fatal error notification.",
          "excerpt": "Add a fatal error notification...."
        },
      
        
        {
          "title": "NotificationManager::getNotifications",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/NotificationManager/#instance-getNotifications",
          "body": "Get all the notifications.",
          "excerpt": "Get all the notifications...."
        },
      
    
      
      

      {
        "title": "BufferedProcess",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/BufferedProcess",
        "body": "A wrapper which provides standard error/output line buffering for Node's ChildProcess.",
        "excerpt": "A wrapper which provides standard error/output line buffering for Node's ChildProcess...."
      },

      

      
      
        
        {
          "title": "BufferedProcess::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/BufferedProcess/#instance-constructor",
          "body": "Runs the given command by spawning a new child process.",
          "excerpt": "Runs the given command by spawning a new child process...."
        },
      
        
        {
          "title": "BufferedProcess::onWillThrowError",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/BufferedProcess/#instance-onWillThrowError",
          "body": "Will call your callback when an error will be raised by the process. Usually this is due to the command not being available or not on the PATH. You can call `handle()` on the object passed to your callback to indicate that you have handled this error.",
          "excerpt": "Will call your callback when an error will be raised by the process. Usually this is due to the command not being available or not on the PAT..."
        },
      
        
        {
          "title": "BufferedProcess::kill",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/BufferedProcess/#instance-kill",
          "body": "Terminate the process.",
          "excerpt": "Terminate the process...."
        },
      
    
      
      

      {
        "title": "Task",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Task",
        "body": "Run a node script in a separate process. Used by the fuzzy-finder and [find in project](https://github.com/atom/atom/blob/master/src/scan-handler.coffee). For a real-world example, see the [scan-handler](https://github.com/atom/atom/blob/master/src/scan-handler.coffee) and the [instantiation of the task](https://github.com/atom/atom/blob/4a20f13162f65afc816b512ad7201e528c3443d7/src/project.coffee#L245).",
        "excerpt": "Run a node script in a separate process. Used by the fuzzy-finder and [find in project](https://github.com/atom/atom/blob/master/src/scan-han..."
      },

      
        
        {
          "title": "Task::once",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Task/#once",
          "body": "A helper method to easily launch and run a task once.",
          "excerpt": "A helper method to easily launch and run a task once...."
        },
      

      
      
        
        {
          "title": "Task::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Task/#instance-constructor",
          "body": "Creates a task. You should probably use {.once}",
          "excerpt": "Creates a task. You should probably use {.once}..."
        },
      
        
        {
          "title": "Task::start",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Task/#instance-start",
          "body": "Starts the task. Throws an error if this task has already been terminated or if sending a message to the child process fails.",
          "excerpt": "Starts the task. Throws an error if this task has already been terminated or if sending a message to the child process fails...."
        },
      
        
        {
          "title": "Task::send",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Task/#instance-send",
          "body": "Send message to the task. Throws an error if this task has already been terminated or if sending a message to the child process fails.",
          "excerpt": "Send message to the task. Throws an error if this task has already been terminated or if sending a message to the child process fails...."
        },
      
        
        {
          "title": "Task::on",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Task/#instance-on",
          "body": "Call a function when an event is emitted by the child process",
          "excerpt": "Call a function when an event is emitted by the child process..."
        },
      
        
        {
          "title": "Task::once",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Task/#instance-once",
          "body": "A helper method to easily launch and run a task once.",
          "excerpt": "A helper method to easily launch and run a task once...."
        },
      
        
        {
          "title": "Task::terminate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Task/#instance-terminate",
          "body": "Forcefully stop the running task. No more events are emitted once this method is called.",
          "excerpt": "Forcefully stop the running task. No more events are emitted once this method is called...."
        },
      
    
      
      

      {
        "title": "Pane",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Pane",
        "body": "A container for presenting content in the center of the workspace. Panes can contain multiple items, one of which is *active* at a given time. The view corresponding to the active item is displayed in the interface. In the default configuration, tabs are also displayed for each item. Each pane may also contain one *pending* item. When a pending item is added to a pane, it will replace the currently pending item, if any, instead of simply being added. In the default configuration, the text in the tab for pending items is shown in italics.",
        "excerpt": "A container for presenting content in the center of the workspace. Panes can contain multiple items, one of which is *active* at a given time..."
      },

      

      
      
        
        {
          "title": "Pane::onDidChangeFlexScale",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onDidChangeFlexScale",
          "body": "Invoke the given callback when the pane resizes The callback will be invoked when pane's flexScale property changes. Use {::getFlexScale} to get the current value.",
          "excerpt": "Invoke the given callback when the pane resizes The callback will be invoked when pane's flexScale property changes. Use {::getFlexScale} to ..."
        },
      
        
        {
          "title": "Pane::observeFlexScale",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-observeFlexScale",
          "body": "Invoke the given callback with the current and future values of {::getFlexScale}.",
          "excerpt": "Invoke the given callback with the current and future values of {::getFlexScale}...."
        },
      
        
        {
          "title": "Pane::onDidActivate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onDidActivate",
          "body": "Invoke the given callback when the pane is activated. The given callback will be invoked whenever {::activate} is called on the pane, even if it is already active at the time.",
          "excerpt": "Invoke the given callback when the pane is activated. The given callback will be invoked whenever {::activate} is called on the pane, even if..."
        },
      
        
        {
          "title": "Pane::onWillDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onWillDestroy",
          "body": "Invoke the given callback before the pane is destroyed.",
          "excerpt": "Invoke the given callback before the pane is destroyed...."
        },
      
        
        {
          "title": "Pane::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onDidDestroy",
          "body": "Invoke the given callback when the pane is destroyed.",
          "excerpt": "Invoke the given callback when the pane is destroyed...."
        },
      
        
        {
          "title": "Pane::onDidChangeActive",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onDidChangeActive",
          "body": "Invoke the given callback when the value of the {::isActive} property changes.",
          "excerpt": "Invoke the given callback when the value of the {::isActive} property changes...."
        },
      
        
        {
          "title": "Pane::observeActive",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-observeActive",
          "body": "Invoke the given callback with the current and future values of the {::isActive} property.",
          "excerpt": "Invoke the given callback with the current and future values of the {::isActive} property...."
        },
      
        
        {
          "title": "Pane::onDidAddItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onDidAddItem",
          "body": "Invoke the given callback when an item is added to the pane.",
          "excerpt": "Invoke the given callback when an item is added to the pane...."
        },
      
        
        {
          "title": "Pane::onDidRemoveItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onDidRemoveItem",
          "body": "Invoke the given callback when an item is removed from the pane.",
          "excerpt": "Invoke the given callback when an item is removed from the pane...."
        },
      
        
        {
          "title": "Pane::onWillRemoveItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onWillRemoveItem",
          "body": "Invoke the given callback before an item is removed from the pane.",
          "excerpt": "Invoke the given callback before an item is removed from the pane...."
        },
      
        
        {
          "title": "Pane::onDidMoveItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onDidMoveItem",
          "body": "Invoke the given callback when an item is moved within the pane.",
          "excerpt": "Invoke the given callback when an item is moved within the pane...."
        },
      
        
        {
          "title": "Pane::observeItems",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-observeItems",
          "body": "Invoke the given callback with all current and future items.",
          "excerpt": "Invoke the given callback with all current and future items...."
        },
      
        
        {
          "title": "Pane::onDidChangeActiveItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onDidChangeActiveItem",
          "body": "Invoke the given callback when the value of {::getActiveItem} changes.",
          "excerpt": "Invoke the given callback when the value of {::getActiveItem} changes...."
        },
      
        
        {
          "title": "Pane::observeActiveItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-observeActiveItem",
          "body": "Invoke the given callback with the current and future values of {::getActiveItem}.",
          "excerpt": "Invoke the given callback with the current and future values of {::getActiveItem}...."
        },
      
        
        {
          "title": "Pane::onWillDestroyItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-onWillDestroyItem",
          "body": "Invoke the given callback before items are destroyed.",
          "excerpt": "Invoke the given callback before items are destroyed...."
        },
      
        
        {
          "title": "Pane::getItems",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-getItems",
          "body": "Get the items in this pane.",
          "excerpt": "Get the items in this pane...."
        },
      
        
        {
          "title": "Pane::getActiveItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-getActiveItem",
          "body": "Get the active pane item in this pane.",
          "excerpt": "Get the active pane item in this pane...."
        },
      
        
        {
          "title": "Pane::itemAtIndex",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-itemAtIndex",
          "body": "Return the item at the given index.",
          "excerpt": "Return the item at the given index...."
        },
      
        
        {
          "title": "Pane::activateNextItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-activateNextItem",
          "body": "Makes the next item active.",
          "excerpt": "Makes the next item active...."
        },
      
        
        {
          "title": "Pane::activatePreviousItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-activatePreviousItem",
          "body": "Makes the previous item active.",
          "excerpt": "Makes the previous item active...."
        },
      
        
        {
          "title": "Pane::moveItemRight",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-moveItemRight",
          "body": "Move the active tab to the right.",
          "excerpt": "Move the active tab to the right...."
        },
      
        
        {
          "title": "Pane::moveItemLeft",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-moveItemLeft",
          "body": "Move the active tab to the left",
          "excerpt": "Move the active tab to the left..."
        },
      
        
        {
          "title": "Pane::getActiveItemIndex",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-getActiveItemIndex",
          "body": "Get the index of the active item.",
          "excerpt": "Get the index of the active item...."
        },
      
        
        {
          "title": "Pane::activateItemAtIndex",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-activateItemAtIndex",
          "body": "Activate the item at the given index.",
          "excerpt": "Activate the item at the given index...."
        },
      
        
        {
          "title": "Pane::activateItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-activateItem",
          "body": "Make the given item *active*, causing it to be displayed by the pane's view.",
          "excerpt": "Make the given item *active*, causing it to be displayed by the pane's view...."
        },
      
        
        {
          "title": "Pane::addItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-addItem",
          "body": "Add the given item to the pane.",
          "excerpt": "Add the given item to the pane...."
        },
      
        
        {
          "title": "Pane::addItems",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-addItems",
          "body": "Add the given items to the pane.",
          "excerpt": "Add the given items to the pane...."
        },
      
        
        {
          "title": "Pane::moveItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-moveItem",
          "body": "Move the given item to the given index.",
          "excerpt": "Move the given item to the given index...."
        },
      
        
        {
          "title": "Pane::moveItemToPane",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-moveItemToPane",
          "body": "Move the given item to the given index on another pane.",
          "excerpt": "Move the given item to the given index on another pane...."
        },
      
        
        {
          "title": "Pane::destroyActiveItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-destroyActiveItem",
          "body": "Destroy the active item and activate the next item.",
          "excerpt": "Destroy the active item and activate the next item...."
        },
      
        
        {
          "title": "Pane::destroyItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-destroyItem",
          "body": "Destroy the given item. If the item is active, the next item will be activated. If the item is the last item, the pane will be destroyed if the `core.destroyEmptyPanes` config setting is `true`.",
          "excerpt": "Destroy the given item. If the item is active, the next item will be activated. If the item is the last item, the pane will be destroyed if t..."
        },
      
        
        {
          "title": "Pane::destroyItems",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-destroyItems",
          "body": "Destroy all items.",
          "excerpt": "Destroy all items...."
        },
      
        
        {
          "title": "Pane::destroyInactiveItems",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-destroyInactiveItems",
          "body": "Destroy all items except for the active item.",
          "excerpt": "Destroy all items except for the active item...."
        },
      
        
        {
          "title": "Pane::saveActiveItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-saveActiveItem",
          "body": "Save the active item.",
          "excerpt": "Save the active item...."
        },
      
        
        {
          "title": "Pane::saveActiveItemAs",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-saveActiveItemAs",
          "body": "Prompt the user for a location and save the active item with the path they select.",
          "excerpt": "Prompt the user for a location and save the active item with the path they select...."
        },
      
        
        {
          "title": "Pane::saveItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-saveItem",
          "body": "Save the given item.",
          "excerpt": "Save the given item...."
        },
      
        
        {
          "title": "Pane::saveItemAs",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-saveItemAs",
          "body": "Prompt the user for a location and save the active item with the path they select.",
          "excerpt": "Prompt the user for a location and save the active item with the path they select...."
        },
      
        
        {
          "title": "Pane::saveItems",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-saveItems",
          "body": "Save all items.",
          "excerpt": "Save all items...."
        },
      
        
        {
          "title": "Pane::itemForURI",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-itemForURI",
          "body": "Return the first item that matches the given URI or undefined if none exists.",
          "excerpt": "Return the first item that matches the given URI or undefined if none exists...."
        },
      
        
        {
          "title": "Pane::activateItemForURI",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-activateItemForURI",
          "body": "Activate the first item that matches the given URI.",
          "excerpt": "Activate the first item that matches the given URI...."
        },
      
        
        {
          "title": "Pane::isActive",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-isActive",
          "body": "Determine whether the pane is active.",
          "excerpt": "Determine whether the pane is active...."
        },
      
        
        {
          "title": "Pane::activate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-activate",
          "body": "Makes this pane the *active* pane, causing it to gain focus.",
          "excerpt": "Makes this pane the *active* pane, causing it to gain focus...."
        },
      
        
        {
          "title": "Pane::destroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-destroy",
          "body": "Close the pane and destroy all its items. If this is the last pane, all the items will be destroyed but the pane itself will not be destroyed.",
          "excerpt": "Close the pane and destroy all its items. If this is the last pane, all the items will be destroyed but the pane itself will not be destroyed..."
        },
      
        
        {
          "title": "Pane::splitLeft",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-splitLeft",
          "body": "Create a new pane to the left of this pane.",
          "excerpt": "Create a new pane to the left of this pane...."
        },
      
        
        {
          "title": "Pane::splitRight",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-splitRight",
          "body": "Create a new pane to the right of this pane.",
          "excerpt": "Create a new pane to the right of this pane...."
        },
      
        
        {
          "title": "Pane::splitUp",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-splitUp",
          "body": "Creates a new pane above the receiver.",
          "excerpt": "Creates a new pane above the receiver...."
        },
      
        
        {
          "title": "Pane::splitDown",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Pane/#instance-splitDown",
          "body": "Creates a new pane below the receiver.",
          "excerpt": "Creates a new pane below the receiver...."
        },
      
    
      
      

      {
        "title": "Panel",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Panel",
        "body": "A container representing a panel on the edges of the editor window. You should not create a `Panel` directly, instead use {Workspace::addTopPanel} and friends to add panels. Examples: [tree-view](https://github.com/atom/tree-view), [status-bar](https://github.com/atom/status-bar), and [find-and-replace](https://github.com/atom/find-and-replace) all use panels.",
        "excerpt": "A container representing a panel on the edges of the editor window. You should not create a `Panel` directly, instead use {Workspace::addTopP..."
      },

      

      
      
        
        {
          "title": "Panel::destroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Panel/#instance-destroy",
          "body": "Destroy and remove this panel from the UI.",
          "excerpt": "Destroy and remove this panel from the UI...."
        },
      
        
        {
          "title": "Panel::onDidChangeVisible",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Panel/#instance-onDidChangeVisible",
          "body": "Invoke the given callback when the pane hidden or shown.",
          "excerpt": "Invoke the given callback when the pane hidden or shown...."
        },
      
        
        {
          "title": "Panel::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Panel/#instance-onDidDestroy",
          "body": "Invoke the given callback when the pane is destroyed.",
          "excerpt": "Invoke the given callback when the pane is destroyed...."
        },
      
        
        {
          "title": "Panel::getItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Panel/#instance-getItem",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Panel::getPriority",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Panel/#instance-getPriority",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Panel::isVisible",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Panel/#instance-isVisible",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Panel::hide",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Panel/#instance-hide",
          "body": "Hide this panel",
          "excerpt": "Hide this panel..."
        },
      
        
        {
          "title": "Panel::show",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Panel/#instance-show",
          "body": "Show this panel",
          "excerpt": "Show this panel..."
        },
      
    
      
      

      {
        "title": "TextBuffer",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/TextBuffer",
        "body": "A mutable text container with undo/redo support and the ability to annotate logical regions in the text.",
        "excerpt": "A mutable text container with undo/redo support and the ability to annotate logical regions in the text...."
      },

      

      
      
        
        {
          "title": "TextBuffer::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-constructor",
          "body": "Create a new buffer with the given params.",
          "excerpt": "Create a new buffer with the given params...."
        },
      
        
        {
          "title": "TextBuffer::onWillChange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onWillChange",
          "body": "Invoke the given callback synchronously _before_ the content of the buffer changes. Because observers are invoked synchronously, it's important not to perform any expensive operations via this method.",
          "excerpt": "Invoke the given callback synchronously _before_ the content of the buffer changes. Because observers are invoked synchronously, it's importa..."
        },
      
        
        {
          "title": "TextBuffer::onDidChange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidChange",
          "body": "Invoke the given callback synchronously when the content of the buffer changes. Because observers are invoked synchronously, it's important not to perform any expensive operations via this method. Consider {::onDidStopChanging} to delay expensive operations until after changes stop occurring.",
          "excerpt": "Invoke the given callback synchronously when the content of the buffer changes. Because observers are invoked synchronously, it's important n..."
        },
      
        
        {
          "title": "TextBuffer::onDidStopChanging",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidStopChanging",
          "body": "Invoke the given callback asynchronously following one or more changes after {::getStoppedChangingDelay} milliseconds elapse without an additional change. This method can be used to perform potentially expensive operations that don't need to be performed synchronously. If you need to run your callback synchronously, use {::onDidChange} instead.",
          "excerpt": "Invoke the given callback asynchronously following one or more changes after {::getStoppedChangingDelay} milliseconds elapse without an addit..."
        },
      
        
        {
          "title": "TextBuffer::onDidConflict",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidConflict",
          "body": "Invoke the given callback when the in-memory contents of the buffer become in conflict with the contents of the file on disk.",
          "excerpt": "Invoke the given callback when the in-memory contents of the buffer become in conflict with the contents of the file on disk...."
        },
      
        
        {
          "title": "TextBuffer::onDidChangeModified",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidChangeModified",
          "body": "Invoke the given callback if the value of {::isModified} changes.",
          "excerpt": "Invoke the given callback if the value of {::isModified} changes...."
        },
      
        
        {
          "title": "TextBuffer::onDidUpdateMarkers",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidUpdateMarkers",
          "body": "Invoke the given callback when all marker `::onDidChange` observers have been notified following a change to the buffer. The order of events following a buffer change is as follows: * The text of the buffer is changed * All markers are updated accordingly, but their `::onDidChange` observers are not notified. * `TextBuffer::onDidChange` observers are notified. * `Marker::onDidChange` observers are notified. * `TextBuffer::onDidUpdateMarkers` observers are notified. Basically, this method gives you a way to take action after both a buffer change and all associated marker changes.",
          "excerpt": "Invoke the given callback when all marker `::onDidChange` observers have been notified following a change to the buffer. The order of events ..."
        },
      
        
        {
          "title": "TextBuffer::onDidCreateMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidCreateMarker",
          "body": "Invoke the given callback when a marker is created.",
          "excerpt": "Invoke the given callback when a marker is created...."
        },
      
        
        {
          "title": "TextBuffer::onDidChangePath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidChangePath",
          "body": "Invoke the given callback when the value of {::getPath} changes.",
          "excerpt": "Invoke the given callback when the value of {::getPath} changes...."
        },
      
        
        {
          "title": "TextBuffer::onDidChangeEncoding",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidChangeEncoding",
          "body": "Invoke the given callback when the value of {::getEncoding} changes.",
          "excerpt": "Invoke the given callback when the value of {::getEncoding} changes...."
        },
      
        
        {
          "title": "TextBuffer::onWillSave",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onWillSave",
          "body": "Invoke the given callback before the buffer is saved to disk.",
          "excerpt": "Invoke the given callback before the buffer is saved to disk...."
        },
      
        
        {
          "title": "TextBuffer::onDidSave",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidSave",
          "body": "Invoke the given callback after the buffer is saved to disk.",
          "excerpt": "Invoke the given callback after the buffer is saved to disk...."
        },
      
        
        {
          "title": "TextBuffer::onDidDelete",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidDelete",
          "body": "Invoke the given callback after the file backing the buffer is deleted.",
          "excerpt": "Invoke the given callback after the file backing the buffer is deleted...."
        },
      
        
        {
          "title": "TextBuffer::onWillReload",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onWillReload",
          "body": "Invoke the given callback before the buffer is reloaded from the contents of its file on disk.",
          "excerpt": "Invoke the given callback before the buffer is reloaded from the contents of its file on disk...."
        },
      
        
        {
          "title": "TextBuffer::onDidReload",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidReload",
          "body": "Invoke the given callback after the buffer is reloaded from the contents of its file on disk.",
          "excerpt": "Invoke the given callback after the buffer is reloaded from the contents of its file on disk...."
        },
      
        
        {
          "title": "TextBuffer::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onDidDestroy",
          "body": "Invoke the given callback when the buffer is destroyed.",
          "excerpt": "Invoke the given callback when the buffer is destroyed...."
        },
      
        
        {
          "title": "TextBuffer::onWillThrowWatchError",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-onWillThrowWatchError",
          "body": "Invoke the given callback when there is an error in watching the file.",
          "excerpt": "Invoke the given callback when there is an error in watching the file...."
        },
      
        
        {
          "title": "TextBuffer::getStoppedChangingDelay",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getStoppedChangingDelay",
          "body": "Get the number of milliseconds that will elapse without a change before {::onDidStopChanging} observers are invoked following a change.",
          "excerpt": "Get the number of milliseconds that will elapse without a change before {::onDidStopChanging} observers are invoked following a change...."
        },
      
        
        {
          "title": "TextBuffer::isModified",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-isModified",
          "body": "Determine if the in-memory contents of the buffer differ from its contents on disk. If the buffer is unsaved, always returns `true` unless the buffer is empty.",
          "excerpt": "Determine if the in-memory contents of the buffer differ from its contents on disk. If the buffer is unsaved, always returns `true` unless th..."
        },
      
        
        {
          "title": "TextBuffer::isInConflict",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-isInConflict",
          "body": "Determine if the in-memory contents of the buffer conflict with the on-disk contents of its associated file.",
          "excerpt": "Determine if the in-memory contents of the buffer conflict with the on-disk contents of its associated file...."
        },
      
        
        {
          "title": "TextBuffer::getPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getPath",
          "body": "Get the path of the associated file.",
          "excerpt": "Get the path of the associated file...."
        },
      
        
        {
          "title": "TextBuffer::setPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-setPath",
          "body": "Set the path for the buffer's associated file.",
          "excerpt": "Set the path for the buffer's associated file...."
        },
      
        
        {
          "title": "TextBuffer::setEncoding",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-setEncoding",
          "body": "Sets the character set encoding for this buffer.",
          "excerpt": "Sets the character set encoding for this buffer...."
        },
      
        
        {
          "title": "TextBuffer::getEncoding",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getEncoding",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "TextBuffer::getUri",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getUri",
          "body": "Get the path of the associated file.",
          "excerpt": "Get the path of the associated file...."
        },
      
        
        {
          "title": "TextBuffer::isEmpty",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-isEmpty",
          "body": "Determine whether the buffer is empty.",
          "excerpt": "Determine whether the buffer is empty...."
        },
      
        
        {
          "title": "TextBuffer::getText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getText",
          "body": "Get the entire text of the buffer.",
          "excerpt": "Get the entire text of the buffer...."
        },
      
        
        {
          "title": "TextBuffer::getTextInRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getTextInRange",
          "body": "Get the text in a range.",
          "excerpt": "Get the text in a range...."
        },
      
        
        {
          "title": "TextBuffer::getLines",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getLines",
          "body": "Get the text of all lines in the buffer, without their line endings.",
          "excerpt": "Get the text of all lines in the buffer, without their line endings...."
        },
      
        
        {
          "title": "TextBuffer::getLastLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getLastLine",
          "body": "Get the text of the last line of the buffer, without its line ending.",
          "excerpt": "Get the text of the last line of the buffer, without its line ending...."
        },
      
        
        {
          "title": "TextBuffer::lineForRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-lineForRow",
          "body": "Get the text of the line at the given row, without its line ending.",
          "excerpt": "Get the text of the line at the given row, without its line ending...."
        },
      
        
        {
          "title": "TextBuffer::lineEndingForRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-lineEndingForRow",
          "body": "Get the line ending for the given 0-indexed row.",
          "excerpt": "Get the line ending for the given 0-indexed row...."
        },
      
        
        {
          "title": "TextBuffer::lineLengthForRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-lineLengthForRow",
          "body": "Get the length of the line for the given 0-indexed row, without its line ending.",
          "excerpt": "Get the length of the line for the given 0-indexed row, without its line ending...."
        },
      
        
        {
          "title": "TextBuffer::isRowBlank",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-isRowBlank",
          "body": "Determine if the given row contains only whitespace.",
          "excerpt": "Determine if the given row contains only whitespace...."
        },
      
        
        {
          "title": "TextBuffer::previousNonBlankRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-previousNonBlankRow",
          "body": "Given a row, find the first preceding row that's not blank.",
          "excerpt": "Given a row, find the first preceding row that's not blank...."
        },
      
        
        {
          "title": "TextBuffer::nextNonBlankRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-nextNonBlankRow",
          "body": "Given a row, find the next row that's not blank.",
          "excerpt": "Given a row, find the next row that's not blank...."
        },
      
        
        {
          "title": "TextBuffer::setText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-setText",
          "body": "Replace the entire contents of the buffer with the given text.",
          "excerpt": "Replace the entire contents of the buffer with the given text...."
        },
      
        
        {
          "title": "TextBuffer::setTextViaDiff",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-setTextViaDiff",
          "body": "Replace the current buffer contents by applying a diff based on the given text.",
          "excerpt": "Replace the current buffer contents by applying a diff based on the given text...."
        },
      
        
        {
          "title": "TextBuffer::setTextInRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-setTextInRange",
          "body": "Set the text in the given range.",
          "excerpt": "Set the text in the given range...."
        },
      
        
        {
          "title": "TextBuffer::insert",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-insert",
          "body": "Insert text at the given position.",
          "excerpt": "Insert text at the given position...."
        },
      
        
        {
          "title": "TextBuffer::append",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-append",
          "body": "Append text to the end of the buffer.",
          "excerpt": "Append text to the end of the buffer...."
        },
      
        
        {
          "title": "TextBuffer::delete",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-delete",
          "body": "Delete the text in the given range.",
          "excerpt": "Delete the text in the given range...."
        },
      
        
        {
          "title": "TextBuffer::deleteRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-deleteRow",
          "body": "Delete the line associated with a specified row.",
          "excerpt": "Delete the line associated with a specified row...."
        },
      
        
        {
          "title": "TextBuffer::deleteRows",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-deleteRows",
          "body": "Delete the lines associated with the specified row range. If the row range is out of bounds, it will be clipped. If the startRow is greater than the end row, they will be reordered.",
          "excerpt": "Delete the lines associated with the specified row range. If the row range is out of bounds, it will be clipped. If the startRow is greater t..."
        },
      
        
        {
          "title": "TextBuffer::addMarkerLayer",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-addMarkerLayer",
          "body": "Create a layer to contain a set of related markers.",
          "excerpt": "Create a layer to contain a set of related markers...."
        },
      
        
        {
          "title": "TextBuffer::getMarkerLayer",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getMarkerLayer",
          "body": "Get a {MarkerLayer} by id.",
          "excerpt": "Get a {MarkerLayer} by id...."
        },
      
        
        {
          "title": "TextBuffer::getDefaultMarkerLayer",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getDefaultMarkerLayer",
          "body": "Get the default {MarkerLayer}. All marker APIs not tied to an explicit layer interact with this default layer.",
          "excerpt": "Get the default {MarkerLayer}. All marker APIs not tied to an explicit layer interact with this default layer...."
        },
      
        
        {
          "title": "TextBuffer::markRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-markRange",
          "body": "Create a marker with the given range in the default marker layer. This marker will maintain its logical location as the buffer is changed, so if you mark a particular word, the marker will remain over that word even if the word's location in the buffer changes.",
          "excerpt": "Create a marker with the given range in the default marker layer. This marker will maintain its logical location as the buffer is changed, so..."
        },
      
        
        {
          "title": "TextBuffer::markPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-markPosition",
          "body": "Create a marker at the given position with no tail in the default marker layer.",
          "excerpt": "Create a marker at the given position with no tail in the default marker layer...."
        },
      
        
        {
          "title": "TextBuffer::getMarkers",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getMarkers",
          "body": "Get all existing markers on the default marker layer.",
          "excerpt": "Get all existing markers on the default marker layer...."
        },
      
        
        {
          "title": "TextBuffer::getMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getMarker",
          "body": "Get an existing marker by its id from the default marker layer.",
          "excerpt": "Get an existing marker by its id from the default marker layer...."
        },
      
        
        {
          "title": "TextBuffer::findMarkers",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-findMarkers",
          "body": "Find markers conforming to the given parameters in the default marker layer. Markers are sorted based on their position in the buffer. If two markers start at the same position, the larger marker comes first.",
          "excerpt": "Find markers conforming to the given parameters in the default marker layer. Markers are sorted based on their position in the buffer. If two..."
        },
      
        
        {
          "title": "TextBuffer::getMarkerCount",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getMarkerCount",
          "body": "Get the number of markers in the default marker layer.",
          "excerpt": "Get the number of markers in the default marker layer...."
        },
      
        
        {
          "title": "TextBuffer::undo",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-undo",
          "body": "Undo the last operation. If a transaction is in progress, aborts it.",
          "excerpt": "Undo the last operation. If a transaction is in progress, aborts it...."
        },
      
        
        {
          "title": "TextBuffer::redo",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-redo",
          "body": "Redo the last operation",
          "excerpt": "Redo the last operation..."
        },
      
        
        {
          "title": "TextBuffer::transact",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-transact",
          "body": "Batch multiple operations as a single undo/redo step. Any group of operations that are logically grouped from the perspective of undoing and redoing should be performed in a transaction. If you want to abort the transaction, call {::abortTransaction} to terminate the function's execution and revert any changes performed up to the abortion.",
          "excerpt": "Batch multiple operations as a single undo/redo step. Any group of operations that are logically grouped from the perspective of undoing and ..."
        },
      
        
        {
          "title": "TextBuffer::clearUndoStack",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-clearUndoStack",
          "body": "Clear the undo stack. When calling this method within a transaction, the {::onDidChangeText} event will not be triggered because the information describing the changes is lost.",
          "excerpt": "Clear the undo stack. When calling this method within a transaction, the {::onDidChangeText} event will not be triggered because the informat..."
        },
      
        
        {
          "title": "TextBuffer::createCheckpoint",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-createCheckpoint",
          "body": "Create a pointer to the current state of the buffer for use with {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.",
          "excerpt": "Create a pointer to the current state of the buffer for use with {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}...."
        },
      
        
        {
          "title": "TextBuffer::revertToCheckpoint",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-revertToCheckpoint",
          "body": "Revert the buffer to the state it was in when the given checkpoint was created. The redo stack will be empty following this operation, so changes since the checkpoint will be lost. If the given checkpoint is no longer present in the undo history, no changes will be made to the buffer and this method will return `false`.",
          "excerpt": "Revert the buffer to the state it was in when the given checkpoint was created. The redo stack will be empty following this operation, so cha..."
        },
      
        
        {
          "title": "TextBuffer::groupChangesSinceCheckpoint",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-groupChangesSinceCheckpoint",
          "body": "Group all changes since the given checkpoint into a single transaction for purposes of undo/redo. If the given checkpoint is no longer present in the undo history, no grouping will be performed and this method will return `false`.",
          "excerpt": "Group all changes since the given checkpoint into a single transaction for purposes of undo/redo. If the given checkpoint is no longer presen..."
        },
      
        
        {
          "title": "TextBuffer::getChangesSinceCheckpoint",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getChangesSinceCheckpoint",
          "body": "If the given checkpoint is no longer present in the undo history, this method will return an empty {Array}.",
          "excerpt": "If the given checkpoint is no longer present in the undo history, this method will return an empty {Array}...."
        },
      
        
        {
          "title": "TextBuffer::scan",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-scan",
          "body": "Scan regular expression matches in the entire buffer, calling the given iterator function on each match. If you're programmatically modifying the results, you may want to try {::backwardsScan} to avoid tripping over your own changes.",
          "excerpt": "Scan regular expression matches in the entire buffer, calling the given iterator function on each match. If you're programmatically modifying..."
        },
      
        
        {
          "title": "TextBuffer::backwardsScan",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-backwardsScan",
          "body": "Scan regular expression matches in the entire buffer in reverse order, calling the given iterator function on each match.",
          "excerpt": "Scan regular expression matches in the entire buffer in reverse order, calling the given iterator function on each match...."
        },
      
        
        {
          "title": "TextBuffer::scanInRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-scanInRange",
          "body": "Scan regular expression matches in a given range , calling the given iterator function on each match.",
          "excerpt": "Scan regular expression matches in a given range , calling the given iterator function on each match...."
        },
      
        
        {
          "title": "TextBuffer::backwardsScanInRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-backwardsScanInRange",
          "body": "Scan regular expression matches in a given range in reverse order, calling the given iterator function on each match.",
          "excerpt": "Scan regular expression matches in a given range in reverse order, calling the given iterator function on each match...."
        },
      
        
        {
          "title": "TextBuffer::replace",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-replace",
          "body": "Replace all regular expression matches in the entire buffer.",
          "excerpt": "Replace all regular expression matches in the entire buffer...."
        },
      
        
        {
          "title": "TextBuffer::getRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getRange",
          "body": "Get the range spanning from `[0, 0]` to {::getEndPosition}.",
          "excerpt": "Get the range spanning from `[0, 0]` to {::getEndPosition}...."
        },
      
        
        {
          "title": "TextBuffer::getLineCount",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getLineCount",
          "body": "Get the number of lines in the buffer.",
          "excerpt": "Get the number of lines in the buffer...."
        },
      
        
        {
          "title": "TextBuffer::getLastRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getLastRow",
          "body": "Get the last 0-indexed row in the buffer.",
          "excerpt": "Get the last 0-indexed row in the buffer...."
        },
      
        
        {
          "title": "TextBuffer::getFirstPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getFirstPosition",
          "body": "Get the first position in the buffer, which is always `[0, 0]`.",
          "excerpt": "Get the first position in the buffer, which is always `[0, 0]`...."
        },
      
        
        {
          "title": "TextBuffer::getEndPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getEndPosition",
          "body": "Get the maximal position in the buffer, where new text would be appended.",
          "excerpt": "Get the maximal position in the buffer, where new text would be appended...."
        },
      
        
        {
          "title": "TextBuffer::getMaxCharacterIndex",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-getMaxCharacterIndex",
          "body": "Get the length of the buffer in characters.",
          "excerpt": "Get the length of the buffer in characters...."
        },
      
        
        {
          "title": "TextBuffer::rangeForRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-rangeForRow",
          "body": "Get the range for the given row",
          "excerpt": "Get the range for the given row..."
        },
      
        
        {
          "title": "TextBuffer::characterIndexForPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-characterIndexForPosition",
          "body": "Convert a position in the buffer in row/column coordinates to an absolute character offset, inclusive of line ending characters. The position is clipped prior to translating.",
          "excerpt": "Convert a position in the buffer in row/column coordinates to an absolute character offset, inclusive of line ending characters. The position..."
        },
      
        
        {
          "title": "TextBuffer::positionForCharacterIndex",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-positionForCharacterIndex",
          "body": "Convert an absolute character offset, inclusive of newlines, to a position in the buffer in row/column coordinates. The offset is clipped prior to translating.",
          "excerpt": "Convert an absolute character offset, inclusive of newlines, to a position in the buffer in row/column coordinates. The offset is clipped pri..."
        },
      
        
        {
          "title": "TextBuffer::clipRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-clipRange",
          "body": "Clip the given range so it starts and ends at valid positions. For example, the position `[1, 100]` is out of bounds if the line at row 1 is only 10 characters long, and it would be clipped to `(1, 10)`.",
          "excerpt": "Clip the given range so it starts and ends at valid positions. For example, the position `[1, 100]` is out of bounds if the line at row 1 is ..."
        },
      
        
        {
          "title": "TextBuffer::clipPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-clipPosition",
          "body": "Clip the given point so it is at a valid position in the buffer. For example, the position (1, 100) is out of bounds if the line at row 1 is only 10 characters long, and it would be clipped to (1, 10)",
          "excerpt": "Clip the given point so it is at a valid position in the buffer. For example, the position (1, 100) is out of bounds if the line at row 1 is ..."
        },
      
        
        {
          "title": "TextBuffer::save",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-save",
          "body": "Save the buffer.",
          "excerpt": "Save the buffer...."
        },
      
        
        {
          "title": "TextBuffer::saveAs",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-saveAs",
          "body": "Save the buffer at a specific path.",
          "excerpt": "Save the buffer at a specific path...."
        },
      
        
        {
          "title": "TextBuffer::reload",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/TextBuffer/#instance-reload",
          "body": "Reload the buffer's contents from disk. Sets the buffer's content to the cached disk contents",
          "excerpt": "Reload the buffer's contents from disk. Sets the buffer's content to the cached disk contents..."
        },
      
    
      
      

      {
        "title": "MarkerLayer",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/MarkerLayer",
        "body": "*Experimental:* A container for a related set of markers. This API is experimental and subject to change on any release.",
        "excerpt": "*Experimental:* A container for a related set of markers. This API is experimental and subject to change on any release...."
      },

      

      
      
        
        {
          "title": "MarkerLayer::copy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-copy",
          "body": "Create a copy of this layer with markers in the same state and locations.",
          "excerpt": "Create a copy of this layer with markers in the same state and locations...."
        },
      
        
        {
          "title": "MarkerLayer::destroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-destroy",
          "body": "Destroy this layer.",
          "excerpt": "Destroy this layer...."
        },
      
        
        {
          "title": "MarkerLayer::isDestroyed",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-isDestroyed",
          "body": "Determine whether this layer has been destroyed.",
          "excerpt": "Determine whether this layer has been destroyed...."
        },
      
        
        {
          "title": "MarkerLayer::getMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-getMarker",
          "body": "Get an existing marker by its id.",
          "excerpt": "Get an existing marker by its id...."
        },
      
        
        {
          "title": "MarkerLayer::getMarkers",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-getMarkers",
          "body": "Get all existing markers on the marker layer.",
          "excerpt": "Get all existing markers on the marker layer...."
        },
      
        
        {
          "title": "MarkerLayer::getMarkerCount",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-getMarkerCount",
          "body": "Get the number of markers in the marker layer.",
          "excerpt": "Get the number of markers in the marker layer...."
        },
      
        
        {
          "title": "MarkerLayer::findMarkers",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-findMarkers",
          "body": "Find markers in the layer conforming to the given parameters. See the documentation for {TextBuffer::findMarkers}.",
          "excerpt": "Find markers in the layer conforming to the given parameters. See the documentation for {TextBuffer::findMarkers}...."
        },
      
        
        {
          "title": "MarkerLayer::markRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-markRange",
          "body": "Create a marker with the given range.",
          "excerpt": "Create a marker with the given range...."
        },
      
        
        {
          "title": "MarkerLayer::markPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-markPosition",
          "body": "Create a marker at with its head at the given position with no tail.",
          "excerpt": "Create a marker at with its head at the given position with no tail...."
        },
      
        
        {
          "title": "MarkerLayer::onDidUpdate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-onDidUpdate",
          "body": "Subscribe to be notified asynchronously whenever markers are created, updated, or destroyed on this layer. *Prefer this method for optimal performance when interacting with layers that could contain large numbers of markers.* Subscribers are notified once, asynchronously when any number of changes occur in a given tick of the event loop. You should re-query the layer to determine the state of markers in which you're interested in. It may be counter-intuitive, but this is much more efficient than subscribing to events on individual markers, which are expensive to deliver.",
          "excerpt": "Subscribe to be notified asynchronously whenever markers are created, updated, or destroyed on this layer. *Prefer this method for optimal pe..."
        },
      
        
        {
          "title": "MarkerLayer::onDidCreateMarker",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-onDidCreateMarker",
          "body": "Subscribe to be notified synchronously whenever markers are created on this layer. *Avoid this method for optimal performance when interacting with layers that could contain large numbers of markers.* You should prefer {onDidUpdate} when synchronous notifications aren't absolutely necessary.",
          "excerpt": "Subscribe to be notified synchronously whenever markers are created on this layer. *Avoid this method for optimal performance when interactin..."
        },
      
        
        {
          "title": "MarkerLayer::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MarkerLayer/#instance-onDidDestroy",
          "body": "Subscribe to be notified synchronously when this layer is destroyed.",
          "excerpt": "Subscribe to be notified synchronously when this layer is destroyed...."
        },
      
    
      
      

      {
        "title": "Range",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Range",
        "body": "Represents a region in a buffer in row/column coordinates. Every public method that takes a range also accepts a *range-compatible* {Array}. This means a 2-element array containing {Point}s or point-compatible arrays. So the following are equivalent:",
        "excerpt": "Represents a region in a buffer in row/column coordinates. Every public method that takes a range also accepts a *range-compatible* {Array}. ..."
      },

      
        
        {
          "title": "Range::fromObject",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#fromObject",
          "body": "Convert any range-compatible object to a {Range}.",
          "excerpt": "Convert any range-compatible object to a {Range}...."
        },
      
        
        {
          "title": "Range::deserialize",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#deserialize",
          "body": "Call this with the result of {Range::serialize} to construct a new Range.",
          "excerpt": "Call this with the result of {Range::serialize} to construct a new Range...."
        },
      

      
      
        
        {
          "title": "Range::start",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-start",
          "body": "A {Point} representing the start of the {Range}.",
          "excerpt": "A {Point} representing the start of the {Range}...."
        },
      
        
        {
          "title": "Range::end",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-end",
          "body": "A {Point} representing the end of the {Range}.",
          "excerpt": "A {Point} representing the end of the {Range}...."
        },
      
        
        {
          "title": "Range::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-constructor",
          "body": "Construct a {Range} object",
          "excerpt": "Construct a {Range} object..."
        },
      
        
        {
          "title": "Range::copy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-copy",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::negate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-negate",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::serialize",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-serialize",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::isEmpty",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-isEmpty",
          "body": "Is the start position of this range equal to the end position?",
          "excerpt": "Is the start position of this range equal to the end position?..."
        },
      
        
        {
          "title": "Range::isSingleLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-isSingleLine",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::getRowCount",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-getRowCount",
          "body": "Get the number of rows in this range.",
          "excerpt": "Get the number of rows in this range...."
        },
      
        
        {
          "title": "Range::getRows",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-getRows",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::freeze",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-freeze",
          "body": "Freezes the range and its start and end point so it becomes immutable and returns itself.",
          "excerpt": "Freezes the range and its start and end point so it becomes immutable and returns itself...."
        },
      
        
        {
          "title": "Range::union",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-union",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::translate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-translate",
          "body": "Build and return a new range by translating this range's start and end points by the given delta(s).",
          "excerpt": "Build and return a new range by translating this range's start and end points by the given delta(s)...."
        },
      
        
        {
          "title": "Range::traverse",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-traverse",
          "body": "Build and return a new range by traversing this range's start and end points by the given delta. See {Point::traverse} for details of how traversal differs from translation.",
          "excerpt": "Build and return a new range by traversing this range's start and end points by the given delta. See {Point::traverse} for details of how tra..."
        },
      
        
        {
          "title": "Range::compare",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-compare",
          "body": "Compare two Ranges",
          "excerpt": "Compare two Ranges..."
        },
      
        
        {
          "title": "Range::isEqual",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-isEqual",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::coversSameRows",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-coversSameRows",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::intersectsWith",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-intersectsWith",
          "body": "Determines whether this range intersects with the argument.",
          "excerpt": "Determines whether this range intersects with the argument...."
        },
      
        
        {
          "title": "Range::containsRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-containsRange",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::containsPoint",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-containsPoint",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::intersectsRow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-intersectsRow",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::intersectsRowRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-intersectsRowRange",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Range::toString",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Range/#instance-toString",
          "body": "",
          "excerpt": "..."
        },
      
    
      
      

      {
        "title": "Emitter",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Emitter",
        "body": "Utility class to be used when implementing event-based APIs that allows for handlers registered via `::on` to be invoked with calls to `::emit`. Instances of this class are intended to be used internally by classes that expose an event-based API. For example: ```coffee class User constructor: -> @emitter = new Emitter onDidChangeName: (callback) -> @emitter.on 'did-change-name', callback setName: (name) -> if name isnt @name @name = name @emitter.emit 'did-change-name', name @name ```",
        "excerpt": "Utility class to be used when implementing event-based APIs that allows for handlers registered via `::on` to be invoked with calls to `::emi..."
      },

      

      
      
        
        {
          "title": "Emitter::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Emitter/#instance-constructor",
          "body": "Construct an emitter. ```coffee @emitter = new Emitter() ```",
          "excerpt": "Construct an emitter. ```coffee @emitter = new Emitter() ```..."
        },
      
        
        {
          "title": "Emitter::clear",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Emitter/#instance-clear",
          "body": "Clear out any existing subscribers.",
          "excerpt": "Clear out any existing subscribers...."
        },
      
        
        {
          "title": "Emitter::dispose",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Emitter/#instance-dispose",
          "body": "Unsubscribe all handlers.",
          "excerpt": "Unsubscribe all handlers...."
        },
      
        
        {
          "title": "Emitter::on",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Emitter/#instance-on",
          "body": "Register the given handler function to be invoked whenever events by the given name are emitted via {::emit}.",
          "excerpt": "Register the given handler function to be invoked whenever events by the given name are emitted via {::emit}...."
        },
      
        
        {
          "title": "Emitter::preempt",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Emitter/#instance-preempt",
          "body": "Register the given handler function to be invoked *before* all other handlers existing at the time of subscription whenever events by the given name are emitted via {::emit}. Use this method when you need to be the first to handle a given event. This could be required when a data structure in a parent object needs to be updated before third-party event handlers registered on a child object via a public API are invoked. Your handler could itself be preempted via subsequent calls to this method, but this can be controlled by keeping methods based on `::preempt` private.",
          "excerpt": "Register the given handler function to be invoked *before* all other handlers existing at the time of subscription whenever events by the giv..."
        },
      
        
        {
          "title": "Emitter::emit",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Emitter/#instance-emit",
          "body": "Invoke handlers registered via {::on} for the given event name.",
          "excerpt": "Invoke handlers registered via {::on} for the given event name...."
        },
      
    
      
      

      {
        "title": "DisplayMarker",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/DisplayMarker",
        "body": "Represents a buffer annotation that remains logically stationary even as the buffer changes. This is used to represent cursors, folds, snippet targets, misspelled words, and anything else that needs to track a logical location in the buffer over time. ### DisplayMarker Creation Use {DisplayMarkerLayer::markBufferRange} or {DisplayMarkerLayer::markScreenRange} rather than creating Markers directly. ### Head and Tail Markers always have a *head* and sometimes have a *tail*. If you think of a marker as an editor selection, the tail is the part that's stationary and the head is the part that moves when the mouse is moved. A marker without a tail always reports an empty range at the head position. A marker with a head position greater than the tail is in a \"normal\" orientation. If the head precedes the tail the marker is in a \"reversed\" orientation. ### Validity Markers are considered *valid* when they are first created. Depending on the invalidation strategy you choose, certain changes to the buffer can cause a marker to become invalid, for example if the text surrounding the marker is deleted. The strategies, in order of descending fragility: * __never__: The marker is never marked as invalid. This is a good choice for markers representing selections in an editor. * __surround__: The marker is invalidated by changes that completely surround it. * __overlap__: The marker is invalidated by changes that surround the start or end of the marker. This is the default. * __inside__: The marker is invalidated by changes that extend into the inside of the marker. Changes that end at the marker's start or start at the marker's end do not invalidate the marker. * __touch__: The marker is invalidated by a change that touches the marked region in any way, including changes that end at the marker's start or start at the marker's end. This is the most fragile strategy. See {TextBuffer::markRange} for usage.",
        "excerpt": "Represents a buffer annotation that remains logically stationary even as the buffer changes. This is used to represent cursors, folds, snippe..."
      },

      

      
      
        
        {
          "title": "DisplayMarker::destroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-destroy",
          "body": "Destroys the marker, causing it to emit the 'destroyed' event. Once destroyed, a marker cannot be restored by undo/redo operations.",
          "excerpt": "Destroys the marker, causing it to emit the 'destroyed' event. Once destroyed, a marker cannot be restored by undo/redo operations...."
        },
      
        
        {
          "title": "DisplayMarker::copy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-copy",
          "body": "Creates and returns a new {DisplayMarker} with the same properties as this marker. {Selection} markers (markers with a custom property `type: \"selection\"`) should be copied with a different `type` value, for example with `marker.copy({type: null})`. Otherwise, the new marker's selection will be merged with this marker's selection, and a `null` value will be returned.",
          "excerpt": "Creates and returns a new {DisplayMarker} with the same properties as this marker. {Selection} markers (markers with a custom property `type:..."
        },
      
        
        {
          "title": "DisplayMarker::onDidChange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-onDidChange",
          "body": "Invoke the given callback when the state of the marker changes.",
          "excerpt": "Invoke the given callback when the state of the marker changes...."
        },
      
        
        {
          "title": "DisplayMarker::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-onDidDestroy",
          "body": "Invoke the given callback when the marker is destroyed.",
          "excerpt": "Invoke the given callback when the marker is destroyed...."
        },
      
        
        {
          "title": "DisplayMarker::isValid",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-isValid",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "DisplayMarker::isDestroyed",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-isDestroyed",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "DisplayMarker::isReversed",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-isReversed",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "DisplayMarker::isExclusive",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-isExclusive",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "DisplayMarker::getInvalidationStrategy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getInvalidationStrategy",
          "body": "Get the invalidation strategy for this marker. Valid values include: `never`, `surround`, `overlap`, `inside`, and `touch`.",
          "excerpt": "Get the invalidation strategy for this marker. Valid values include: `never`, `surround`, `overlap`, `inside`, and `touch`...."
        },
      
        
        {
          "title": "DisplayMarker::getProperties",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getProperties",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "DisplayMarker::setProperties",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-setProperties",
          "body": "Merges an {Object} containing new properties into the marker's existing properties.",
          "excerpt": "Merges an {Object} containing new properties into the marker's existing properties...."
        },
      
        
        {
          "title": "DisplayMarker::matchesProperties",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-matchesProperties",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "DisplayMarker::compare",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-compare",
          "body": "Compares this marker to another based on their ranges.",
          "excerpt": "Compares this marker to another based on their ranges...."
        },
      
        
        {
          "title": "DisplayMarker::isEqual",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-isEqual",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "DisplayMarker::getBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getBufferRange",
          "body": "Gets the buffer range of this marker.",
          "excerpt": "Gets the buffer range of this marker...."
        },
      
        
        {
          "title": "DisplayMarker::getScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getScreenRange",
          "body": "Gets the screen range of this marker.",
          "excerpt": "Gets the screen range of this marker...."
        },
      
        
        {
          "title": "DisplayMarker::setBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-setBufferRange",
          "body": "Modifies the buffer range of this marker.",
          "excerpt": "Modifies the buffer range of this marker...."
        },
      
        
        {
          "title": "DisplayMarker::setScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-setScreenRange",
          "body": "Modifies the screen range of this marker.",
          "excerpt": "Modifies the screen range of this marker...."
        },
      
        
        {
          "title": "DisplayMarker::getHeadBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getHeadBufferPosition",
          "body": "Retrieves the buffer position of the marker's head.",
          "excerpt": "Retrieves the buffer position of the marker's head...."
        },
      
        
        {
          "title": "DisplayMarker::setHeadBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-setHeadBufferPosition",
          "body": "Sets the buffer position of the marker's head.",
          "excerpt": "Sets the buffer position of the marker's head...."
        },
      
        
        {
          "title": "DisplayMarker::getHeadScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getHeadScreenPosition",
          "body": "Retrieves the screen position of the marker's head.",
          "excerpt": "Retrieves the screen position of the marker's head...."
        },
      
        
        {
          "title": "DisplayMarker::setHeadScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-setHeadScreenPosition",
          "body": "Sets the screen position of the marker's head.",
          "excerpt": "Sets the screen position of the marker's head...."
        },
      
        
        {
          "title": "DisplayMarker::getTailBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getTailBufferPosition",
          "body": "Retrieves the buffer position of the marker's tail.",
          "excerpt": "Retrieves the buffer position of the marker's tail...."
        },
      
        
        {
          "title": "DisplayMarker::setTailBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-setTailBufferPosition",
          "body": "Sets the buffer position of the marker's tail.",
          "excerpt": "Sets the buffer position of the marker's tail...."
        },
      
        
        {
          "title": "DisplayMarker::getTailScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getTailScreenPosition",
          "body": "Retrieves the screen position of the marker's tail.",
          "excerpt": "Retrieves the screen position of the marker's tail...."
        },
      
        
        {
          "title": "DisplayMarker::setTailScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-setTailScreenPosition",
          "body": "Sets the screen position of the marker's tail.",
          "excerpt": "Sets the screen position of the marker's tail...."
        },
      
        
        {
          "title": "DisplayMarker::getStartBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getStartBufferPosition",
          "body": "Retrieves the buffer position of the marker's start. This will always be less than or equal to the result of {DisplayMarker::getEndBufferPosition}.",
          "excerpt": "Retrieves the buffer position of the marker's start. This will always be less than or equal to the result of {DisplayMarker::getEndBufferPosi..."
        },
      
        
        {
          "title": "DisplayMarker::getStartScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getStartScreenPosition",
          "body": "Retrieves the screen position of the marker's start. This will always be less than or equal to the result of {DisplayMarker::getEndScreenPosition}.",
          "excerpt": "Retrieves the screen position of the marker's start. This will always be less than or equal to the result of {DisplayMarker::getEndScreenPosi..."
        },
      
        
        {
          "title": "DisplayMarker::getEndBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getEndBufferPosition",
          "body": "Retrieves the buffer position of the marker's end. This will always be greater than or equal to the result of {DisplayMarker::getStartBufferPosition}.",
          "excerpt": "Retrieves the buffer position of the marker's end. This will always be greater than or equal to the result of {DisplayMarker::getStartBufferP..."
        },
      
        
        {
          "title": "DisplayMarker::getEndScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-getEndScreenPosition",
          "body": "Retrieves the screen position of the marker's end. This will always be greater than or equal to the result of {DisplayMarker::getStartScreenPosition}.",
          "excerpt": "Retrieves the screen position of the marker's end. This will always be greater than or equal to the result of {DisplayMarker::getStartScreenP..."
        },
      
        
        {
          "title": "DisplayMarker::hasTail",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-hasTail",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "DisplayMarker::plantTail",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-plantTail",
          "body": "Plants the marker's tail at the current head position. After calling the marker's tail position will be its head position at the time of the call, regardless of where the marker's head is moved.",
          "excerpt": "Plants the marker's tail at the current head position. After calling the marker's tail position will be its head position at the time of the ..."
        },
      
        
        {
          "title": "DisplayMarker::clearTail",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DisplayMarker/#instance-clearTail",
          "body": "Removes the marker's tail. After calling the marker's head position will be reported as its current tail position until the tail is planted again.",
          "excerpt": "Removes the marker's tail. After calling the marker's head position will be reported as its current tail position until the tail is planted a..."
        },
      
    
      
      

      {
        "title": "ThemeManager",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/ThemeManager",
        "body": "Handles loading and activating available themes. An instance of this class is always available as the `atom.themes` global.",
        "excerpt": "Handles loading and activating available themes. An instance of this class is always available as the `atom.themes` global...."
      },

      

      
      
        
        {
          "title": "ThemeManager::onDidChangeActiveThemes",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ThemeManager/#instance-onDidChangeActiveThemes",
          "body": "Invoke `callback` when style sheet changes associated with updating the list of active themes have completed.",
          "excerpt": "Invoke `callback` when style sheet changes associated with updating the list of active themes have completed...."
        },
      
        
        {
          "title": "ThemeManager::getLoadedThemeNames",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ThemeManager/#instance-getLoadedThemeNames",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "ThemeManager::getLoadedThemes",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ThemeManager/#instance-getLoadedThemes",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "ThemeManager::getActiveThemeNames",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ThemeManager/#instance-getActiveThemeNames",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "ThemeManager::getActiveThemes",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ThemeManager/#instance-getActiveThemes",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "ThemeManager::getEnabledThemeNames",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ThemeManager/#instance-getEnabledThemeNames",
          "body": "Get the enabled theme names from the config.",
          "excerpt": "Get the enabled theme names from the config...."
        },
      
    
      
      

      {
        "title": "Selection",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Selection",
        "body": "Represents a selection in the {TextEditor}.",
        "excerpt": "Represents a selection in the {TextEditor}...."
      },

      

      
      
        
        {
          "title": "Selection::onDidChangeRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-onDidChangeRange",
          "body": "Calls your `callback` when the selection was moved.",
          "excerpt": "Calls your `callback` when the selection was moved...."
        },
      
        
        {
          "title": "Selection::onDidDestroy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-onDidDestroy",
          "body": "Calls your `callback` when the selection was destroyed",
          "excerpt": "Calls your `callback` when the selection was destroyed..."
        },
      
        
        {
          "title": "Selection::getScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-getScreenRange",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Selection::setScreenRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-setScreenRange",
          "body": "Modifies the screen range for the selection.",
          "excerpt": "Modifies the screen range for the selection...."
        },
      
        
        {
          "title": "Selection::getBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-getBufferRange",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Selection::setBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-setBufferRange",
          "body": "Modifies the buffer {Range} for the selection.",
          "excerpt": "Modifies the buffer {Range} for the selection...."
        },
      
        
        {
          "title": "Selection::getBufferRowRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-getBufferRowRange",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Selection::isEmpty",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-isEmpty",
          "body": "Determines if the selection contains anything.",
          "excerpt": "Determines if the selection contains anything...."
        },
      
        
        {
          "title": "Selection::isReversed",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-isReversed",
          "body": "Determines if the ending position of a marker is greater than the starting position. This can happen when, for example, you highlight text \"up\" in a {TextBuffer}.",
          "excerpt": "Determines if the ending position of a marker is greater than the starting position. This can happen when, for example, you highlight text \"..."
        },
      
        
        {
          "title": "Selection::isSingleScreenLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-isSingleScreenLine",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Selection::getText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-getText",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Selection::intersectsBufferRange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-intersectsBufferRange",
          "body": "Identifies if a selection intersects with a given buffer range.",
          "excerpt": "Identifies if a selection intersects with a given buffer range...."
        },
      
        
        {
          "title": "Selection::intersectsWith",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-intersectsWith",
          "body": "Identifies if a selection intersects with another selection.",
          "excerpt": "Identifies if a selection intersects with another selection...."
        },
      
        
        {
          "title": "Selection::clear",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-clear",
          "body": "Clears the selection, moving the marker to the head.",
          "excerpt": "Clears the selection, moving the marker to the head...."
        },
      
        
        {
          "title": "Selection::selectToScreenPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToScreenPosition",
          "body": "Selects the text from the current cursor position to a given screen position.",
          "excerpt": "Selects the text from the current cursor position to a given screen position...."
        },
      
        
        {
          "title": "Selection::selectToBufferPosition",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToBufferPosition",
          "body": "Selects the text from the current cursor position to a given buffer position.",
          "excerpt": "Selects the text from the current cursor position to a given buffer position...."
        },
      
        
        {
          "title": "Selection::selectRight",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectRight",
          "body": "Selects the text one position right of the cursor.",
          "excerpt": "Selects the text one position right of the cursor...."
        },
      
        
        {
          "title": "Selection::selectLeft",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectLeft",
          "body": "Selects the text one position left of the cursor.",
          "excerpt": "Selects the text one position left of the cursor...."
        },
      
        
        {
          "title": "Selection::selectUp",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectUp",
          "body": "Selects all the text one position above the cursor.",
          "excerpt": "Selects all the text one position above the cursor...."
        },
      
        
        {
          "title": "Selection::selectDown",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectDown",
          "body": "Selects all the text one position below the cursor.",
          "excerpt": "Selects all the text one position below the cursor...."
        },
      
        
        {
          "title": "Selection::selectToTop",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToTop",
          "body": "Selects all the text from the current cursor position to the top of the buffer.",
          "excerpt": "Selects all the text from the current cursor position to the top of the buffer...."
        },
      
        
        {
          "title": "Selection::selectToBottom",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToBottom",
          "body": "Selects all the text from the current cursor position to the bottom of the buffer.",
          "excerpt": "Selects all the text from the current cursor position to the bottom of the buffer...."
        },
      
        
        {
          "title": "Selection::selectAll",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectAll",
          "body": "Selects all the text in the buffer.",
          "excerpt": "Selects all the text in the buffer...."
        },
      
        
        {
          "title": "Selection::selectToBeginningOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToBeginningOfLine",
          "body": "Selects all the text from the current cursor position to the beginning of the line.",
          "excerpt": "Selects all the text from the current cursor position to the beginning of the line...."
        },
      
        
        {
          "title": "Selection::selectToFirstCharacterOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToFirstCharacterOfLine",
          "body": "Selects all the text from the current cursor position to the first character of the line.",
          "excerpt": "Selects all the text from the current cursor position to the first character of the line...."
        },
      
        
        {
          "title": "Selection::selectToEndOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToEndOfLine",
          "body": "Selects all the text from the current cursor position to the end of the screen line.",
          "excerpt": "Selects all the text from the current cursor position to the end of the screen line...."
        },
      
        
        {
          "title": "Selection::selectToEndOfBufferLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToEndOfBufferLine",
          "body": "Selects all the text from the current cursor position to the end of the buffer line.",
          "excerpt": "Selects all the text from the current cursor position to the end of the buffer line...."
        },
      
        
        {
          "title": "Selection::selectToBeginningOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToBeginningOfWord",
          "body": "Selects all the text from the current cursor position to the beginning of the word.",
          "excerpt": "Selects all the text from the current cursor position to the beginning of the word...."
        },
      
        
        {
          "title": "Selection::selectToEndOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToEndOfWord",
          "body": "Selects all the text from the current cursor position to the end of the word.",
          "excerpt": "Selects all the text from the current cursor position to the end of the word...."
        },
      
        
        {
          "title": "Selection::selectToBeginningOfNextWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToBeginningOfNextWord",
          "body": "Selects all the text from the current cursor position to the beginning of the next word.",
          "excerpt": "Selects all the text from the current cursor position to the beginning of the next word...."
        },
      
        
        {
          "title": "Selection::selectToPreviousWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToPreviousWordBoundary",
          "body": "Selects text to the previous word boundary.",
          "excerpt": "Selects text to the previous word boundary...."
        },
      
        
        {
          "title": "Selection::selectToNextWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToNextWordBoundary",
          "body": "Selects text to the next word boundary.",
          "excerpt": "Selects text to the next word boundary...."
        },
      
        
        {
          "title": "Selection::selectToPreviousSubwordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToPreviousSubwordBoundary",
          "body": "Selects text to the previous subword boundary.",
          "excerpt": "Selects text to the previous subword boundary...."
        },
      
        
        {
          "title": "Selection::selectToNextSubwordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToNextSubwordBoundary",
          "body": "Selects text to the next subword boundary.",
          "excerpt": "Selects text to the next subword boundary...."
        },
      
        
        {
          "title": "Selection::selectToBeginningOfNextParagraph",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToBeginningOfNextParagraph",
          "body": "Selects all the text from the current cursor position to the beginning of the next paragraph.",
          "excerpt": "Selects all the text from the current cursor position to the beginning of the next paragraph...."
        },
      
        
        {
          "title": "Selection::selectToBeginningOfPreviousParagraph",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectToBeginningOfPreviousParagraph",
          "body": "Selects all the text from the current cursor position to the beginning of the previous paragraph.",
          "excerpt": "Selects all the text from the current cursor position to the beginning of the previous paragraph...."
        },
      
        
        {
          "title": "Selection::selectWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectWord",
          "body": "Modifies the selection to encompass the current word.",
          "excerpt": "Modifies the selection to encompass the current word...."
        },
      
        
        {
          "title": "Selection::expandOverWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-expandOverWord",
          "body": "Expands the newest selection to include the entire word on which the cursors rests.",
          "excerpt": "Expands the newest selection to include the entire word on which the cursors rests...."
        },
      
        
        {
          "title": "Selection::selectLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-selectLine",
          "body": "Selects an entire line in the buffer.",
          "excerpt": "Selects an entire line in the buffer...."
        },
      
        
        {
          "title": "Selection::expandOverLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-expandOverLine",
          "body": "Expands the newest selection to include the entire line on which the cursor currently rests. It also includes the newline character.",
          "excerpt": "Expands the newest selection to include the entire line on which the cursor currently rests. It also includes the newline character...."
        },
      
        
        {
          "title": "Selection::insertText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-insertText",
          "body": "Replaces text at the current selection.",
          "excerpt": "Replaces text at the current selection...."
        },
      
        
        {
          "title": "Selection::backspace",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-backspace",
          "body": "Removes the first character before the selection if the selection is empty otherwise it deletes the selection.",
          "excerpt": "Removes the first character before the selection if the selection is empty otherwise it deletes the selection...."
        },
      
        
        {
          "title": "Selection::deleteToPreviousWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-deleteToPreviousWordBoundary",
          "body": "Removes the selection or, if nothing is selected, then all characters from the start of the selection back to the previous word boundary.",
          "excerpt": "Removes the selection or, if nothing is selected, then all characters from the start of the selection back to the previous word boundary...."
        },
      
        
        {
          "title": "Selection::deleteToNextWordBoundary",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-deleteToNextWordBoundary",
          "body": "Removes the selection or, if nothing is selected, then all characters from the start of the selection up to the next word boundary.",
          "excerpt": "Removes the selection or, if nothing is selected, then all characters from the start of the selection up to the next word boundary...."
        },
      
        
        {
          "title": "Selection::deleteToBeginningOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-deleteToBeginningOfWord",
          "body": "Removes from the start of the selection to the beginning of the current word if the selection is empty otherwise it deletes the selection.",
          "excerpt": "Removes from the start of the selection to the beginning of the current word if the selection is empty otherwise it deletes the selection...."
        },
      
        
        {
          "title": "Selection::deleteToBeginningOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-deleteToBeginningOfLine",
          "body": "Removes from the beginning of the line which the selection begins on all the way through to the end of the selection.",
          "excerpt": "Removes from the beginning of the line which the selection begins on all the way through to the end of the selection...."
        },
      
        
        {
          "title": "Selection::delete",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-delete",
          "body": "Removes the selection or the next character after the start of the selection if the selection is empty.",
          "excerpt": "Removes the selection or the next character after the start of the selection if the selection is empty...."
        },
      
        
        {
          "title": "Selection::deleteToEndOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-deleteToEndOfLine",
          "body": "If the selection is empty, removes all text from the cursor to the end of the line. If the cursor is already at the end of the line, it removes the following newline. If the selection isn't empty, only deletes the contents of the selection.",
          "excerpt": "If the selection is empty, removes all text from the cursor to the end of the line. If the cursor is already at the end of the line, it remov..."
        },
      
        
        {
          "title": "Selection::deleteToEndOfWord",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-deleteToEndOfWord",
          "body": "Removes the selection or all characters from the start of the selection to the end of the current word if nothing is selected.",
          "excerpt": "Removes the selection or all characters from the start of the selection to the end of the current word if nothing is selected...."
        },
      
        
        {
          "title": "Selection::deleteToBeginningOfSubword",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-deleteToBeginningOfSubword",
          "body": "Removes the selection or all characters from the start of the selection to the end of the current word if nothing is selected.",
          "excerpt": "Removes the selection or all characters from the start of the selection to the end of the current word if nothing is selected...."
        },
      
        
        {
          "title": "Selection::deleteToEndOfSubword",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-deleteToEndOfSubword",
          "body": "Removes the selection or all characters from the start of the selection to the end of the current word if nothing is selected.",
          "excerpt": "Removes the selection or all characters from the start of the selection to the end of the current word if nothing is selected...."
        },
      
        
        {
          "title": "Selection::deleteSelectedText",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-deleteSelectedText",
          "body": "Removes only the selected text.",
          "excerpt": "Removes only the selected text...."
        },
      
        
        {
          "title": "Selection::deleteLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-deleteLine",
          "body": "Removes the line at the beginning of the selection if the selection is empty unless the selection spans multiple lines in which case all lines are removed.",
          "excerpt": "Removes the line at the beginning of the selection if the selection is empty unless the selection spans multiple lines in which case all line..."
        },
      
        
        {
          "title": "Selection::joinLines",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-joinLines",
          "body": "Joins the current line with the one below it. Lines will be separated by a single space. If there selection spans more than one line, all the lines are joined together.",
          "excerpt": "Joins the current line with the one below it. Lines will be separated by a single space. If there selection spans more than one line, all the..."
        },
      
        
        {
          "title": "Selection::outdentSelectedRows",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-outdentSelectedRows",
          "body": "Removes one level of indent from the currently selected rows.",
          "excerpt": "Removes one level of indent from the currently selected rows...."
        },
      
        
        {
          "title": "Selection::autoIndentSelectedRows",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-autoIndentSelectedRows",
          "body": "Sets the indentation level of all selected rows to values suggested by the relevant grammars.",
          "excerpt": "Sets the indentation level of all selected rows to values suggested by the relevant grammars...."
        },
      
        
        {
          "title": "Selection::toggleLineComments",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-toggleLineComments",
          "body": "Wraps the selected lines in comments if they aren't currently part of a comment. Removes the comment if they are currently wrapped in a comment.",
          "excerpt": "Wraps the selected lines in comments if they aren't currently part of a comment. Removes the comment if they are currently wrapped in a comme..."
        },
      
        
        {
          "title": "Selection::cutToEndOfLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-cutToEndOfLine",
          "body": "Cuts the selection until the end of the screen line.",
          "excerpt": "Cuts the selection until the end of the screen line...."
        },
      
        
        {
          "title": "Selection::cutToEndOfBufferLine",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-cutToEndOfBufferLine",
          "body": "Cuts the selection until the end of the buffer line.",
          "excerpt": "Cuts the selection until the end of the buffer line...."
        },
      
        
        {
          "title": "Selection::cut",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-cut",
          "body": "Copies the selection to the clipboard and then deletes it.",
          "excerpt": "Copies the selection to the clipboard and then deletes it...."
        },
      
        
        {
          "title": "Selection::copy",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-copy",
          "body": "Copies the current selection to the clipboard.",
          "excerpt": "Copies the current selection to the clipboard...."
        },
      
        
        {
          "title": "Selection::fold",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-fold",
          "body": "Creates a fold containing the current selection.",
          "excerpt": "Creates a fold containing the current selection...."
        },
      
        
        {
          "title": "Selection::indentSelectedRows",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-indentSelectedRows",
          "body": "If the selection spans multiple rows, indent all of them.",
          "excerpt": "If the selection spans multiple rows, indent all of them...."
        },
      
        
        {
          "title": "Selection::addSelectionBelow",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-addSelectionBelow",
          "body": "Moves the selection down one row.",
          "excerpt": "Moves the selection down one row...."
        },
      
        
        {
          "title": "Selection::addSelectionAbove",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-addSelectionAbove",
          "body": "Moves the selection up one row.",
          "excerpt": "Moves the selection up one row...."
        },
      
        
        {
          "title": "Selection::merge",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-merge",
          "body": "Combines the given selection into this selection and then destroys the given selection.",
          "excerpt": "Combines the given selection into this selection and then destroys the given selection...."
        },
      
        
        {
          "title": "Selection::compare",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Selection/#instance-compare",
          "body": "Compare this selection's buffer range to another selection's buffer range. See {Range::compare} for more details.",
          "excerpt": "Compare this selection's buffer range to another selection's buffer range. See {Range::compare} for more details...."
        },
      
    
      
      

      {
        "title": "ScopeDescriptor",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/ScopeDescriptor",
        "body": "Wraps an {Array} of `String`s. The Array describes a path from the root of the syntax tree to a token including _all_ scope names for the entire path. Methods that take a `ScopeDescriptor` will also accept an {Array} of {Strings} scope names e.g. `['.source.js']`. You can use `ScopeDescriptor`s to get language-specific config settings via {Config::get}. You should not need to create a `ScopeDescriptor` directly. * {Editor::getRootScopeDescriptor} to get the language's descriptor. * {Editor::scopeDescriptorForBufferPosition} to get the descriptor at a specific position in the buffer. * {Cursor::getScopeDescriptor} to get a cursor's descriptor based on position. See the [scopes and scope descriptor guide](https://atom.io/docs/latest/behind-atom-scoped-settings-scopes-and-scope-descriptors) for more information.",
        "excerpt": "Wraps an {Array} of `String`s. The Array describes a path from the root of the syntax tree to a token including _all_ scope names for the ent..."
      },

      

      
      
        
        {
          "title": "ScopeDescriptor::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ScopeDescriptor/#instance-constructor",
          "body": "Create a {ScopeDescriptor} object.",
          "excerpt": "Create a {ScopeDescriptor} object...."
        },
      
        
        {
          "title": "ScopeDescriptor::getScopesArray",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ScopeDescriptor/#instance-getScopesArray",
          "body": "",
          "excerpt": "..."
        },
      
    
      
      

      {
        "title": "Clipboard",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Clipboard",
        "body": "Represents the clipboard used for copying and pasting in Atom. An instance of this class is always available as the `atom.clipboard` global.",
        "excerpt": "Represents the clipboard used for copying and pasting in Atom. An instance of this class is always available as the `atom.clipboard` global...."
      },

      

      
      
        
        {
          "title": "Clipboard::write",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Clipboard/#instance-write",
          "body": "Write the given text to the clipboard. The metadata associated with the text is available by calling {::readWithMetadata}.",
          "excerpt": "Write the given text to the clipboard. The metadata associated with the text is available by calling {::readWithMetadata}...."
        },
      
        
        {
          "title": "Clipboard::read",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Clipboard/#instance-read",
          "body": "Read the text from the clipboard.",
          "excerpt": "Read the text from the clipboard...."
        },
      
        
        {
          "title": "Clipboard::readWithMetadata",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Clipboard/#instance-readWithMetadata",
          "body": "Read the text from the clipboard and return both the text and the associated metadata.",
          "excerpt": "Read the text from the clipboard and return both the text and the associated metadata...."
        },
      
    
      
      

      {
        "title": "Disposable",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Disposable",
        "body": "A handle to a resource that can be disposed. For example, {Emitter::on} returns disposables representing subscriptions.",
        "excerpt": "A handle to a resource that can be disposed. For example, {Emitter::on} returns disposables representing subscriptions...."
      },

      
        
        {
          "title": "Disposable::isDisposable",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Disposable/#isDisposable",
          "body": "Ensure that `object` correctly implements the `Disposable` contract.",
          "excerpt": "Ensure that `object` correctly implements the `Disposable` contract...."
        },
      

      
      
        
        {
          "title": "Disposable::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Disposable/#instance-constructor",
          "body": "Construct a Disposable",
          "excerpt": "Construct a Disposable..."
        },
      
        
        {
          "title": "Disposable::dispose",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Disposable/#instance-dispose",
          "body": "Perform the disposal action, indicating that the resource associated with this disposable is no longer needed. You can call this method more than once, but the disposal action will only be performed the first time.",
          "excerpt": "Perform the disposal action, indicating that the resource associated with this disposable is no longer needed. You can call this method more ..."
        },
      
    
      
      

      {
        "title": "Color",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Color",
        "body": "A simple color class returned from {Config::get} when the value at the key path is of type 'color'.",
        "excerpt": "A simple color class returned from {Config::get} when the value at the key path is of type 'color'...."
      },

      
        
        {
          "title": "Color::parse",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Color/#parse",
          "body": "Parse a {String} or {Object} into a {Color}.",
          "excerpt": "Parse a {String} or {Object} into a {Color}...."
        },
      

      
      
        
        {
          "title": "Color::toHexString",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Color/#instance-toHexString",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Color::toRGBAString",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Color/#instance-toRGBAString",
          "body": "",
          "excerpt": "..."
        },
      
    
      
      

      {
        "title": "Package",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Package",
        "body": "Loads and activates a package's main module and resources such as stylesheets, keymaps, grammar, editor properties, and menus.",
        "excerpt": "Loads and activates a package's main module and resources such as stylesheets, keymaps, grammar, editor properties, and menus...."
      },

      

      
      
        
        {
          "title": "Package::onDidDeactivate",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Package/#instance-onDidDeactivate",
          "body": "Invoke the given callback when all packages have been activated.",
          "excerpt": "Invoke the given callback when all packages have been activated...."
        },
      
        
        {
          "title": "Package::isCompatible",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Package/#instance-isCompatible",
          "body": "Are all native modules depended on by this package correctly compiled against the current version of Atom? Incompatible packages cannot be activated.",
          "excerpt": "Are all native modules depended on by this package correctly compiled against the current version of Atom? Incompatible packages cannot be ac..."
        },
      
        
        {
          "title": "Package::rebuild",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Package/#instance-rebuild",
          "body": "Rebuild native modules in this package's dependencies for the current version of Atom.",
          "excerpt": "Rebuild native modules in this package's dependencies for the current version of Atom...."
        },
      
        
        {
          "title": "Package::getBuildFailureOutput",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Package/#instance-getBuildFailureOutput",
          "body": "If a previous rebuild failed, get the contents of stderr.",
          "excerpt": "If a previous rebuild failed, get the contents of stderr...."
        },
      
    
      
      

      {
        "title": "MenuManager",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/MenuManager",
        "body": "Provides a registry for menu items that you'd like to appear in the application menu. An instance of this class is always available as the `atom.menu` global. ## Menu CSON Format Here is an example from the [tree-view](https://github.com/atom/tree-view/blob/master/menus/tree-view.cson): ```coffee [ { 'label': 'View' 'submenu': [ { 'label': 'Toggle Tree View', 'command': 'tree-view:toggle' } ] } { 'label': 'Packages' 'submenu': [ 'label': 'Tree View' 'submenu': [ { 'label': 'Focus', 'command': 'tree-view:toggle-focus' } { 'label': 'Toggle', 'command': 'tree-view:toggle' } { 'label': 'Reveal Active File', 'command': 'tree-view:reveal-active-file' } { 'label': 'Toggle Tree Side', 'command': 'tree-view:toggle-side' } ] ] } ] ``` Use in your package's menu `.cson` file requires that you place your menu structure under a `menu` key. ```coffee 'menu': [ { 'label': 'View' 'submenu': [ { 'label': 'Toggle Tree View', 'command': 'tree-view:toggle' } ] } ] ``` See {::add} for more info about adding menu's directly.",
        "excerpt": "Provides a registry for menu items that you'd like to appear in the application menu. An instance of this class is always available as the `a..."
      },

      

      
      
        
        {
          "title": "MenuManager::add",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MenuManager/#instance-add",
          "body": "Adds the given items to the application menu.",
          "excerpt": "Adds the given items to the application menu...."
        },
      
        
        {
          "title": "MenuManager::update",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/MenuManager/#instance-update",
          "body": "Refreshes the currently visible menu.",
          "excerpt": "Refreshes the currently visible menu...."
        },
      
    
      
      

      {
        "title": "DeserializerManager",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/DeserializerManager",
        "body": "Manages the deserializers used for serialized state An instance of this class is always available as the `atom.deserializers` global.",
        "excerpt": "Manages the deserializers used for serialized state An instance of this class is always available as the `atom.deserializers` global...."
      },

      

      
      
        
        {
          "title": "DeserializerManager::add",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DeserializerManager/#instance-add",
          "body": "Register the given class(es) as deserializers.",
          "excerpt": "Register the given class(es) as deserializers...."
        },
      
        
        {
          "title": "DeserializerManager::deserialize",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/DeserializerManager/#instance-deserialize",
          "body": "Deserialize the state and params.",
          "excerpt": "Deserialize the state and params...."
        },
      
    
      
      

      {
        "title": "Project",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Project",
        "body": "Represents a project that's opened in Atom. An instance of this class is always available as the `atom.project` global.",
        "excerpt": "Represents a project that's opened in Atom. An instance of this class is always available as the `atom.project` global...."
      },

      

      
      
        
        {
          "title": "Project::onDidChangePaths",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Project/#instance-onDidChangePaths",
          "body": "Invoke the given callback when the project paths change.",
          "excerpt": "Invoke the given callback when the project paths change...."
        },
      
        
        {
          "title": "Project::getRepositories",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Project/#instance-getRepositories",
          "body": "Get an {Array} of {GitRepository}s associated with the project's directories. This method will be removed in 2.0 because it does synchronous I/O. Prefer the following, which evaluates to a {Promise} that resolves to an {Array} of {Repository} objects: ``` Promise.all(atom.project.getDirectories().map( atom.project.repositoryForDirectory.bind(atom.project))) ```",
          "excerpt": "Get an {Array} of {GitRepository}s associated with the project's directories. This method will be removed in 2.0 because it does synchronous ..."
        },
      
        
        {
          "title": "Project::repositoryForDirectory",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Project/#instance-repositoryForDirectory",
          "body": "Get the repository for a given directory asynchronously.",
          "excerpt": "Get the repository for a given directory asynchronously...."
        },
      
        
        {
          "title": "Project::getPaths",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Project/#instance-getPaths",
          "body": "Get an {Array} of {String}s containing the paths of the project's directories.",
          "excerpt": "Get an {Array} of {String}s containing the paths of the project's directories...."
        },
      
        
        {
          "title": "Project::setPaths",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Project/#instance-setPaths",
          "body": "Set the paths of the project's directories.",
          "excerpt": "Set the paths of the project's directories...."
        },
      
        
        {
          "title": "Project::addPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Project/#instance-addPath",
          "body": "Add a path to the project's list of root paths",
          "excerpt": "Add a path to the project's list of root paths..."
        },
      
        
        {
          "title": "Project::removePath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Project/#instance-removePath",
          "body": "remove a path from the project's list of root paths.",
          "excerpt": "remove a path from the project's list of root paths...."
        },
      
        
        {
          "title": "Project::getDirectories",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Project/#instance-getDirectories",
          "body": "Get an {Array} of {Directory}s associated with this project.",
          "excerpt": "Get an {Array} of {Directory}s associated with this project...."
        },
      
        
        {
          "title": "Project::relativizePath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Project/#instance-relativizePath",
          "body": "Get the path to the project directory that contains the given path, and the relative path from that project directory to the given path.",
          "excerpt": "Get the path to the project directory that contains the given path, and the relative path from that project directory to the given path...."
        },
      
        
        {
          "title": "Project::contains",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Project/#instance-contains",
          "body": "Determines whether the given path (real or symbolic) is inside the project's directory. This method does not actually check if the path exists, it just checks their locations relative to each other.",
          "excerpt": "Determines whether the given path (real or symbolic) is inside the project's directory. This method does not actually check if the path exist..."
        },
      
    
      
      

      {
        "title": "CompositeDisposable",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/CompositeDisposable",
        "body": "An object that aggregates multiple {Disposable} instances together into a single disposable, so they can all be disposed as a group. These are very useful when subscribing to multiple events.",
        "excerpt": "An object that aggregates multiple {Disposable} instances together into a single disposable, so they can all be disposed as a group. These ar..."
      },

      

      
      
        
        {
          "title": "CompositeDisposable::constructor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/CompositeDisposable/#instance-constructor",
          "body": "Construct an instance, optionally with one or more disposables",
          "excerpt": "Construct an instance, optionally with one or more disposables..."
        },
      
        
        {
          "title": "CompositeDisposable::dispose",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/CompositeDisposable/#instance-dispose",
          "body": "Dispose all disposables added to this composite disposable. If this object has already been disposed, this method has no effect.",
          "excerpt": "Dispose all disposables added to this composite disposable. If this object has already been disposed, this method has no effect...."
        },
      
        
        {
          "title": "CompositeDisposable::add",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/CompositeDisposable/#instance-add",
          "body": "Add disposables to be disposed when the composite is disposed. If this object has already been disposed, this method has no effect.",
          "excerpt": "Add disposables to be disposed when the composite is disposed. If this object has already been disposed, this method has no effect...."
        },
      
        
        {
          "title": "CompositeDisposable::remove",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/CompositeDisposable/#instance-remove",
          "body": "Remove a previously added disposable.",
          "excerpt": "Remove a previously added disposable...."
        },
      
        
        {
          "title": "CompositeDisposable::clear",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/CompositeDisposable/#instance-clear",
          "body": "Clear all disposables. They will not be disposed by the next call to dispose.",
          "excerpt": "Clear all disposables. They will not be disposed by the next call to dispose...."
        },
      
    
      
      

      {
        "title": "ContextMenuManager",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/ContextMenuManager",
        "body": "Provides a registry for commands that you'd like to appear in the context menu. An instance of this class is always available as the `atom.contextMenu` global. ## Context Menu CSON Format ```coffee 'atom-workspace': [{label: 'Help', command: 'application:open-documentation'}] 'atom-text-editor': [{ label: 'History', submenu: [ {label: 'Undo', command:'core:undo'} {label: 'Redo', command:'core:redo'} ] }] ``` In your package's menu `.cson` file you need to specify it under a `context-menu` key: ```coffee 'context-menu': 'atom-workspace': [{label: 'Help', command: 'application:open-documentation'}] ... ``` The format for use in {::add} is the same minus the `context-menu` key. See {::add} for more information.",
        "excerpt": "Provides a registry for commands that you'd like to appear in the context menu. An instance of this class is always available as the `atom.co..."
      },

      

      
      
        
        {
          "title": "ContextMenuManager::add",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/ContextMenuManager/#instance-add",
          "body": "Add context menu items scoped by CSS selectors.",
          "excerpt": "Add context menu items scoped by CSS selectors...."
        },
      
    
      
      

      {
        "title": "Workspace",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Workspace",
        "body": "Represents the state of the user interface for the entire window. An instance of this class is available via the `atom.workspace` global. Interact with this object to open files, be notified of current and future editors, and manipulate panes. To add panels, use {Workspace::addTopPanel} and friends.",
        "excerpt": "Represents the state of the user interface for the entire window. An instance of this class is available via the `atom.workspace` global. Int..."
      },

      

      
      
        
        {
          "title": "Workspace::observeTextEditors",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-observeTextEditors",
          "body": "Invoke the given callback with all current and future text editors in the workspace.",
          "excerpt": "Invoke the given callback with all current and future text editors in the workspace...."
        },
      
        
        {
          "title": "Workspace::observePaneItems",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-observePaneItems",
          "body": "Invoke the given callback with all current and future panes items in the workspace.",
          "excerpt": "Invoke the given callback with all current and future panes items in the workspace...."
        },
      
        
        {
          "title": "Workspace::onDidChangeActivePaneItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onDidChangeActivePaneItem",
          "body": "Invoke the given callback when the active pane item changes. Because observers are invoked synchronously, it's important not to perform any expensive operations via this method. Consider {::onDidStopChangingActivePaneItem} to delay operations until after changes stop occurring.",
          "excerpt": "Invoke the given callback when the active pane item changes. Because observers are invoked synchronously, it's important not to perform any e..."
        },
      
        
        {
          "title": "Workspace::onDidStopChangingActivePaneItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onDidStopChangingActivePaneItem",
          "body": "Invoke the given callback when the active pane item stops changing. Observers are called asynchronously 100ms after the last active pane item change. Handling changes here rather than in the synchronous {::onDidChangeActivePaneItem} prevents unneeded work if the user is quickly changing or closing tabs and ensures critical UI feedback, like changing the highlighted tab, gets priority over work that can be done asynchronously.",
          "excerpt": "Invoke the given callback when the active pane item stops changing. Observers are called asynchronously 100ms after the last active pane item..."
        },
      
        
        {
          "title": "Workspace::observeActivePaneItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-observeActivePaneItem",
          "body": "Invoke the given callback with the current active pane item and with all future active pane items in the workspace.",
          "excerpt": "Invoke the given callback with the current active pane item and with all future active pane items in the workspace...."
        },
      
        
        {
          "title": "Workspace::onDidOpen",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onDidOpen",
          "body": "Invoke the given callback whenever an item is opened. Unlike {::onDidAddPaneItem}, observers will be notified for items that are already present in the workspace when they are reopened.",
          "excerpt": "Invoke the given callback whenever an item is opened. Unlike {::onDidAddPaneItem}, observers will be notified for items that are already pres..."
        },
      
        
        {
          "title": "Workspace::onDidAddPane",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onDidAddPane",
          "body": "Invoke the given callback when a pane is added to the workspace.",
          "excerpt": "Invoke the given callback when a pane is added to the workspace...."
        },
      
        
        {
          "title": "Workspace::onWillDestroyPane",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onWillDestroyPane",
          "body": "Invoke the given callback before a pane is destroyed in the workspace.",
          "excerpt": "Invoke the given callback before a pane is destroyed in the workspace...."
        },
      
        
        {
          "title": "Workspace::onDidDestroyPane",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onDidDestroyPane",
          "body": "Invoke the given callback when a pane is destroyed in the workspace.",
          "excerpt": "Invoke the given callback when a pane is destroyed in the workspace...."
        },
      
        
        {
          "title": "Workspace::observePanes",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-observePanes",
          "body": "Invoke the given callback with all current and future panes in the workspace.",
          "excerpt": "Invoke the given callback with all current and future panes in the workspace...."
        },
      
        
        {
          "title": "Workspace::onDidChangeActivePane",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onDidChangeActivePane",
          "body": "Invoke the given callback when the active pane changes.",
          "excerpt": "Invoke the given callback when the active pane changes...."
        },
      
        
        {
          "title": "Workspace::observeActivePane",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-observeActivePane",
          "body": "Invoke the given callback with the current active pane and when the active pane changes.",
          "excerpt": "Invoke the given callback with the current active pane and when the active pane changes...."
        },
      
        
        {
          "title": "Workspace::onDidAddPaneItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onDidAddPaneItem",
          "body": "Invoke the given callback when a pane item is added to the workspace.",
          "excerpt": "Invoke the given callback when a pane item is added to the workspace...."
        },
      
        
        {
          "title": "Workspace::onWillDestroyPaneItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onWillDestroyPaneItem",
          "body": "Invoke the given callback when a pane item is about to be destroyed, before the user is prompted to save it.",
          "excerpt": "Invoke the given callback when a pane item is about to be destroyed, before the user is prompted to save it...."
        },
      
        
        {
          "title": "Workspace::onDidDestroyPaneItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onDidDestroyPaneItem",
          "body": "Invoke the given callback when a pane item is destroyed.",
          "excerpt": "Invoke the given callback when a pane item is destroyed...."
        },
      
        
        {
          "title": "Workspace::onDidAddTextEditor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-onDidAddTextEditor",
          "body": "Invoke the given callback when a text editor is added to the workspace.",
          "excerpt": "Invoke the given callback when a text editor is added to the workspace...."
        },
      
        
        {
          "title": "Workspace::open",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-open",
          "body": "Opens the given URI in Atom asynchronously. If the URI is already open, the existing item for that URI will be activated. If no URI is given, or no registered opener can open the URI, a new empty {TextEditor} will be created.",
          "excerpt": "Opens the given URI in Atom asynchronously. If the URI is already open, the existing item for that URI will be activated. If no URI is given,..."
        },
      
        
        {
          "title": "Workspace::isTextEditor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-isTextEditor",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Workspace::buildTextEditor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-buildTextEditor",
          "body": "Create a new text editor.",
          "excerpt": "Create a new text editor...."
        },
      
        
        {
          "title": "Workspace::reopenItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-reopenItem",
          "body": "Asynchronously reopens the last-closed item's URI if it hasn't already been reopened.",
          "excerpt": "Asynchronously reopens the last-closed item's URI if it hasn't already been reopened...."
        },
      
        
        {
          "title": "Workspace::addOpener",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-addOpener",
          "body": "Register an opener for a uri. An {TextEditor} will be used if no openers return a value.",
          "excerpt": "Register an opener for a uri. An {TextEditor} will be used if no openers return a value...."
        },
      
        
        {
          "title": "Workspace::getPaneItems",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getPaneItems",
          "body": "Get all pane items in the workspace.",
          "excerpt": "Get all pane items in the workspace...."
        },
      
        
        {
          "title": "Workspace::getActivePaneItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getActivePaneItem",
          "body": "Get the active {Pane}'s active item.",
          "excerpt": "Get the active {Pane}'s active item...."
        },
      
        
        {
          "title": "Workspace::getTextEditors",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getTextEditors",
          "body": "Get all text editors in the workspace.",
          "excerpt": "Get all text editors in the workspace...."
        },
      
        
        {
          "title": "Workspace::getActiveTextEditor",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getActiveTextEditor",
          "body": "Get the active item if it is an {TextEditor}.",
          "excerpt": "Get the active item if it is an {TextEditor}...."
        },
      
        
        {
          "title": "Workspace::getPanes",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getPanes",
          "body": "Get all panes in the workspace.",
          "excerpt": "Get all panes in the workspace...."
        },
      
        
        {
          "title": "Workspace::getActivePane",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getActivePane",
          "body": "Get the active {Pane}.",
          "excerpt": "Get the active {Pane}...."
        },
      
        
        {
          "title": "Workspace::activateNextPane",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-activateNextPane",
          "body": "Make the next pane active.",
          "excerpt": "Make the next pane active...."
        },
      
        
        {
          "title": "Workspace::activatePreviousPane",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-activatePreviousPane",
          "body": "Make the previous pane active.",
          "excerpt": "Make the previous pane active...."
        },
      
        
        {
          "title": "Workspace::paneForURI",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-paneForURI",
          "body": "Get the first {Pane} with an item for the given URI.",
          "excerpt": "Get the first {Pane} with an item for the given URI...."
        },
      
        
        {
          "title": "Workspace::paneForItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-paneForItem",
          "body": "Get the {Pane} containing the given item.",
          "excerpt": "Get the {Pane} containing the given item...."
        },
      
        
        {
          "title": "Workspace::getBottomPanels",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getBottomPanels",
          "body": "Get an {Array} of all the panel items at the bottom of the editor window.",
          "excerpt": "Get an {Array} of all the panel items at the bottom of the editor window...."
        },
      
        
        {
          "title": "Workspace::addBottomPanel",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-addBottomPanel",
          "body": "Adds a panel item to the bottom of the editor window.",
          "excerpt": "Adds a panel item to the bottom of the editor window...."
        },
      
        
        {
          "title": "Workspace::getLeftPanels",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getLeftPanels",
          "body": "Get an {Array} of all the panel items to the left of the editor window.",
          "excerpt": "Get an {Array} of all the panel items to the left of the editor window...."
        },
      
        
        {
          "title": "Workspace::addLeftPanel",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-addLeftPanel",
          "body": "Adds a panel item to the left of the editor window.",
          "excerpt": "Adds a panel item to the left of the editor window...."
        },
      
        
        {
          "title": "Workspace::getRightPanels",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getRightPanels",
          "body": "Get an {Array} of all the panel items to the right of the editor window.",
          "excerpt": "Get an {Array} of all the panel items to the right of the editor window...."
        },
      
        
        {
          "title": "Workspace::addRightPanel",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-addRightPanel",
          "body": "Adds a panel item to the right of the editor window.",
          "excerpt": "Adds a panel item to the right of the editor window...."
        },
      
        
        {
          "title": "Workspace::getTopPanels",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getTopPanels",
          "body": "Get an {Array} of all the panel items at the top of the editor window.",
          "excerpt": "Get an {Array} of all the panel items at the top of the editor window...."
        },
      
        
        {
          "title": "Workspace::addTopPanel",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-addTopPanel",
          "body": "Adds a panel item to the top of the editor window above the tabs.",
          "excerpt": "Adds a panel item to the top of the editor window above the tabs...."
        },
      
        
        {
          "title": "Workspace::getHeaderPanels",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getHeaderPanels",
          "body": "Get an {Array} of all the panel items in the header.",
          "excerpt": "Get an {Array} of all the panel items in the header...."
        },
      
        
        {
          "title": "Workspace::addHeaderPanel",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-addHeaderPanel",
          "body": "Adds a panel item to the header.",
          "excerpt": "Adds a panel item to the header...."
        },
      
        
        {
          "title": "Workspace::getFooterPanels",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getFooterPanels",
          "body": "Get an {Array} of all the panel items in the footer.",
          "excerpt": "Get an {Array} of all the panel items in the footer...."
        },
      
        
        {
          "title": "Workspace::addFooterPanel",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-addFooterPanel",
          "body": "Adds a panel item to the footer.",
          "excerpt": "Adds a panel item to the footer...."
        },
      
        
        {
          "title": "Workspace::getModalPanels",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-getModalPanels",
          "body": "Get an {Array} of all the modal panel items",
          "excerpt": "Get an {Array} of all the modal panel items..."
        },
      
        
        {
          "title": "Workspace::addModalPanel",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-addModalPanel",
          "body": "Adds a panel item as a modal dialog.",
          "excerpt": "Adds a panel item as a modal dialog...."
        },
      
        
        {
          "title": "Workspace::panelForItem",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-panelForItem",
          "body": "",
          "excerpt": "..."
        },
      
        
        {
          "title": "Workspace::scan",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-scan",
          "body": "Performs a search across all files in the workspace.",
          "excerpt": "Performs a search across all files in the workspace...."
        },
      
        
        {
          "title": "Workspace::replace",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Workspace/#instance-replace",
          "body": "Performs a replace across all the specified files in the project.",
          "excerpt": "Performs a replace across all the specified files in the project...."
        },
      
    
      
      

      {
        "title": "Config",
        "category": "",
        "category_url": "",
        "url": "/api/v1.9.6/Config",
        "body": "Used to access all of Atom's configuration details. An instance of this class is always available as the `atom.config` global. ## Getting and setting config settings. ```coffee # Note that with no value set, ::get returns the setting's default value. atom.config.get('my-package.myKey') # -> 'defaultValue' atom.config.set('my-package.myKey', 'value') atom.config.get('my-package.myKey') # -> 'value' ``` You may want to watch for changes. Use {::observe} to catch changes to the setting. ```coffee atom.config.set('my-package.myKey', 'value') atom.config.observe 'my-package.myKey', (newValue) -> # `observe` calls immediately and every time the value is changed console.log 'My configuration changed:', newValue ``` If you want a notification only when the value changes, use {::onDidChange}. ```coffee atom.config.onDidChange 'my-package.myKey', ({newValue, oldValue}) -> console.log 'My configuration changed:', newValue, oldValue ``` ### Value Coercion Config settings each have a type specified by way of a [schema](json-schema.org). For example we might an integer setting that only allows integers greater than `0`: ```coffee # When no value has been set, `::get` returns the setting's default value atom.config.get('my-package.anInt') # -> 12 # The string will be coerced to the integer 123 atom.config.set('my-package.anInt', '123') atom.config.get('my-package.anInt') # -> 123 # The string will be coerced to an integer, but it must be greater than 0, so is set to 1 atom.config.set('my-package.anInt', '-20') atom.config.get('my-package.anInt') # -> 1 ``` ## Defining settings for your package Define a schema under a `config` key in your package main. ```coffee module.exports = # Your config schema config: someInt: type: 'integer' default: 23 minimum: 1 activate: (state) -> # ... # ... ``` See [package docs](https://atom.io/docs/latest/hacking-atom-package-word-count) for more info. ## Config Schemas We use [json schema](http://json-schema.org) which allows you to define your value's default, the type it should be, etc. A simple example: ```coffee # We want to provide an `enableThing`, and a `thingVolume` config: enableThing: type: 'boolean' default: false thingVolume: type: 'integer' default: 5 minimum: 1 maximum: 11 ``` The type keyword allows for type coercion and validation. If a `thingVolume` is set to a string `'10'`, it will be coerced into an integer. ```coffee atom.config.set('my-package.thingVolume', '10') atom.config.get('my-package.thingVolume') # -> 10 # It respects the min / max atom.config.set('my-package.thingVolume', '400') atom.config.get('my-package.thingVolume') # -> 11 # If it cannot be coerced, the value will not be set atom.config.set('my-package.thingVolume', 'cats') atom.config.get('my-package.thingVolume') # -> 11 ``` ### Supported Types The `type` keyword can be a string with any one of the following. You can also chain them by specifying multiple in an an array. For example ```coffee config: someSetting: type: ['boolean', 'integer'] default: 5 # Then atom.config.set('my-package.someSetting', 'true') atom.config.get('my-package.someSetting') # -> true atom.config.set('my-package.someSetting', '12') atom.config.get('my-package.someSetting') # -> 12 ``` #### string Values must be a string. ```coffee config: someSetting: type: 'string' default: 'hello' ``` #### integer Values will be coerced into integer. Supports the (optional) `minimum` and `maximum` keys. ```coffee config: someSetting: type: 'integer' default: 5 minimum: 1 maximum: 11 ``` #### number Values will be coerced into a number, including real numbers. Supports the (optional) `minimum` and `maximum` keys. ```coffee config: someSetting: type: 'number' default: 5.3 minimum: 1.5 maximum: 11.5 ``` #### boolean Values will be coerced into a Boolean. `'true'` and `'false'` will be coerced into a boolean. Numbers, arrays, objects, and anything else will not be coerced. ```coffee config: someSetting: type: 'boolean' default: false ``` #### array Value must be an Array. The types of the values can be specified by a subschema in the `items` key. ```coffee config: someSetting: type: 'array' default: [1, 2, 3] items: type: 'integer' minimum: 1.5 maximum: 11.5 ``` #### color Values will be coerced into a {Color} with `red`, `green`, `blue`, and `alpha` properties that all have numeric values. `red`, `green`, `blue` will be in the range 0 to 255 and `value` will be in the range 0 to 1. Values can be any valid CSS color format such as `#abc`, `#abcdef`, `white`, `rgb(50, 100, 150)`, and `rgba(25, 75, 125, .75)`. ```coffee config: someSetting: type: 'color' default: 'white' ``` #### object / Grouping other types A config setting with the type `object` allows grouping a set of config settings. The group will be visualy separated and has its own group headline. The sub options must be listed under a `properties` key. ```coffee config: someSetting: type: 'object' properties: myChildIntOption: type: 'integer' minimum: 1.5 maximum: 11.5 ``` ### Other Supported Keys #### enum All types support an `enum` key, which lets you specify all the values the setting can take. `enum` may be an array of allowed values (of the specified type), or an array of objects with `value` and `description` properties, where the `value` is an allowed value, and the `description` is a descriptive string used in the settings view. In this example, the setting must be one of the 4 integers: ```coffee config: someSetting: type: 'integer' default: 4 enum: [2, 4, 6, 8] ``` In this example, the setting must be either 'foo' or 'bar', which are presented using the provided descriptions in the settings pane: ```coffee config: someSetting: type: 'string' default: 'foo' enum: [ {value: 'foo', description: 'Foo mode. You want this.'} {value: 'bar', description: 'Bar mode. Nobody wants that!'} ] ``` Usage: ```coffee atom.config.set('my-package.someSetting', '2') atom.config.get('my-package.someSetting') # -> 2 # will not set values outside of the enum values atom.config.set('my-package.someSetting', '3') atom.config.get('my-package.someSetting') # -> 2 # If it cannot be coerced, the value will not be set atom.config.set('my-package.someSetting', '4') atom.config.get('my-package.someSetting') # -> 4 ``` #### title and description The settings view will use the `title` and `description` keys to display your config setting in a readable way. By default the settings view humanizes your config key, so `someSetting` becomes `Some Setting`. In some cases, this is confusing for users, and a more descriptive title is useful. Descriptions will be displayed below the title in the settings view. For a group of config settings the humanized key or the title and the description are used for the group headline. ```coffee config: someSetting: title: 'Setting Magnitude' description: 'This will affect the blah and the other blah' type: 'integer' default: 4 ``` __Note__: You should strive to be so clear in your naming of the setting that you do not need to specify a title or description! Descriptions allow a subset of [Markdown formatting](https://help.github.com/articles/github-flavored-markdown/). Specifically, you may use the following in configuration setting descriptions: * **bold** - `**bold**` * *italics* - `*italics*` * [links](https://atom.io) - `[links](https://atom.io)` * `code spans` - `\\`code spans\\`` * line breaks - `line breaks` * ~~strikethrough~~ - `~~strikethrough~~` #### order The settings view orders your settings alphabetically. You can override this ordering with the order key. ```coffee config: zSetting: type: 'integer' default: 4 order: 1 aSetting: type: 'integer' default: 4 order: 2 ``` ## Best practices * Don't depend on (or write to) configuration keys outside of your keypath.",
        "excerpt": "Used to access all of Atom's configuration details. An instance of this class is always available as the `atom.config` global. ## Getting and..."
      },

      

      
      
        
        {
          "title": "Config::observe",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Config/#instance-observe",
          "body": "Add a listener for changes to a given key path. This is different than {::onDidChange} in that it will immediately call your callback with the current value of the config entry. ### Examples You might want to be notified when the themes change. We'll watch `core.themes` for changes ```coffee atom.config.observe 'core.themes', (value) -> # do stuff with value ```",
          "excerpt": "Add a listener for changes to a given key path. This is different than {::onDidChange} in that it will immediately call your callback with th..."
        },
      
        
        {
          "title": "Config::onDidChange",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Config/#instance-onDidChange",
          "body": "Add a listener for changes to a given key path. If `keyPath` is not specified, your callback will be called on changes to any key.",
          "excerpt": "Add a listener for changes to a given key path. If `keyPath` is not specified, your callback will be called on changes to any key...."
        },
      
        
        {
          "title": "Config::get",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Config/#instance-get",
          "body": "Retrieves the setting for the given key. ### Examples You might want to know what themes are enabled, so check `core.themes` ```coffee atom.config.get('core.themes') ``` With scope descriptors you can get settings within a specific editor scope. For example, you might want to know `editor.tabLength` for ruby files. ```coffee atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2 ``` This setting in ruby files might be different than the global tabLength setting ```coffee atom.config.get('editor.tabLength') # => 4 atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2 ``` You can get the language scope descriptor via {TextEditor::getRootScopeDescriptor}. This will get the setting specifically for the editor's language. ```coffee atom.config.get('editor.tabLength', scope: @editor.getRootScopeDescriptor()) # => 2 ``` Additionally, you can get the setting at the specific cursor position. ```coffee scopeDescriptor = @editor.getLastCursor().getScopeDescriptor() atom.config.get('editor.tabLength', scope: scopeDescriptor) # => 2 ```",
          "excerpt": "Retrieves the setting for the given key. ### Examples You might want to know what themes are enabled, so check `core.themes` ```coffee atom.c..."
        },
      
        
        {
          "title": "Config::getAll",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Config/#instance-getAll",
          "body": "Get all of the values for the given key-path, along with their associated scope selector.",
          "excerpt": "Get all of the values for the given key-path, along with their associated scope selector...."
        },
      
        
        {
          "title": "Config::set",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Config/#instance-set",
          "body": "Sets the value for a configuration setting. This value is stored in Atom's internal configuration file. ### Examples You might want to change the themes programmatically: ```coffee atom.config.set('core.themes', ['atom-light-ui', 'atom-light-syntax']) ``` You can also set scoped settings. For example, you might want change the `editor.tabLength` only for ruby files. ```coffee atom.config.get('editor.tabLength') # => 4 atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 4 atom.config.get('editor.tabLength', scope: ['source.js']) # => 4 # Set ruby to 2 atom.config.set('editor.tabLength', 2, scopeSelector: '.source.ruby') # => true # Notice it's only set to 2 in the case of ruby atom.config.get('editor.tabLength') # => 4 atom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2 atom.config.get('editor.tabLength', scope: ['source.js']) # => 4 ```",
          "excerpt": "Sets the value for a configuration setting. This value is stored in Atom's internal configuration file. ### Examples You might want to change..."
        },
      
        
        {
          "title": "Config::unset",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Config/#instance-unset",
          "body": "Restore the setting at `keyPath` to its default value.",
          "excerpt": "Restore the setting at `keyPath` to its default value...."
        },
      
        
        {
          "title": "Config::getSources",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Config/#instance-getSources",
          "body": "Get an {Array} of all of the `source` {String}s with which settings have been added via {::set}.",
          "excerpt": "Get an {Array} of all of the `source` {String}s with which settings have been added via {::set}...."
        },
      
        
        {
          "title": "Config::getSchema",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Config/#instance-getSchema",
          "body": "Retrieve the schema for a specific key path. The schema will tell you what type the keyPath expects, and other metadata about the config option.",
          "excerpt": "Retrieve the schema for a specific key path. The schema will tell you what type the keyPath expects, and other metadata about the config opti..."
        },
      
        
        {
          "title": "Config::getUserConfigPath",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Config/#instance-getUserConfigPath",
          "body": "Get the {String} path to the config file being used.",
          "excerpt": "Get the {String} path to the config file being used...."
        },
      
        
        {
          "title": "Config::transact",
          "category": "",
          "category_url": "",
          "url": "/api/v1.9.6/Config/#instance-transact",
          "body": "Suppress calls to handler functions registered with {::onDidChange} and {::observe} for the duration of `callback`. After `callback` executes, handlers will be called once if the value for their key-path has changed.",
          "excerpt": "Suppress calls to handler functions registered with {::onDidChange} and {::observe} for the duration of `callback`. After `callback` executes..."
        },
      
    

    {}
  ]
}
